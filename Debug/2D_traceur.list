
2D_traceur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b170  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b438  0800b438  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800b438  0800b438  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b438  0800b438  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b438  0800b438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b43c  0800b43c  0001b43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000317c  20000180  0800b5c0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032fc  0800b5c0  000232fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026755  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054a5  00000000  00000000  000468fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0004bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0004d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014bb8  00000000  00000000  0004e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006db6  00000000  00000000  00063578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0006a32e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d4c  00000000  00000000  0006a384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b268 	.word	0x0800b268

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800b268 	.word	0x0800b268

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000019c 	.word	0x2000019c
 800018c:	200001f0 	.word	0x200001f0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08e      	sub	sp, #56	; 0x38
 8000194:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fb99 	bl	80008cc <HAL_Init>
  SystemClock_Config();
 800019a:	f000 f841 	bl	8000220 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f95d 	bl	800045c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f897 	bl	80002d4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80001a6:	f000 f90b 	bl	80003c0 <MX_TIM4_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  Com_Init();
 80001aa:	f00a f94f 	bl	800a44c <Com_Init>
  cnc_init(&htim2);
 80001ae:	4817      	ldr	r0, [pc, #92]	; (800020c <main+0x7c>)
 80001b0:	f009 ffb4 	bl	800a11c <cnc_init>
  G_Code_Init();
 80001b4:	f00a fa14 	bl	800a5e0 <G_Code_Init>
  /* USER CODE END RTOS_QUEUES */
  HAL_Delay(10);
 80001b8:	200a      	movs	r0, #10
 80001ba:	f000 fbb9 	bl	8000930 <HAL_Delay>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001be:	4b14      	ldr	r3, [pc, #80]	; (8000210 <main+0x80>)
 80001c0:	f107 041c 	add.w	r4, r7, #28
 80001c4:	461d      	mov	r5, r3
 80001c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(ComTask, StartComTask, osPriorityNormal, 0, 256);
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <main+0x84>)
 80001d4:	463c      	mov	r4, r7
 80001d6:	461d      	mov	r5, r3
 80001d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e4:	f107 031c 	add.w	r3, r7, #28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f007 fd17 	bl	8007c1e <osThreadCreate>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4a09      	ldr	r2, [pc, #36]	; (8000218 <main+0x88>)
 80001f4:	6013      	str	r3, [r2, #0]
  ComTaskHandle = osThreadCreate(osThread(ComTask), NULL); // every 20ms
 80001f6:	463b      	mov	r3, r7
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f007 fd0f 	bl	8007c1e <osThreadCreate>
 8000200:	4603      	mov	r3, r0
 8000202:	4a06      	ldr	r2, [pc, #24]	; (800021c <main+0x8c>)
 8000204:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 8000206:	f007 fd03 	bl	8007c10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020a:	e7fe      	b.n	800020a <main+0x7a>
 800020c:	200023ec 	.word	0x200023ec
 8000210:	0800b294 	.word	0x0800b294
 8000214:	0800b2b0 	.word	0x0800b2b0
 8000218:	20001b74 	.word	0x20001b74
 800021c:	200023e4 	.word	0x200023e4

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b094      	sub	sp, #80	; 0x50
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f00b f800 	bl	800b234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fb9a 	bl	80029b0 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000282:	f000 f9c5 	bl	8000610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fe04 	bl	8002eb0 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ae:	f000 f9af 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002b2:	2310      	movs	r3, #16
 80002b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 ffa1 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002c8:	f000 f9a2 	bl	8000610 <Error_Handler>
  }
}
 80002cc:	bf00      	nop
 80002ce:	3750      	adds	r7, #80	; 0x50
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08e      	sub	sp, #56	; 0x38
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e8:	f107 0320 	add.w	r3, r7, #32
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	615a      	str	r2, [r3, #20]
 8000302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000304:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <MX_TIM2_Init+0xe8>)
 8000306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 800030c:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_TIM2_Init+0xe8>)
 800030e:	228f      	movs	r2, #143	; 0x8f
 8000310:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_TIM2_Init+0xe8>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000318:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_TIM2_Init+0xe8>)
 800031a:	f242 7210 	movw	r2, #10000	; 0x2710
 800031e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_TIM2_Init+0xe8>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_TIM2_Init+0xe8>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032c:	4823      	ldr	r0, [pc, #140]	; (80003bc <MX_TIM2_Init+0xe8>)
 800032e:	f003 f81f 	bl	8003370 <HAL_TIM_Base_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000338:	f000 f96a 	bl	8000610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000340:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000346:	4619      	mov	r1, r3
 8000348:	481c      	ldr	r0, [pc, #112]	; (80003bc <MX_TIM2_Init+0xe8>)
 800034a:	f003 fba5 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000354:	f000 f95c 	bl	8000610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <MX_TIM2_Init+0xe8>)
 800035a:	f003 f8d9 	bl	8003510 <HAL_TIM_PWM_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000364:	f000 f954 	bl	8000610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036c:	2300      	movs	r3, #0
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000370:	f107 0320 	add.w	r3, r7, #32
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_TIM2_Init+0xe8>)
 8000378:	f003 ff1e 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000382:	f000 f945 	bl	8000610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000386:	2360      	movs	r3, #96	; 0x60
 8000388:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800038a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800038e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <MX_TIM2_Init+0xe8>)
 80003a0:	f003 fab8 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003aa:	f000 f931 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003ae:	4803      	ldr	r0, [pc, #12]	; (80003bc <MX_TIM2_Init+0xe8>)
 80003b0:	f000 f9a4 	bl	80006fc <HAL_TIM_MspPostInit>

}
 80003b4:	bf00      	nop
 80003b6:	3738      	adds	r7, #56	; 0x38
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200023ec 	.word	0x200023ec

080003c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_TIM4_Init+0x94>)
 80003de:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <MX_TIM4_Init+0x98>)
 80003e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;//64-1;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_TIM4_Init+0x94>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_TIM4_Init+0x94>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;//11250;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_TIM4_Init+0x94>)
 80003f0:	f242 3228 	movw	r2, #9000	; 0x2328
 80003f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_TIM4_Init+0x94>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_TIM4_Init+0x94>)
 80003fe:	2200      	movs	r2, #0
 8000400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000402:	4814      	ldr	r0, [pc, #80]	; (8000454 <MX_TIM4_Init+0x94>)
 8000404:	f002 ffb4 	bl	8003370 <HAL_TIM_Base_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f8ff 	bl	8000610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_TIM4_Init+0x94>)
 8000420:	f003 fb3a 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 f8f1 	bl	8000610 <Error_Handler>
  }
  //if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 // {
    //Error_Handler();
  //}
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	; (8000454 <MX_TIM4_Init+0x94>)
 800043c:	f003 febc 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000446:	f000 f8e3 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20001b78 	.word	0x20001b78
 8000458:	40000800 	.word	0x40000800

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b40      	ldr	r3, [pc, #256]	; (8000574 <MX_GPIO_Init+0x118>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a3f      	ldr	r2, [pc, #252]	; (8000574 <MX_GPIO_Init+0x118>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <MX_GPIO_Init+0x118>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <MX_GPIO_Init+0x118>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a39      	ldr	r2, [pc, #228]	; (8000574 <MX_GPIO_Init+0x118>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b37      	ldr	r3, [pc, #220]	; (8000574 <MX_GPIO_Init+0x118>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b34      	ldr	r3, [pc, #208]	; (8000574 <MX_GPIO_Init+0x118>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a33      	ldr	r2, [pc, #204]	; (8000574 <MX_GPIO_Init+0x118>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b31      	ldr	r3, [pc, #196]	; (8000574 <MX_GPIO_Init+0x118>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <MX_GPIO_Init+0x118>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a2d      	ldr	r2, [pc, #180]	; (8000574 <MX_GPIO_Init+0x118>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_GPIO_Init+0x118>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0308 	and.w	r3, r3, #8
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_13, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80004d6:	4828      	ldr	r0, [pc, #160]	; (8000578 <MX_GPIO_Init+0x11c>)
 80004d8:	f000 fcc9 	bl	8000e6e <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004dc:	2200      	movs	r2, #0
 80004de:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80004e2:	4826      	ldr	r0, [pc, #152]	; (800057c <MX_GPIO_Init+0x120>)
 80004e4:	f000 fcc3 	bl	8000e6e <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004e8:	2200      	movs	r2, #0
 80004ea:	f248 31f8 	movw	r1, #33784	; 0x83f8
 80004ee:	4824      	ldr	r0, [pc, #144]	; (8000580 <MX_GPIO_Init+0x124>)
 80004f0:	f000 fcbd 	bl	8000e6e <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80004f4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	481a      	ldr	r0, [pc, #104]	; (8000578 <MX_GPIO_Init+0x11c>)
 800050e:	f000 fb13 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 PB15 */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11;
 8000512:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051c:	2301      	movs	r3, #1
 800051e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4815      	ldr	r0, [pc, #84]	; (8000580 <MX_GPIO_Init+0x124>)
 800052c:	f000 fb04 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000530:	f241 03f8 	movw	r3, #4344	; 0x10f8
 8000534:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2302      	movs	r3, #2
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <MX_GPIO_Init+0x120>)
 800054a:	f000 faf5 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800054e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000552:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_GPIO_Init+0x124>)
 8000568:	f000 fae6 	bl	8000b38 <HAL_GPIO_Init>

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	40011000 	.word	0x40011000
 800057c:	40010800 	.word	0x40010800
 8000580:	40010c00 	.word	0x40010c00

08000584 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
		  steptoggle = 1;
	  }else if (test == 5) {
		  test = 0;
	  }
	*/
	osDelay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f007 fb92 	bl	8007cb6 <osDelay>
 8000592:	e7fb      	b.n	800058c <StartDefaultTask+0x8>

08000594 <StartComTask>:
  * @brief  Function implementing the ComTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Header_StartComTask */
void StartComTask(void const * argument){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

	for(;;)
	  {

			osDelay(5);
 800059c:	2005      	movs	r0, #5
 800059e:	f007 fb8a 	bl	8007cb6 <osDelay>
			Com_Transmit();
 80005a2:	f009 ff69 	bl	800a478 <Com_Transmit>
			Com_Receive();
 80005a6:	f009 ffa3 	bl	800a4f0 <Com_Receive>
			osDelay(5);
 80005aa:	e7f7      	b.n	800059c <StartComTask+0x8>

080005ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005be:	f000 f99b 	bl	80008f8 <HAL_IncTick>
  }
  if (htim->Instance == TIM4) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d112      	bne.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x46>
	  cnc_DriveM(&Motor1);
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005ce:	f009 fdfd 	bl	800a1cc <cnc_DriveM>
	  cnc_DriveM(&Motor2);
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005d4:	f009 fdfa 	bl	800a1cc <cnc_DriveM>
	  if (Motor1.Status == ST_OFF && Motor2.Status == ST_OFF)
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d107      	bne.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x46>
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x46>
		  HAL_TIM_Base_Stop_IT(&htim4);
 80005ec:	4807      	ldr	r0, [pc, #28]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005ee:	f002 ff61 	bl	80034b4 <HAL_TIM_Base_Stop_IT>
	  }

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40000400 	.word	0x40000400
 8000600:	40000800 	.word	0x40000800
 8000604:	200026d0 	.word	0x200026d0
 8000608:	200020f8 	.word	0x200020f8
 800060c:	20001b78 	.word	0x20001b78

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <HAL_MspInit+0x68>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <HAL_MspInit+0x68>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_MspInit+0x68>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_MspInit+0x68>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <HAL_MspInit+0x68>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x68>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	210f      	movs	r1, #15
 8000656:	f06f 0001 	mvn.w	r0, #1
 800065a:	f000 fa42 	bl	8000ae2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_MspInit+0x6c>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_MspInit+0x6c>)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	40010000 	.word	0x40010000

0800068c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800069c:	d10c      	bne.n	80006b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_TIM_Base_MspInit+0x68>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_TIM_Base_MspInit+0x68>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_TIM_Base_MspInit+0x68>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
    }

}
 80006b6:	e018      	b.n	80006ea <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_TIM_Base_MspInit+0x6c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d113      	bne.n	80006ea <HAL_TIM_Base_MspInit+0x5e>
      __HAL_RCC_TIM4_CLK_ENABLE();
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_TIM_Base_MspInit+0x68>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <HAL_TIM_Base_MspInit+0x68>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_TIM_Base_MspInit+0x68>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2105      	movs	r1, #5
 80006de:	201e      	movs	r0, #30
 80006e0:	f000 f9ff 	bl	8000ae2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006e4:	201e      	movs	r0, #30
 80006e6:	f000 fa18 	bl	8000b1a <HAL_NVIC_EnableIRQ>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40000800 	.word	0x40000800

080006fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800071a:	d117      	bne.n	800074c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_TIM_MspPostInit+0x58>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <HAL_TIM_MspPostInit+0x58>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_TIM_MspPostInit+0x58>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <HAL_TIM_MspPostInit+0x5c>)
 8000748:	f000 f9f6 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800

0800075c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	201d      	movs	r0, #29
 8000772:	f000 f9b6 	bl	8000ae2 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000776:	201d      	movs	r0, #29
 8000778:	f000 f9cf 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <HAL_InitTick+0xa0>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <HAL_InitTick+0xa0>)
 8000782:	f043 0302 	orr.w	r3, r3, #2
 8000786:	61d3      	str	r3, [r2, #28]
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_InitTick+0xa0>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	f003 0302 	and.w	r3, r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000794:	f107 0210 	add.w	r2, r7, #16
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fce2 	bl	8003168 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007a4:	f002 fccc 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 80007a8:	4603      	mov	r3, r0
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b0:	4a13      	ldr	r2, [pc, #76]	; (8000800 <HAL_InitTick+0xa4>)
 80007b2:	fba2 2303 	umull	r2, r3, r2, r3
 80007b6:	0c9b      	lsrs	r3, r3, #18
 80007b8:	3b01      	subs	r3, #1
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_InitTick+0xa8>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <HAL_InitTick+0xac>)
 80007c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_InitTick+0xa8>)
 80007c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_InitTick+0xa8>)
 80007cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ce:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_InitTick+0xa8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_InitTick+0xa8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <HAL_InitTick+0xa8>)
 80007de:	f002 fdc7 	bl	8003370 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d104      	bne.n	80007f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <HAL_InitTick+0xa8>)
 80007ea:	f002 fe11 	bl	8003410 <HAL_TIM_Base_Start_IT>
 80007ee:	4603      	mov	r3, r0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	431bde83 	.word	0x431bde83
 8000804:	20002714 	.word	0x20002714
 8000808:	40000400 	.word	0x40000400

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
	...

08000838 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800083e:	f000 fc6c 	bl	800111a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000300c 	.word	0x2000300c

0800084c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <TIM3_IRQHandler+0x10>)
 8000852:	f002 ff57 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20002714 	.word	0x20002714

08000860 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim4);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <TIM4_IRQHandler+0x10>)
 8000866:	f002 ff4d 	bl	8003704 <HAL_TIM_IRQHandler>

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20001b78 	.word	0x20001b78

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff fff8 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000886:	490c      	ldr	r1, [pc, #48]	; (80008b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000888:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800089c:	4c09      	ldr	r4, [pc, #36]	; (80008c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f00a fc91 	bl	800b1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fc6f 	bl	8000190 <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80008bc:	0800b440 	.word	0x0800b440
  ldr r2, =_sbss
 80008c0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80008c4:	200032fc 	.word	0x200032fc

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f8f5 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff ff3a 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fe98 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	20000008 	.word	0x20000008
 8000918:	2000275c 	.word	0x2000275c

0800091c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	2000275c 	.word	0x2000275c

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff fff0 	bl	800091c <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffe0 	bl	800091c <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <__NVIC_EnableIRQ+0x34>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff4f 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff64 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ffb2 	bl	8000a68 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff81 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff57 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b08b      	sub	sp, #44	; 0x2c
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	e169      	b.n	8000e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8158 	bne.w	8000e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	4a9a      	ldr	r2, [pc, #616]	; (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d05e      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b74:	4a98      	ldr	r2, [pc, #608]	; (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d875      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a98      	ldr	r2, [pc, #608]	; (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d058      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b80:	4a96      	ldr	r2, [pc, #600]	; (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d86f      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b86:	4a96      	ldr	r2, [pc, #600]	; (8000de0 <HAL_GPIO_Init+0x2a8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d052      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b8c:	4a94      	ldr	r2, [pc, #592]	; (8000de0 <HAL_GPIO_Init+0x2a8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d869      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b92:	4a94      	ldr	r2, [pc, #592]	; (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d04c      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b98:	4a92      	ldr	r2, [pc, #584]	; (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d863      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b9e:	4a92      	ldr	r2, [pc, #584]	; (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d046      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a90      	ldr	r2, [pc, #576]	; (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d85d      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d82a      	bhi.n	8000c04 <HAL_GPIO_Init+0xcc>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d859      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000bb2:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <HAL_GPIO_Init+0x80>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000c33 	.word	0x08000c33
 8000bbc:	08000c0d 	.word	0x08000c0d
 8000bc0:	08000c1f 	.word	0x08000c1f
 8000bc4:	08000c61 	.word	0x08000c61
 8000bc8:	08000c67 	.word	0x08000c67
 8000bcc:	08000c67 	.word	0x08000c67
 8000bd0:	08000c67 	.word	0x08000c67
 8000bd4:	08000c67 	.word	0x08000c67
 8000bd8:	08000c67 	.word	0x08000c67
 8000bdc:	08000c67 	.word	0x08000c67
 8000be0:	08000c67 	.word	0x08000c67
 8000be4:	08000c67 	.word	0x08000c67
 8000be8:	08000c67 	.word	0x08000c67
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c67 	.word	0x08000c67
 8000bf4:	08000c67 	.word	0x08000c67
 8000bf8:	08000c67 	.word	0x08000c67
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	4a79      	ldr	r2, [pc, #484]	; (8000dec <HAL_GPIO_Init+0x2b4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0a:	e02c      	b.n	8000c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e029      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e024      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	3308      	adds	r3, #8
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e01f      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e01a      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e013      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d105      	bne.n	8000c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	611a      	str	r2, [r3, #16]
          break;
 8000c52:	e009      	b.n	8000c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c54:	2308      	movs	r3, #8
 8000c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	615a      	str	r2, [r3, #20]
          break;
 8000c5e:	e003      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          break;
 8000c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2bff      	cmp	r3, #255	; 0xff
 8000c6c:	d801      	bhi.n	8000c72 <HAL_GPIO_Init+0x13a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	e001      	b.n	8000c76 <HAL_GPIO_Init+0x13e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3304      	adds	r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	; 0xff
 8000c7c:	d802      	bhi.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x152>
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	3b08      	subs	r3, #8
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	210f      	movs	r1, #15
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	6a39      	ldr	r1, [r7, #32]
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80b1 	beq.w	8000e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb8:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b4a      	ldr	r3, [pc, #296]	; (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd0:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <HAL_GPIO_Init+0x2bc>)
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d013      	beq.n	8000d24 <HAL_GPIO_Init+0x1ec>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3f      	ldr	r2, [pc, #252]	; (8000dfc <HAL_GPIO_Init+0x2c4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d00d      	beq.n	8000d20 <HAL_GPIO_Init+0x1e8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3e      	ldr	r2, [pc, #248]	; (8000e00 <HAL_GPIO_Init+0x2c8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0x1e4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3d      	ldr	r2, [pc, #244]	; (8000e04 <HAL_GPIO_Init+0x2cc>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d101      	bne.n	8000d18 <HAL_GPIO_Init+0x1e0>
 8000d14:	2303      	movs	r3, #3
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d24:	2300      	movs	r3, #0
 8000d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d36:	492f      	ldr	r1, [pc, #188]	; (8000df4 <HAL_GPIO_Init+0x2bc>)
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	492c      	ldr	r1, [pc, #176]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	608b      	str	r3, [r1, #8]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4928      	ldr	r1, [pc, #160]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	4922      	ldr	r1, [pc, #136]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60cb      	str	r3, [r1, #12]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	491e      	ldr	r1, [pc, #120]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4918      	ldr	r1, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	4914      	ldr	r1, [pc, #80]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d021      	beq.n	8000e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	490e      	ldr	r1, [pc, #56]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
 8000dd4:	e021      	b.n	8000e1a <HAL_GPIO_Init+0x2e2>
 8000dd6:	bf00      	nop
 8000dd8:	10320000 	.word	0x10320000
 8000ddc:	10310000 	.word	0x10310000
 8000de0:	10220000 	.word	0x10220000
 8000de4:	10210000 	.word	0x10210000
 8000de8:	10120000 	.word	0x10120000
 8000dec:	10110000 	.word	0x10110000
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40011400 	.word	0x40011400
 8000e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_GPIO_Init+0x304>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4909      	ldr	r1, [pc, #36]	; (8000e3c <HAL_GPIO_Init+0x304>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f ae8e 	bne.w	8000b4c <HAL_GPIO_Init+0x14>
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	372c      	adds	r7, #44	; 0x2c
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e001      	b.n	8000e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	807b      	strh	r3, [r7, #2]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e7e:	787b      	ldrb	r3, [r7, #1]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e84:	887a      	ldrh	r2, [r7, #2]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e8a:	e003      	b.n	8000e94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	041a      	lsls	r2, r3, #16
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	041a      	lsls	r2, r3, #16
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	611a      	str	r2, [r3, #16]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af06      	add	r7, sp, #24
 8000ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0f1      	b.n	80010c6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f009 fec0 	bl	800ac7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 f9eb 	bl	80042e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	687e      	ldr	r6, [r7, #4]
 8000f16:	466d      	mov	r5, sp
 8000f18:	f106 0410 	add.w	r4, r6, #16
 8000f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	602b      	str	r3, [r5, #0]
 8000f24:	1d33      	adds	r3, r6, #4
 8000f26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f003 f9b5 	bl	8004298 <USB_CoreInit>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0c2      	b.n	80010c6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 f9e6 	bl	8004318 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e040      	b.n	8000fd4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	440b      	add	r3, r1
 8000f62:	3301      	adds	r3, #1
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3303      	adds	r3, #3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3338      	adds	r3, #56	; 0x38
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	333c      	adds	r3, #60	; 0x3c
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3340      	adds	r3, #64	; 0x40
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d3b9      	bcc.n	8000f52 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e044      	b.n	800106e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	440b      	add	r3, r1
 8001034:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3b5      	bcc.n	8000fe4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	687e      	ldr	r6, [r7, #4]
 8001080:	466d      	mov	r5, sp
 8001082:	f106 0410 	add.w	r4, r6, #16
 8001086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	602b      	str	r3, [r5, #0]
 800108e:	1d33      	adds	r3, r6, #4
 8001090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f003 f94c 	bl	8004330 <USB_DevInit>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2202      	movs	r2, #2
 80010a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00d      	b.n	80010c6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 f968 	bl	8006394 <USB_DevDisconnect>

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_PCD_Start+0x16>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e016      	b.n	8001112 <HAL_PCD_Start+0x44>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 f8e1 	bl	80042b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010f6:	2101      	movs	r1, #1
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f00a f832 	bl	800b162 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f005 f93c 	bl	8006380 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b088      	sub	sp, #32
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f005 f93e 	bl	80063a8 <USB_ReadInterrupts>
 800112c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 fb1d 	bl	8001778 <PCD_EP_ISR_Handler>

    return;
 800113e:	e11b      	b.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	2b00      	cmp	r3, #0
 8001148:	d013      	beq.n	8001172 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800115c:	b292      	uxth	r2, r2
 800115e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f009 fe05 	bl	800ad72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f907 	bl	800137e <HAL_PCD_SetAddress>

    return;
 8001170:	e102      	b.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00c      	beq.n	8001196 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001184:	b29a      	uxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800118e:	b292      	uxth	r2, r2
 8001190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001194:	e0f0      	b.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00c      	beq.n	80011ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011b2:	b292      	uxth	r2, r2
 80011b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011b8:	e0de      	b.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d027      	beq.n	8001214 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	b292      	uxth	r2, r2
 80011d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0208 	bic.w	r2, r2, #8
 80011ee:	b292      	uxth	r2, r2
 80011f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f009 fdf5 	bl	800ade4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001202:	b29a      	uxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800120c:	b292      	uxth	r2, r2
 800120e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001212:	e0b1      	b.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8085 	beq.w	800132a <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	77fb      	strb	r3, [r7, #31]
 8001224:	e011      	b.n	800124a <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	441a      	add	r2, r3
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	8812      	ldrh	r2, [r2, #0]
 8001236:	b292      	uxth	r2, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	f107 0120 	add.w	r1, r7, #32
 800123e:	440b      	add	r3, r1
 8001240:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	3301      	adds	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]
 800124a:	7ffb      	ldrb	r3, [r7, #31]
 800124c:	2b07      	cmp	r3, #7
 800124e:	d9ea      	bls.n	8001226 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	b292      	uxth	r2, r2
 8001264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	b292      	uxth	r2, r2
 800127c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001280:	bf00      	nop
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800128a:	b29b      	uxth	r3, r3
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f6      	beq.n	8001282 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a6:	b292      	uxth	r2, r2
 80012a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
 80012b0:	e010      	b.n	80012d4 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	4611      	mov	r1, r2
 80012ba:	7ffa      	ldrb	r2, [r7, #31]
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	440a      	add	r2, r1
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	f107 0120 	add.w	r1, r7, #32
 80012c6:	440b      	add	r3, r1
 80012c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012cc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	3301      	adds	r3, #1
 80012d2:	77fb      	strb	r3, [r7, #31]
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	d9eb      	bls.n	80012b2 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0208 	orr.w	r2, r2, #8
 80012ec:	b292      	uxth	r2, r2
 80012ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001304:	b292      	uxth	r2, r2
 8001306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001312:	b29a      	uxth	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0204 	orr.w	r2, r2, #4
 800131c:	b292      	uxth	r2, r2
 800131e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f009 fd44 	bl	800adb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001328:	e026      	b.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00f      	beq.n	8001354 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001346:	b292      	uxth	r2, r2
 8001348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f009 fd02 	bl	800ad56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001352:	e011      	b.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001370:	b292      	uxth	r2, r2
 8001372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001376:	bf00      	nop
  }
}
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_PCD_SetAddress+0x1a>
 8001394:	2302      	movs	r3, #2
 8001396:	e013      	b.n	80013c0 <HAL_PCD_SetAddress+0x42>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 ffd2 	bl	800635a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4608      	mov	r0, r1
 80013d2:	4611      	mov	r1, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	70fb      	strb	r3, [r7, #3]
 80013da:	460b      	mov	r3, r1
 80013dc:	803b      	strh	r3, [r7, #0]
 80013de:	4613      	mov	r3, r2
 80013e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da0e      	bge.n	800140c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	705a      	strb	r2, [r3, #1]
 800140a:	e00e      	b.n	800142a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	f003 0207 	and.w	r2, r3, #7
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	b2da      	uxtb	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001436:	883a      	ldrh	r2, [r7, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	78ba      	ldrb	r2, [r7, #2]
 8001440:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001442:	78bb      	ldrb	r3, [r7, #2]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d102      	bne.n	800144e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_PCD_EP_Open+0x94>
 8001458:	2302      	movs	r3, #2
 800145a:	e00e      	b.n	800147a <HAL_PCD_EP_Open+0xb2>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68f9      	ldr	r1, [r7, #12]
 800146a:	4618      	mov	r0, r3
 800146c:	f002 ff80 	bl	8004370 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001478:	7afb      	ldrb	r3, [r7, #11]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800148e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da0e      	bge.n	80014b4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	705a      	strb	r2, [r3, #1]
 80014b2:	e00e      	b.n	80014d2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0207 	and.w	r2, r3, #7
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_PCD_EP_Close+0x6a>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e00e      	b.n	800150a <HAL_PCD_EP_Close+0x88>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 faf8 	bl	8004af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	460b      	mov	r3, r1
 8001520:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001522:	7afb      	ldrb	r3, [r7, #11]
 8001524:	f003 0207 	and.w	r2, r3, #7
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2200      	movs	r2, #0
 8001550:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	b2da      	uxtb	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fcaf 	bl	8004ec8 <USB_EPStartXfer>

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f003 0207 	and.w	r2, r3, #7
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	460b      	mov	r3, r1
 80015b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015b2:	7afb      	ldrb	r3, [r7, #11]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2201      	movs	r2, #1
 80015ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6979      	ldr	r1, [r7, #20]
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fc61 	bl	8004ec8 <USB_EPStartXfer>

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	f003 0207 	and.w	r2, r3, #7
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d901      	bls.n	800162e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e04c      	b.n	80016c8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800162e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da0e      	bge.n	8001654 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	705a      	strb	r2, [r3, #1]
 8001652:	e00c      	b.n	800166e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_EP_SetStall+0x7e>
 800168a:	2302      	movs	r3, #2
 800168c:	e01c      	b.n	80016c8 <HAL_PCD_EP_SetStall+0xb8>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fd5f 	bl	8006160 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f004 fe84 	bl	80063c6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d901      	bls.n	80016ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e040      	b.n	8001770 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da0e      	bge.n	8001714 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	705a      	strb	r2, [r3, #1]
 8001712:	e00e      	b.n	8001732 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 0207 	and.w	r2, r3, #7
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	b2da      	uxtb	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_PCD_EP_ClrStall+0x82>
 800174e:	2302      	movs	r3, #2
 8001750:	e00e      	b.n	8001770 <HAL_PCD_EP_ClrStall+0xa0>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68f9      	ldr	r1, [r7, #12]
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fd4d 	bl	8006200 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b096      	sub	sp, #88	; 0x58
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001780:	e3bf      	b.n	8001f02 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800178a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800178e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800179c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 8179 	bne.w	8001a98 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d152      	bne.n	8001858 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017c2:	81fb      	strh	r3, [r7, #14]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3328      	adds	r3, #40	; 0x28
 80017da:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	3302      	adds	r3, #2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001806:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	441a      	add	r2, r3
 8001812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001814:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001816:	2100      	movs	r1, #0
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f009 fa82 	bl	800ad22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 836b 	beq.w	8001f02 <PCD_EP_ISR_Handler+0x78a>
 800182c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 8366 	bne.w	8001f02 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001842:	b2da      	uxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	b292      	uxth	r2, r2
 800184a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001856:	e354      	b.n	8001f02 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800185e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800186a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001872:	2b00      	cmp	r3, #0
 8001874:	d034      	beq.n	80018e0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800187e:	b29b      	uxth	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	3306      	adds	r3, #6
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	4413      	add	r3, r2
 8001894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80018ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	f004 fdd6 	bl	8006466 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018c6:	4013      	ands	r3, r2
 80018c8:	823b      	strh	r3, [r7, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	8a3a      	ldrh	r2, [r7, #16]
 80018d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018d4:	b292      	uxth	r2, r2
 80018d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f009 f9f5 	bl	800acc8 <HAL_PCD_SetupStageCallback>
 80018de:	e310      	b.n	8001f02 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f280 830c 	bge.w	8001f02 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018f6:	4013      	ands	r3, r2
 80018f8:	83fb      	strh	r3, [r7, #30]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	8bfa      	ldrh	r2, [r7, #30]
 8001900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001904:	b292      	uxth	r2, r2
 8001906:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	3306      	adds	r3, #6
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001932:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d019      	beq.n	8001970 <PCD_EP_ISR_Handler+0x1f8>
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d015      	beq.n	8001970 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194a:	6959      	ldr	r1, [r3, #20]
 800194c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001952:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001954:	b29b      	uxth	r3, r3
 8001956:	f004 fd86 	bl	8006466 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	441a      	add	r2, r3
 8001964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001966:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001968:	2100      	movs	r1, #0
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f009 f9be 	bl	800acec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800197a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 82bd 	bne.w	8001f02 <PCD_EP_ISR_Handler+0x78a>
 8001988:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800198c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001994:	f000 82b5 	beq.w	8001f02 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4413      	add	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	801a      	strh	r2, [r3, #0]
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b3e      	cmp	r3, #62	; 0x3e
 80019ce:	d91d      	bls.n	8001a0c <PCD_EP_ISR_Handler+0x294>
 80019d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
 80019d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <PCD_EP_ISR_Handler+0x272>
 80019e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e6:	3b01      	subs	r3, #1
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	029b      	lsls	r3, r3, #10
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	e026      	b.n	8001a5a <PCD_EP_ISR_Handler+0x2e2>
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <PCD_EP_ISR_Handler+0x2b2>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	801a      	strh	r2, [r3, #0]
 8001a28:	e017      	b.n	8001a5a <PCD_EP_ISR_Handler+0x2e2>
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
 8001a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <PCD_EP_ISR_Handler+0x2cc>
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	3301      	adds	r3, #1
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6a:	827b      	strh	r3, [r7, #18]
 8001a6c:	8a7b      	ldrh	r3, [r7, #18]
 8001a6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a72:	827b      	strh	r3, [r7, #18]
 8001a74:	8a7b      	ldrh	r3, [r7, #18]
 8001a76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a7a:	827b      	strh	r3, [r7, #18]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	8a7b      	ldrh	r3, [r7, #18]
 8001a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	8013      	strh	r3, [r2, #0]
 8001a96:	e234      	b.n	8001f02 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f280 80fc 	bge.w	8001cae <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001acc:	4013      	ands	r3, r2
 8001ace:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ae8:	b292      	uxth	r2, r2
 8001aea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001aec:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b04:	7b1b      	ldrb	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d125      	bne.n	8001b56 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3306      	adds	r3, #6
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001b36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8092 	beq.w	8001c64 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b46:	6959      	ldr	r1, [r3, #20]
 8001b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4a:	88da      	ldrh	r2, [r3, #6]
 8001b4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b50:	f004 fc89 	bl	8006466 <USB_ReadPMA>
 8001b54:	e086      	b.n	8001c64 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b58:	78db      	ldrb	r3, [r3, #3]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d10a      	bne.n	8001b74 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b62:	461a      	mov	r2, r3
 8001b64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f9d9 	bl	8001f1e <HAL_PCD_EP_DB_Receive>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b72:	e077      	b.n	8001c64 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	441a      	add	r2, r3
 8001ba0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	3302      	adds	r3, #2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d02e      	beq.n	8001c64 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	6959      	ldr	r1, [r3, #20]
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c10:	891a      	ldrh	r2, [r3, #8]
 8001c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c16:	f004 fc26 	bl	8006466 <USB_ReadPMA>
 8001c1a:	e023      	b.n	8001c64 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3306      	adds	r3, #6
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c56:	6959      	ldr	r1, [r3, #20]
 8001c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5a:	895a      	ldrh	r2, [r3, #10]
 8001c5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c60:	f004 fc01 	bl	8006466 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c6c:	441a      	add	r2, r3
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c7a:	441a      	add	r2, r3
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <PCD_EP_ISR_Handler+0x51c>
 8001c88:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d206      	bcs.n	8001ca2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f009 f826 	bl	800acec <HAL_PCD_DataOutStageCallback>
 8001ca0:	e005      	b.n	8001cae <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 f90d 	bl	8004ec8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001cae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8123 	beq.w	8001f02 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001cbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	441a      	add	r2, r3
 8001cfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0e:	78db      	ldrb	r3, [r3, #3]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f040 80a2 	bne.w	8001e5a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1e:	7b1b      	ldrb	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8093 	beq.w	8001e4c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d046      	beq.n	8001dc0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d126      	bne.n	8001d88 <PCD_EP_ISR_Handler+0x610>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	4413      	add	r3, r2
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	011a      	lsls	r2, r3, #4
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d60:	623b      	str	r3, [r7, #32]
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	e061      	b.n	8001e4c <PCD_EP_ISR_Handler+0x6d4>
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	785b      	ldrb	r3, [r3, #1]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d15d      	bne.n	8001e4c <PCD_EP_ISR_Handler+0x6d4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	4413      	add	r3, r2
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	011a      	lsls	r2, r3, #4
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	4413      	add	r3, r2
 8001db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	e045      	b.n	8001e4c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d126      	bne.n	8001e1c <PCD_EP_ISR_Handler+0x6a4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	4413      	add	r3, r2
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
 8001de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	011a      	lsls	r2, r3, #4
 8001dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dee:	4413      	add	r3, r2
 8001df0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	801a      	strh	r2, [r3, #0]
 8001e1a:	e017      	b.n	8001e4c <PCD_EP_ISR_Handler+0x6d4>
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d113      	bne.n	8001e4c <PCD_EP_ISR_Handler+0x6d4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e32:	4413      	add	r3, r2
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	011a      	lsls	r2, r3, #4
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	4413      	add	r3, r2
 8001e40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e48:	2200      	movs	r2, #0
 8001e4a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f008 ff65 	bl	800ad22 <HAL_PCD_DataInStageCallback>
 8001e58:	e053      	b.n	8001f02 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d146      	bne.n	8001ef4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d907      	bls.n	8001eae <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ea6:	1ad2      	subs	r2, r2, r3
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eaa:	619a      	str	r2, [r3, #24]
 8001eac:	e002      	b.n	8001eb4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f008 ff2d 	bl	800ad22 <HAL_PCD_DataInStageCallback>
 8001ec8:	e01b      	b.n	8001f02 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ed2:	441a      	add	r2, r3
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ee0:	441a      	add	r2, r3
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 ffeb 	bl	8004ec8 <USB_EPStartXfer>
 8001ef2:	e006      	b.n	8001f02 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ef4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f91b 	bl	8002138 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f6ff ac37 	blt.w	8001782 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3758      	adds	r7, #88	; 0x58
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b088      	sub	sp, #32
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d07e      	beq.n	8002034 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	8b7b      	ldrh	r3, [r7, #26]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d306      	bcc.n	8001f78 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	8b7b      	ldrh	r3, [r7, #26]
 8001f70:	1ad2      	subs	r2, r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	e002      	b.n	8001f7e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d123      	bne.n	8001fce <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa0:	833b      	strh	r3, [r7, #24]
 8001fa2:	8b3b      	ldrh	r3, [r7, #24]
 8001fa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fa8:	833b      	strh	r3, [r7, #24]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	441a      	add	r2, r3
 8001fb8:	8b3b      	ldrh	r3, [r7, #24]
 8001fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01f      	beq.n	8002018 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	82fb      	strh	r3, [r7, #22]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	8afb      	ldrh	r3, [r7, #22]
 8002004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800200c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002014:	b29b      	uxth	r3, r3
 8002016:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002018:	8b7b      	ldrh	r3, [r7, #26]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8087 	beq.w	800212e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	6959      	ldr	r1, [r3, #20]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	891a      	ldrh	r2, [r3, #8]
 800202c:	8b7b      	ldrh	r3, [r7, #26]
 800202e:	f004 fa1a 	bl	8006466 <USB_ReadPMA>
 8002032:	e07c      	b.n	800212e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	3306      	adds	r3, #6
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	8b7b      	ldrh	r3, [r7, #26]
 8002064:	429a      	cmp	r2, r3
 8002066:	d306      	bcc.n	8002076 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	8b7b      	ldrh	r3, [r7, #26]
 800206e:	1ad2      	subs	r2, r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	619a      	str	r2, [r3, #24]
 8002074:	e002      	b.n	800207c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d123      	bne.n	80020cc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	83fb      	strh	r3, [r7, #30]
 80020a0:	8bfb      	ldrh	r3, [r7, #30]
 80020a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020a6:	83fb      	strh	r3, [r7, #30]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	441a      	add	r2, r3
 80020b6:	8bfb      	ldrh	r3, [r7, #30]
 80020b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11f      	bne.n	8002116 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f0:	83bb      	strh	r3, [r7, #28]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	441a      	add	r2, r3
 8002100:	8bbb      	ldrh	r3, [r7, #28]
 8002102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002112:	b29b      	uxth	r3, r3
 8002114:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6959      	ldr	r1, [r3, #20]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	895a      	ldrh	r2, [r3, #10]
 8002128:	8b7b      	ldrh	r3, [r7, #26]
 800212a:	f004 f99c 	bl	8006466 <USB_ReadPMA>
    }
  }

  return count;
 800212e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0a4      	sub	sp, #144	; 0x90
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81dd 	beq.w	800250c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	3302      	adds	r3, #2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002186:	429a      	cmp	r2, r3
 8002188:	d907      	bls.n	800219a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002192:	1ad2      	subs	r2, r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	619a      	str	r2, [r3, #24]
 8002198:	e002      	b.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 80b9 	bne.w	800231c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	785b      	ldrb	r3, [r3, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d126      	bne.n	8002200 <HAL_PCD_EP_DB_Transmit+0xc8>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	4413      	add	r3, r2
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	011a      	lsls	r2, r3, #4
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	4413      	add	r3, r2
 80021d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	e01a      	b.n	8002236 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d116      	bne.n	8002236 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	4413      	add	r3, r2
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	011a      	lsls	r2, r3, #4
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	4413      	add	r3, r2
 800222a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	2200      	movs	r2, #0
 8002234:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d126      	bne.n	8002292 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	011a      	lsls	r2, r3, #4
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002276:	b29a      	uxth	r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800228a:	b29a      	uxth	r2, r3
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	801a      	strh	r2, [r3, #0]
 8002290:	e017      	b.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d113      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	4413      	add	r3, r2
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	011a      	lsls	r2, r3, #4
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	4413      	add	r3, r2
 80022b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2200      	movs	r2, #0
 80022c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f008 fd2a 	bl	800ad22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 82fc 	beq.w	80028d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f4:	82fb      	strh	r3, [r7, #22]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	441a      	add	r2, r3
 8002304:	8afb      	ldrh	r3, [r7, #22]
 8002306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800230e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002316:	b29b      	uxth	r3, r3
 8002318:	8013      	strh	r3, [r2, #0]
 800231a:	e2da      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d021      	beq.n	800236a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800235a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002366:	b29b      	uxth	r3, r3
 8002368:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 82ae 	bne.w	80028d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800237e:	441a      	add	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800238c:	441a      	add	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	429a      	cmp	r2, r3
 800239c:	d30b      	bcc.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	621a      	str	r2, [r3, #32]
 80023b4:	e017      	b.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d108      	bne.n	80023d0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023ce:	e00a      	b.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	785b      	ldrb	r3, [r3, #1]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d165      	bne.n	80024ba <HAL_PCD_EP_DB_Transmit+0x382>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002402:	4413      	add	r3, r2
 8002404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	011a      	lsls	r2, r3, #4
 800240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240e:	4413      	add	r3, r2
 8002410:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002420:	b29a      	uxth	r2, r3
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800242a:	2b3e      	cmp	r3, #62	; 0x3e
 800242c:	d91d      	bls.n	800246a <HAL_PCD_EP_DB_Transmit+0x332>
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_PCD_EP_DB_Transmit+0x310>
 8002442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002444:	3b01      	subs	r3, #1
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29a      	uxth	r2, r3
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	b29b      	uxth	r3, r3
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	b29b      	uxth	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	b29b      	uxth	r3, r3
 800245a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002462:	b29a      	uxth	r2, r3
 8002464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002466:	801a      	strh	r2, [r3, #0]
 8002468:	e044      	b.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800246a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <HAL_PCD_EP_DB_Transmit+0x350>
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002480:	b29a      	uxth	r2, r3
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	801a      	strh	r2, [r3, #0]
 8002486:	e035      	b.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_PCD_EP_DB_Transmit+0x36a>
 800249c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249e:	3301      	adds	r3, #1
 80024a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	029b      	lsls	r3, r3, #10
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e01c      	b.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d118      	bne.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	4413      	add	r3, r2
 80024d8:	647b      	str	r3, [r7, #68]	; 0x44
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	011a      	lsls	r2, r3, #4
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e2:	4413      	add	r3, r2
 80024e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024e8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6959      	ldr	r1, [r3, #20]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	891a      	ldrh	r2, [r3, #8]
 8002500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002504:	b29b      	uxth	r3, r3
 8002506:	f003 ff69 	bl	80063dc <USB_WritePMA>
 800250a:	e1e2      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	3306      	adds	r3, #6
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002540:	429a      	cmp	r2, r3
 8002542:	d307      	bcc.n	8002554 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800254c:	1ad2      	subs	r2, r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	619a      	str	r2, [r3, #24]
 8002552:	e002      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80c0 	bne.w	80026e4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d126      	bne.n	80025ba <HAL_PCD_EP_DB_Transmit+0x482>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002580:	4413      	add	r3, r2
 8002582:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800258c:	4413      	add	r3, r2
 800258e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002592:	67bb      	str	r3, [r7, #120]	; 0x78
 8002594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259e:	b29a      	uxth	r2, r3
 80025a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e01a      	b.n	80025f0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d116      	bne.n	80025f0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	667b      	str	r3, [r7, #100]	; 0x64
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d6:	4413      	add	r3, r2
 80025d8:	667b      	str	r3, [r7, #100]	; 0x64
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	011a      	lsls	r2, r3, #4
 80025e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e2:	4413      	add	r3, r2
 80025e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025e8:	663b      	str	r3, [r7, #96]	; 0x60
 80025ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ec:	2200      	movs	r2, #0
 80025ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	677b      	str	r3, [r7, #116]	; 0x74
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d12b      	bne.n	8002656 <HAL_PCD_EP_DB_Transmit+0x51e>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002612:	4413      	add	r3, r2
 8002614:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	011a      	lsls	r2, r3, #4
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	4413      	add	r3, r2
 8002620:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002634:	b29a      	uxth	r2, r3
 8002636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800263a:	801a      	strh	r2, [r3, #0]
 800263c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264c:	b29a      	uxth	r2, r3
 800264e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	e017      	b.n	8002686 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d113      	bne.n	8002686 <HAL_PCD_EP_DB_Transmit+0x54e>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266c:	4413      	add	r3, r2
 800266e:	677b      	str	r3, [r7, #116]	; 0x74
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	011a      	lsls	r2, r3, #4
 8002676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002678:	4413      	add	r3, r2
 800267a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800267e:	673b      	str	r3, [r7, #112]	; 0x70
 8002680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002682:	2200      	movs	r2, #0
 8002684:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f008 fb48 	bl	800ad22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 811a 	bne.w	80028d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	441a      	add	r2, r3
 80026ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80026ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026de:	b29b      	uxth	r3, r3
 80026e0:	8013      	strh	r3, [r2, #0]
 80026e2:	e0f6      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d121      	bne.n	8002732 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002708:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800271e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272e:	b29b      	uxth	r3, r3
 8002730:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002738:	2b01      	cmp	r3, #1
 800273a:	f040 80ca 	bne.w	80028d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002746:	441a      	add	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002754:	441a      	add	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	429a      	cmp	r2, r3
 8002764:	d30b      	bcc.n	800277e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002776:	1ad2      	subs	r2, r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	621a      	str	r2, [r3, #32]
 800277c:	e017      	b.n	80027ae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002786:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800278a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002796:	e00a      	b.n	80027ae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	657b      	str	r3, [r7, #84]	; 0x54
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d165      	bne.n	8002888 <HAL_PCD_EP_DB_Transmit+0x750>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d0:	4413      	add	r3, r2
 80027d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	011a      	lsls	r2, r3, #4
 80027da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027dc:	4413      	add	r3, r2
 80027de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80027e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f8:	2b3e      	cmp	r3, #62	; 0x3e
 80027fa:	d91d      	bls.n	8002838 <HAL_PCD_EP_DB_Transmit+0x700>
 80027fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
 8002804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002812:	3b01      	subs	r3, #1
 8002814:	66bb      	str	r3, [r7, #104]	; 0x68
 8002816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29a      	uxth	r2, r3
 800281c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800281e:	b29b      	uxth	r3, r3
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	b29b      	uxth	r3, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	b29b      	uxth	r3, r3
 8002828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002830:	b29a      	uxth	r2, r3
 8002832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	e041      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800284a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284e:	b29a      	uxth	r2, r3
 8002850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	e032      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	66bb      	str	r3, [r7, #104]	; 0x68
 800285e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_PCD_EP_DB_Transmit+0x738>
 800286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286c:	3301      	adds	r3, #1
 800286e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29a      	uxth	r2, r3
 8002876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002878:	b29b      	uxth	r3, r3
 800287a:	029b      	lsls	r3, r3, #10
 800287c:	b29b      	uxth	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b29a      	uxth	r2, r3
 8002882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	e019      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d115      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289e:	4413      	add	r3, r2
 80028a0:	657b      	str	r3, [r7, #84]	; 0x54
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	011a      	lsls	r2, r3, #4
 80028a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028aa:	4413      	add	r3, r2
 80028ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028b0:	653b      	str	r3, [r7, #80]	; 0x50
 80028b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6959      	ldr	r1, [r3, #20]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	895a      	ldrh	r2, [r3, #10]
 80028c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f003 fd85 	bl	80063dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ec:	82bb      	strh	r3, [r7, #20]
 80028ee:	8abb      	ldrh	r3, [r7, #20]
 80028f0:	f083 0310 	eor.w	r3, r3, #16
 80028f4:	82bb      	strh	r3, [r7, #20]
 80028f6:	8abb      	ldrh	r3, [r7, #20]
 80028f8:	f083 0320 	eor.w	r3, r3, #32
 80028fc:	82bb      	strh	r3, [r7, #20]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	8abb      	ldrh	r3, [r7, #20]
 800290e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291e:	b29b      	uxth	r3, r3
 8002920:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3790      	adds	r7, #144	; 0x90
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	4613      	mov	r3, r2
 800293c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e009      	b.n	8002976 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002962:	897a      	ldrh	r2, [r7, #10]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002976:	893b      	ldrh	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	b29a      	uxth	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	80da      	strh	r2, [r3, #6]
 800298a:	e00b      	b.n	80029a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2201      	movs	r2, #1
 8002990:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	b29a      	uxth	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e26c      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8087 	beq.w	8002ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d0:	4b92      	ldr	r3, [pc, #584]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029dc:	4b8f      	ldr	r3, [pc, #572]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d112      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d10b      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d06c      	beq.n	8002adc <HAL_RCC_OscConfig+0x12c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d168      	bne.n	8002adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e246      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x76>
 8002a18:	4b80      	ldr	r3, [pc, #512]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7f      	ldr	r2, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e02e      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x98>
 8002a2e:	4b7b      	ldr	r3, [pc, #492]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7a      	ldr	r2, [pc, #488]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b78      	ldr	r3, [pc, #480]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a77      	ldr	r2, [pc, #476]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0xbc>
 8002a52:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a71      	ldr	r2, [pc, #452]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6e      	ldr	r2, [pc, #440]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a6c:	4b6b      	ldr	r3, [pc, #428]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6a      	ldr	r2, [pc, #424]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b68      	ldr	r3, [pc, #416]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a67      	ldr	r2, [pc, #412]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fd ff46 	bl	800091c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fd ff42 	bl	800091c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1fa      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xe4>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fd ff32 	bl	800091c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fd ff2e 	bl	800091c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1e6      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x10c>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aea:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002af6:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1ba      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4939      	ldr	r1, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fd fee7 	bl	800091c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b52:	f7fd fee3 	bl	800091c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e19b      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4927      	ldr	r1, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fd fec6 	bl	800091c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fd fec2 	bl	800091c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e17a      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d03a      	beq.n	8002c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d019      	beq.n	8002bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fd fea6 	bl	800091c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fd fea2 	bl	800091c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e15a      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 fae8 	bl	80031c8 <RCC_Delay>
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fd fe8c 	bl	800091c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c06:	e00f      	b.n	8002c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fd fe88 	bl	800091c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d908      	bls.n	8002c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e140      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	42420000 	.word	0x42420000
 8002c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e9      	bne.n	8002c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80a6 	beq.w	8002d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b97      	ldr	r3, [pc, #604]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b94      	ldr	r3, [pc, #592]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a93      	ldr	r2, [pc, #588]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]
 8002c5e:	4b91      	ldr	r3, [pc, #580]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b8e      	ldr	r3, [pc, #568]	; (8002ea8 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7a:	4b8b      	ldr	r3, [pc, #556]	; (8002ea8 <HAL_RCC_OscConfig+0x4f8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a8a      	ldr	r2, [pc, #552]	; (8002ea8 <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fd fe49 	bl	800091c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8e:	f7fd fe45 	bl	800091c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	; 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0fd      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x312>
 8002cb4:	4b7b      	ldr	r3, [pc, #492]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a7a      	ldr	r2, [pc, #488]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e02d      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x334>
 8002cca:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a75      	ldr	r2, [pc, #468]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	4b73      	ldr	r3, [pc, #460]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a72      	ldr	r2, [pc, #456]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	e01c      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x356>
 8002cec:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4a6c      	ldr	r2, [pc, #432]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a69      	ldr	r2, [pc, #420]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a66      	ldr	r2, [pc, #408]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a63      	ldr	r2, [pc, #396]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fd fdf9 	bl	800091c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fd fdf5 	bl	800091c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0ab      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ee      	beq.n	8002d2e <HAL_RCC_OscConfig+0x37e>
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fd fde3 	bl	800091c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fd fddf 	bl	800091c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e095      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a47      	ldr	r2, [pc, #284]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8081 	beq.w	8002e9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d98:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d061      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d146      	bne.n	8002e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_OscConfig+0x4fc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd fdb3 	bl	800091c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fd fdaf 	bl	800091c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e067      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	4b35      	ldr	r3, [pc, #212]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d108      	bne.n	8002df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	492d      	ldr	r1, [pc, #180]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a19      	ldr	r1, [r3, #32]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	430b      	orrs	r3, r1
 8002e06:	4927      	ldr	r1, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCC_OscConfig+0x4fc>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fd fd83 	bl	800091c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fd fd7f 	bl	800091c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e037      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x46a>
 8002e38:	e02f      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_RCC_OscConfig+0x4fc>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fd fd6c 	bl	800091c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fd fd68 	bl	800091c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e020      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x498>
 8002e66:	e018      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e013      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42420060 	.word	0x42420060

08002eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0d0      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d910      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4965      	ldr	r1, [pc, #404]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d040      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e073      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4936      	ldr	r1, [pc, #216]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fd fcbc 	bl	800091c <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fd fcb8 	bl	800091c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e053      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d210      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0207 	bic.w	r2, r3, #7
 8002fe6:	4922      	ldr	r1, [pc, #136]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f821 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1cc>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fb7c 	bl	800075c <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
 8003078:	0800b40c 	.word	0x0800b40c
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800309e:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_RCC_GetSysClockFreq+0x94>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x30>
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x36>
 80030b2:	e027      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 80030b6:	613b      	str	r3, [r7, #16]
      break;
 80030b8:	e027      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_GetSysClockFreq+0x94>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	0c5b      	lsrs	r3, r3, #17
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	4a11      	ldr	r2, [pc, #68]	; (8003124 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 80030e6:	fb02 f203 	mul.w	r2, r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e004      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	613b      	str	r3, [r7, #16]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 8003106:	613b      	str	r3, [r7, #16]
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	693b      	ldr	r3, [r7, #16]
}
 800310c:	4618      	mov	r0, r3
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	007a1200 	.word	0x007a1200
 8003120:	0800b424 	.word	0x0800b424
 8003124:	0800b434 	.word	0x0800b434
 8003128:	003d0900 	.word	0x003d0900

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b02      	ldr	r3, [pc, #8]	; (800313c <HAL_RCC_GetHCLKFreq+0x10>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	20000000 	.word	0x20000000

08003140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003144:	f7ff fff2 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4903      	ldr	r1, [pc, #12]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	0800b41c 	.word	0x0800b41c

08003168 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	220f      	movs	r2, #15
 8003176:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCC_GetClockConfig+0x58>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0203 	and.w	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_RCC_GetClockConfig+0x58>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_GetClockConfig+0x58>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_RCC_GetClockConfig+0x58>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetClockConfig+0x5c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0207 	and.w	r2, r3, #7
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40022000 	.word	0x40022000

080031c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <RCC_Delay+0x34>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <RCC_Delay+0x38>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0a5b      	lsrs	r3, r3, #9
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e4:	bf00      	nop
  }
  while (Delay --);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	60fa      	str	r2, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f9      	bne.n	80031e4 <RCC_Delay+0x1c>
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	20000000 	.word	0x20000000
 8003200:	10624dd3 	.word	0x10624dd3

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d07d      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003220:	2300      	movs	r3, #0
 8003222:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003224:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	61d3      	str	r3, [r2, #28]
 800323c:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d118      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a42      	ldr	r2, [pc, #264]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003264:	f7fd fb5a 	bl	800091c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	e008      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fd fb56 	bl	800091c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e06d      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d02e      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d027      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a8:	4b2e      	ldr	r3, [pc, #184]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b8:	4b2c      	ldr	r3, [pc, #176]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032be:	4a29      	ldr	r2, [pc, #164]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d014      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fd fb25 	bl	800091c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd fb21 	bl	800091c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e036      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4917      	ldr	r1, [pc, #92]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	4313      	orrs	r3, r2
 8003308:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	4a13      	ldr	r2, [pc, #76]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	490b      	ldr	r1, [pc, #44]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
 800336c:	42420440 	.word	0x42420440

08003370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e041      	b.n	8003406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd f978 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 fc5e 	bl	8003c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d001      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e03a      	b.n	800349e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d009      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <HAL_TIM_Base_Start_IT+0x9c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d111      	bne.n	800348c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d010      	beq.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348a:	e007      	b.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800

080034b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a1a      	ldr	r2, [r3, #32]
 80034d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10f      	bne.n	80034fc <HAL_TIM_Base_Stop_IT+0x48>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	f240 4344 	movw	r3, #1092	; 0x444
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_Base_Stop_IT+0x48>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f839 	bl	80035ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 fb8e 	bl	8003c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <HAL_TIM_PWM_Start+0x24>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e022      	b.n	800362a <HAL_TIM_PWM_Start+0x6a>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d109      	bne.n	80035fe <HAL_TIM_PWM_Start+0x3e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e015      	b.n	800362a <HAL_TIM_PWM_Start+0x6a>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d109      	bne.n	8003618 <HAL_TIM_PWM_Start+0x58>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e008      	b.n	800362a <HAL_TIM_PWM_Start+0x6a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e05e      	b.n	80036f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start+0x82>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003640:	e013      	b.n	800366a <HAL_TIM_PWM_Start+0xaa>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0x92>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003650:	e00b      	b.n	800366a <HAL_TIM_PWM_Start+0xaa>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d104      	bne.n	8003662 <HAL_TIM_PWM_Start+0xa2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003660:	e003      	b.n	800366a <HAL_TIM_PWM_Start+0xaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2201      	movs	r2, #1
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fd7c 	bl	8004170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_TIM_PWM_Start+0x138>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d107      	bne.n	8003692 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_TIM_PWM_Start+0x138>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_TIM_PWM_Start+0xfa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d009      	beq.n	80036ba <HAL_TIM_PWM_Start+0xfa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_TIM_PWM_Start+0x13c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_TIM_PWM_Start+0xfa>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_TIM_PWM_Start+0x140>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d111      	bne.n	80036de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d010      	beq.n	80036ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	e007      	b.n	80036ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800

08003704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0202 	mvn.w	r2, #2
 8003730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa76 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa69 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fa78 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa4c 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa3f 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa4e 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0208 	mvn.w	r2, #8
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa22 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa15 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa24 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2208      	movs	r2, #8
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9f8 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9eb 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f9fa 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0201 	mvn.w	r2, #1
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fc fe92 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fce9 	bl	8004286 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b40      	cmp	r3, #64	; 0x40
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d107      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f9be 	bl	8003c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0220 	mvn.w	r2, #32
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fcb4 	bl	8004274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800392e:	2302      	movs	r3, #2
 8003930:	e0ae      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	f200 809f 	bhi.w	8003a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800397d 	.word	0x0800397d
 800394c:	08003a81 	.word	0x08003a81
 8003950:	08003a81 	.word	0x08003a81
 8003954:	08003a81 	.word	0x08003a81
 8003958:	080039bd 	.word	0x080039bd
 800395c:	08003a81 	.word	0x08003a81
 8003960:	08003a81 	.word	0x08003a81
 8003964:	08003a81 	.word	0x08003a81
 8003968:	080039ff 	.word	0x080039ff
 800396c:	08003a81 	.word	0x08003a81
 8003970:	08003a81 	.word	0x08003a81
 8003974:	08003a81 	.word	0x08003a81
 8003978:	08003a3f 	.word	0x08003a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f9d6 	bl	8003d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6999      	ldr	r1, [r3, #24]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
      break;
 80039ba:	e064      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa1c 	bl	8003e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e043      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa65 	bl	8003ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
      break;
 8003a3c:	e023      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 faaf 	bl	8003fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
      break;
 8003a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b4      	b.n	8003c1e <HAL_TIM_ConfigClockSource+0x186>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d03e      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0xd4>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	f200 8087 	bhi.w	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	f000 8086 	beq.w	8003c0a <HAL_TIM_ConfigClockSource+0x172>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d87f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d01a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xa6>
 8003b08:	2b70      	cmp	r3, #112	; 0x70
 8003b0a:	d87b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b60      	cmp	r3, #96	; 0x60
 8003b0e:	d050      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d877      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b50      	cmp	r3, #80	; 0x50
 8003b16:	d03c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xfa>
 8003b18:	2b50      	cmp	r3, #80	; 0x50
 8003b1a:	d873      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d058      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d86f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b30      	cmp	r3, #48	; 0x30
 8003b26:	d064      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d86b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d060      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d867      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	e062      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6899      	ldr	r1, [r3, #8]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f000 faf0 	bl	8004132 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
      break;
 8003b6a:	e04f      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f000 fad9 	bl	8004132 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e03c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 fa50 	bl	8004044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2150      	movs	r1, #80	; 0x50
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 faa7 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e02c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 fa6e 	bl	80040a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2160      	movs	r1, #96	; 0x60
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fa97 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e01c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 fa30 	bl	8004044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fa87 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 fa7e 	bl	80040fe <TIM_ITRx_SetConfig>
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
	...

08003c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <TIM_Base_SetConfig+0xb8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_Base_SetConfig+0x30>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8e:	d007      	beq.n	8003ca0 <TIM_Base_SetConfig+0x30>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <TIM_Base_SetConfig+0xbc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0x30>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <TIM_Base_SetConfig+0xc0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d108      	bne.n	8003cb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <TIM_Base_SetConfig+0xb8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_Base_SetConfig+0x62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d007      	beq.n	8003cd2 <TIM_Base_SetConfig+0x62>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <TIM_Base_SetConfig+0xbc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_Base_SetConfig+0x62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <TIM_Base_SetConfig+0xc0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d108      	bne.n	8003ce4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <TIM_Base_SetConfig+0xb8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d103      	bne.n	8003d18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	615a      	str	r2, [r3, #20]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800

08003d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f023 0201 	bic.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10c      	bne.n	8003daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0308 	bic.w	r3, r3, #8
 8003d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40012c00 	.word	0x40012c00

08003e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 0210 	bic.w	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0320 	bic.w	r3, r3, #32
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <TIM_OC2_SetConfig+0xd0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10d      	bne.n	8003e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <TIM_OC2_SetConfig+0xd0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d113      	bne.n	8003eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	40012c00 	.word	0x40012c00

08003ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <TIM_OC3_SetConfig+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10d      	bne.n	8003f4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <TIM_OC3_SetConfig+0xd0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d113      	bne.n	8003f7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40012c00 	.word	0x40012c00

08003fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <TIM_OC4_SetConfig+0x98>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d109      	bne.n	800401c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00

08004044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800406e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 030a 	bic.w	r3, r3, #10
 8004080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0210 	bic.w	r2, r3, #16
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	031b      	lsls	r3, r3, #12
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr

080040fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	f043 0307 	orr.w	r3, r3, #7
 8004120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004132:	b480      	push	{r7}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	021a      	lsls	r2, r3, #8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	431a      	orrs	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	609a      	str	r2, [r3, #8]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2201      	movs	r2, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e046      	b.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d009      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10c      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800

08004274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004298:	b084      	sub	sp, #16
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	f107 0014 	add.w	r0, r7, #20
 80042a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	b004      	add	sp, #16
 80042b6:	4770      	bx	lr

080042b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	b29b      	uxth	r3, r3
 8004302:	4013      	ands	r3, r2
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	f107 0014 	add.w	r0, r7, #20
 800433e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	b004      	add	sp, #16
 800436e:	4770      	bx	lr

08004370 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004370:	b480      	push	{r7}
 8004372:	b09d      	sub	sp, #116	; 0x74
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d81f      	bhi.n	80043e2 <USB_ActivateEndpoint+0x72>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <USB_ActivateEndpoint+0x38>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043eb 	.word	0x080043eb
 80043b4:	080043c7 	.word	0x080043c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80043c4:	e012      	b.n	80043ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80043ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80043d2:	e00b      	b.n	80043ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80043e0:	e004      	b.n	80043ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80043e8:	e000      	b.n	80043ec <USB_ActivateEndpoint+0x7c>
      break;
 80043ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	b29a      	uxth	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004450:	b29b      	uxth	r3, r3
 8004452:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	7b1b      	ldrb	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 8178 	bne.w	800474e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8084 	beq.w	8004570 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	4413      	add	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	011a      	lsls	r2, r3, #4
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	88db      	ldrh	r3, [r3, #6]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	b29b      	uxth	r3, r3
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	827b      	strh	r3, [r7, #18]
 80044aa:	8a7b      	ldrh	r3, [r7, #18]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <USB_ActivateEndpoint+0x17c>
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	823b      	strh	r3, [r7, #16]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	8a3b      	ldrh	r3, [r7, #16]
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	78db      	ldrb	r3, [r3, #3]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d020      	beq.n	8004536 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450a:	81bb      	strh	r3, [r7, #12]
 800450c:	89bb      	ldrh	r3, [r7, #12]
 800450e:	f083 0320 	eor.w	r3, r3, #32
 8004512:	81bb      	strh	r3, [r7, #12]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	89bb      	ldrh	r3, [r7, #12]
 8004520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004530:	b29b      	uxth	r3, r3
 8004532:	8013      	strh	r3, [r2, #0]
 8004534:	e2d5      	b.n	8004ae2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454c:	81fb      	strh	r3, [r7, #14]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	441a      	add	r2, r3
 8004558:	89fb      	ldrh	r3, [r7, #14]
 800455a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456a:	b29b      	uxth	r3, r3
 800456c:	8013      	strh	r3, [r2, #0]
 800456e:	e2b8      	b.n	8004ae2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	4413      	add	r3, r2
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	4413      	add	r3, r2
 800458e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	88db      	ldrh	r3, [r3, #6]
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	4413      	add	r3, r2
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	011a      	lsls	r2, r3, #4
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b3e      	cmp	r3, #62	; 0x3e
 80045de:	d91d      	bls.n	800461c <USB_ActivateEndpoint+0x2ac>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <USB_ActivateEndpoint+0x28a>
 80045f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045f6:	3b01      	subs	r3, #1
 80045f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004602:	b29b      	uxth	r3, r3
 8004604:	029b      	lsls	r3, r3, #10
 8004606:	b29b      	uxth	r3, r3
 8004608:	4313      	orrs	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004614:	b29a      	uxth	r2, r3
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	e026      	b.n	800466a <USB_ActivateEndpoint+0x2fa>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <USB_ActivateEndpoint+0x2ca>
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004632:	b29a      	uxth	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	e017      	b.n	800466a <USB_ActivateEndpoint+0x2fa>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	66bb      	str	r3, [r7, #104]	; 0x68
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <USB_ActivateEndpoint+0x2e4>
 800464e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004650:	3301      	adds	r3, #1
 8004652:	66bb      	str	r3, [r7, #104]	; 0x68
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29a      	uxth	r2, r3
 800465a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800465c:	b29b      	uxth	r3, r3
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	b29b      	uxth	r3, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	b29a      	uxth	r2, r3
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	847b      	strh	r3, [r7, #34]	; 0x22
 8004678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800467a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01b      	beq.n	80046ba <USB_ActivateEndpoint+0x34a>
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	843b      	strh	r3, [r7, #32]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	8c3b      	ldrh	r3, [r7, #32]
 80046a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d124      	bne.n	800470c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	83bb      	strh	r3, [r7, #28]
 80046da:	8bbb      	ldrh	r3, [r7, #28]
 80046dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046e0:	83bb      	strh	r3, [r7, #28]
 80046e2:	8bbb      	ldrh	r3, [r7, #28]
 80046e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046e8:	83bb      	strh	r3, [r7, #28]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	8bbb      	ldrh	r3, [r7, #28]
 80046f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]
 800470a:	e1ea      	b.n	8004ae2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	83fb      	strh	r3, [r7, #30]
 8004724:	8bfb      	ldrh	r3, [r7, #30]
 8004726:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800472a:	83fb      	strh	r3, [r7, #30]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	8bfb      	ldrh	r3, [r7, #30]
 8004738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004748:	b29b      	uxth	r3, r3
 800474a:	8013      	strh	r3, [r2, #0]
 800474c:	e1c9      	b.n	8004ae2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	78db      	ldrb	r3, [r3, #3]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d11e      	bne.n	8004794 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800477e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004786:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478e:	b29b      	uxth	r3, r3
 8004790:	8013      	strh	r3, [r2, #0]
 8004792:	e01d      	b.n	80047d0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e0:	4413      	add	r3, r2
 80047e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	011a      	lsls	r2, r3, #4
 80047ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	891b      	ldrh	r3, [r3, #8]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	657b      	str	r3, [r7, #84]	; 0x54
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004814:	4413      	add	r3, r2
 8004816:	657b      	str	r3, [r7, #84]	; 0x54
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004820:	4413      	add	r3, r2
 8004822:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004826:	653b      	str	r3, [r7, #80]	; 0x50
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	895b      	ldrh	r3, [r3, #10]
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	b29b      	uxth	r3, r3
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004836:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 8093 	bne.w	8004968 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004852:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01b      	beq.n	8004896 <USB_ActivateEndpoint+0x526>
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004874:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	441a      	add	r2, r3
 8004880:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	b29b      	uxth	r3, r3
 8004894:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80048a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01b      	beq.n	80048e6 <USB_ActivateEndpoint+0x576>
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80048fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004900:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004904:	873b      	strh	r3, [r7, #56]	; 0x38
 8004906:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004908:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800490c:	873b      	strh	r3, [r7, #56]	; 0x38
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
 8004966:	e0bc      	b.n	8004ae2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800497c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01d      	beq.n	80049c0 <USB_ActivateEndpoint+0x650>
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	b29b      	uxth	r3, r3
 80049be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80049d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01d      	beq.n	8004a18 <USB_ActivateEndpoint+0x6a8>
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	441a      	add	r2, r3
 8004a00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d024      	beq.n	8004a6a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a3e:	f083 0320 	eor.w	r3, r3, #32
 8004a42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8013      	strh	r3, [r2, #0]
 8004a68:	e01d      	b.n	8004aa6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3774      	adds	r7, #116	; 0x74
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b08d      	sub	sp, #52	; 0x34
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	7b1b      	ldrb	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 808e 	bne.w	8004c20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d044      	beq.n	8004b96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	81bb      	strh	r3, [r7, #12]
 8004b1a:	89bb      	ldrh	r3, [r7, #12]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <USB_DeactivateEndpoint+0x6c>
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	817b      	strh	r3, [r7, #10]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b72:	813b      	strh	r3, [r7, #8]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	893b      	ldrh	r3, [r7, #8]
 8004b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]
 8004b94:	e192      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	827b      	strh	r3, [r7, #18]
 8004ba4:	8a7b      	ldrh	r3, [r7, #18]
 8004ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01b      	beq.n	8004be6 <USB_DeactivateEndpoint+0xf6>
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	823b      	strh	r3, [r7, #16]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	441a      	add	r2, r3
 8004bd0:	8a3b      	ldrh	r3, [r7, #16]
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	81fb      	strh	r3, [r7, #14]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]
 8004c1e:	e14d      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 80a5 	bne.w	8004d74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	843b      	strh	r3, [r7, #32]
 8004c38:	8c3b      	ldrh	r3, [r7, #32]
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01b      	beq.n	8004c7a <USB_DeactivateEndpoint+0x18a>
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c58:	83fb      	strh	r3, [r7, #30]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	8bfb      	ldrh	r3, [r7, #30]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	83bb      	strh	r3, [r7, #28]
 8004c88:	8bbb      	ldrh	r3, [r7, #28]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <USB_DeactivateEndpoint+0x1da>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	837b      	strh	r3, [r7, #26]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce0:	833b      	strh	r3, [r7, #24]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	8b3b      	ldrh	r3, [r7, #24]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d18:	82fb      	strh	r3, [r7, #22]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d50:	82bb      	strh	r3, [r7, #20]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8abb      	ldrh	r3, [r7, #20]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
 8004d72:	e0a3      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <USB_DeactivateEndpoint+0x2d4>
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004dd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <USB_DeactivateEndpoint+0x324>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3734      	adds	r7, #52	; 0x34
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b0c2      	sub	sp, #264	; 0x108
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	6018      	str	r0, [r3, #0]
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f040 8545 	bne.w	800596c <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d905      	bls.n	8004efe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004efc:	e004      	b.n	8004f08 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004efe:	463b      	mov	r3, r7
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	7b1b      	ldrb	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d128      	bne.n	8004f64 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6959      	ldr	r1, [r3, #20]
 8004f18:	463b      	mov	r3, r7
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	88da      	ldrh	r2, [r3, #6]
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	1d38      	adds	r0, r7, #4
 8004f26:	6800      	ldr	r0, [r0, #0]
 8004f28:	f001 fa58 	bl	80063dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f2c:	1d3b      	adds	r3, r7, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	011a      	lsls	r2, r3, #4
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	f000 bcdb 	b.w	800591a <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	78db      	ldrb	r3, [r3, #3]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	f040 836f 	bne.w	800564e <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f70:	463b      	mov	r3, r7
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6a1a      	ldr	r2, [r3, #32]
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	f240 8313 	bls.w	80055a8 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd0:	1ad2      	subs	r2, r2, r3
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 816d 	beq.w	80052ce <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d16e      	bne.n	80050e2 <USB_EPStartXfer+0x21a>
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
 800500a:	1d3b      	adds	r3, r7, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005012:	b29b      	uxth	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	4413      	add	r3, r2
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
 800501c:	463b      	mov	r3, r7
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	011a      	lsls	r2, r3, #4
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	4413      	add	r3, r2
 8005028:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005038:	b29a      	uxth	r2, r3
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005042:	2b3e      	cmp	r3, #62	; 0x3e
 8005044:	d921      	bls.n	800508a <USB_EPStartXfer+0x1c2>
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <USB_EPStartXfer+0x19e>
 800505c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005060:	3b01      	subs	r3, #1
 8005062:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29a      	uxth	r2, r3
 800506c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005070:	b29b      	uxth	r3, r3
 8005072:	029b      	lsls	r3, r3, #10
 8005074:	b29b      	uxth	r3, r3
 8005076:	4313      	orrs	r3, r2
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005082:	b29a      	uxth	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e047      	b.n	800511a <USB_EPStartXfer+0x252>
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <USB_EPStartXfer+0x1e0>
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e038      	b.n	800511a <USB_EPStartXfer+0x252>
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <USB_EPStartXfer+0x200>
 80050be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050c2:	3301      	adds	r3, #1
 80050c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	029b      	lsls	r3, r3, #10
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	4313      	orrs	r3, r2
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	e01b      	b.n	800511a <USB_EPStartXfer+0x252>
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d116      	bne.n	800511a <USB_EPStartXfer+0x252>
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	4413      	add	r3, r2
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30
 80050fe:	463b      	mov	r3, r7
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	011a      	lsls	r2, r3, #4
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	4413      	add	r3, r2
 800510a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005114:	b29a      	uxth	r2, r3
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800511a:	463b      	mov	r3, r7
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	895b      	ldrh	r3, [r3, #10]
 8005120:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005124:	463b      	mov	r3, r7
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6959      	ldr	r1, [r3, #20]
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	b29b      	uxth	r3, r3
 8005130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005134:	1d38      	adds	r0, r7, #4
 8005136:	6800      	ldr	r0, [r0, #0]
 8005138:	f001 f950 	bl	80063dc <USB_WritePMA>
            ep->xfer_buff += len;
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005146:	441a      	add	r2, r3
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d909      	bls.n	8005172 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6a1a      	ldr	r2, [r3, #32]
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	621a      	str	r2, [r3, #32]
 8005170:	e008      	b.n	8005184 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005172:	463b      	mov	r3, r7
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d16e      	bne.n	800526c <USB_EPStartXfer+0x3a4>
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	4413      	add	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	463b      	mov	r3, r7
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	011a      	lsls	r2, r3, #4
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	4413      	add	r3, r2
 80051b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051cc:	2b3e      	cmp	r3, #62	; 0x3e
 80051ce:	d921      	bls.n	8005214 <USB_EPStartXfer+0x34c>
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <USB_EPStartXfer+0x328>
 80051e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ea:	3b01      	subs	r3, #1
 80051ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520c:	b29a      	uxth	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e04a      	b.n	80052aa <USB_EPStartXfer+0x3e2>
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <USB_EPStartXfer+0x36a>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522a:	b29a      	uxth	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e03b      	b.n	80052aa <USB_EPStartXfer+0x3e2>
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <USB_EPStartXfer+0x38a>
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524c:	3301      	adds	r3, #1
 800524e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29a      	uxth	r2, r3
 8005258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800525c:	b29b      	uxth	r3, r3
 800525e:	029b      	lsls	r3, r3, #10
 8005260:	b29b      	uxth	r3, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e01e      	b.n	80052aa <USB_EPStartXfer+0x3e2>
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	785b      	ldrb	r3, [r3, #1]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d119      	bne.n	80052aa <USB_EPStartXfer+0x3e2>
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005284:	b29b      	uxth	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	4413      	add	r3, r2
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	463b      	mov	r3, r7
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	4413      	add	r3, r2
 800529a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052aa:	463b      	mov	r3, r7
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	891b      	ldrh	r3, [r3, #8]
 80052b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6959      	ldr	r1, [r3, #20]
 80052ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052c4:	1d38      	adds	r0, r7, #4
 80052c6:	6800      	ldr	r0, [r0, #0]
 80052c8:	f001 f888 	bl	80063dc <USB_WritePMA>
 80052cc:	e325      	b.n	800591a <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d16e      	bne.n	80053b6 <USB_EPStartXfer+0x4ee>
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ec:	4413      	add	r3, r2
 80052ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f0:	463b      	mov	r3, r7
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	011a      	lsls	r2, r3, #4
 80052f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fa:	4413      	add	r3, r2
 80052fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005300:	647b      	str	r3, [r7, #68]	; 0x44
 8005302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800530c:	b29a      	uxth	r2, r3
 800530e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005316:	2b3e      	cmp	r3, #62	; 0x3e
 8005318:	d921      	bls.n	800535e <USB_EPStartXfer+0x496>
 800531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <USB_EPStartXfer+0x472>
 8005330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005334:	3b01      	subs	r3, #1
 8005336:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800533a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29a      	uxth	r2, r3
 8005340:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005344:	b29b      	uxth	r3, r3
 8005346:	029b      	lsls	r3, r3, #10
 8005348:	b29b      	uxth	r3, r3
 800534a:	4313      	orrs	r3, r2
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005356:	b29a      	uxth	r2, r3
 8005358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	e04a      	b.n	80053f4 <USB_EPStartXfer+0x52c>
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <USB_EPStartXfer+0x4b4>
 8005366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005374:	b29a      	uxth	r2, r3
 8005376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e03b      	b.n	80053f4 <USB_EPStartXfer+0x52c>
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <USB_EPStartXfer+0x4d4>
 8005392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005396:	3301      	adds	r3, #1
 8005398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800539c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4313      	orrs	r3, r2
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e01e      	b.n	80053f4 <USB_EPStartXfer+0x52c>
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d119      	bne.n	80053f4 <USB_EPStartXfer+0x52c>
 80053c0:	1d3b      	adds	r3, r7, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	653b      	str	r3, [r7, #80]	; 0x50
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d4:	4413      	add	r3, r2
 80053d6:	653b      	str	r3, [r7, #80]	; 0x50
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	011a      	lsls	r2, r3, #4
 80053e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e2:	4413      	add	r3, r2
 80053e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	891b      	ldrh	r3, [r3, #8]
 80053fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6959      	ldr	r1, [r3, #20]
 8005404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005408:	b29b      	uxth	r3, r3
 800540a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800540e:	1d38      	adds	r0, r7, #4
 8005410:	6800      	ldr	r0, [r0, #0]
 8005412:	f000 ffe3 	bl	80063dc <USB_WritePMA>
            ep->xfer_buff += len;
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005420:	441a      	add	r2, r3
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d909      	bls.n	800544c <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	621a      	str	r2, [r3, #32]
 800544a:	e008      	b.n	800545e <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800544c:	463b      	mov	r3, r7
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005456:	463b      	mov	r3, r7
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d16e      	bne.n	800554c <USB_EPStartXfer+0x684>
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	4413      	add	r3, r2
 8005484:	63bb      	str	r3, [r7, #56]	; 0x38
 8005486:	463b      	mov	r3, r7
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	4413      	add	r3, r2
 8005492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ac:	2b3e      	cmp	r3, #62	; 0x3e
 80054ae:	d921      	bls.n	80054f4 <USB_EPStartXfer+0x62c>
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <USB_EPStartXfer+0x608>
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ca:	3b01      	subs	r3, #1
 80054cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4313      	orrs	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e047      	b.n	8005584 <USB_EPStartXfer+0x6bc>
 80054f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <USB_EPStartXfer+0x64a>
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550a:	b29a      	uxth	r2, r3
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	801a      	strh	r2, [r3, #0]
 8005510:	e038      	b.n	8005584 <USB_EPStartXfer+0x6bc>
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <USB_EPStartXfer+0x66a>
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	3301      	adds	r3, #1
 800552e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	b29b      	uxth	r3, r3
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	b29b      	uxth	r3, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	b29a      	uxth	r2, r3
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	e01b      	b.n	8005584 <USB_EPStartXfer+0x6bc>
 800554c:	463b      	mov	r3, r7
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d116      	bne.n	8005584 <USB_EPStartXfer+0x6bc>
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005564:	4413      	add	r3, r2
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	011a      	lsls	r2, r3, #4
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	4413      	add	r3, r2
 8005574:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800557e:	b29a      	uxth	r2, r3
 8005580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005582:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005584:	463b      	mov	r3, r7
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	895b      	ldrh	r3, [r3, #10]
 800558a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800558e:	463b      	mov	r3, r7
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6959      	ldr	r1, [r3, #20]
 8005594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005598:	b29b      	uxth	r3, r3
 800559a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800559e:	1d38      	adds	r0, r7, #4
 80055a0:	6800      	ldr	r0, [r0, #0]
 80055a2:	f000 ff1b 	bl	80063dc <USB_WritePMA>
 80055a6:	e1b8      	b.n	800591a <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80055e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005604:	b29b      	uxth	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560a:	4413      	add	r3, r2
 800560c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560e:	463b      	mov	r3, r7
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	011a      	lsls	r2, r3, #4
 8005616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005618:	4413      	add	r3, r2
 800561a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800561e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005624:	b29a      	uxth	r2, r3
 8005626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005628:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	891b      	ldrh	r3, [r3, #8]
 8005630:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6959      	ldr	r1, [r3, #20]
 800563a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563e:	b29b      	uxth	r3, r3
 8005640:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005644:	1d38      	adds	r0, r7, #4
 8005646:	6800      	ldr	r0, [r0, #0]
 8005648:	f000 fec8 	bl	80063dc <USB_WritePMA>
 800564c:	e165      	b.n	800591a <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800564e:	463b      	mov	r3, r7
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6a1a      	ldr	r2, [r3, #32]
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005658:	1ad2      	subs	r2, r2, r3
 800565a:	463b      	mov	r3, r7
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80a5 	beq.w	80057c6 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	673b      	str	r3, [r7, #112]	; 0x70
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d16e      	bne.n	800576a <USB_EPStartXfer+0x8a2>
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	66bb      	str	r3, [r7, #104]	; 0x68
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a0:	4413      	add	r3, r2
 80056a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	011a      	lsls	r2, r3, #4
 80056ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056b4:	667b      	str	r3, [r7, #100]	; 0x64
 80056b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ca:	2b3e      	cmp	r3, #62	; 0x3e
 80056cc:	d921      	bls.n	8005712 <USB_EPStartXfer+0x84a>
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <USB_EPStartXfer+0x826>
 80056e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056e8:	3b01      	subs	r3, #1
 80056ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570a:	b29a      	uxth	r2, r3
 800570c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e047      	b.n	80057a2 <USB_EPStartXfer+0x8da>
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <USB_EPStartXfer+0x868>
 800571a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005728:	b29a      	uxth	r2, r3
 800572a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e038      	b.n	80057a2 <USB_EPStartXfer+0x8da>
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800573a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <USB_EPStartXfer+0x888>
 8005746:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800574a:	3301      	adds	r3, #1
 800574c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29a      	uxth	r2, r3
 8005756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800575a:	b29b      	uxth	r3, r3
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	b29b      	uxth	r3, r3
 8005760:	4313      	orrs	r3, r2
 8005762:	b29a      	uxth	r2, r3
 8005764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e01b      	b.n	80057a2 <USB_EPStartXfer+0x8da>
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d116      	bne.n	80057a2 <USB_EPStartXfer+0x8da>
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577c:	b29b      	uxth	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005782:	4413      	add	r3, r2
 8005784:	673b      	str	r3, [r7, #112]	; 0x70
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005790:	4413      	add	r3, r2
 8005792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	b29a      	uxth	r2, r3
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	895b      	ldrh	r3, [r3, #10]
 80057a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6959      	ldr	r1, [r3, #20]
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057bc:	1d38      	adds	r0, r7, #4
 80057be:	6800      	ldr	r0, [r0, #0]
 80057c0:	f000 fe0c 	bl	80063dc <USB_WritePMA>
 80057c4:	e0a9      	b.n	800591a <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d16e      	bne.n	80058ae <USB_EPStartXfer+0x9e6>
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057d6:	1d3b      	adds	r3, r7, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057e4:	4413      	add	r3, r2
 80057e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	011a      	lsls	r2, r3, #4
 80057f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057f2:	4413      	add	r3, r2
 80057f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80057fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005804:	b29a      	uxth	r2, r3
 8005806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580e:	2b3e      	cmp	r3, #62	; 0x3e
 8005810:	d921      	bls.n	8005856 <USB_EPStartXfer+0x98e>
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <USB_EPStartXfer+0x96a>
 8005828:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800582c:	3b01      	subs	r3, #1
 800582e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800583c:	b29b      	uxth	r3, r3
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	b29b      	uxth	r3, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584e:	b29a      	uxth	r2, r3
 8005850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e050      	b.n	80058f8 <USB_EPStartXfer+0xa30>
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <USB_EPStartXfer+0x9ac>
 800585e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586c:	b29a      	uxth	r2, r3
 800586e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e041      	b.n	80058f8 <USB_EPStartXfer+0xa30>
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <USB_EPStartXfer+0x9cc>
 800588a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800588e:	3301      	adds	r3, #1
 8005890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29a      	uxth	r2, r3
 800589a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800589e:	b29b      	uxth	r3, r3
 80058a0:	029b      	lsls	r3, r3, #10
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4313      	orrs	r3, r2
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	e024      	b.n	80058f8 <USB_EPStartXfer+0xa30>
 80058ae:	463b      	mov	r3, r7
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11f      	bne.n	80058f8 <USB_EPStartXfer+0xa30>
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058c0:	1d3b      	adds	r3, r7, #4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d0:	4413      	add	r3, r2
 80058d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	011a      	lsls	r2, r3, #4
 80058de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058e2:	4413      	add	r3, r2
 80058e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	891b      	ldrh	r3, [r3, #8]
 80058fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6959      	ldr	r1, [r3, #20]
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590c:	b29b      	uxth	r3, r3
 800590e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005912:	1d38      	adds	r0, r7, #4
 8005914:	6800      	ldr	r0, [r0, #0]
 8005916:	f000 fd61 	bl	80063dc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	817b      	strh	r3, [r7, #10]
 8005936:	897b      	ldrh	r3, [r7, #10]
 8005938:	f083 0310 	eor.w	r3, r3, #16
 800593c:	817b      	strh	r3, [r7, #10]
 800593e:	897b      	ldrh	r3, [r7, #10]
 8005940:	f083 0320 	eor.w	r3, r3, #32
 8005944:	817b      	strh	r3, [r7, #10]
 8005946:	1d3b      	adds	r3, r7, #4
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	441a      	add	r2, r3
 8005954:	897b      	ldrh	r3, [r7, #10]
 8005956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]
 800596a:	e3f3      	b.n	8006154 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	7b1b      	ldrb	r3, [r3, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 809c 	bne.w	8005ab0 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	463b      	mov	r3, r7
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	429a      	cmp	r2, r3
 8005986:	d90e      	bls.n	80059a6 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599c:	1ad2      	subs	r2, r2, r3
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	619a      	str	r2, [r3, #24]
 80059a4:	e008      	b.n	80059b8 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 80059a6:	463b      	mov	r3, r7
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2200      	movs	r2, #0
 80059b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d0:	4413      	add	r3, r2
 80059d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	011a      	lsls	r2, r3, #4
 80059de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059e2:	4413      	add	r3, r2
 80059e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a04:	2b3e      	cmp	r3, #62	; 0x3e
 8005a06:	d923      	bls.n	8005a50 <USB_EPStartXfer+0xb88>
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <USB_EPStartXfer+0xb60>
 8005a1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a22:	3b01      	subs	r3, #1
 8005a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e353      	b.n	80060f8 <USB_EPStartXfer+0x1230>
 8005a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10c      	bne.n	8005a72 <USB_EPStartXfer+0xbaa>
 8005a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	e342      	b.n	80060f8 <USB_EPStartXfer+0x1230>
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <USB_EPStartXfer+0xbca>
 8005a88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	029b      	lsls	r3, r3, #10
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e323      	b.n	80060f8 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	78db      	ldrb	r3, [r3, #3]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	f040 81a9 	bne.w	8005e0e <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 8082 	bne.w	8005bcc <USB_EPStartXfer+0xd04>
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af2:	4413      	add	r3, r2
 8005af4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b3e      	cmp	r3, #62	; 0x3e
 8005b18:	d925      	bls.n	8005b66 <USB_EPStartXfer+0xc9e>
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <USB_EPStartXfer+0xc76>
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	4313      	orrs	r3, r2
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	e058      	b.n	8005c18 <USB_EPStartXfer+0xd50>
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10c      	bne.n	8005b8a <USB_EPStartXfer+0xcc2>
 8005b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e046      	b.n	8005c18 <USB_EPStartXfer+0xd50>
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <USB_EPStartXfer+0xce6>
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e025      	b.n	8005c18 <USB_EPStartXfer+0xd50>
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d120      	bne.n	8005c18 <USB_EPStartXfer+0xd50>
 8005bd6:	1d3b      	adds	r3, r7, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bee:	4413      	add	r3, r2
 8005bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011a      	lsls	r2, r3, #4
 8005bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c00:	4413      	add	r3, r2
 8005c02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f040 8082 	bne.w	8005d30 <USB_EPStartXfer+0xe68>
 8005c2c:	1d3b      	adds	r3, r7, #4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c34:	1d3b      	adds	r3, r7, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c44:	4413      	add	r3, r2
 8005c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c56:	4413      	add	r3, r2
 8005c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7c:	d925      	bls.n	8005cca <USB_EPStartXfer+0xe02>
 8005c7e:	463b      	mov	r3, r7
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <USB_EPStartXfer+0xdda>
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	029b      	lsls	r3, r3, #10
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	e054      	b.n	8005d74 <USB_EPStartXfer+0xeac>
 8005cca:	463b      	mov	r3, r7
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10c      	bne.n	8005cee <USB_EPStartXfer+0xe26>
 8005cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	e042      	b.n	8005d74 <USB_EPStartXfer+0xeac>
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <USB_EPStartXfer+0xe4a>
 8005d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e021      	b.n	8005d74 <USB_EPStartXfer+0xeac>
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d11c      	bne.n	8005d74 <USB_EPStartXfer+0xeac>
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d72:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 81bc 	beq.w	80060f8 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d80:	1d3b      	adds	r3, r7, #4
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <USB_EPStartXfer+0xee4>
 8005da0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10d      	bne.n	8005dc8 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 819f 	bne.w	80060f8 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 8198 	bne.w	80060f8 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005dc8:	1d3b      	adds	r3, r7, #4
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	463b      	mov	r3, r7
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]
 8005e0c:	e174      	b.n	80060f8 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	78db      	ldrb	r3, [r3, #3]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	f040 816d 	bne.w	80060f4 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d90e      	bls.n	8005e48 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005e34:	463b      	mov	r3, r7
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	463b      	mov	r3, r7
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	619a      	str	r2, [r3, #24]
 8005e46:	e008      	b.n	8005e5a <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005e52:	463b      	mov	r3, r7
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d17b      	bne.n	8005f5c <USB_EPStartXfer+0x1094>
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e6c:	1d3b      	adds	r3, r7, #4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e82:	463b      	mov	r3, r7
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	011a      	lsls	r2, r3, #4
 8005e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e8e:	4413      	add	r3, r2
 8005e90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb2:	d923      	bls.n	8005efc <USB_EPStartXfer+0x1034>
 8005eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <USB_EPStartXfer+0x100c>
 8005eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	029b      	lsls	r3, r3, #10
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e054      	b.n	8005fa6 <USB_EPStartXfer+0x10de>
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10c      	bne.n	8005f1e <USB_EPStartXfer+0x1056>
 8005f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	e043      	b.n	8005fa6 <USB_EPStartXfer+0x10de>
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <USB_EPStartXfer+0x1076>
 8005f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e024      	b.n	8005fa6 <USB_EPStartXfer+0x10de>
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d11f      	bne.n	8005fa6 <USB_EPStartXfer+0x10de>
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f7e:	4413      	add	r3, r2
 8005f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	011a      	lsls	r2, r3, #4
 8005f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fae:	463b      	mov	r3, r7
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d17b      	bne.n	80060b0 <USB_EPStartXfer+0x11e8>
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	011a      	lsls	r2, r3, #4
 8005fde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006004:	2b3e      	cmp	r3, #62	; 0x3e
 8006006:	d923      	bls.n	8006050 <USB_EPStartXfer+0x1188>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <USB_EPStartXfer+0x1160>
 800601e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006022:	3b01      	subs	r3, #1
 8006024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006028:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006034:	b29b      	uxth	r3, r3
 8006036:	029b      	lsls	r3, r3, #10
 8006038:	b29b      	uxth	r3, r3
 800603a:	4313      	orrs	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e053      	b.n	80060f8 <USB_EPStartXfer+0x1230>
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <USB_EPStartXfer+0x11aa>
 8006058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006068:	b29a      	uxth	r2, r3
 800606a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e042      	b.n	80060f8 <USB_EPStartXfer+0x1230>
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <USB_EPStartXfer+0x11ca>
 8006088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800608c:	3301      	adds	r3, #1
 800608e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29a      	uxth	r2, r3
 800609a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e023      	b.n	80060f8 <USB_EPStartXfer+0x1230>
 80060b0:	463b      	mov	r3, r7
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d11e      	bne.n	80060f8 <USB_EPStartXfer+0x1230>
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060ca:	4413      	add	r3, r2
 80060cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	011a      	lsls	r2, r3, #4
 80060d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060dc:	4413      	add	r3, r2
 80060de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e001      	b.n	80060f8 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e02e      	b.n	8006156 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006116:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800611a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800611e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006122:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006126:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800612a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800612e:	1d3b      	adds	r3, r7, #4
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d020      	beq.n	80061b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006188:	81bb      	strh	r3, [r7, #12]
 800618a:	89bb      	ldrh	r3, [r7, #12]
 800618c:	f083 0310 	eor.w	r3, r3, #16
 8006190:	81bb      	strh	r3, [r7, #12]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	441a      	add	r2, r3
 800619c:	89bb      	ldrh	r3, [r7, #12]
 800619e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	8013      	strh	r3, [r2, #0]
 80061b2:	e01f      	b.n	80061f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	81fb      	strh	r3, [r7, #14]
 80061cc:	89fb      	ldrh	r3, [r7, #14]
 80061ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061d2:	81fb      	strh	r3, [r7, #14]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	441a      	add	r2, r3
 80061de:	89fb      	ldrh	r3, [r7, #14]
 80061e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	7b1b      	ldrb	r3, [r3, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f040 809d 	bne.w	800634e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d04c      	beq.n	80062b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	823b      	strh	r3, [r7, #16]
 800622a:	8a3b      	ldrh	r3, [r7, #16]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01b      	beq.n	800626c <USB_EPClearStall+0x6c>
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	81fb      	strh	r3, [r7, #14]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	441a      	add	r2, r3
 8006256:	89fb      	ldrh	r3, [r7, #14]
 8006258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006268:	b29b      	uxth	r3, r3
 800626a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	78db      	ldrb	r3, [r3, #3]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d06c      	beq.n	800634e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628a:	81bb      	strh	r3, [r7, #12]
 800628c:	89bb      	ldrh	r3, [r7, #12]
 800628e:	f083 0320 	eor.w	r3, r3, #32
 8006292:	81bb      	strh	r3, [r7, #12]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	89bb      	ldrh	r3, [r7, #12]
 80062a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	8013      	strh	r3, [r2, #0]
 80062b4:	e04b      	b.n	800634e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	82fb      	strh	r3, [r7, #22]
 80062c4:	8afb      	ldrh	r3, [r7, #22]
 80062c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01b      	beq.n	8006306 <USB_EPClearStall+0x106>
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e4:	82bb      	strh	r3, [r7, #20]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	8abb      	ldrh	r3, [r7, #20]
 80062f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006302:	b29b      	uxth	r3, r3
 8006304:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631c:	827b      	strh	r3, [r7, #18]
 800631e:	8a7b      	ldrh	r3, [r7, #18]
 8006320:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006324:	827b      	strh	r3, [r7, #18]
 8006326:	8a7b      	ldrh	r3, [r7, #18]
 8006328:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800632c:	827b      	strh	r3, [r7, #18]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	441a      	add	r2, r3
 8006338:	8a7b      	ldrh	r3, [r7, #18]
 800633a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634a:	b29b      	uxth	r3, r3
 800634c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2280      	movs	r2, #128	; 0x80
 8006370:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063dc:	b480      	push	{r7}
 80063de:	b08b      	sub	sp, #44	; 0x2c
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	80fb      	strh	r3, [r7, #6]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063f2:	88bb      	ldrh	r3, [r7, #4]
 80063f4:	3301      	adds	r3, #1
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	005a      	lsls	r2, r3, #1
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800640e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
 8006414:	e01e      	b.n	8006454 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	3301      	adds	r3, #1
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	021b      	lsls	r3, r3, #8
 8006424:	b21a      	sxth	r2, r3
 8006426:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800642a:	4313      	orrs	r3, r2
 800642c:	b21b      	sxth	r3, r3
 800642e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	8a7a      	ldrh	r2, [r7, #18]
 8006434:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	3302      	adds	r3, #2
 800643a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	3302      	adds	r3, #2
 8006440:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	3b01      	subs	r3, #1
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1dd      	bne.n	8006416 <USB_WritePMA+0x3a>
  }
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	372c      	adds	r7, #44	; 0x2c
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr

08006466 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006466:	b480      	push	{r7}
 8006468:	b08b      	sub	sp, #44	; 0x2c
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	4611      	mov	r1, r2
 8006472:	461a      	mov	r2, r3
 8006474:	460b      	mov	r3, r1
 8006476:	80fb      	strh	r3, [r7, #6]
 8006478:	4613      	mov	r3, r2
 800647a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800647c:	88bb      	ldrh	r3, [r7, #4]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	005a      	lsls	r2, r3, #1
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006498:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	e01b      	b.n	80064d8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	3302      	adds	r3, #2
 80064ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	3301      	adds	r3, #1
 80064ca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	3302      	adds	r3, #2
 80064d0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	3b01      	subs	r3, #1
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e0      	bne.n	80064a0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80064de:	88bb      	ldrh	r3, [r7, #4]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	701a      	strb	r2, [r3, #0]
  }
}
 80064fa:	bf00      	nop
 80064fc:	372c      	adds	r7, #44	; 0x2c
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	7c1b      	ldrb	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d115      	bne.n	8006548 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800651c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006520:	2202      	movs	r2, #2
 8006522:	2181      	movs	r1, #129	; 0x81
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f004 fce0 	bl	800aeea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006534:	2202      	movs	r2, #2
 8006536:	2101      	movs	r1, #1
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f004 fcd6 	bl	800aeea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006546:	e012      	b.n	800656e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	2202      	movs	r2, #2
 800654c:	2181      	movs	r1, #129	; 0x81
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f004 fccb 	bl	800aeea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800655a:	2340      	movs	r3, #64	; 0x40
 800655c:	2202      	movs	r2, #2
 800655e:	2101      	movs	r1, #1
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f004 fcc2 	bl	800aeea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800656e:	2308      	movs	r3, #8
 8006570:	2203      	movs	r2, #3
 8006572:	2182      	movs	r1, #130	; 0x82
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f004 fcb8 	bl	800aeea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006580:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006584:	f004 fdd8 	bl	800b138 <USBD_static_malloc>
 8006588:	4602      	mov	r2, r0
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800659a:	2301      	movs	r3, #1
 800659c:	73fb      	strb	r3, [r7, #15]
 800659e:	e026      	b.n	80065ee <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7c1b      	ldrb	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d4:	2101      	movs	r1, #1
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f004 fd78 	bl	800b0cc <USBD_LL_PrepareReceive>
 80065dc:	e007      	b.n	80065ee <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	2101      	movs	r1, #1
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f004 fd6f 	bl	800b0cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006608:	2181      	movs	r1, #129	; 0x81
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f004 fc93 	bl	800af36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006616:	2101      	movs	r1, #1
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f004 fc8c 	bl	800af36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006626:	2182      	movs	r1, #130	; 0x82
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f004 fc84 	bl	800af36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664e:	4618      	mov	r0, r3
 8006650:	f004 fd7e 	bl	800b150 <USBD_static_free>
    pdev->pClassData = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006676:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800668c:	2b00      	cmp	r3, #0
 800668e:	d039      	beq.n	8006704 <USBD_CDC_Setup+0x9e>
 8006690:	2b20      	cmp	r3, #32
 8006692:	d17f      	bne.n	8006794 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	88db      	ldrh	r3, [r3, #6]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d029      	beq.n	80066f0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	da11      	bge.n	80066ca <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80066b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	88d2      	ldrh	r2, [r2, #6]
 80066b8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80066ba:	6939      	ldr	r1, [r7, #16]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fa09 	bl	8007ada <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80066c8:	e06b      	b.n	80067a2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	785a      	ldrb	r2, [r3, #1]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	88db      	ldrh	r3, [r3, #6]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80066e0:	6939      	ldr	r1, [r7, #16]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	88db      	ldrh	r3, [r3, #6]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 fa24 	bl	8007b36 <USBD_CtlPrepareRx>
      break;
 80066ee:	e058      	b.n	80067a2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	7850      	ldrb	r0, [r2, #1]
 80066fc:	2200      	movs	r2, #0
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	4798      	blx	r3
      break;
 8006702:	e04e      	b.n	80067a2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b0b      	cmp	r3, #11
 800670a:	d02e      	beq.n	800676a <USBD_CDC_Setup+0x104>
 800670c:	2b0b      	cmp	r3, #11
 800670e:	dc38      	bgt.n	8006782 <USBD_CDC_Setup+0x11c>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <USBD_CDC_Setup+0xb4>
 8006714:	2b0a      	cmp	r3, #10
 8006716:	d014      	beq.n	8006742 <USBD_CDC_Setup+0xdc>
 8006718:	e033      	b.n	8006782 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006720:	2b03      	cmp	r3, #3
 8006722:	d107      	bne.n	8006734 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	2202      	movs	r2, #2
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f9d4 	bl	8007ada <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006732:	e02e      	b.n	8006792 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 f965 	bl	8007a06 <USBD_CtlError>
            ret = USBD_FAIL;
 800673c:	2302      	movs	r3, #2
 800673e:	75fb      	strb	r3, [r7, #23]
          break;
 8006740:	e027      	b.n	8006792 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006748:	2b03      	cmp	r3, #3
 800674a:	d107      	bne.n	800675c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800674c:	f107 030f 	add.w	r3, r7, #15
 8006750:	2201      	movs	r2, #1
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f9c0 	bl	8007ada <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800675a:	e01a      	b.n	8006792 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 f951 	bl	8007a06 <USBD_CtlError>
            ret = USBD_FAIL;
 8006764:	2302      	movs	r3, #2
 8006766:	75fb      	strb	r3, [r7, #23]
          break;
 8006768:	e013      	b.n	8006792 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	2b03      	cmp	r3, #3
 8006772:	d00d      	beq.n	8006790 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 f945 	bl	8007a06 <USBD_CtlError>
            ret = USBD_FAIL;
 800677c:	2302      	movs	r3, #2
 800677e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006780:	e006      	b.n	8006790 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f93e 	bl	8007a06 <USBD_CtlError>
          ret = USBD_FAIL;
 800678a:	2302      	movs	r3, #2
 800678c:	75fb      	strb	r3, [r7, #23]
          break;
 800678e:	e000      	b.n	8006792 <USBD_CDC_Setup+0x12c>
          break;
 8006790:	bf00      	nop
      }
      break;
 8006792:	e006      	b.n	80067a2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 f935 	bl	8007a06 <USBD_CtlError>
      ret = USBD_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	75fb      	strb	r3, [r7, #23]
      break;
 80067a0:	bf00      	nop
  }

  return ret;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d03a      	beq.n	8006848 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	331c      	adds	r3, #28
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d029      	beq.n	800683c <USBD_CDC_DataIn+0x90>
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	331c      	adds	r3, #28
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	78f9      	ldrb	r1, [r7, #3]
 80067fc:	68b8      	ldr	r0, [r7, #8]
 80067fe:	460b      	mov	r3, r1
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4403      	add	r3, r0
 8006808:	3338      	adds	r3, #56	; 0x38
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006810:	fb03 f301 	mul.w	r3, r3, r1
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d110      	bne.n	800683c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	331c      	adds	r3, #28
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800682e:	78f9      	ldrb	r1, [r7, #3]
 8006830:	2300      	movs	r3, #0
 8006832:	2200      	movs	r2, #0
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f004 fc26 	bl	800b086 <USBD_LL_Transmit>
 800683a:	e003      	b.n	8006844 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	460b      	mov	r3, r1
 800685c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f004 fc51 	bl	800b112 <USBD_LL_GetRxDataSize>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00d      	beq.n	800689e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006896:	4611      	mov	r1, r2
 8006898:	4798      	blx	r3

    return USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800689e:	2302      	movs	r3, #2
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d015      	beq.n	80068ee <USBD_CDC_EP0_RxReady+0x46>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068c8:	2bff      	cmp	r3, #255	; 0xff
 80068ca:	d010      	beq.n	80068ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80068da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80068e2:	b292      	uxth	r2, r2
 80068e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	22ff      	movs	r2, #255	; 0xff
 80068ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2243      	movs	r2, #67	; 0x43
 8006904:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006906:	4b03      	ldr	r3, [pc, #12]	; (8006914 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000094 	.word	0x20000094

08006918 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2243      	movs	r2, #67	; 0x43
 8006924:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006926:	4b03      	ldr	r3, [pc, #12]	; (8006934 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000050 	.word	0x20000050

08006938 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2243      	movs	r2, #67	; 0x43
 8006944:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006946:	4b03      	ldr	r3, [pc, #12]	; (8006954 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	200000d8 	.word	0x200000d8

08006958 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	220a      	movs	r2, #10
 8006964:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006966:	4b03      	ldr	r3, [pc, #12]	; (8006974 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	2000000c 	.word	0x2000000c

08006978 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006982:	2302      	movs	r3, #2
 8006984:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d01c      	beq.n	8006a50 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d115      	bne.n	8006a4c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2181      	movs	r1, #129	; 0x81
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f004 fb1f 	bl	800b086 <USBD_LL_Transmit>

      return USBD_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e002      	b.n	8006a52 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d017      	beq.n	8006aa4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	7c1b      	ldrb	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a86:	2101      	movs	r1, #1
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f004 fb1f 	bl	800b0cc <USBD_LL_PrepareReceive>
 8006a8e:	e007      	b.n	8006aa0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	2101      	movs	r1, #1
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f004 fb16 	bl	800b0cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e01a      	b.n	8006afc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	79fa      	ldrb	r2, [r7, #7]
 8006af2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f004 f983 	bl	800ae00 <USBD_LL_Init>

  return USBD_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]
 8006b24:	e001      	b.n	8006b2a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b26:	2302      	movs	r3, #2
 8006b28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f004 f9b8 	bl	800aeb4 <USBD_LL_Start>

  return USBD_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	4611      	mov	r1, r2
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3

  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fed8 	bl	800798e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bec:	461a      	mov	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d016      	beq.n	8006c30 <USBD_LL_SetupStage+0x6a>
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d81c      	bhi.n	8006c40 <USBD_LL_SetupStage+0x7a>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <USBD_LL_SetupStage+0x4a>
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d008      	beq.n	8006c20 <USBD_LL_SetupStage+0x5a>
 8006c0e:	e017      	b.n	8006c40 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9cb 	bl	8006fb4 <USBD_StdDevReq>
      break;
 8006c1e:	e01a      	b.n	8006c56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fa2d 	bl	8007088 <USBD_StdItfReq>
      break;
 8006c2e:	e012      	b.n	8006c56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa6d 	bl	8007118 <USBD_StdEPReq>
      break;
 8006c3e:	e00a      	b.n	8006c56 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f004 f990 	bl	800af74 <USBD_LL_StallEP>
      break;
 8006c54:	bf00      	nop
  }

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d14b      	bne.n	8006d0c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d134      	bne.n	8006cf0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d919      	bls.n	8006cc6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d203      	bcs.n	8006cb4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	e002      	b.n	8006cba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 ff57 	bl	8007b72 <USBD_CtlContinueRx>
 8006cc4:	e038      	b.n	8006d38 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d105      	bne.n	8006ce8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 ff54 	bl	8007b96 <USBD_CtlSendStatus>
 8006cee:	e023      	b.n	8006d38 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d11e      	bne.n	8006d38 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d02:	2100      	movs	r1, #0
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f004 f935 	bl	800af74 <USBD_LL_StallEP>
 8006d0a:	e015      	b.n	8006d38 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d108      	bne.n	8006d34 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	7afa      	ldrb	r2, [r7, #11]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	4798      	blx	r3
 8006d32:	e001      	b.n	8006d38 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e000      	b.n	8006d3a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b086      	sub	sp, #24
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d17f      	bne.n	8006e56 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3314      	adds	r3, #20
 8006d5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d15c      	bne.n	8006e20 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d915      	bls.n	8006d9e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fec1 	bl	8007b12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d90:	2300      	movs	r3, #0
 8006d92:	2200      	movs	r2, #0
 8006d94:	2100      	movs	r1, #0
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f004 f998 	bl	800b0cc <USBD_LL_PrepareReceive>
 8006d9c:	e04e      	b.n	8006e3c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	6912      	ldr	r2, [r2, #16]
 8006da6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006daa:	fb02 f201 	mul.w	r2, r2, r1
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d11c      	bne.n	8006dee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d316      	bcc.n	8006dee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d20f      	bcs.n	8006dee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fe9d 	bl	8007b12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de0:	2300      	movs	r3, #0
 8006de2:	2200      	movs	r2, #0
 8006de4:	2100      	movs	r1, #0
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f004 f970 	bl	800b0cc <USBD_LL_PrepareReceive>
 8006dec:	e026      	b.n	8006e3c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d105      	bne.n	8006e10 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e10:	2180      	movs	r1, #128	; 0x80
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f004 f8ae 	bl	800af74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fecf 	bl	8007bbc <USBD_CtlReceiveStatus>
 8006e1e:	e00d      	b.n	8006e3c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d004      	beq.n	8006e34 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d103      	bne.n	8006e3c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f004 f89c 	bl	800af74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d11d      	bne.n	8006e82 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fe81 	bl	8006b4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e54:	e015      	b.n	8006e82 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d108      	bne.n	8006e7e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	7afa      	ldrb	r2, [r7, #11]
 8006e76:	4611      	mov	r1, r2
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	4798      	blx	r3
 8006e7c:	e001      	b.n	8006e82 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e000      	b.n	8006e84 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	2200      	movs	r2, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f004 f825 	bl	800aeea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2240      	movs	r2, #64	; 0x40
 8006eac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eb0:	2340      	movs	r3, #64	; 0x40
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2180      	movs	r1, #128	; 0x80
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f004 f817 	bl	800aeea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2240      	movs	r2, #64	; 0x40
 8006ec6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6852      	ldr	r2, [r2, #4]
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	4611      	mov	r1, r2
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
  }

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2204      	movs	r2, #4
 8006f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr

08006f54 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d105      	bne.n	8006f72 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr

08006f7e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d10b      	bne.n	8006fa8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	d005      	beq.n	8006fda <USBD_StdDevReq+0x26>
 8006fce:	2b40      	cmp	r3, #64	; 0x40
 8006fd0:	d84f      	bhi.n	8007072 <USBD_StdDevReq+0xbe>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <USBD_StdDevReq+0x36>
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	d14b      	bne.n	8007072 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
      break;
 8006fe8:	e048      	b.n	800707c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b09      	cmp	r3, #9
 8006ff0:	d839      	bhi.n	8007066 <USBD_StdDevReq+0xb2>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USBD_StdDevReq+0x44>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007049 	.word	0x08007049
 8006ffc:	0800705d 	.word	0x0800705d
 8007000:	08007067 	.word	0x08007067
 8007004:	08007053 	.word	0x08007053
 8007008:	08007067 	.word	0x08007067
 800700c:	0800702b 	.word	0x0800702b
 8007010:	08007021 	.word	0x08007021
 8007014:	08007067 	.word	0x08007067
 8007018:	0800703f 	.word	0x0800703f
 800701c:	08007035 	.word	0x08007035
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f9dc 	bl	80073e0 <USBD_GetDescriptor>
          break;
 8007028:	e022      	b.n	8007070 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb3f 	bl	80076b0 <USBD_SetAddress>
          break;
 8007032:	e01d      	b.n	8007070 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fb7e 	bl	8007738 <USBD_SetConfig>
          break;
 800703c:	e018      	b.n	8007070 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc07 	bl	8007854 <USBD_GetConfig>
          break;
 8007046:	e013      	b.n	8007070 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fc37 	bl	80078be <USBD_GetStatus>
          break;
 8007050:	e00e      	b.n	8007070 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fc65 	bl	8007924 <USBD_SetFeature>
          break;
 800705a:	e009      	b.n	8007070 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fc74 	bl	800794c <USBD_ClrFeature>
          break;
 8007064:	e004      	b.n	8007070 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fccc 	bl	8007a06 <USBD_CtlError>
          break;
 800706e:	bf00      	nop
      }
      break;
 8007070:	e004      	b.n	800707c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fcc6 	bl	8007a06 <USBD_CtlError>
      break;
 800707a:	bf00      	nop
  }

  return ret;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop

08007088 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d005      	beq.n	80070ae <USBD_StdItfReq+0x26>
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d82e      	bhi.n	8007104 <USBD_StdItfReq+0x7c>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <USBD_StdItfReq+0x26>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d12a      	bne.n	8007104 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b4:	3b01      	subs	r3, #1
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d81d      	bhi.n	80070f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	889b      	ldrh	r3, [r3, #4]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d813      	bhi.n	80070ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	88db      	ldrh	r3, [r3, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d110      	bne.n	8007100 <USBD_StdItfReq+0x78>
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10d      	bne.n	8007100 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fd56 	bl	8007b96 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070ea:	e009      	b.n	8007100 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fc89 	bl	8007a06 <USBD_CtlError>
          break;
 80070f4:	e004      	b.n	8007100 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fc84 	bl	8007a06 <USBD_CtlError>
          break;
 80070fe:	e000      	b.n	8007102 <USBD_StdItfReq+0x7a>
          break;
 8007100:	bf00      	nop
      }
      break;
 8007102:	e004      	b.n	800710e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fc7d 	bl	8007a06 <USBD_CtlError>
      break;
 800710c:	bf00      	nop
  }

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	889b      	ldrh	r3, [r3, #4]
 800712a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007134:	2b40      	cmp	r3, #64	; 0x40
 8007136:	d007      	beq.n	8007148 <USBD_StdEPReq+0x30>
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	f200 8146 	bhi.w	80073ca <USBD_StdEPReq+0x2b2>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <USBD_StdEPReq+0x40>
 8007142:	2b20      	cmp	r3, #32
 8007144:	f040 8141 	bne.w	80073ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
      break;
 8007156:	e13d      	b.n	80073d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007160:	2b20      	cmp	r3, #32
 8007162:	d10a      	bne.n	800717a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	e12d      	b.n	80073d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b03      	cmp	r3, #3
 8007180:	d007      	beq.n	8007192 <USBD_StdEPReq+0x7a>
 8007182:	2b03      	cmp	r3, #3
 8007184:	f300 811b 	bgt.w	80073be <USBD_StdEPReq+0x2a6>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d072      	beq.n	8007272 <USBD_StdEPReq+0x15a>
 800718c:	2b01      	cmp	r3, #1
 800718e:	d03a      	beq.n	8007206 <USBD_StdEPReq+0xee>
 8007190:	e115      	b.n	80073be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	2b02      	cmp	r3, #2
 800719a:	d002      	beq.n	80071a2 <USBD_StdEPReq+0x8a>
 800719c:	2b03      	cmp	r3, #3
 800719e:	d015      	beq.n	80071cc <USBD_StdEPReq+0xb4>
 80071a0:	e02b      	b.n	80071fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <USBD_StdEPReq+0xaa>
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	2b80      	cmp	r3, #128	; 0x80
 80071ac:	d009      	beq.n	80071c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f003 fede 	bl	800af74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071b8:	2180      	movs	r1, #128	; 0x80
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f003 feda 	bl	800af74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c0:	e020      	b.n	8007204 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fc1e 	bl	8007a06 <USBD_CtlError>
              break;
 80071ca:	e01b      	b.n	8007204 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	885b      	ldrh	r3, [r3, #2]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10e      	bne.n	80071f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <USBD_StdEPReq+0xda>
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b80      	cmp	r3, #128	; 0x80
 80071de:	d008      	beq.n	80071f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	88db      	ldrh	r3, [r3, #6]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d104      	bne.n	80071f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f003 fec1 	bl	800af74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fccf 	bl	8007b96 <USBD_CtlSendStatus>

              break;
 80071f8:	e004      	b.n	8007204 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fc02 	bl	8007a06 <USBD_CtlError>
              break;
 8007202:	bf00      	nop
          }
          break;
 8007204:	e0e0      	b.n	80073c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	2b02      	cmp	r3, #2
 800720e:	d002      	beq.n	8007216 <USBD_StdEPReq+0xfe>
 8007210:	2b03      	cmp	r3, #3
 8007212:	d015      	beq.n	8007240 <USBD_StdEPReq+0x128>
 8007214:	e026      	b.n	8007264 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <USBD_StdEPReq+0x11e>
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b80      	cmp	r3, #128	; 0x80
 8007220:	d009      	beq.n	8007236 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f003 fea4 	bl	800af74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f003 fea0 	bl	800af74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007234:	e01c      	b.n	8007270 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fbe4 	bl	8007a06 <USBD_CtlError>
              break;
 800723e:	e017      	b.n	8007270 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	885b      	ldrh	r3, [r3, #2]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d112      	bne.n	800726e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f003 feab 	bl	800afb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fc9a 	bl	8007b96 <USBD_CtlSendStatus>
              }
              break;
 8007262:	e004      	b.n	800726e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fbcd 	bl	8007a06 <USBD_CtlError>
              break;
 800726c:	e000      	b.n	8007270 <USBD_StdEPReq+0x158>
              break;
 800726e:	bf00      	nop
          }
          break;
 8007270:	e0aa      	b.n	80073c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007278:	2b02      	cmp	r3, #2
 800727a:	d002      	beq.n	8007282 <USBD_StdEPReq+0x16a>
 800727c:	2b03      	cmp	r3, #3
 800727e:	d032      	beq.n	80072e6 <USBD_StdEPReq+0x1ce>
 8007280:	e097      	b.n	80073b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <USBD_StdEPReq+0x180>
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b80      	cmp	r3, #128	; 0x80
 800728c:	d004      	beq.n	8007298 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fbb8 	bl	8007a06 <USBD_CtlError>
                break;
 8007296:	e091      	b.n	80073bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	da0b      	bge.n	80072b8 <USBD_StdEPReq+0x1a0>
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	3310      	adds	r3, #16
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	3304      	adds	r3, #4
 80072b6:	e00b      	b.n	80072d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	3304      	adds	r3, #4
 80072d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2202      	movs	r2, #2
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fbfb 	bl	8007ada <USBD_CtlSendData>
              break;
 80072e4:	e06a      	b.n	80073bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da11      	bge.n	8007312 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	f003 020f 	and.w	r2, r3, #15
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	3318      	adds	r3, #24
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d117      	bne.n	8007338 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fb7b 	bl	8007a06 <USBD_CtlError>
                  break;
 8007310:	e054      	b.n	80073bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	f003 020f 	and.w	r2, r3, #15
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fb68 	bl	8007a06 <USBD_CtlError>
                  break;
 8007336:	e041      	b.n	80073bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da0b      	bge.n	8007358 <USBD_StdEPReq+0x240>
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	3310      	adds	r3, #16
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	4413      	add	r3, r2
 8007354:	3304      	adds	r3, #4
 8007356:	e00b      	b.n	8007370 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	3304      	adds	r3, #4
 8007370:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <USBD_StdEPReq+0x266>
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b80      	cmp	r3, #128	; 0x80
 800737c:	d103      	bne.n	8007386 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e00e      	b.n	80073a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f003 fe30 	bl	800aff0 <USBD_LL_IsStallEP>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2201      	movs	r2, #1
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e002      	b.n	80073a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2202      	movs	r2, #2
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fb95 	bl	8007ada <USBD_CtlSendData>
              break;
 80073b0:	e004      	b.n	80073bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fb26 	bl	8007a06 <USBD_CtlError>
              break;
 80073ba:	bf00      	nop
          }
          break;
 80073bc:	e004      	b.n	80073c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fb20 	bl	8007a06 <USBD_CtlError>
          break;
 80073c6:	bf00      	nop
      }
      break;
 80073c8:	e004      	b.n	80073d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fb1a 	bl	8007a06 <USBD_CtlError>
      break;
 80073d2:	bf00      	nop
  }

  return ret;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	885b      	ldrh	r3, [r3, #2]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	2b06      	cmp	r3, #6
 8007402:	f200 8128 	bhi.w	8007656 <USBD_GetDescriptor+0x276>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <USBD_GetDescriptor+0x2c>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007429 	.word	0x08007429
 8007410:	08007441 	.word	0x08007441
 8007414:	08007481 	.word	0x08007481
 8007418:	08007657 	.word	0x08007657
 800741c:	08007657 	.word	0x08007657
 8007420:	080075f7 	.word	0x080075f7
 8007424:	08007623 	.word	0x08007623
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7c12      	ldrb	r2, [r2, #16]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
      break;
 800743e:	e112      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7c1b      	ldrb	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10d      	bne.n	8007464 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f107 0208 	add.w	r2, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	2202      	movs	r2, #2
 8007460:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007462:	e100      	b.n	8007666 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f107 0208 	add.w	r2, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3301      	adds	r3, #1
 800747a:	2202      	movs	r2, #2
 800747c:	701a      	strb	r2, [r3, #0]
      break;
 800747e:	e0f2      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	885b      	ldrh	r3, [r3, #2]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b05      	cmp	r3, #5
 8007488:	f200 80ac 	bhi.w	80075e4 <USBD_GetDescriptor+0x204>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <USBD_GetDescriptor+0xb4>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074ad 	.word	0x080074ad
 8007498:	080074e1 	.word	0x080074e1
 800749c:	08007515 	.word	0x08007515
 80074a0:	08007549 	.word	0x08007549
 80074a4:	0800757d 	.word	0x0800757d
 80074a8:	080075b1 	.word	0x080075b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	7c12      	ldrb	r2, [r2, #16]
 80074c4:	f107 0108 	add.w	r1, r7, #8
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
 80074cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ce:	e091      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa97 	bl	8007a06 <USBD_CtlError>
            err++;
 80074d8:	7afb      	ldrb	r3, [r7, #11]
 80074da:	3301      	adds	r3, #1
 80074dc:	72fb      	strb	r3, [r7, #11]
          break;
 80074de:	e089      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007502:	e077      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa7d 	bl	8007a06 <USBD_CtlError>
            err++;
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	3301      	adds	r3, #1
 8007510:	72fb      	strb	r3, [r7, #11]
          break;
 8007512:	e06f      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007536:	e05d      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa63 	bl	8007a06 <USBD_CtlError>
            err++;
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	3301      	adds	r3, #1
 8007544:	72fb      	strb	r3, [r7, #11]
          break;
 8007546:	e055      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	7c12      	ldrb	r2, [r2, #16]
 8007560:	f107 0108 	add.w	r1, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756a:	e043      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa49 	bl	8007a06 <USBD_CtlError>
            err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
          break;
 800757a:	e03b      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7c12      	ldrb	r2, [r2, #16]
 8007594:	f107 0108 	add.w	r1, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759e:	e029      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa2f 	bl	8007a06 <USBD_CtlError>
            err++;
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	3301      	adds	r3, #1
 80075ac:	72fb      	strb	r3, [r7, #11]
          break;
 80075ae:	e021      	b.n	80075f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7c12      	ldrb	r2, [r2, #16]
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d2:	e00f      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa15 	bl	8007a06 <USBD_CtlError>
            err++;
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	3301      	adds	r3, #1
 80075e0:	72fb      	strb	r3, [r7, #11]
          break;
 80075e2:	e007      	b.n	80075f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa0d 	bl	8007a06 <USBD_CtlError>
          err++;
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	3301      	adds	r3, #1
 80075f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80075f2:	e038      	b.n	8007666 <USBD_GetDescriptor+0x286>
 80075f4:	e037      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7c1b      	ldrb	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	f107 0208 	add.w	r2, r7, #8
 800760a:	4610      	mov	r0, r2
 800760c:	4798      	blx	r3
 800760e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007610:	e029      	b.n	8007666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f9f6 	bl	8007a06 <USBD_CtlError>
        err++;
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	3301      	adds	r3, #1
 800761e:	72fb      	strb	r3, [r7, #11]
      break;
 8007620:	e021      	b.n	8007666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7c1b      	ldrb	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10d      	bne.n	8007646 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	f107 0208 	add.w	r2, r7, #8
 8007636:	4610      	mov	r0, r2
 8007638:	4798      	blx	r3
 800763a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	2207      	movs	r2, #7
 8007642:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007644:	e00f      	b.n	8007666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f9dc 	bl	8007a06 <USBD_CtlError>
        err++;
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	3301      	adds	r3, #1
 8007652:	72fb      	strb	r3, [r7, #11]
      break;
 8007654:	e007      	b.n	8007666 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f9d4 	bl	8007a06 <USBD_CtlError>
      err++;
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	3301      	adds	r3, #1
 8007662:	72fb      	strb	r3, [r7, #11]
      break;
 8007664:	bf00      	nop
  }

  if (err != 0U)
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d11c      	bne.n	80076a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800766c:	893b      	ldrh	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d011      	beq.n	8007696 <USBD_GetDescriptor+0x2b6>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	88db      	ldrh	r3, [r3, #6]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	88da      	ldrh	r2, [r3, #6]
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	4293      	cmp	r3, r2
 8007682:	bf28      	it	cs
 8007684:	4613      	movcs	r3, r2
 8007686:	b29b      	uxth	r3, r3
 8007688:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800768a:	893b      	ldrh	r3, [r7, #8]
 800768c:	461a      	mov	r2, r3
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa22 	bl	8007ada <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	88db      	ldrh	r3, [r3, #6]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa79 	bl	8007b96 <USBD_CtlSendStatus>
 80076a4:	e000      	b.n	80076a8 <USBD_GetDescriptor+0x2c8>
    return;
 80076a6:	bf00      	nop
    }
  }
}
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop

080076b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	889b      	ldrh	r3, [r3, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d130      	bne.n	8007724 <USBD_SetAddress+0x74>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	88db      	ldrh	r3, [r3, #6]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d12c      	bne.n	8007724 <USBD_SetAddress+0x74>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	2b7f      	cmp	r3, #127	; 0x7f
 80076d0:	d828      	bhi.n	8007724 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d104      	bne.n	80076f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f98b 	bl	8007a06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f0:	e01d      	b.n	800772e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7bfa      	ldrb	r2, [r7, #15]
 80076f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f003 fca2 	bl	800b048 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa46 	bl	8007b96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007718:	e009      	b.n	800772e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007722:	e004      	b.n	800772e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f96d 	bl	8007a06 <USBD_CtlError>
  }
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	b2da      	uxtb	r2, r3
 8007748:	4b41      	ldr	r3, [pc, #260]	; (8007850 <USBD_SetConfig+0x118>)
 800774a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800774c:	4b40      	ldr	r3, [pc, #256]	; (8007850 <USBD_SetConfig+0x118>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d904      	bls.n	800775e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f955 	bl	8007a06 <USBD_CtlError>
 800775c:	e075      	b.n	800784a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007764:	2b02      	cmp	r3, #2
 8007766:	d002      	beq.n	800776e <USBD_SetConfig+0x36>
 8007768:	2b03      	cmp	r3, #3
 800776a:	d023      	beq.n	80077b4 <USBD_SetConfig+0x7c>
 800776c:	e062      	b.n	8007834 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800776e:	4b38      	ldr	r3, [pc, #224]	; (8007850 <USBD_SetConfig+0x118>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01a      	beq.n	80077ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007776:	4b36      	ldr	r3, [pc, #216]	; (8007850 <USBD_SetConfig+0x118>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2203      	movs	r2, #3
 8007784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007788:	4b31      	ldr	r3, [pc, #196]	; (8007850 <USBD_SetConfig+0x118>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff f9e7 	bl	8006b62 <USBD_SetClassConfig>
 8007794:	4603      	mov	r3, r0
 8007796:	2b02      	cmp	r3, #2
 8007798:	d104      	bne.n	80077a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f932 	bl	8007a06 <USBD_CtlError>
            return;
 80077a2:	e052      	b.n	800784a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9f6 	bl	8007b96 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077aa:	e04e      	b.n	800784a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f9f2 	bl	8007b96 <USBD_CtlSendStatus>
        break;
 80077b2:	e04a      	b.n	800784a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80077b4:	4b26      	ldr	r3, [pc, #152]	; (8007850 <USBD_SetConfig+0x118>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d112      	bne.n	80077e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80077c4:	4b22      	ldr	r3, [pc, #136]	; (8007850 <USBD_SetConfig+0x118>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80077ce:	4b20      	ldr	r3, [pc, #128]	; (8007850 <USBD_SetConfig+0x118>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff f9e3 	bl	8006ba0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f9db 	bl	8007b96 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077e0:	e033      	b.n	800784a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80077e2:	4b1b      	ldr	r3, [pc, #108]	; (8007850 <USBD_SetConfig+0x118>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d01d      	beq.n	800782c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff f9d1 	bl	8006ba0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80077fe:	4b14      	ldr	r3, [pc, #80]	; (8007850 <USBD_SetConfig+0x118>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007808:	4b11      	ldr	r3, [pc, #68]	; (8007850 <USBD_SetConfig+0x118>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff f9a7 	bl	8006b62 <USBD_SetClassConfig>
 8007814:	4603      	mov	r3, r0
 8007816:	2b02      	cmp	r3, #2
 8007818:	d104      	bne.n	8007824 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f8f2 	bl	8007a06 <USBD_CtlError>
            return;
 8007822:	e012      	b.n	800784a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9b6 	bl	8007b96 <USBD_CtlSendStatus>
        break;
 800782a:	e00e      	b.n	800784a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f9b2 	bl	8007b96 <USBD_CtlSendStatus>
        break;
 8007832:	e00a      	b.n	800784a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8e5 	bl	8007a06 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800783c:	4b04      	ldr	r3, [pc, #16]	; (8007850 <USBD_SetConfig+0x118>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff f9ac 	bl	8006ba0 <USBD_ClrClassConfig>
        break;
 8007848:	bf00      	nop
    }
  }
}
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	200003f0 	.word	0x200003f0

08007854 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	88db      	ldrh	r3, [r3, #6]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d004      	beq.n	8007870 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f8cc 	bl	8007a06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800786e:	e022      	b.n	80078b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007876:	2b02      	cmp	r3, #2
 8007878:	dc02      	bgt.n	8007880 <USBD_GetConfig+0x2c>
 800787a:	2b00      	cmp	r3, #0
 800787c:	dc03      	bgt.n	8007886 <USBD_GetConfig+0x32>
 800787e:	e015      	b.n	80078ac <USBD_GetConfig+0x58>
 8007880:	2b03      	cmp	r3, #3
 8007882:	d00b      	beq.n	800789c <USBD_GetConfig+0x48>
 8007884:	e012      	b.n	80078ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3308      	adds	r3, #8
 8007890:	2201      	movs	r2, #1
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f920 	bl	8007ada <USBD_CtlSendData>
        break;
 800789a:	e00c      	b.n	80078b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3304      	adds	r3, #4
 80078a0:	2201      	movs	r2, #1
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f918 	bl	8007ada <USBD_CtlSendData>
        break;
 80078aa:	e004      	b.n	80078b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8a9 	bl	8007a06 <USBD_CtlError>
        break;
 80078b4:	bf00      	nop
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ce:	3b01      	subs	r3, #1
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d81e      	bhi.n	8007912 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	88db      	ldrh	r3, [r3, #6]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d004      	beq.n	80078e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f891 	bl	8007a06 <USBD_CtlError>
        break;
 80078e4:	e01a      	b.n	800791c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f043 0202 	orr.w	r2, r3, #2
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	330c      	adds	r3, #12
 8007906:	2202      	movs	r2, #2
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f8e5 	bl	8007ada <USBD_CtlSendData>
      break;
 8007910:	e004      	b.n	800791c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f876 	bl	8007a06 <USBD_CtlError>
      break;
 800791a:	bf00      	nop
  }
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d106      	bne.n	8007944 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f929 	bl	8007b96 <USBD_CtlSendStatus>
  }
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	3b01      	subs	r3, #1
 800795e:	2b02      	cmp	r3, #2
 8007960:	d80b      	bhi.n	800797a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	885b      	ldrh	r3, [r3, #2]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d10c      	bne.n	8007984 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f90f 	bl	8007b96 <USBD_CtlSendStatus>
      }
      break;
 8007978:	e004      	b.n	8007984 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f842 	bl	8007a06 <USBD_CtlError>
      break;
 8007982:	e000      	b.n	8007986 <USBD_ClrFeature+0x3a>
      break;
 8007984:	bf00      	nop
  }
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781a      	ldrb	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	785a      	ldrb	r2, [r3, #1]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	3302      	adds	r3, #2
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	3303      	adds	r3, #3
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4413      	add	r3, r2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3305      	adds	r3, #5
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4413      	add	r3, r2
 80079da:	b29a      	uxth	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	3306      	adds	r3, #6
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	3307      	adds	r3, #7
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	021b      	lsls	r3, r3, #8
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	4413      	add	r3, r2
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	80da      	strh	r2, [r3, #6]

}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr

08007a06 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a10:	2180      	movs	r1, #128	; 0x80
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f003 faae 	bl	800af74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a18:	2100      	movs	r1, #0
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f003 faaa 	bl	800af74 <USBD_LL_StallEP>
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d032      	beq.n	8007aa4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 f834 	bl	8007aac <USBD_GetLen>
 8007a44:	4603      	mov	r3, r0
 8007a46:	3301      	adds	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	75fa      	strb	r2, [r7, #23]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	75fa      	strb	r2, [r7, #23]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4413      	add	r3, r2
 8007a70:	2203      	movs	r2, #3
 8007a72:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007a74:	e012      	b.n	8007a9c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	60fa      	str	r2, [r7, #12]
 8007a7c:	7dfa      	ldrb	r2, [r7, #23]
 8007a7e:	1c51      	adds	r1, r2, #1
 8007a80:	75f9      	strb	r1, [r7, #23]
 8007a82:	4611      	mov	r1, r2
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	440a      	add	r2, r1
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	75fa      	strb	r2, [r7, #23]
 8007a92:	461a      	mov	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	4413      	add	r3, r2
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e8      	bne.n	8007a76 <USBD_GetString+0x4e>
    }
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ab8:	e005      	b.n	8007ac6 <USBD_GetLen+0x1a>
  {
    len++;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	3301      	adds	r3, #1
 8007abe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f5      	bne.n	8007aba <USBD_GetLen+0xe>
  }

  return len;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr

08007ada <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	2100      	movs	r1, #0
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f003 fabf 	bl	800b086 <USBD_LL_Transmit>

  return USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	2100      	movs	r1, #0
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f003 faad 	bl	800b086 <USBD_LL_Transmit>

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	4613      	mov	r3, r2
 8007b42:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2203      	movs	r2, #3
 8007b48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b4c:	88fa      	ldrh	r2, [r7, #6]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007b54:	88fa      	ldrh	r2, [r7, #6]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b5c:	88fb      	ldrh	r3, [r7, #6]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f003 fab2 	bl	800b0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f003 faa0 	bl	800b0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f003 fa6a 	bl	800b086 <USBD_LL_Transmit>

  return USBD_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f003 fa7a 	bl	800b0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	4603      	mov	r3, r0
 8007bea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bf4:	2b84      	cmp	r3, #132	; 0x84
 8007bf6:	d005      	beq.n	8007c04 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007bf8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	3303      	adds	r3, #3
 8007c02:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c04:	68fb      	ldr	r3, [r7, #12]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr

08007c10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c14:	f001 f872 	bl	8008cfc <vTaskStartScheduler>
  
  return osOK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c20:	b089      	sub	sp, #36	; 0x24
 8007c22:	af04      	add	r7, sp, #16
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d020      	beq.n	8007c72 <osThreadCreate+0x54>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01c      	beq.n	8007c72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685c      	ldr	r4, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681d      	ldr	r5, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691e      	ldr	r6, [r3, #16]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff ffc9 	bl	8007be2 <makeFreeRtosPriority>
 8007c50:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c5a:	9202      	str	r2, [sp, #8]
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	9100      	str	r1, [sp, #0]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	4632      	mov	r2, r6
 8007c64:	4629      	mov	r1, r5
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fe89 	bl	800897e <xTaskCreateStatic>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e01c      	b.n	8007cac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685c      	ldr	r4, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c7e:	b29e      	uxth	r6, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff ffab 	bl	8007be2 <makeFreeRtosPriority>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	f107 030c 	add.w	r3, r7, #12
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	9200      	str	r2, [sp, #0]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	4632      	mov	r2, r6
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 feca 	bl	8008a36 <xTaskCreate>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d001      	beq.n	8007cac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e000      	b.n	8007cae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007cac:	68fb      	ldr	r3, [r7, #12]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <osDelay+0x16>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	e000      	b.n	8007cce <osDelay+0x18>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 ffe0 	bl	8008c94 <vTaskDelay>
  
  return osOK;
 8007cd4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f103 0208 	add.w	r2, r3, #8
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f103 0208 	add.w	r2, r3, #8
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f103 0208 	add.w	r2, r3, #8
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr

08007d34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d103      	bne.n	8007d9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e00c      	b.n	8007db4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	e002      	b.n	8007da8 <vListInsert+0x2e>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d2f6      	bcs.n	8007da2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr

08007dea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6892      	ldr	r2, [r2, #8]
 8007e00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6852      	ldr	r2, [r2, #4]
 8007e0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d103      	bne.n	8007e1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	1e5a      	subs	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e66:	f001 fe81 	bl	8009b6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	441a      	add	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	3b01      	subs	r3, #1
 8007e98:	68f9      	ldr	r1, [r7, #12]
 8007e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	22ff      	movs	r2, #255	; 0xff
 8007eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	22ff      	movs	r2, #255	; 0xff
 8007eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d114      	bne.n	8007ee6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01a      	beq.n	8007efa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3310      	adds	r3, #16
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 f95d 	bl	8009188 <xTaskRemoveFromEventList>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d012      	beq.n	8007efa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <xQueueGenericReset+0xcc>)
 8007ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	e009      	b.n	8007efa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3310      	adds	r3, #16
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff fef7 	bl	8007cde <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3324      	adds	r3, #36	; 0x24
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff fef2 	bl	8007cde <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007efa:	f001 fe67 	bl	8009bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007efe:	2301      	movs	r3, #1
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08a      	sub	sp, #40	; 0x28
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	613b      	str	r3, [r7, #16]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d102      	bne.n	8007f42 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e004      	b.n	8007f4c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	fb02 f303 	mul.w	r3, r2, r3
 8007f4a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	3348      	adds	r3, #72	; 0x48
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 ff0b 	bl	8009d6c <pvPortMalloc>
 8007f56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00f      	beq.n	8007f7e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	3348      	adds	r3, #72	; 0x48
 8007f62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f6c:	79fa      	ldrb	r2, [r7, #7]
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	4613      	mov	r3, r2
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f805 	bl	8007f88 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d103      	bne.n	8007fa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	e002      	b.n	8007faa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	69b8      	ldr	r0, [r7, #24]
 8007fba:	f7ff ff3f 	bl	8007e3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fbe:	bf00      	nop
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2100      	movs	r1, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f81d 	bl	800802c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	4603      	mov	r3, r0
 8008002:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	461a      	mov	r2, r3
 8008010:	6939      	ldr	r1, [r7, #16]
 8008012:	6978      	ldr	r0, [r7, #20]
 8008014:	f7ff ff7a 	bl	8007f0c <xQueueGenericCreate>
 8008018:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff ffd3 	bl	8007fc6 <prvInitialiseMutex>

		return pxNewQueue;
 8008020:	68fb      	ldr	r3, [r7, #12]
	}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08e      	sub	sp, #56	; 0x38
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800803a:	2300      	movs	r3, #0
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <xQueueGenericSend+0x32>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <xQueueGenericSend+0x40>
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <xQueueGenericSend+0x44>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <xQueueGenericSend+0x46>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <xQueueGenericSend+0x60>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d103      	bne.n	800809a <xQueueGenericSend+0x6e>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <xQueueGenericSend+0x72>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueGenericSend+0x74>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueGenericSend+0x8e>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ba:	f001 fa25 	bl	8009508 <xTaskGetSchedulerState>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <xQueueGenericSend+0x9e>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <xQueueGenericSend+0xa2>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <xQueueGenericSend+0xa4>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xQueueGenericSend+0xbe>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	61fb      	str	r3, [r7, #28]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ea:	f001 fd3f 	bl	8009b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d302      	bcc.n	8008100 <xQueueGenericSend+0xd4>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d129      	bne.n	8008154 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008106:	f000 fb2a 	bl	800875e <prvCopyDataToQueue>
 800810a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	3324      	adds	r3, #36	; 0x24
 8008118:	4618      	mov	r0, r3
 800811a:	f001 f835 	bl	8009188 <xTaskRemoveFromEventList>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d013      	beq.n	800814c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008124:	4b3f      	ldr	r3, [pc, #252]	; (8008224 <xQueueGenericSend+0x1f8>)
 8008126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	e00a      	b.n	800814c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800813c:	4b39      	ldr	r3, [pc, #228]	; (8008224 <xQueueGenericSend+0x1f8>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800814c:	f001 fd3e 	bl	8009bcc <vPortExitCritical>
				return pdPASS;
 8008150:	2301      	movs	r3, #1
 8008152:	e063      	b.n	800821c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800815a:	f001 fd37 	bl	8009bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800815e:	2300      	movs	r3, #0
 8008160:	e05c      	b.n	800821c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	2b00      	cmp	r3, #0
 8008166:	d106      	bne.n	8008176 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008168:	f107 0314 	add.w	r3, r7, #20
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f86d 	bl	800924c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008172:	2301      	movs	r3, #1
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008176:	f001 fd29 	bl	8009bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800817a:	f000 fe1f 	bl	8008dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800817e:	f001 fcf5 	bl	8009b6c <vPortEnterCritical>
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008188:	b25b      	sxtb	r3, r3
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818e:	d103      	bne.n	8008198 <xQueueGenericSend+0x16c>
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800819e:	b25b      	sxtb	r3, r3
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d103      	bne.n	80081ae <xQueueGenericSend+0x182>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ae:	f001 fd0d 	bl	8009bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081b2:	1d3a      	adds	r2, r7, #4
 80081b4:	f107 0314 	add.w	r3, r7, #20
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 f85c 	bl	8009278 <xTaskCheckForTimeOut>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d124      	bne.n	8008210 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c8:	f000 fbc1 	bl	800894e <prvIsQueueFull>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d018      	beq.n	8008204 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	3310      	adds	r3, #16
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 ffb0 	bl	8009140 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e2:	f000 fb4c 	bl	800887e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081e6:	f000 fdf7 	bl	8008dd8 <xTaskResumeAll>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f af7c 	bne.w	80080ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081f2:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <xQueueGenericSend+0x1f8>)
 80081f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	e772      	b.n	80080ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008206:	f000 fb3a 	bl	800887e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800820a:	f000 fde5 	bl	8008dd8 <xTaskResumeAll>
 800820e:	e76c      	b.n	80080ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008212:	f000 fb34 	bl	800887e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008216:	f000 fddf 	bl	8008dd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800821a:	2300      	movs	r3, #0
		}
	}
}
 800821c:	4618      	mov	r0, r3
 800821e:	3738      	adds	r7, #56	; 0x38
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	; 0x38
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <xQueueGenericSendFromISR+0x3c>
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <xQueueGenericSendFromISR+0x40>
 8008264:	2301      	movs	r3, #1
 8008266:	e000      	b.n	800826a <xQueueGenericSendFromISR+0x42>
 8008268:	2300      	movs	r3, #0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	623b      	str	r3, [r7, #32]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b02      	cmp	r3, #2
 8008288:	d103      	bne.n	8008292 <xQueueGenericSendFromISR+0x6a>
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <xQueueGenericSendFromISR+0x6e>
 8008292:	2301      	movs	r3, #1
 8008294:	e000      	b.n	8008298 <xQueueGenericSendFromISR+0x70>
 8008296:	2300      	movs	r3, #0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	61fb      	str	r3, [r7, #28]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082b2:	f001 fd1d 	bl	8009cf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082b6:	f3ef 8211 	mrs	r2, BASEPRI
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	61ba      	str	r2, [r7, #24]
 80082cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082da:	429a      	cmp	r2, r3
 80082dc:	d302      	bcc.n	80082e4 <xQueueGenericSendFromISR+0xbc>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d12c      	bne.n	800833e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082f4:	f000 fa33 	bl	800875e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d112      	bne.n	8008328 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d016      	beq.n	8008338 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	3324      	adds	r3, #36	; 0x24
 800830e:	4618      	mov	r0, r3
 8008310:	f000 ff3a 	bl	8009188 <xTaskRemoveFromEventList>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00e      	beq.n	8008338 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e007      	b.n	8008338 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800832c:	3301      	adds	r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	b25a      	sxtb	r2, r3
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008338:	2301      	movs	r3, #1
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800833c:	e001      	b.n	8008342 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800833e:	2300      	movs	r3, #0
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800834c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008350:	4618      	mov	r0, r3
 8008352:	3738      	adds	r7, #56	; 0x38
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08c      	sub	sp, #48	; 0x30
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <xQueueReceive+0x30>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	623b      	str	r3, [r7, #32]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <xQueueReceive+0x3e>
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <xQueueReceive+0x42>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <xQueueReceive+0x44>
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xQueueReceive+0x5e>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	61fb      	str	r3, [r7, #28]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083b6:	f001 f8a7 	bl	8009508 <xTaskGetSchedulerState>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <xQueueReceive+0x6e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <xQueueReceive+0x72>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <xQueueReceive+0x74>
 80083ca:	2300      	movs	r3, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xQueueReceive+0x8e>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	61bb      	str	r3, [r7, #24]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80083e6:	f001 fbc1 	bl	8009b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01f      	beq.n	8008436 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fa:	f000 fa1a 	bl	8008832 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	1e5a      	subs	r2, r3, #1
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00f      	beq.n	800842e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	3310      	adds	r3, #16
 8008412:	4618      	mov	r0, r3
 8008414:	f000 feb8 	bl	8009188 <xTaskRemoveFromEventList>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800841e:	4b3d      	ldr	r3, [pc, #244]	; (8008514 <xQueueReceive+0x1bc>)
 8008420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800842e:	f001 fbcd 	bl	8009bcc <vPortExitCritical>
				return pdPASS;
 8008432:	2301      	movs	r3, #1
 8008434:	e069      	b.n	800850a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d103      	bne.n	8008444 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800843c:	f001 fbc6 	bl	8009bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008440:	2300      	movs	r3, #0
 8008442:	e062      	b.n	800850a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800844a:	f107 0310 	add.w	r3, r7, #16
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fefc 	bl	800924c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008458:	f001 fbb8 	bl	8009bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800845c:	f000 fcae 	bl	8008dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008460:	f001 fb84 	bl	8009b6c <vPortEnterCritical>
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846a:	b25b      	sxtb	r3, r3
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d103      	bne.n	800847a <xQueueReceive+0x122>
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008480:	b25b      	sxtb	r3, r3
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d103      	bne.n	8008490 <xQueueReceive+0x138>
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008490:	f001 fb9c 	bl	8009bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008494:	1d3a      	adds	r2, r7, #4
 8008496:	f107 0310 	add.w	r3, r7, #16
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f000 feeb 	bl	8009278 <xTaskCheckForTimeOut>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d123      	bne.n	80084f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084aa:	f000 fa3a 	bl	8008922 <prvIsQueueEmpty>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d017      	beq.n	80084e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	3324      	adds	r3, #36	; 0x24
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fe3f 	bl	8009140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c4:	f000 f9db 	bl	800887e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084c8:	f000 fc86 	bl	8008dd8 <xTaskResumeAll>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d189      	bne.n	80083e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <xQueueReceive+0x1bc>)
 80084d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	e780      	b.n	80083e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e6:	f000 f9ca 	bl	800887e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084ea:	f000 fc75 	bl	8008dd8 <xTaskResumeAll>
 80084ee:	e77a      	b.n	80083e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084f2:	f000 f9c4 	bl	800887e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084f6:	f000 fc6f 	bl	8008dd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084fc:	f000 fa11 	bl	8008922 <prvIsQueueEmpty>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	f43f af6f 	beq.w	80083e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800850a:	4618      	mov	r0, r3
 800850c:	3730      	adds	r7, #48	; 0x30
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08e      	sub	sp, #56	; 0x38
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008522:	2300      	movs	r3, #0
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800852a:	2300      	movs	r3, #0
 800852c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	623b      	str	r3, [r7, #32]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	61fb      	str	r3, [r7, #28]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008568:	f000 ffce 	bl	8009508 <xTaskGetSchedulerState>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <xQueueSemaphoreTake+0x60>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <xQueueSemaphoreTake+0x64>
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <xQueueSemaphoreTake+0x66>
 800857c:	2300      	movs	r3, #0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	61bb      	str	r3, [r7, #24]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008598:	f001 fae8 	bl	8009b6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d024      	beq.n	80085f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	1e5a      	subs	r2, r3, #1
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80085b8:	f001 f970 	bl	800989c <pvTaskIncrementMutexHeldCount>
 80085bc:	4602      	mov	r2, r0
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00f      	beq.n	80085ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	3310      	adds	r3, #16
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fdda 	bl	8009188 <xTaskRemoveFromEventList>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085da:	4b54      	ldr	r3, [pc, #336]	; (800872c <xQueueSemaphoreTake+0x214>)
 80085dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085ea:	f001 faef 	bl	8009bcc <vPortExitCritical>
				return pdPASS;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e097      	b.n	8008722 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d111      	bne.n	800861c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	617b      	str	r3, [r7, #20]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008614:	f001 fada 	bl	8009bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008618:	2300      	movs	r3, #0
 800861a:	e082      	b.n	8008722 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008622:	f107 030c 	add.w	r3, r7, #12
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fe10 	bl	800924c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008630:	f001 facc 	bl	8009bcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008634:	f000 fbc2 	bl	8008dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008638:	f001 fa98 	bl	8009b6c <vPortEnterCritical>
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d103      	bne.n	8008652 <xQueueSemaphoreTake+0x13a>
 800864a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008658:	b25b      	sxtb	r3, r3
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d103      	bne.n	8008668 <xQueueSemaphoreTake+0x150>
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008668:	f001 fab0 	bl	8009bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800866c:	463a      	mov	r2, r7
 800866e:	f107 030c 	add.w	r3, r7, #12
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fdff 	bl	8009278 <xTaskCheckForTimeOut>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d132      	bne.n	80086e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008682:	f000 f94e 	bl	8008922 <prvIsQueueEmpty>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d026      	beq.n	80086da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008694:	f001 fa6a 	bl	8009b6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 ff51 	bl	8009544 <xTaskPriorityInherit>
 80086a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80086a4:	f001 fa92 	bl	8009bcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	3324      	adds	r3, #36	; 0x24
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fd45 	bl	8009140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086b8:	f000 f8e1 	bl	800887e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086bc:	f000 fb8c 	bl	8008dd8 <xTaskResumeAll>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f47f af68 	bne.w	8008598 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80086c8:	4b18      	ldr	r3, [pc, #96]	; (800872c <xQueueSemaphoreTake+0x214>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	e75e      	b.n	8008598 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086dc:	f000 f8cf 	bl	800887e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086e0:	f000 fb7a 	bl	8008dd8 <xTaskResumeAll>
 80086e4:	e758      	b.n	8008598 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086e8:	f000 f8c9 	bl	800887e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086ec:	f000 fb74 	bl	8008dd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086f2:	f000 f916 	bl	8008922 <prvIsQueueEmpty>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f43f af4d 	beq.w	8008598 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00d      	beq.n	8008720 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008704:	f001 fa32 	bl	8009b6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800870a:	f000 f811 	bl	8008730 <prvGetDisinheritPriorityAfterTimeout>
 800870e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008716:	4618      	mov	r0, r3
 8008718:	f001 f820 	bl	800975c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800871c:	f001 fa56 	bl	8009bcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008722:	4618      	mov	r0, r3
 8008724:	3738      	adds	r7, #56	; 0x38
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d006      	beq.n	800874e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f1c3 0307 	rsb	r3, r3, #7
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	e001      	b.n	8008752 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008752:	68fb      	ldr	r3, [r7, #12]
	}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b086      	sub	sp, #24
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10d      	bne.n	8008798 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d14d      	bne.n	8008820 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 ff61 	bl	8009650 <xTaskPriorityDisinherit>
 800878e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	605a      	str	r2, [r3, #4]
 8008796:	e043      	b.n	8008820 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d119      	bne.n	80087d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6898      	ldr	r0, [r3, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	461a      	mov	r2, r3
 80087a8:	68b9      	ldr	r1, [r7, #8]
 80087aa:	f002 fd35 	bl	800b218 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	441a      	add	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d32b      	bcc.n	8008820 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	609a      	str	r2, [r3, #8]
 80087d0:	e026      	b.n	8008820 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68d8      	ldr	r0, [r3, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	461a      	mov	r2, r3
 80087dc:	68b9      	ldr	r1, [r7, #8]
 80087de:	f002 fd1b 	bl	800b218 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	425b      	negs	r3, r3
 80087ec:	441a      	add	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d207      	bcs.n	800880e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	425b      	negs	r3, r3
 8008808:	441a      	add	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d105      	bne.n	8008820 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	3b01      	subs	r3, #1
 800881e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008828:	697b      	ldr	r3, [r7, #20]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d018      	beq.n	8008876 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	429a      	cmp	r2, r3
 800885c:	d303      	bcc.n	8008866 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68d9      	ldr	r1, [r3, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	461a      	mov	r2, r3
 8008870:	6838      	ldr	r0, [r7, #0]
 8008872:	f002 fcd1 	bl	800b218 <memcpy>
	}
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008886:	f001 f971 	bl	8009b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008890:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008892:	e011      	b.n	80088b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	d012      	beq.n	80088c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3324      	adds	r3, #36	; 0x24
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 fc71 	bl	8009188 <xTaskRemoveFromEventList>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088ac:	f000 fd46 	bl	800933c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dce9      	bgt.n	8008894 <prvUnlockQueue+0x16>
 80088c0:	e000      	b.n	80088c4 <prvUnlockQueue+0x46>
					break;
 80088c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	22ff      	movs	r2, #255	; 0xff
 80088c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088cc:	f001 f97e 	bl	8009bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088d0:	f001 f94c 	bl	8009b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088dc:	e011      	b.n	8008902 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d012      	beq.n	800890c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3310      	adds	r3, #16
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fc4c 	bl	8009188 <xTaskRemoveFromEventList>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088f6:	f000 fd21 	bl	800933c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008906:	2b00      	cmp	r3, #0
 8008908:	dce9      	bgt.n	80088de <prvUnlockQueue+0x60>
 800890a:	e000      	b.n	800890e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800890c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	22ff      	movs	r2, #255	; 0xff
 8008912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008916:	f001 f959 	bl	8009bcc <vPortExitCritical>
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800892a:	f001 f91f 	bl	8009b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008936:	2301      	movs	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	e001      	b.n	8008940 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008940:	f001 f944 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008944:	68fb      	ldr	r3, [r7, #12]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008956:	f001 f909 	bl	8009b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008962:	429a      	cmp	r2, r3
 8008964:	d102      	bne.n	800896c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008966:	2301      	movs	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	e001      	b.n	8008970 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008970:	f001 f92c 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800897e:	b580      	push	{r7, lr}
 8008980:	b08e      	sub	sp, #56	; 0x38
 8008982:	af04      	add	r7, sp, #16
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	623b      	str	r3, [r7, #32]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10a      	bne.n	80089c4 <xTaskCreateStatic+0x46>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	61fb      	str	r3, [r7, #28]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089c4:	2354      	movs	r3, #84	; 0x54
 80089c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	2b54      	cmp	r3, #84	; 0x54
 80089cc:	d00a      	beq.n	80089e4 <xTaskCreateStatic+0x66>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	61bb      	str	r3, [r7, #24]
}
 80089e0:	bf00      	nop
 80089e2:	e7fe      	b.n	80089e2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01e      	beq.n	8008a28 <xTaskCreateStatic+0xaa>
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01b      	beq.n	8008a28 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	2202      	movs	r2, #2
 80089fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a02:	2300      	movs	r3, #0
 8008a04:	9303      	str	r3, [sp, #12]
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	f107 0314 	add.w	r3, r7, #20
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f850 	bl	8008ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a22:	f000 f8cd 	bl	8008bc0 <prvAddNewTaskToReadyList>
 8008a26:	e001      	b.n	8008a2c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a2c:	697b      	ldr	r3, [r7, #20]
	}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3728      	adds	r7, #40	; 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b08c      	sub	sp, #48	; 0x30
 8008a3a:	af04      	add	r7, sp, #16
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	603b      	str	r3, [r7, #0]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 f98e 	bl	8009d6c <pvPortMalloc>
 8008a50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00e      	beq.n	8008a76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a58:	2054      	movs	r0, #84	; 0x54
 8008a5a:	f001 f987 	bl	8009d6c <pvPortMalloc>
 8008a5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a6c:	e005      	b.n	8008a7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f001 fa40 	bl	8009ef4 <vPortFree>
 8008a74:	e001      	b.n	8008a7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d017      	beq.n	8008ab0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a88:	88fa      	ldrh	r2, [r7, #6]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9303      	str	r3, [sp, #12]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	9302      	str	r3, [sp, #8]
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f80e 	bl	8008ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aa4:	69f8      	ldr	r0, [r7, #28]
 8008aa6:	f000 f88b 	bl	8008bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	e002      	b.n	8008ab6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3720      	adds	r7, #32
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f023 0307 	bic.w	r3, r3, #7
 8008ae6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	617b      	str	r3, [r7, #20]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b08:	2300      	movs	r3, #0
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	e012      	b.n	8008b34 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4413      	add	r3, r2
 8008b14:	7819      	ldrb	r1, [r3, #0]
 8008b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3334      	adds	r3, #52	; 0x34
 8008b1e:	460a      	mov	r2, r1
 8008b20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d006      	beq.n	8008b3c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3301      	adds	r3, #1
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	2b0f      	cmp	r3, #15
 8008b38:	d9e9      	bls.n	8008b0e <prvInitialiseNewTask+0x4e>
 8008b3a:	e000      	b.n	8008b3e <prvInitialiseNewTask+0x7e>
		{
			break;
 8008b3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	2b06      	cmp	r3, #6
 8008b4a:	d901      	bls.n	8008b50 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b4c:	2306      	movs	r3, #6
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2200      	movs	r2, #0
 8008b60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff f8d8 	bl	8007d1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	3318      	adds	r3, #24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff f8d3 	bl	8007d1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f1c3 0207 	rsb	r2, r3, #7
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	2200      	movs	r2, #0
 8008b90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	68f9      	ldr	r1, [r7, #12]
 8008b9e:	69b8      	ldr	r0, [r7, #24]
 8008ba0:	f000 fef6 	bl	8009990 <pxPortInitialiseStack>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bb6:	bf00      	nop
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bc8:	f000 ffd0 	bl	8009b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bcc:	4b2a      	ldr	r3, [pc, #168]	; (8008c78 <prvAddNewTaskToReadyList+0xb8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	4a29      	ldr	r2, [pc, #164]	; (8008c78 <prvAddNewTaskToReadyList+0xb8>)
 8008bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bd6:	4b29      	ldr	r3, [pc, #164]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bde:	4a27      	ldr	r2, [pc, #156]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008be4:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <prvAddNewTaskToReadyList+0xb8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d110      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bec:	f000 fbca 	bl	8009384 <prvInitialiseTaskLists>
 8008bf0:	e00d      	b.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bf2:	4b23      	ldr	r3, [pc, #140]	; (8008c80 <prvAddNewTaskToReadyList+0xc0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d109      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bfa:	4b20      	ldr	r3, [pc, #128]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d802      	bhi.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c08:	4a1c      	ldr	r2, [pc, #112]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a1b      	ldr	r2, [pc, #108]	; (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008c16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	409a      	lsls	r2, r3
 8008c20:	4b19      	ldr	r3, [pc, #100]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008c38:	441a      	add	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f7ff f877 	bl	8007d34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c46:	f000 ffc1 	bl	8009bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <prvAddNewTaskToReadyList+0xc0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d207      	bcs.n	8008c70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	200004f4 	.word	0x200004f4
 8008c7c:	200003f4 	.word	0x200003f4
 8008c80:	20000500 	.word	0x20000500
 8008c84:	20000510 	.word	0x20000510
 8008c88:	200004fc 	.word	0x200004fc
 8008c8c:	200003f8 	.word	0x200003f8
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d017      	beq.n	8008cd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ca6:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <vTaskDelay+0x60>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <vTaskDelay+0x30>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60bb      	str	r3, [r7, #8]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cc4:	f000 f87a 	bl	8008dbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cc8:	2100      	movs	r1, #0
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fdfa 	bl	80098c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cd0:	f000 f882 	bl	8008dd8 <xTaskResumeAll>
 8008cd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d107      	bne.n	8008cec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008cdc:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <vTaskDelay+0x64>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	2000051c 	.word	0x2000051c
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	1d39      	adds	r1, r7, #4
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7f7 fa24 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	9202      	str	r2, [sp, #8]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2300      	movs	r3, #0
 8008d28:	460a      	mov	r2, r1
 8008d2a:	491e      	ldr	r1, [pc, #120]	; (8008da4 <vTaskStartScheduler+0xa8>)
 8008d2c:	481e      	ldr	r0, [pc, #120]	; (8008da8 <vTaskStartScheduler+0xac>)
 8008d2e:	f7ff fe26 	bl	800897e <xTaskCreateStatic>
 8008d32:	4603      	mov	r3, r0
 8008d34:	4a1d      	ldr	r2, [pc, #116]	; (8008dac <vTaskStartScheduler+0xb0>)
 8008d36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d38:	4b1c      	ldr	r3, [pc, #112]	; (8008dac <vTaskStartScheduler+0xb0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d40:	2301      	movs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e001      	b.n	8008d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d116      	bne.n	8008d7e <vTaskStartScheduler+0x82>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	613b      	str	r3, [r7, #16]
}
 8008d62:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <vTaskStartScheduler+0xb4>)
 8008d66:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d6c:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <vTaskStartScheduler+0xb8>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008d72:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <vTaskStartScheduler+0xbc>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d78:	f000 fe86 	bl	8009a88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d7c:	e00e      	b.n	8008d9c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d84:	d10a      	bne.n	8008d9c <vTaskStartScheduler+0xa0>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	60fb      	str	r3, [r7, #12]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <vTaskStartScheduler+0x9e>
}
 8008d9c:	bf00      	nop
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	0800b2cc 	.word	0x0800b2cc
 8008da8:	08009355 	.word	0x08009355
 8008dac:	20000518 	.word	0x20000518
 8008db0:	20000514 	.word	0x20000514
 8008db4:	20000500 	.word	0x20000500
 8008db8:	200004f8 	.word	0x200004f8

08008dbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008dc0:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <vTaskSuspendAll+0x18>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	4a03      	ldr	r2, [pc, #12]	; (8008dd4 <vTaskSuspendAll+0x18>)
 8008dc8:	6013      	str	r3, [r2, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	2000051c 	.word	0x2000051c

08008dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008de6:	4b41      	ldr	r3, [pc, #260]	; (8008eec <xTaskResumeAll+0x114>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	603b      	str	r3, [r7, #0]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e04:	f000 feb2 	bl	8009b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e08:	4b38      	ldr	r3, [pc, #224]	; (8008eec <xTaskResumeAll+0x114>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4a37      	ldr	r2, [pc, #220]	; (8008eec <xTaskResumeAll+0x114>)
 8008e10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e12:	4b36      	ldr	r3, [pc, #216]	; (8008eec <xTaskResumeAll+0x114>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d161      	bne.n	8008ede <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e1a:	4b35      	ldr	r3, [pc, #212]	; (8008ef0 <xTaskResumeAll+0x118>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d05d      	beq.n	8008ede <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e22:	e02e      	b.n	8008e82 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008e24:	4b33      	ldr	r3, [pc, #204]	; (8008ef4 <xTaskResumeAll+0x11c>)
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3318      	adds	r3, #24
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe ffda 	bl	8007dea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe ffd5 	bl	8007dea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	2201      	movs	r2, #1
 8008e46:	409a      	lsls	r2, r3
 8008e48:	4b2b      	ldr	r3, [pc, #172]	; (8008ef8 <xTaskResumeAll+0x120>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	4a2a      	ldr	r2, [pc, #168]	; (8008ef8 <xTaskResumeAll+0x120>)
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4a27      	ldr	r2, [pc, #156]	; (8008efc <xTaskResumeAll+0x124>)
 8008e60:	441a      	add	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f7fe ff63 	bl	8007d34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e72:	4b23      	ldr	r3, [pc, #140]	; (8008f00 <xTaskResumeAll+0x128>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d302      	bcc.n	8008e82 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e7c:	4b21      	ldr	r3, [pc, #132]	; (8008f04 <xTaskResumeAll+0x12c>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e82:	4b1c      	ldr	r3, [pc, #112]	; (8008ef4 <xTaskResumeAll+0x11c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1cc      	bne.n	8008e24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e90:	f000 fb16 	bl	80094c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008e94:	4b1c      	ldr	r3, [pc, #112]	; (8008f08 <xTaskResumeAll+0x130>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ea0:	f000 f836 	bl	8008f10 <xTaskIncrementTick>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008eaa:	4b16      	ldr	r3, [pc, #88]	; (8008f04 <xTaskResumeAll+0x12c>)
 8008eac:	2201      	movs	r2, #1
 8008eae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1f1      	bne.n	8008ea0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008ebc:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <xTaskResumeAll+0x130>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ec2:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <xTaskResumeAll+0x12c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <xTaskResumeAll+0x134>)
 8008ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ede:	f000 fe75 	bl	8009bcc <vPortExitCritical>

	return xAlreadyYielded;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000051c 	.word	0x2000051c
 8008ef0:	200004f4 	.word	0x200004f4
 8008ef4:	200004b4 	.word	0x200004b4
 8008ef8:	200004fc 	.word	0x200004fc
 8008efc:	200003f8 	.word	0x200003f8
 8008f00:	200003f4 	.word	0x200003f4
 8008f04:	20000508 	.word	0x20000508
 8008f08:	20000504 	.word	0x20000504
 8008f0c:	e000ed04 	.word	0xe000ed04

08008f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1a:	4b51      	ldr	r3, [pc, #324]	; (8009060 <xTaskIncrementTick+0x150>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f040 808d 	bne.w	800903e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f24:	4b4f      	ldr	r3, [pc, #316]	; (8009064 <xTaskIncrementTick+0x154>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f2c:	4a4d      	ldr	r2, [pc, #308]	; (8009064 <xTaskIncrementTick+0x154>)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d120      	bne.n	8008f7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f38:	4b4b      	ldr	r3, [pc, #300]	; (8009068 <xTaskIncrementTick+0x158>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	603b      	str	r3, [r7, #0]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <xTaskIncrementTick+0x46>
 8008f58:	4b43      	ldr	r3, [pc, #268]	; (8009068 <xTaskIncrementTick+0x158>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	4b43      	ldr	r3, [pc, #268]	; (800906c <xTaskIncrementTick+0x15c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a41      	ldr	r2, [pc, #260]	; (8009068 <xTaskIncrementTick+0x158>)
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	4a41      	ldr	r2, [pc, #260]	; (800906c <xTaskIncrementTick+0x15c>)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	4b40      	ldr	r3, [pc, #256]	; (8009070 <xTaskIncrementTick+0x160>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	4a3f      	ldr	r2, [pc, #252]	; (8009070 <xTaskIncrementTick+0x160>)
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	f000 faa3 	bl	80094c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f7a:	4b3e      	ldr	r3, [pc, #248]	; (8009074 <xTaskIncrementTick+0x164>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d34d      	bcc.n	8009020 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f84:	4b38      	ldr	r3, [pc, #224]	; (8009068 <xTaskIncrementTick+0x158>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <xTaskIncrementTick+0x82>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <xTaskIncrementTick+0x84>
 8008f92:	2300      	movs	r3, #0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f98:	4b36      	ldr	r3, [pc, #216]	; (8009074 <xTaskIncrementTick+0x164>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	601a      	str	r2, [r3, #0]
					break;
 8008fa0:	e03e      	b.n	8009020 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fa2:	4b31      	ldr	r3, [pc, #196]	; (8009068 <xTaskIncrementTick+0x158>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d203      	bcs.n	8008fc2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fba:	4a2e      	ldr	r2, [pc, #184]	; (8009074 <xTaskIncrementTick+0x164>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6013      	str	r3, [r2, #0]
						break;
 8008fc0:	e02e      	b.n	8009020 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe ff0f 	bl	8007dea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	3318      	adds	r3, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe ff06 	bl	8007dea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	409a      	lsls	r2, r3
 8008fe6:	4b24      	ldr	r3, [pc, #144]	; (8009078 <xTaskIncrementTick+0x168>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	4a22      	ldr	r2, [pc, #136]	; (8009078 <xTaskIncrementTick+0x168>)
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a1f      	ldr	r2, [pc, #124]	; (800907c <xTaskIncrementTick+0x16c>)
 8008ffe:	441a      	add	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7fe fe94 	bl	8007d34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <xTaskIncrementTick+0x170>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	429a      	cmp	r2, r3
 8009018:	d3b4      	bcc.n	8008f84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800901a:	2301      	movs	r3, #1
 800901c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800901e:	e7b1      	b.n	8008f84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009020:	4b17      	ldr	r3, [pc, #92]	; (8009080 <xTaskIncrementTick+0x170>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009026:	4915      	ldr	r1, [pc, #84]	; (800907c <xTaskIncrementTick+0x16c>)
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d907      	bls.n	8009048 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009038:	2301      	movs	r3, #1
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	e004      	b.n	8009048 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800903e:	4b11      	ldr	r3, [pc, #68]	; (8009084 <xTaskIncrementTick+0x174>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3301      	adds	r3, #1
 8009044:	4a0f      	ldr	r2, [pc, #60]	; (8009084 <xTaskIncrementTick+0x174>)
 8009046:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009048:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <xTaskIncrementTick+0x178>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009054:	697b      	ldr	r3, [r7, #20]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2000051c 	.word	0x2000051c
 8009064:	200004f8 	.word	0x200004f8
 8009068:	200004ac 	.word	0x200004ac
 800906c:	200004b0 	.word	0x200004b0
 8009070:	2000050c 	.word	0x2000050c
 8009074:	20000514 	.word	0x20000514
 8009078:	200004fc 	.word	0x200004fc
 800907c:	200003f8 	.word	0x200003f8
 8009080:	200003f4 	.word	0x200003f4
 8009084:	20000504 	.word	0x20000504
 8009088:	20000508 	.word	0x20000508

0800908c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009092:	4b26      	ldr	r3, [pc, #152]	; (800912c <vTaskSwitchContext+0xa0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800909a:	4b25      	ldr	r3, [pc, #148]	; (8009130 <vTaskSwitchContext+0xa4>)
 800909c:	2201      	movs	r2, #1
 800909e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090a0:	e03f      	b.n	8009122 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80090a2:	4b23      	ldr	r3, [pc, #140]	; (8009130 <vTaskSwitchContext+0xa4>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80090a8:	4b22      	ldr	r3, [pc, #136]	; (8009134 <vTaskSwitchContext+0xa8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	fab3 f383 	clz	r3, r3
 80090b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80090b6:	7afb      	ldrb	r3, [r7, #11]
 80090b8:	f1c3 031f 	rsb	r3, r3, #31
 80090bc:	617b      	str	r3, [r7, #20]
 80090be:	491e      	ldr	r1, [pc, #120]	; (8009138 <vTaskSwitchContext+0xac>)
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	607b      	str	r3, [r7, #4]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <vTaskSwitchContext+0x5a>
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a11      	ldr	r2, [pc, #68]	; (8009138 <vTaskSwitchContext+0xac>)
 80090f4:	4413      	add	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	3308      	adds	r3, #8
 800910a:	429a      	cmp	r2, r3
 800910c:	d104      	bne.n	8009118 <vTaskSwitchContext+0x8c>
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	605a      	str	r2, [r3, #4]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	4a07      	ldr	r2, [pc, #28]	; (800913c <vTaskSwitchContext+0xb0>)
 8009120:	6013      	str	r3, [r2, #0]
}
 8009122:	bf00      	nop
 8009124:	371c      	adds	r7, #28
 8009126:	46bd      	mov	sp, r7
 8009128:	bc80      	pop	{r7}
 800912a:	4770      	bx	lr
 800912c:	2000051c 	.word	0x2000051c
 8009130:	20000508 	.word	0x20000508
 8009134:	200004fc 	.word	0x200004fc
 8009138:	200003f8 	.word	0x200003f8
 800913c:	200003f4 	.word	0x200003f4

08009140 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	60fb      	str	r3, [r7, #12]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009166:	4b07      	ldr	r3, [pc, #28]	; (8009184 <vTaskPlaceOnEventList+0x44>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3318      	adds	r3, #24
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7fe fe03 	bl	8007d7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009174:	2101      	movs	r1, #1
 8009176:	6838      	ldr	r0, [r7, #0]
 8009178:	f000 fba4 	bl	80098c4 <prvAddCurrentTaskToDelayedList>
}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	200003f4 	.word	0x200003f4

08009188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	3318      	adds	r3, #24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe fe16 	bl	8007dea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091be:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <xTaskRemoveFromEventList+0xac>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11c      	bne.n	8009200 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe fe0d 	bl	8007dea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	2201      	movs	r2, #1
 80091d6:	409a      	lsls	r2, r3
 80091d8:	4b17      	ldr	r3, [pc, #92]	; (8009238 <xTaskRemoveFromEventList+0xb0>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4313      	orrs	r3, r2
 80091de:	4a16      	ldr	r2, [pc, #88]	; (8009238 <xTaskRemoveFromEventList+0xb0>)
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a13      	ldr	r2, [pc, #76]	; (800923c <xTaskRemoveFromEventList+0xb4>)
 80091f0:	441a      	add	r2, r3
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	3304      	adds	r3, #4
 80091f6:	4619      	mov	r1, r3
 80091f8:	4610      	mov	r0, r2
 80091fa:	f7fe fd9b 	bl	8007d34 <vListInsertEnd>
 80091fe:	e005      	b.n	800920c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	3318      	adds	r3, #24
 8009204:	4619      	mov	r1, r3
 8009206:	480e      	ldr	r0, [pc, #56]	; (8009240 <xTaskRemoveFromEventList+0xb8>)
 8009208:	f7fe fd94 	bl	8007d34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <xTaskRemoveFromEventList+0xbc>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	429a      	cmp	r2, r3
 8009218:	d905      	bls.n	8009226 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800921a:	2301      	movs	r3, #1
 800921c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800921e:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <xTaskRemoveFromEventList+0xc0>)
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e001      	b.n	800922a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800922a:	697b      	ldr	r3, [r7, #20]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	2000051c 	.word	0x2000051c
 8009238:	200004fc 	.word	0x200004fc
 800923c:	200003f8 	.word	0x200003f8
 8009240:	200004b4 	.word	0x200004b4
 8009244:	200003f4 	.word	0x200003f4
 8009248:	20000508 	.word	0x20000508

0800924c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <vTaskInternalSetTimeOutState+0x24>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <vTaskInternalSetTimeOutState+0x28>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	605a      	str	r2, [r3, #4]
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	2000050c 	.word	0x2000050c
 8009274:	200004f8 	.word	0x200004f8

08009278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	613b      	str	r3, [r7, #16]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	60fb      	str	r3, [r7, #12]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092ba:	f000 fc57 	bl	8009b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092be:	4b1d      	ldr	r3, [pc, #116]	; (8009334 <xTaskCheckForTimeOut+0xbc>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d102      	bne.n	80092de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092d8:	2300      	movs	r3, #0
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	e023      	b.n	8009326 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	4b15      	ldr	r3, [pc, #84]	; (8009338 <xTaskCheckForTimeOut+0xc0>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d007      	beq.n	80092fa <xTaskCheckForTimeOut+0x82>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d302      	bcc.n	80092fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	61fb      	str	r3, [r7, #28]
 80092f8:	e015      	b.n	8009326 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	429a      	cmp	r2, r3
 8009302:	d20b      	bcs.n	800931c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	1ad2      	subs	r2, r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff ff9b 	bl	800924c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009316:	2300      	movs	r3, #0
 8009318:	61fb      	str	r3, [r7, #28]
 800931a:	e004      	b.n	8009326 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009322:	2301      	movs	r3, #1
 8009324:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009326:	f000 fc51 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 800932a:	69fb      	ldr	r3, [r7, #28]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	200004f8 	.word	0x200004f8
 8009338:	2000050c 	.word	0x2000050c

0800933c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009340:	4b03      	ldr	r3, [pc, #12]	; (8009350 <vTaskMissedYield+0x14>)
 8009342:	2201      	movs	r2, #1
 8009344:	601a      	str	r2, [r3, #0]
}
 8009346:	bf00      	nop
 8009348:	46bd      	mov	sp, r7
 800934a:	bc80      	pop	{r7}
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000508 	.word	0x20000508

08009354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800935c:	f000 f852 	bl	8009404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <prvIdleTask+0x28>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d9f9      	bls.n	800935c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009368:	4b05      	ldr	r3, [pc, #20]	; (8009380 <prvIdleTask+0x2c>)
 800936a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009378:	e7f0      	b.n	800935c <prvIdleTask+0x8>
 800937a:	bf00      	nop
 800937c:	200003f8 	.word	0x200003f8
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800938a:	2300      	movs	r3, #0
 800938c:	607b      	str	r3, [r7, #4]
 800938e:	e00c      	b.n	80093aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4a12      	ldr	r2, [pc, #72]	; (80093e4 <prvInitialiseTaskLists+0x60>)
 800939c:	4413      	add	r3, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fc9d 	bl	8007cde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3301      	adds	r3, #1
 80093a8:	607b      	str	r3, [r7, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b06      	cmp	r3, #6
 80093ae:	d9ef      	bls.n	8009390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093b0:	480d      	ldr	r0, [pc, #52]	; (80093e8 <prvInitialiseTaskLists+0x64>)
 80093b2:	f7fe fc94 	bl	8007cde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093b6:	480d      	ldr	r0, [pc, #52]	; (80093ec <prvInitialiseTaskLists+0x68>)
 80093b8:	f7fe fc91 	bl	8007cde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093bc:	480c      	ldr	r0, [pc, #48]	; (80093f0 <prvInitialiseTaskLists+0x6c>)
 80093be:	f7fe fc8e 	bl	8007cde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093c2:	480c      	ldr	r0, [pc, #48]	; (80093f4 <prvInitialiseTaskLists+0x70>)
 80093c4:	f7fe fc8b 	bl	8007cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093c8:	480b      	ldr	r0, [pc, #44]	; (80093f8 <prvInitialiseTaskLists+0x74>)
 80093ca:	f7fe fc88 	bl	8007cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <prvInitialiseTaskLists+0x78>)
 80093d0:	4a05      	ldr	r2, [pc, #20]	; (80093e8 <prvInitialiseTaskLists+0x64>)
 80093d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093d4:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <prvInitialiseTaskLists+0x7c>)
 80093d6:	4a05      	ldr	r2, [pc, #20]	; (80093ec <prvInitialiseTaskLists+0x68>)
 80093d8:	601a      	str	r2, [r3, #0]
}
 80093da:	bf00      	nop
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	200003f8 	.word	0x200003f8
 80093e8:	20000484 	.word	0x20000484
 80093ec:	20000498 	.word	0x20000498
 80093f0:	200004b4 	.word	0x200004b4
 80093f4:	200004c8 	.word	0x200004c8
 80093f8:	200004e0 	.word	0x200004e0
 80093fc:	200004ac 	.word	0x200004ac
 8009400:	200004b0 	.word	0x200004b0

08009404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800940a:	e019      	b.n	8009440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800940c:	f000 fbae 	bl	8009b6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009410:	4b10      	ldr	r3, [pc, #64]	; (8009454 <prvCheckTasksWaitingTermination+0x50>)
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3304      	adds	r3, #4
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fce4 	bl	8007dea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009422:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <prvCheckTasksWaitingTermination+0x54>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3b01      	subs	r3, #1
 8009428:	4a0b      	ldr	r2, [pc, #44]	; (8009458 <prvCheckTasksWaitingTermination+0x54>)
 800942a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800942c:	4b0b      	ldr	r3, [pc, #44]	; (800945c <prvCheckTasksWaitingTermination+0x58>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	4a0a      	ldr	r2, [pc, #40]	; (800945c <prvCheckTasksWaitingTermination+0x58>)
 8009434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009436:	f000 fbc9 	bl	8009bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f810 	bl	8009460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009440:	4b06      	ldr	r3, [pc, #24]	; (800945c <prvCheckTasksWaitingTermination+0x58>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e1      	bne.n	800940c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200004c8 	.word	0x200004c8
 8009458:	200004f4 	.word	0x200004f4
 800945c:	200004dc 	.word	0x200004dc

08009460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800946e:	2b00      	cmp	r3, #0
 8009470:	d108      	bne.n	8009484 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fd3c 	bl	8009ef4 <vPortFree>
				vPortFree( pxTCB );
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fd39 	bl	8009ef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009482:	e018      	b.n	80094b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800948a:	2b01      	cmp	r3, #1
 800948c:	d103      	bne.n	8009496 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fd30 	bl	8009ef4 <vPortFree>
	}
 8009494:	e00f      	b.n	80094b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800949c:	2b02      	cmp	r3, #2
 800949e:	d00a      	beq.n	80094b6 <prvDeleteTCB+0x56>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	60fb      	str	r3, [r7, #12]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <prvDeleteTCB+0x54>
	}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <prvResetNextTaskUnblockTime+0x40>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <prvResetNextTaskUnblockTime+0x14>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <prvResetNextTaskUnblockTime+0x16>
 80094d4:	2300      	movs	r3, #0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d004      	beq.n	80094e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094da:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <prvResetNextTaskUnblockTime+0x44>)
 80094dc:	f04f 32ff 	mov.w	r2, #4294967295
 80094e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094e2:	e008      	b.n	80094f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80094e4:	4b06      	ldr	r3, [pc, #24]	; (8009500 <prvResetNextTaskUnblockTime+0x40>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4a04      	ldr	r2, [pc, #16]	; (8009504 <prvResetNextTaskUnblockTime+0x44>)
 80094f4:	6013      	str	r3, [r2, #0]
}
 80094f6:	bf00      	nop
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bc80      	pop	{r7}
 80094fe:	4770      	bx	lr
 8009500:	200004ac 	.word	0x200004ac
 8009504:	20000514 	.word	0x20000514

08009508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800950e:	4b0b      	ldr	r3, [pc, #44]	; (800953c <xTaskGetSchedulerState+0x34>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009516:	2301      	movs	r3, #1
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	e008      	b.n	800952e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800951c:	4b08      	ldr	r3, [pc, #32]	; (8009540 <xTaskGetSchedulerState+0x38>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009524:	2302      	movs	r3, #2
 8009526:	607b      	str	r3, [r7, #4]
 8009528:	e001      	b.n	800952e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800952a:	2300      	movs	r3, #0
 800952c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800952e:	687b      	ldr	r3, [r7, #4]
	}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000500 	.word	0x20000500
 8009540:	2000051c 	.word	0x2000051c

08009544 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d06e      	beq.n	8009638 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955e:	4b39      	ldr	r3, [pc, #228]	; (8009644 <xTaskPriorityInherit+0x100>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	429a      	cmp	r2, r3
 8009566:	d25e      	bcs.n	8009626 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	db06      	blt.n	800957e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009570:	4b34      	ldr	r3, [pc, #208]	; (8009644 <xTaskPriorityInherit+0x100>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	f1c3 0207 	rsb	r2, r3, #7
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6959      	ldr	r1, [r3, #20]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4a2e      	ldr	r2, [pc, #184]	; (8009648 <xTaskPriorityInherit+0x104>)
 8009590:	4413      	add	r3, r2
 8009592:	4299      	cmp	r1, r3
 8009594:	d101      	bne.n	800959a <xTaskPriorityInherit+0x56>
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <xTaskPriorityInherit+0x58>
 800959a:	2300      	movs	r3, #0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d03a      	beq.n	8009616 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	3304      	adds	r3, #4
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe fc20 	bl	8007dea <uxListRemove>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d115      	bne.n	80095dc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4924      	ldr	r1, [pc, #144]	; (8009648 <xTaskPriorityInherit+0x104>)
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <xTaskPriorityInherit+0x98>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	2201      	movs	r2, #1
 80095cc:	fa02 f303 	lsl.w	r3, r2, r3
 80095d0:	43da      	mvns	r2, r3
 80095d2:	4b1e      	ldr	r3, [pc, #120]	; (800964c <xTaskPriorityInherit+0x108>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4013      	ands	r3, r2
 80095d8:	4a1c      	ldr	r2, [pc, #112]	; (800964c <xTaskPriorityInherit+0x108>)
 80095da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095dc:	4b19      	ldr	r3, [pc, #100]	; (8009644 <xTaskPriorityInherit+0x100>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	2201      	movs	r2, #1
 80095ec:	409a      	lsls	r2, r3
 80095ee:	4b17      	ldr	r3, [pc, #92]	; (800964c <xTaskPriorityInherit+0x108>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	4a15      	ldr	r2, [pc, #84]	; (800964c <xTaskPriorityInherit+0x108>)
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4a10      	ldr	r2, [pc, #64]	; (8009648 <xTaskPriorityInherit+0x104>)
 8009606:	441a      	add	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	3304      	adds	r3, #4
 800960c:	4619      	mov	r1, r3
 800960e:	4610      	mov	r0, r2
 8009610:	f7fe fb90 	bl	8007d34 <vListInsertEnd>
 8009614:	e004      	b.n	8009620 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <xTaskPriorityInherit+0x100>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	e008      	b.n	8009638 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800962a:	4b06      	ldr	r3, [pc, #24]	; (8009644 <xTaskPriorityInherit+0x100>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	429a      	cmp	r2, r3
 8009632:	d201      	bcs.n	8009638 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009638:	68fb      	ldr	r3, [r7, #12]
	}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	200003f4 	.word	0x200003f4
 8009648:	200003f8 	.word	0x200003f8
 800964c:	200004fc 	.word	0x200004fc

08009650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d06e      	beq.n	8009744 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009666:	4b3a      	ldr	r3, [pc, #232]	; (8009750 <xTaskPriorityDisinherit+0x100>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	429a      	cmp	r2, r3
 800966e:	d00a      	beq.n	8009686 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	60fb      	str	r3, [r7, #12]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	60bb      	str	r3, [r7, #8]
}
 80096a0:	bf00      	nop
 80096a2:	e7fe      	b.n	80096a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096a8:	1e5a      	subs	r2, r3, #1
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d044      	beq.n	8009744 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d140      	bne.n	8009744 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fb8f 	bl	8007dea <uxListRemove>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d115      	bne.n	80096fe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	491f      	ldr	r1, [pc, #124]	; (8009754 <xTaskPriorityDisinherit+0x104>)
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	440b      	add	r3, r1
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <xTaskPriorityDisinherit+0xae>
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	2201      	movs	r2, #1
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43da      	mvns	r2, r3
 80096f4:	4b18      	ldr	r3, [pc, #96]	; (8009758 <xTaskPriorityDisinherit+0x108>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4013      	ands	r3, r2
 80096fa:	4a17      	ldr	r2, [pc, #92]	; (8009758 <xTaskPriorityDisinherit+0x108>)
 80096fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	f1c3 0207 	rsb	r2, r3, #7
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	2201      	movs	r2, #1
 8009718:	409a      	lsls	r2, r3
 800971a:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <xTaskPriorityDisinherit+0x108>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4313      	orrs	r3, r2
 8009720:	4a0d      	ldr	r2, [pc, #52]	; (8009758 <xTaskPriorityDisinherit+0x108>)
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4a08      	ldr	r2, [pc, #32]	; (8009754 <xTaskPriorityDisinherit+0x104>)
 8009732:	441a      	add	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	3304      	adds	r3, #4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe fafa 	bl	8007d34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009740:	2301      	movs	r3, #1
 8009742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009744:	697b      	ldr	r3, [r7, #20]
	}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	200003f4 	.word	0x200003f4
 8009754:	200003f8 	.word	0x200003f8
 8009758:	200004fc 	.word	0x200004fc

0800975c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800976a:	2301      	movs	r3, #1
 800976c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 8088 	beq.w	8009886 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60fb      	str	r3, [r7, #12]
}
 8009790:	bf00      	nop
 8009792:	e7fe      	b.n	8009792 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d902      	bls.n	80097a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	61fb      	str	r3, [r7, #28]
 80097a2:	e002      	b.n	80097aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d068      	beq.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d163      	bne.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097be:	4b34      	ldr	r3, [pc, #208]	; (8009890 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d10a      	bne.n	80097de <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	60bb      	str	r3, [r7, #8]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	db04      	blt.n	80097fc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f1c3 0207 	rsb	r2, r3, #7
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	6959      	ldr	r1, [r3, #20]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4a22      	ldr	r2, [pc, #136]	; (8009894 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800980c:	4413      	add	r3, r2
 800980e:	4299      	cmp	r1, r3
 8009810:	d101      	bne.n	8009816 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009812:	2301      	movs	r3, #1
 8009814:	e000      	b.n	8009818 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009816:	2300      	movs	r3, #0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d034      	beq.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	3304      	adds	r3, #4
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe fae2 	bl	8007dea <uxListRemove>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d115      	bne.n	8009858 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009830:	4918      	ldr	r1, [pc, #96]	; (8009894 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009832:	4613      	mov	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	440b      	add	r3, r1
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10a      	bne.n	8009858 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	2201      	movs	r2, #1
 8009848:	fa02 f303 	lsl.w	r3, r2, r3
 800984c:	43da      	mvns	r2, r3
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4013      	ands	r3, r2
 8009854:	4a10      	ldr	r2, [pc, #64]	; (8009898 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009856:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	2201      	movs	r2, #1
 800985e:	409a      	lsls	r2, r3
 8009860:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4313      	orrs	r3, r2
 8009866:	4a0c      	ldr	r2, [pc, #48]	; (8009898 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4a07      	ldr	r2, [pc, #28]	; (8009894 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009878:	441a      	add	r2, r3
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fe fa57 	bl	8007d34 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009886:	bf00      	nop
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	200003f4 	.word	0x200003f4
 8009894:	200003f8 	.word	0x200003f8
 8009898:	200004fc 	.word	0x200004fc

0800989c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ae:	3201      	adds	r2, #1
 80098b0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80098b2:	4b03      	ldr	r3, [pc, #12]	; (80098c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098b4:	681b      	ldr	r3, [r3, #0]
	}
 80098b6:	4618      	mov	r0, r3
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bc80      	pop	{r7}
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	200003f4 	.word	0x200003f4

080098c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <prvAddCurrentTaskToDelayedList+0xb0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098d4:	4b28      	ldr	r3, [pc, #160]	; (8009978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3304      	adds	r3, #4
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fa85 	bl	8007dea <uxListRemove>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10b      	bne.n	80098fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80098e6:	4b24      	ldr	r3, [pc, #144]	; (8009978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	2201      	movs	r2, #1
 80098ee:	fa02 f303 	lsl.w	r3, r2, r3
 80098f2:	43da      	mvns	r2, r3
 80098f4:	4b21      	ldr	r3, [pc, #132]	; (800997c <prvAddCurrentTaskToDelayedList+0xb8>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4013      	ands	r3, r2
 80098fa:	4a20      	ldr	r2, [pc, #128]	; (800997c <prvAddCurrentTaskToDelayedList+0xb8>)
 80098fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d10a      	bne.n	800991c <prvAddCurrentTaskToDelayedList+0x58>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d007      	beq.n	800991c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800990c:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3304      	adds	r3, #4
 8009912:	4619      	mov	r1, r3
 8009914:	481a      	ldr	r0, [pc, #104]	; (8009980 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009916:	f7fe fa0d 	bl	8007d34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800991a:	e026      	b.n	800996a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4413      	add	r3, r2
 8009922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009924:	4b14      	ldr	r3, [pc, #80]	; (8009978 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	429a      	cmp	r2, r3
 8009932:	d209      	bcs.n	8009948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009934:	4b13      	ldr	r3, [pc, #76]	; (8009984 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b0f      	ldr	r3, [pc, #60]	; (8009978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3304      	adds	r3, #4
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f7fe fa1a 	bl	8007d7a <vListInsert>
}
 8009946:	e010      	b.n	800996a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009948:	4b0f      	ldr	r3, [pc, #60]	; (8009988 <prvAddCurrentTaskToDelayedList+0xc4>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	4b0a      	ldr	r3, [pc, #40]	; (8009978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3304      	adds	r3, #4
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f7fe fa10 	bl	8007d7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800995a:	4b0c      	ldr	r3, [pc, #48]	; (800998c <prvAddCurrentTaskToDelayedList+0xc8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	d202      	bcs.n	800996a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009964:	4a09      	ldr	r2, [pc, #36]	; (800998c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	6013      	str	r3, [r2, #0]
}
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200004f8 	.word	0x200004f8
 8009978:	200003f4 	.word	0x200003f4
 800997c:	200004fc 	.word	0x200004fc
 8009980:	200004e0 	.word	0x200004e0
 8009984:	200004b0 	.word	0x200004b0
 8009988:	200004ac 	.word	0x200004ac
 800998c:	20000514 	.word	0x20000514

08009990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3b04      	subs	r3, #4
 80099a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3b04      	subs	r3, #4
 80099ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f023 0201 	bic.w	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3b04      	subs	r3, #4
 80099be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099c0:	4a08      	ldr	r2, [pc, #32]	; (80099e4 <pxPortInitialiseStack+0x54>)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3b14      	subs	r3, #20
 80099ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3b20      	subs	r3, #32
 80099d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099d8:	68fb      	ldr	r3, [r7, #12]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr
 80099e4:	080099e9 	.word	0x080099e9

080099e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <prvTaskExitError+0x54>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fa:	d00a      	beq.n	8009a12 <prvTaskExitError+0x2a>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60fb      	str	r3, [r7, #12]
}
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <prvTaskExitError+0x28>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60bb      	str	r3, [r7, #8]
}
 8009a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a26:	bf00      	nop
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0fc      	beq.n	8009a28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a2e:	bf00      	nop
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	2000011c 	.word	0x2000011c

08009a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a40:	4b07      	ldr	r3, [pc, #28]	; (8009a60 <pxCurrentTCBConst2>)
 8009a42:	6819      	ldr	r1, [r3, #0]
 8009a44:	6808      	ldr	r0, [r1, #0]
 8009a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009a4a:	f380 8809 	msr	PSP, r0
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f380 8811 	msr	BASEPRI, r0
 8009a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009a5e:	4770      	bx	lr

08009a60 <pxCurrentTCBConst2>:
 8009a60:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop

08009a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009a68:	4806      	ldr	r0, [pc, #24]	; (8009a84 <prvPortStartFirstTask+0x1c>)
 8009a6a:	6800      	ldr	r0, [r0, #0]
 8009a6c:	6800      	ldr	r0, [r0, #0]
 8009a6e:	f380 8808 	msr	MSP, r0
 8009a72:	b662      	cpsie	i
 8009a74:	b661      	cpsie	f
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	df00      	svc	0
 8009a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a82:	bf00      	nop
 8009a84:	e000ed08 	.word	0xe000ed08

08009a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a8e:	4b32      	ldr	r3, [pc, #200]	; (8009b58 <xPortStartScheduler+0xd0>)
 8009a90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	22ff      	movs	r2, #255	; 0xff
 8009a9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <xPortStartScheduler+0xd4>)
 8009ab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ab6:	4b2a      	ldr	r3, [pc, #168]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009ab8:	2207      	movs	r2, #7
 8009aba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009abc:	e009      	b.n	8009ad2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009abe:	4b28      	ldr	r3, [pc, #160]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	4a26      	ldr	r2, [pc, #152]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009ac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ada:	2b80      	cmp	r3, #128	; 0x80
 8009adc:	d0ef      	beq.n	8009abe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ade:	4b20      	ldr	r3, [pc, #128]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f1c3 0307 	rsb	r3, r3, #7
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d00a      	beq.n	8009b00 <xPortStartScheduler+0x78>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	60bb      	str	r3, [r7, #8]
}
 8009afc:	bf00      	nop
 8009afe:	e7fe      	b.n	8009afe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b00:	4b17      	ldr	r3, [pc, #92]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	021b      	lsls	r3, r3, #8
 8009b06:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009b08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b0a:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b12:	4a13      	ldr	r2, [pc, #76]	; (8009b60 <xPortStartScheduler+0xd8>)
 8009b14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b1e:	4b11      	ldr	r3, [pc, #68]	; (8009b64 <xPortStartScheduler+0xdc>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a10      	ldr	r2, [pc, #64]	; (8009b64 <xPortStartScheduler+0xdc>)
 8009b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <xPortStartScheduler+0xdc>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a0d      	ldr	r2, [pc, #52]	; (8009b64 <xPortStartScheduler+0xdc>)
 8009b30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b36:	f000 f8b9 	bl	8009cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b3a:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <xPortStartScheduler+0xe0>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b40:	f7ff ff92 	bl	8009a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b44:	f7ff faa2 	bl	800908c <vTaskSwitchContext>
	prvTaskExitError();
 8009b48:	f7ff ff4e 	bl	80099e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	e000e400 	.word	0xe000e400
 8009b5c:	20000520 	.word	0x20000520
 8009b60:	20000524 	.word	0x20000524
 8009b64:	e000ed20 	.word	0xe000ed20
 8009b68:	2000011c 	.word	0x2000011c

08009b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	607b      	str	r3, [r7, #4]
}
 8009b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b86:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <vPortEnterCritical+0x58>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	4a0d      	ldr	r2, [pc, #52]	; (8009bc4 <vPortEnterCritical+0x58>)
 8009b8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b90:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <vPortEnterCritical+0x58>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d10f      	bne.n	8009bb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b98:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <vPortEnterCritical+0x5c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	603b      	str	r3, [r7, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <vPortEnterCritical+0x4a>
	}
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	2000011c 	.word	0x2000011c
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bd2:	4b11      	ldr	r3, [pc, #68]	; (8009c18 <vPortExitCritical+0x4c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10a      	bne.n	8009bf0 <vPortExitCritical+0x24>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	607b      	str	r3, [r7, #4]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bf0:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <vPortExitCritical+0x4c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	4a08      	ldr	r2, [pc, #32]	; (8009c18 <vPortExitCritical+0x4c>)
 8009bf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <vPortExitCritical+0x4c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <vPortExitCritical+0x42>
 8009c02:	2300      	movs	r3, #0
 8009c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	f383 8811 	msr	BASEPRI, r3
}
 8009c0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr
 8009c18:	2000011c 	.word	0x2000011c
 8009c1c:	00000000 	.word	0x00000000

08009c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c20:	f3ef 8009 	mrs	r0, PSP
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <pxCurrentTCBConst>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c30:	6010      	str	r0, [r2, #0]
 8009c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009c36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c3a:	f380 8811 	msr	BASEPRI, r0
 8009c3e:	f7ff fa25 	bl	800908c <vTaskSwitchContext>
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8811 	msr	BASEPRI, r0
 8009c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	6808      	ldr	r0, [r1, #0]
 8009c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c56:	f380 8809 	msr	PSP, r0
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	4770      	bx	lr

08009c60 <pxCurrentTCBConst>:
 8009c60:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop

08009c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	607b      	str	r3, [r7, #4]
}
 8009c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c82:	f7ff f945 	bl	8008f10 <xTaskIncrementTick>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <SysTick_Handler+0x40>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f383 8811 	msr	BASEPRI, r3
}
 8009c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed04 	.word	0xe000ed04

08009cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <vPortSetupTimerInterrupt+0x30>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <vPortSetupTimerInterrupt+0x34>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cbc:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <vPortSetupTimerInterrupt+0x38>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a09      	ldr	r2, [pc, #36]	; (8009ce8 <vPortSetupTimerInterrupt+0x3c>)
 8009cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc6:	099b      	lsrs	r3, r3, #6
 8009cc8:	4a08      	ldr	r2, [pc, #32]	; (8009cec <vPortSetupTimerInterrupt+0x40>)
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cce:	4b03      	ldr	r3, [pc, #12]	; (8009cdc <vPortSetupTimerInterrupt+0x30>)
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	601a      	str	r2, [r3, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr
 8009cdc:	e000e010 	.word	0xe000e010
 8009ce0:	e000e018 	.word	0xe000e018
 8009ce4:	20000000 	.word	0x20000000
 8009ce8:	10624dd3 	.word	0x10624dd3
 8009cec:	e000e014 	.word	0xe000e014

08009cf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cf6:	f3ef 8305 	mrs	r3, IPSR
 8009cfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d914      	bls.n	8009d2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d02:	4a16      	ldr	r2, [pc, #88]	; (8009d5c <vPortValidateInterruptPriority+0x6c>)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d0c:	4b14      	ldr	r3, [pc, #80]	; (8009d60 <vPortValidateInterruptPriority+0x70>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	7afa      	ldrb	r2, [r7, #11]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d20a      	bcs.n	8009d2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	607b      	str	r3, [r7, #4]
}
 8009d28:	bf00      	nop
 8009d2a:	e7fe      	b.n	8009d2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <vPortValidateInterruptPriority+0x74>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <vPortValidateInterruptPriority+0x78>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d90a      	bls.n	8009d52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	603b      	str	r3, [r7, #0]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <vPortValidateInterruptPriority+0x60>
	}
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr
 8009d5c:	e000e3f0 	.word	0xe000e3f0
 8009d60:	20000520 	.word	0x20000520
 8009d64:	e000ed0c 	.word	0xe000ed0c
 8009d68:	20000524 	.word	0x20000524

08009d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08a      	sub	sp, #40	; 0x28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d78:	f7ff f820 	bl	8008dbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d7c:	4b58      	ldr	r3, [pc, #352]	; (8009ee0 <pvPortMalloc+0x174>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d84:	f000 f910 	bl	8009fa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d88:	4b56      	ldr	r3, [pc, #344]	; (8009ee4 <pvPortMalloc+0x178>)
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4013      	ands	r3, r2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f040 808e 	bne.w	8009eb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01d      	beq.n	8009dd8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4413      	add	r3, r2
 8009da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d014      	beq.n	8009dd8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f023 0307 	bic.w	r3, r3, #7
 8009db4:	3308      	adds	r3, #8
 8009db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f003 0307 	and.w	r3, r3, #7
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <pvPortMalloc+0x6c>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	617b      	str	r3, [r7, #20]
}
 8009dd4:	bf00      	nop
 8009dd6:	e7fe      	b.n	8009dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d069      	beq.n	8009eb2 <pvPortMalloc+0x146>
 8009dde:	4b42      	ldr	r3, [pc, #264]	; (8009ee8 <pvPortMalloc+0x17c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d864      	bhi.n	8009eb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009de8:	4b40      	ldr	r3, [pc, #256]	; (8009eec <pvPortMalloc+0x180>)
 8009dea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dec:	4b3f      	ldr	r3, [pc, #252]	; (8009eec <pvPortMalloc+0x180>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009df2:	e004      	b.n	8009dfe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d903      	bls.n	8009e10 <pvPortMalloc+0xa4>
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1f1      	bne.n	8009df4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e10:	4b33      	ldr	r3, [pc, #204]	; (8009ee0 <pvPortMalloc+0x174>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d04b      	beq.n	8009eb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2208      	movs	r2, #8
 8009e20:	4413      	add	r3, r2
 8009e22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	1ad2      	subs	r2, r2, r3
 8009e34:	2308      	movs	r3, #8
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d91f      	bls.n	8009e7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4413      	add	r3, r2
 8009e42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <pvPortMalloc+0xf8>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	613b      	str	r3, [r7, #16]
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e76:	69b8      	ldr	r0, [r7, #24]
 8009e78:	f000 f8f8 	bl	800a06c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <pvPortMalloc+0x17c>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	4a18      	ldr	r2, [pc, #96]	; (8009ee8 <pvPortMalloc+0x17c>)
 8009e88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e8a:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <pvPortMalloc+0x17c>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b18      	ldr	r3, [pc, #96]	; (8009ef0 <pvPortMalloc+0x184>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d203      	bcs.n	8009e9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e96:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <pvPortMalloc+0x17c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a15      	ldr	r2, [pc, #84]	; (8009ef0 <pvPortMalloc+0x184>)
 8009e9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	4b10      	ldr	r3, [pc, #64]	; (8009ee4 <pvPortMalloc+0x178>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009eb2:	f7fe ff91 	bl	8008dd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00a      	beq.n	8009ed6 <pvPortMalloc+0x16a>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	60fb      	str	r3, [r7, #12]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <pvPortMalloc+0x168>
	return pvReturn;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3728      	adds	r7, #40	; 0x28
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20001900 	.word	0x20001900
 8009ee4:	2000190c 	.word	0x2000190c
 8009ee8:	20001904 	.word	0x20001904
 8009eec:	200018f8 	.word	0x200018f8
 8009ef0:	20001908 	.word	0x20001908

08009ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d048      	beq.n	8009f98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f06:	2308      	movs	r3, #8
 8009f08:	425b      	negs	r3, r3
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	4b21      	ldr	r3, [pc, #132]	; (8009fa0 <vPortFree+0xac>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <vPortFree+0x44>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	60fb      	str	r3, [r7, #12]
}
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <vPortFree+0x62>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60bb      	str	r3, [r7, #8]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <vPortFree+0xac>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4013      	ands	r3, r2
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d019      	beq.n	8009f98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d115      	bne.n	8009f98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <vPortFree+0xac>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	43db      	mvns	r3, r3
 8009f76:	401a      	ands	r2, r3
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f7c:	f7fe ff1e 	bl	8008dbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	4b07      	ldr	r3, [pc, #28]	; (8009fa4 <vPortFree+0xb0>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4413      	add	r3, r2
 8009f8a:	4a06      	ldr	r2, [pc, #24]	; (8009fa4 <vPortFree+0xb0>)
 8009f8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f8e:	6938      	ldr	r0, [r7, #16]
 8009f90:	f000 f86c 	bl	800a06c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f94:	f7fe ff20 	bl	8008dd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f98:	bf00      	nop
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	2000190c 	.word	0x2000190c
 8009fa4:	20001904 	.word	0x20001904

08009fa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fae:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009fb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fb4:	4b27      	ldr	r3, [pc, #156]	; (800a054 <prvHeapInit+0xac>)
 8009fb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f003 0307 	and.w	r3, r3, #7
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00c      	beq.n	8009fdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3307      	adds	r3, #7
 8009fc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0307 	bic.w	r3, r3, #7
 8009fce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	4a1f      	ldr	r2, [pc, #124]	; (800a054 <prvHeapInit+0xac>)
 8009fd8:	4413      	add	r3, r2
 8009fda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fe0:	4a1d      	ldr	r2, [pc, #116]	; (800a058 <prvHeapInit+0xb0>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fe6:	4b1c      	ldr	r3, [pc, #112]	; (800a058 <prvHeapInit+0xb0>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ff4:	2208      	movs	r2, #8
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	1a9b      	subs	r3, r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0307 	bic.w	r3, r3, #7
 800a002:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4a15      	ldr	r2, [pc, #84]	; (800a05c <prvHeapInit+0xb4>)
 800a008:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a00a:	4b14      	ldr	r3, [pc, #80]	; (800a05c <prvHeapInit+0xb4>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2200      	movs	r2, #0
 800a010:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <prvHeapInit+0xb4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <prvHeapInit+0xb4>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	4a0a      	ldr	r2, [pc, #40]	; (800a060 <prvHeapInit+0xb8>)
 800a036:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4a09      	ldr	r2, [pc, #36]	; (800a064 <prvHeapInit+0xbc>)
 800a03e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a040:	4b09      	ldr	r3, [pc, #36]	; (800a068 <prvHeapInit+0xc0>)
 800a042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a046:	601a      	str	r2, [r3, #0]
}
 800a048:	bf00      	nop
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bc80      	pop	{r7}
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	20000528 	.word	0x20000528
 800a058:	200018f8 	.word	0x200018f8
 800a05c:	20001900 	.word	0x20001900
 800a060:	20001908 	.word	0x20001908
 800a064:	20001904 	.word	0x20001904
 800a068:	2000190c 	.word	0x2000190c

0800a06c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a074:	4b27      	ldr	r3, [pc, #156]	; (800a114 <prvInsertBlockIntoFreeList+0xa8>)
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e002      	b.n	800a080 <prvInsertBlockIntoFreeList+0x14>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d8f7      	bhi.n	800a07a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	4413      	add	r3, r2
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d108      	bne.n	800a0ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	441a      	add	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d118      	bne.n	800a0f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <prvInsertBlockIntoFreeList+0xac>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d00d      	beq.n	800a0ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	441a      	add	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	e008      	b.n	800a0fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <prvInsertBlockIntoFreeList+0xac>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	e003      	b.n	800a0fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d002      	beq.n	800a10a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	bc80      	pop	{r7}
 800a112:	4770      	bx	lr
 800a114:	200018f8 	.word	0x200018f8
 800a118:	20001900 	.word	0x20001900

0800a11c <cnc_init>:

#include "cnc_2d.h"



void cnc_init(TIM_HandleTypeDef* htim){
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]

	Motor1.Conf.ENB = 0;
 800a124:	4b26      	ldr	r3, [pc, #152]	; (800a1c0 <cnc_init+0xa4>)
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Motor1.Conf.MS1 = 0;
 800a12c:	4b24      	ldr	r3, [pc, #144]	; (800a1c0 <cnc_init+0xa4>)
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	Motor1.Conf.MS2 = 0;
 800a134:	4b22      	ldr	r3, [pc, #136]	; (800a1c0 <cnc_init+0xa4>)
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Motor1.Conf.MS3 = 0;
 800a13c:	4b20      	ldr	r3, [pc, #128]	; (800a1c0 <cnc_init+0xa4>)
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Motor1.Conf.DIR = 0;
 800a144:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <cnc_init+0xa4>)
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Motor1.Status = ST_OFF;
 800a14c:	4b1c      	ldr	r3, [pc, #112]	; (800a1c0 <cnc_init+0xa4>)
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Motor1.tar_steps = 0;
 800a154:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <cnc_init+0xa4>)
 800a156:	2200      	movs	r2, #0
 800a158:	63da      	str	r2, [r3, #60]	; 0x3c
	Motor1.Steps_count = 0;
 800a15a:	4b19      	ldr	r3, [pc, #100]	; (800a1c0 <cnc_init+0xa4>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	639a      	str	r2, [r3, #56]	; 0x38

	Motor2.Conf.ENB = 0;
 800a160:	4b18      	ldr	r3, [pc, #96]	; (800a1c4 <cnc_init+0xa8>)
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Motor2.Conf.MS1 = 0;
 800a168:	4b16      	ldr	r3, [pc, #88]	; (800a1c4 <cnc_init+0xa8>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	Motor2.Conf.MS2 = 0;
 800a170:	4b14      	ldr	r3, [pc, #80]	; (800a1c4 <cnc_init+0xa8>)
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Motor2.Conf.MS3 = 0;
 800a178:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <cnc_init+0xa8>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Motor2.Conf.DIR = 0;
 800a180:	4b10      	ldr	r3, [pc, #64]	; (800a1c4 <cnc_init+0xa8>)
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Motor2.Status = ST_OFF;
 800a188:	4b0e      	ldr	r3, [pc, #56]	; (800a1c4 <cnc_init+0xa8>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Motor2.tar_steps = 0;
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <cnc_init+0xa8>)
 800a192:	2200      	movs	r2, #0
 800a194:	63da      	str	r2, [r3, #60]	; 0x3c
	Motor2.Steps_count = 0;
 800a196:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <cnc_init+0xa8>)
 800a198:	2200      	movs	r2, #0
 800a19a:	639a      	str	r2, [r3, #56]	; 0x38

	//Configured the pins for m1 & m2
	StM_Pin_Conf_v2(&Motor1,&Motor2);
 800a19c:	4909      	ldr	r1, [pc, #36]	; (800a1c4 <cnc_init+0xa8>)
 800a19e:	4808      	ldr	r0, [pc, #32]	; (800a1c0 <cnc_init+0xa4>)
 800a1a0:	f000 f89a 	bl	800a2d8 <StM_Pin_Conf_v2>

	// initialize m1 & m2
	StM_Conf_Init(&Motor1);
 800a1a4:	4806      	ldr	r0, [pc, #24]	; (800a1c0 <cnc_init+0xa4>)
 800a1a6:	f000 f8ef 	bl	800a388 <StM_Conf_Init>
	StM_Conf_Init(&Motor2);
 800a1aa:	4806      	ldr	r0, [pc, #24]	; (800a1c4 <cnc_init+0xa8>)
 800a1ac:	f000 f8ec 	bl	800a388 <StM_Conf_Init>

	// init the servo motor , attach it to htim
	Servo_Init(&servo, htim);
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	4805      	ldr	r0, [pc, #20]	; (800a1c8 <cnc_init+0xac>)
 800a1b4:	f000 f82f 	bl	800a216 <Servo_Init>
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	200026d0 	.word	0x200026d0
 800a1c4:	200020f8 	.word	0x200020f8
 800a1c8:	200023dc 	.word	0x200023dc

0800a1cc <cnc_DriveM>:


void cnc_DriveM(Step_Driver_Handler* Motor){
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	if (Motor->Status == ST_ORDER){
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d117      	bne.n	800a20e <cnc_DriveM+0x42>
			  STM_Step(Motor);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f914 	bl	800a40c <STM_Step>
			  if (Motor->Steps_count == Motor->tar_steps){
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d10e      	bne.n	800a20e <cnc_DriveM+0x42>
					  Motor->Steps_count = 0;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	639a      	str	r2, [r3, #56]	; 0x38
					  Motor->Status = ST_OFF;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					  HAL_GPIO_WritePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP,GPIO_PIN_RESET);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a206:	2200      	movs	r2, #0
 800a208:	4619      	mov	r1, r3
 800a20a:	f7f6 fe30 	bl	8000e6e <HAL_GPIO_WritePin>
			  	  }
	}
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <Servo_Init>:
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Init(Servo_Handle_t* servo,TIM_HandleTypeDef* ptim)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
	servo->ptim = ptim;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	601a      	str	r2, [r3, #0]
	servo->curr_pos = 0;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	711a      	strb	r2, [r3, #4]
	servo->Status = OFF;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	715a      	strb	r2, [r3, #5]
	Servo_Goto(servo, 0);
 800a232:	2100      	movs	r1, #0
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f805 	bl	800a244 <Servo_Goto>


}
 800a23a:	bf00      	nop
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <Servo_Goto>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Goto(Servo_Handle_t* servo,uint8_t angle){
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
		uint16_t Period = servo->ptim->Init.Period;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	81fb      	strh	r3, [r7, #14]
		uint16_t duty = angle *( ( (Period / 10) - OFFSET) / MAX_ANGLE )+ OFFSET;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	89fb      	ldrh	r3, [r7, #14]
 800a25e:	4911      	ldr	r1, [pc, #68]	; (800a2a4 <Servo_Goto+0x60>)
 800a260:	fba1 1303 	umull	r1, r3, r1, r3
 800a264:	08db      	lsrs	r3, r3, #3
 800a266:	b29b      	uxth	r3, r3
 800a268:	3bfa      	subs	r3, #250	; 0xfa
 800a26a:	490f      	ldr	r1, [pc, #60]	; (800a2a8 <Servo_Goto+0x64>)
 800a26c:	fb81 0103 	smull	r0, r1, r1, r3
 800a270:	4419      	add	r1, r3
 800a272:	11c9      	asrs	r1, r1, #7
 800a274:	17db      	asrs	r3, r3, #31
 800a276:	1acb      	subs	r3, r1, r3
 800a278:	b29b      	uxth	r3, r3
 800a27a:	fb03 f302 	mul.w	r3, r3, r2
 800a27e:	b29b      	uxth	r3, r3
 800a280:	33fa      	adds	r3, #250	; 0xfa
 800a282:	81bb      	strh	r3, [r7, #12]
		servo->curr_pos = angle;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	711a      	strb	r2, [r3, #4]
		Servo_Start(servo);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f80e 	bl	800a2ac <Servo_Start>
		__HAL_TIM_SET_COMPARE(servo->ptim,TIM_CHANNEL_1,duty);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	89ba      	ldrh	r2, [r7, #12]
 800a298:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a29a:	bf00      	nop
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	cccccccd 	.word	0xcccccccd
 800a2a8:	b60b60b7 	.word	0xb60b60b7

0800a2ac <Servo_Start>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Start(Servo_Handle_t* servo){
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	if(servo->Status == OFF ){
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	795b      	ldrb	r3, [r3, #5]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d108      	bne.n	800a2ce <Servo_Start+0x22>
		HAL_TIM_PWM_Start(servo->ptim, TIM_CHANNEL_1);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7f9 f97c 	bl	80035c0 <HAL_TIM_PWM_Start>
		servo->Status = ON;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	715a      	strb	r2, [r3, #5]
	}
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <StM_Pin_Conf_v2>:
	Motor2->Pins.port_STEP = GPIOA;
	Motor2->Pins.pin_STEP = GPIO_PIN_4;

}

void StM_Pin_Conf_v2(Step_Driver_Handler * Motor1,Step_Driver_Handler * Motor2){
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]

	// pin B9 en
	Motor1->Pins.port_ENB = GPIOB;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a26      	ldr	r2, [pc, #152]	; (800a380 <StM_Pin_Conf_v2+0xa8>)
 800a2e6:	601a      	str	r2, [r3, #0]
	Motor1->Pins.pin_ENB = GPIO_PIN_9;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2ee:	809a      	strh	r2, [r3, #4]
	// pin 8 MS1 : 0
	Motor1->Pins.port_MS1 = GPIOB;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a23      	ldr	r2, [pc, #140]	; (800a380 <StM_Pin_Conf_v2+0xa8>)
 800a2f4:	609a      	str	r2, [r3, #8]
	Motor1->Pins.pin_MS1 = GPIO_PIN_7;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2280      	movs	r2, #128	; 0x80
 800a2fa:	819a      	strh	r2, [r3, #12]
	// pin 7 MS2 : 0
	Motor1->Pins.port_MS2 = GPIOB;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a20      	ldr	r2, [pc, #128]	; (800a380 <StM_Pin_Conf_v2+0xa8>)
 800a300:	611a      	str	r2, [r3, #16]
	Motor1->Pins.pin_MS2 = GPIO_PIN_6;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2240      	movs	r2, #64	; 0x40
 800a306:	829a      	strh	r2, [r3, #20]
	// pin 6 MS3 : 0
	Motor1->Pins.port_MS3 = GPIOB;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a1d      	ldr	r2, [pc, #116]	; (800a380 <StM_Pin_Conf_v2+0xa8>)
 800a30c:	619a      	str	r2, [r3, #24]
	Motor1->Pins.pin_MS3 = GPIO_PIN_5;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	839a      	strh	r2, [r3, #28]
	// pin 4 DIR : 0
	Motor1->Pins.port_DIR = GPIOB;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a1a      	ldr	r2, [pc, #104]	; (800a380 <StM_Pin_Conf_v2+0xa8>)
 800a318:	621a      	str	r2, [r3, #32]
	Motor1->Pins.pin_DIR = GPIO_PIN_3;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2208      	movs	r2, #8
 800a31e:	849a      	strh	r2, [r3, #36]	; 0x24
	// pin B5 Step
	Motor1->Pins.port_STEP = GPIOB;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a17      	ldr	r2, [pc, #92]	; (800a380 <StM_Pin_Conf_v2+0xa8>)
 800a324:	629a      	str	r2, [r3, #40]	; 0x28
	Motor1->Pins.pin_STEP = GPIO_PIN_4;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2210      	movs	r2, #16
 800a32a:	859a      	strh	r2, [r3, #44]	; 0x2c



	// pin B9 EN
	Motor2->Pins.port_ENB = GPIOB;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	4a14      	ldr	r2, [pc, #80]	; (800a380 <StM_Pin_Conf_v2+0xa8>)
 800a330:	601a      	str	r2, [r3, #0]
	Motor2->Pins.pin_ENB = GPIO_PIN_9;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a338:	809a      	strh	r2, [r3, #4]
	// pin A7 MS1
	Motor2->Pins.port_MS1 = GPIOA;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	4a11      	ldr	r2, [pc, #68]	; (800a384 <StM_Pin_Conf_v2+0xac>)
 800a33e:	609a      	str	r2, [r3, #8]
	Motor2->Pins.pin_MS1 = GPIO_PIN_7;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2280      	movs	r2, #128	; 0x80
 800a344:	819a      	strh	r2, [r3, #12]
	// pin A6 MS2
	Motor2->Pins.port_MS2 = GPIOA;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	4a0e      	ldr	r2, [pc, #56]	; (800a384 <StM_Pin_Conf_v2+0xac>)
 800a34a:	611a      	str	r2, [r3, #16]
	Motor2->Pins.pin_MS2 = GPIO_PIN_6;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2240      	movs	r2, #64	; 0x40
 800a350:	829a      	strh	r2, [r3, #20]
	// pin A5 MS3
	Motor2->Pins.port_MS3 = GPIOA;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	4a0b      	ldr	r2, [pc, #44]	; (800a384 <StM_Pin_Conf_v2+0xac>)
 800a356:	619a      	str	r2, [r3, #24]
	Motor2->Pins.pin_MS3 = GPIO_PIN_5;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2220      	movs	r2, #32
 800a35c:	839a      	strh	r2, [r3, #28]
	// pin A3 DIR
	Motor2->Pins.port_DIR = GPIOA;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	4a08      	ldr	r2, [pc, #32]	; (800a384 <StM_Pin_Conf_v2+0xac>)
 800a362:	621a      	str	r2, [r3, #32]
	Motor2->Pins.pin_DIR = GPIO_PIN_3;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2208      	movs	r2, #8
 800a368:	849a      	strh	r2, [r3, #36]	; 0x24
	// pin A4 Step
	Motor2->Pins.port_STEP = GPIOA;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	4a05      	ldr	r2, [pc, #20]	; (800a384 <StM_Pin_Conf_v2+0xac>)
 800a36e:	629a      	str	r2, [r3, #40]	; 0x28
	Motor2->Pins.pin_STEP = GPIO_PIN_4;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2210      	movs	r2, #16
 800a374:	859a      	strh	r2, [r3, #44]	; 0x2c

}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bc80      	pop	{r7}
 800a37e:	4770      	bx	lr
 800a380:	40010c00 	.word	0x40010c00
 800a384:	40010800 	.word	0x40010800

0800a388 <StM_Conf_Init>:

void StM_Conf_Init(Step_Driver_Handler * Motor){
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]

	// pin ENB
	HAL_GPIO_WritePin(Motor->Pins.port_ENB, Motor->Pins.pin_ENB, Motor->Conf.ENB);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	8899      	ldrh	r1, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7f6 fd65 	bl	8000e6e <HAL_GPIO_WritePin>
	// pin MS1
	HAL_GPIO_WritePin(Motor->Pins.port_MS1, Motor->Pins.pin_MS1, Motor->Conf.MS1);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6898      	ldr	r0, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	8999      	ldrh	r1, [r3, #12]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f7f6 fd5b 	bl	8000e6e <HAL_GPIO_WritePin>
	// pin MS2
	HAL_GPIO_WritePin(Motor->Pins.port_MS2, Motor->Pins.pin_MS2, Motor->Conf.MS2);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6918      	ldr	r0, [r3, #16]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	8a99      	ldrh	r1, [r3, #20]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f7f6 fd51 	bl	8000e6e <HAL_GPIO_WritePin>
	// pin MS3
	HAL_GPIO_WritePin(Motor->Pins.port_MS3, Motor->Pins.pin_MS3, Motor->Conf.MS3);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6998      	ldr	r0, [r3, #24]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	8b99      	ldrh	r1, [r3, #28]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f7f6 fd47 	bl	8000e6e <HAL_GPIO_WritePin>
	// pin DIR
	HAL_GPIO_WritePin(Motor->Pins.port_DIR, Motor->Pins.pin_DIR, Motor->Conf.DIR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a18      	ldr	r0, [r3, #32]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	f7f6 fd3d 	bl	8000e6e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP, GPIO_PIN_RESET);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4619      	mov	r1, r3
 800a400:	f7f6 fd35 	bl	8000e6e <HAL_GPIO_WritePin>

}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <STM_Step>:
		Motor->Status = ST_ORDER;
		Motor->tar_steps = tar_Step;
	}
}

void STM_Step(Step_Driver_Handler* Motor){
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f7f6 fd3d 	bl	8000e9e <HAL_GPIO_TogglePin>
	if (HAL_GPIO_ReadPin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP) == GPIO_PIN_SET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a42c:	4619      	mov	r1, r3
 800a42e:	4610      	mov	r0, r2
 800a430:	f7f6 fd06 	bl	8000e40 <HAL_GPIO_ReadPin>
 800a434:	4603      	mov	r3, r0
 800a436:	2b01      	cmp	r3, #1
 800a438:	d104      	bne.n	800a444 <STM_Step+0x38>
		Motor->Steps_count++;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	639a      	str	r2, [r3, #56]	; 0x38

}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <Com_Init>:
 * @fn					- Com_Init
 *
 * @Note				- Init the Com Stack
 *
 **************************************************************************/
void Com_Init(){
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0

	// init the Queue that transfer data from usb isr to the com
	queueUSBtoCom = xQueueCreate(10, 64 * sizeof(uint8_t));
 800a450:	2200      	movs	r2, #0
 800a452:	2140      	movs	r1, #64	; 0x40
 800a454:	200a      	movs	r0, #10
 800a456:	f7fd fd59 	bl	8007f0c <xQueueGenericCreate>
 800a45a:	4603      	mov	r3, r0
 800a45c:	4a04      	ldr	r2, [pc, #16]	; (800a470 <Com_Init+0x24>)
 800a45e:	6013      	str	r3, [r2, #0]

	Buf_Init(&Com_TXstorage) ;
 800a460:	4804      	ldr	r0, [pc, #16]	; (800a474 <Com_Init+0x28>)
 800a462:	f000 f8cb 	bl	800a5fc <Buf_Init>
	MX_USB_DEVICE_Init();
 800a466:	f000 f9ed 	bl	800a844 <MX_USB_DEVICE_Init>
}
 800a46a:	bf00      	nop
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	200023e8 	.word	0x200023e8
 800a474:	20001bc0 	.word	0x20001bc0

0800a478 <Com_Transmit>:
 * @fn					- Com_Transmit
 *
 * @Note				- Transmit Message
 *
 **************************************************************************/
void Com_Transmit(){
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	607b      	str	r3, [r7, #4]

	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 800a482:	e014      	b.n	800a4ae <Com_Transmit+0x36>
		ptr = Buf_Dequeue(&Com_TXstorage);
 800a484:	480f      	ldr	r0, [pc, #60]	; (800a4c4 <Com_Transmit+0x4c>)
 800a486:	f000 f945 	bl	800a714 <Buf_Dequeue>
 800a48a:	6078      	str	r0, [r7, #4]
		while(CDC_Transmit_FS((uint8_t*) ptr->data, strlen(ptr->data)+1) != USBD_OK);
 800a48c:	bf00      	nop
 800a48e:	687c      	ldr	r4, [r7, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4618      	mov	r0, r3
 800a494:	f7f5 fe5c 	bl	8000150 <strlen>
 800a498:	4603      	mov	r3, r0
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	3301      	adds	r3, #1
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 fab6 	bl	800aa14 <CDC_Transmit_FS>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1ef      	bne.n	800a48e <Com_Transmit+0x16>
	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 800a4ae:	4805      	ldr	r0, [pc, #20]	; (800a4c4 <Com_Transmit+0x4c>)
 800a4b0:	f000 f9b6 	bl	800a820 <Buf_IsEmpty>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e4      	bne.n	800a484 <Com_Transmit+0xc>
	}
}
 800a4ba:	bf00      	nop
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd90      	pop	{r4, r7, pc}
 800a4c4:	20001bc0 	.word	0x20001bc0

0800a4c8 <Com_Queue_msg>:
 * @fn					- Com_Queue_msg
 *
 * @Note				- store the message to the TX buffer
 *
 **************************************************************************/
HAL_StatusTypeDef Com_Queue_msg(Data_t * msg){
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]

	if (HAL_OK == Buf_Queue(&Com_TXstorage, msg))
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	4806      	ldr	r0, [pc, #24]	; (800a4ec <Com_Queue_msg+0x24>)
 800a4d4:	f000 f8c2 	bl	800a65c <Buf_Queue>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <Com_Queue_msg+0x1a>
		return HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e000      	b.n	800a4e4 <Com_Queue_msg+0x1c>
	else
		return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20001bc0 	.word	0x20001bc0

0800a4f0 <Com_Receive>:
 * @fn					- Com_Receive
 *
 * @Note				- Store message received in the RXbuffer
 *
 **************************************************************************/
void Com_Receive(){
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b0c4      	sub	sp, #272	; 0x110
 800a4f4:	af00      	add	r7, sp, #0
	Data_t ptr;
	Data_t msg = {.data = "cmd test",.id = 0 , .state = 0};
 800a4f6:	4a32      	ldr	r2, [pc, #200]	; (800a5c0 <Com_Receive+0xd0>)
 800a4f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	2242      	movs	r2, #66	; 0x42
 800a500:	4618      	mov	r0, r3
 800a502:	f000 fe89 	bl	800b218 <memcpy>
	Data_t msg1 = {.data = "cmd G code",.id = 0 , .state = 0};
 800a506:	4a2f      	ldr	r2, [pc, #188]	; (800a5c4 <Com_Receive+0xd4>)
 800a508:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a50c:	4611      	mov	r1, r2
 800a50e:	2242      	movs	r2, #66	; 0x42
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fe81 	bl	800b218 <memcpy>
	Data_t msg2 = {.data = "cmd execute code",.id = 0 , .state = 0};
 800a516:	463b      	mov	r3, r7
 800a518:	4a2b      	ldr	r2, [pc, #172]	; (800a5c8 <Com_Receive+0xd8>)
 800a51a:	4618      	mov	r0, r3
 800a51c:	4611      	mov	r1, r2
 800a51e:	2342      	movs	r3, #66	; 0x42
 800a520:	461a      	mov	r2, r3
 800a522:	f000 fe79 	bl	800b218 <memcpy>
	//if (strncmp((char*)buffer, "up:01", 6) == 0)
	//	flag_data_received = 0;
	while (pdPASS == xQueueReceive( queueUSBtoCom, &ptr.data, 0 )){
 800a526:	e039      	b.n	800a59c <Com_Receive+0xac>
		// check if the msg is a G code "Start with G"
		if (strncmp((char*)ptr.data, "cmd:info", 8) == 0){
 800a528:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a52c:	2208      	movs	r2, #8
 800a52e:	4927      	ldr	r1, [pc, #156]	; (800a5cc <Com_Receive+0xdc>)
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fe87 	bl	800b244 <strncmp>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d105      	bne.n	800a548 <Com_Receive+0x58>

			Com_Queue_msg(&msg);
 800a53c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff ffc1 	bl	800a4c8 <Com_Queue_msg>
 800a546:	e029      	b.n	800a59c <Com_Receive+0xac>
		}// check if the msg is a execute code "Start with cmd"
		else if (strncmp((char*)ptr.data, "G", 1) == 0){
 800a548:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
 800a54c:	4b20      	ldr	r3, [pc, #128]	; (800a5d0 <Com_Receive+0xe0>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d105      	bne.n	800a562 <Com_Receive+0x72>
			Com_Queue_msg(&msg1);
 800a556:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7ff ffb4 	bl	800a4c8 <Com_Queue_msg>
 800a560:	e01c      	b.n	800a59c <Com_Receive+0xac>
		}// check if the msg is a execute code "Start with cmd"
		else if (strncmp((char*)ptr.data, "cmd:move", 7) == 0){
 800a562:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a566:	2207      	movs	r2, #7
 800a568:	491a      	ldr	r1, [pc, #104]	; (800a5d4 <Com_Receive+0xe4>)
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 fe6a 	bl	800b244 <strncmp>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d104      	bne.n	800a580 <Com_Receive+0x90>
					Com_Queue_msg(&msg2);
 800a576:	463b      	mov	r3, r7
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff ffa5 	bl	800a4c8 <Com_Queue_msg>
 800a57e:	e00d      	b.n	800a59c <Com_Receive+0xac>
		}
		else if (strncmp((char*)ptr.data, "conf:", 5) == 0){
 800a580:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a584:	2205      	movs	r2, #5
 800a586:	4914      	ldr	r1, [pc, #80]	; (800a5d8 <Com_Receive+0xe8>)
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 fe5b 	bl	800b244 <strncmp>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d103      	bne.n	800a59c <Com_Receive+0xac>
			Com_Queue_msg(&msg2);
 800a594:	463b      	mov	r3, r7
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff ff96 	bl	800a4c8 <Com_Queue_msg>
	while (pdPASS == xQueueReceive( queueUSBtoCom, &ptr.data, 0 )){
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <Com_Receive+0xec>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fd fed6 	bl	8008358 <xQueueReceive>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d0ba      	beq.n	800a528 <Com_Receive+0x38>
	else if (Buf_IsFull(&Com_RXstorage) == BUF_FULL && flag_data_received == 1){
				while(CDC_Transmit_FS((uint8_t*) "RX:Full\n", 8) != USBD_OK);
				flag_data_received = 0;
			}
	*/
}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800b2f8 	.word	0x0800b2f8
 800a5c4:	0800b33c 	.word	0x0800b33c
 800a5c8:	0800b380 	.word	0x0800b380
 800a5cc:	0800b2d4 	.word	0x0800b2d4
 800a5d0:	0800b2e0 	.word	0x0800b2e0
 800a5d4:	0800b2e4 	.word	0x0800b2e4
 800a5d8:	0800b2f0 	.word	0x0800b2f0
 800a5dc:	200023e8 	.word	0x200023e8

0800a5e0 <G_Code_Init>:
 *      Author: soufiane
 */

#include "G_code.h"

void G_Code_Init(){
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0
	Buf_Init(&Job_Stack);
 800a5e4:	4803      	ldr	r0, [pc, #12]	; (800a5f4 <G_Code_Init+0x14>)
 800a5e6:	f000 f809 	bl	800a5fc <Buf_Init>
	Buf_Init(&Gcode_Stack);
 800a5ea:	4803      	ldr	r0, [pc, #12]	; (800a5f8 <G_Code_Init+0x18>)
 800a5ec:	f000 f806 	bl	800a5fc <Buf_Init>
}
 800a5f0:	bf00      	nop
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20002434 	.word	0x20002434
 800a5f8:	20002140 	.word	0x20002140

0800a5fc <Buf_Init>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Buf_Init(Buf_Handler_t* buf){
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	for (int index = 0;index<BUF_SIZE;index++)
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	e011      	b.n	800a62e <Buf_Init+0x32>
		memset(buf->data[buf->rear].data,'\0',MESSAGE_SIZE);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a610:	461a      	mov	r2, r3
 800a612:	4613      	mov	r3, r2
 800a614:	015b      	lsls	r3, r3, #5
 800a616:	4413      	add	r3, r2
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	4413      	add	r3, r2
 800a61e:	2240      	movs	r2, #64	; 0x40
 800a620:	2100      	movs	r1, #0
 800a622:	4618      	mov	r0, r3
 800a624:	f000 fe06 	bl	800b234 <memset>
	for (int index = 0;index<BUF_SIZE;index++)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3301      	adds	r3, #1
 800a62c:	60fb      	str	r3, [r7, #12]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b09      	cmp	r3, #9
 800a632:	ddea      	ble.n	800a60a <Buf_Init+0xe>
	buf->front = -1;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	22ff      	movs	r2, #255	; 0xff
 800a638:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	buf->rear = -1;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	22ff      	movs	r2, #255	; 0xff
 800a640:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	buf->mutex = xSemaphoreCreateMutex();
 800a644:	2001      	movs	r0, #1
 800a646:	f7fd fcd8 	bl	8007ffa <xQueueCreateMutex>
 800a64a:	4602      	mov	r2, r0
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	if (buf->mutex == NULL){

	}
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <Buf_Queue>:
 * @return				- HAL_StatusTypeDef
 *
 * @Note				- None
 *
 **************************************************************************/
HAL_StatusTypeDef Buf_Queue(Buf_Handler_t* buf,Data_t* ptr){
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]

	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a66c:	2101      	movs	r1, #1
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fd ff52 	bl	8008518 <xQueueSemaphoreTake>
	if (Buf_IsFull(buf) == BUF_FULL ){
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f8b1 	bl	800a7dc <Buf_IsFull>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d109      	bne.n	800a694 <Buf_Queue+0x38>
		xSemaphoreGive(buf->mutex);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a686:	2300      	movs	r3, #0
 800a688:	2200      	movs	r2, #0
 800a68a:	2100      	movs	r1, #0
 800a68c:	f7fd fcce 	bl	800802c <xQueueGenericSend>
		return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e039      	b.n	800a708 <Buf_Queue+0xac>
	}
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f8c3 	bl	800a820 <Buf_IsEmpty>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d108      	bne.n	800a6b2 <Buf_Queue+0x56>
		buf->front = 0;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		buf->rear = 0;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a6b0:	e012      	b.n	800a6d8 <Buf_Queue+0x7c>
	}else{
		buf->front = (buf->front+1) % BUF_SIZE ;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	4b15      	ldr	r3, [pc, #84]	; (800a710 <Buf_Queue+0xb4>)
 800a6bc:	fb83 1302 	smull	r1, r3, r3, r2
 800a6c0:	1099      	asrs	r1, r3, #2
 800a6c2:	17d3      	asrs	r3, r2, #31
 800a6c4:	1ac9      	subs	r1, r1, r3
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	1ad1      	subs	r1, r2, r3
 800a6d0:	b24a      	sxtb	r2, r1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	}
	memcpy(&buf->data[buf->front],ptr,sizeof(Data_t));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a6de:	461a      	mov	r2, r3
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	015b      	lsls	r3, r3, #5
 800a6e4:	4413      	add	r3, r2
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	2242      	movs	r2, #66	; 0x42
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 fd91 	bl	800b218 <memcpy>
	xSemaphoreGive(buf->mutex);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	2200      	movs	r2, #0
 800a700:	2100      	movs	r1, #0
 800a702:	f7fd fc93 	bl	800802c <xQueueGenericSend>
	return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	66666667 	.word	0x66666667

0800a714 <Buf_Dequeue>:
 * @fn					- Buf_Dequeue
 *
 * @Note				- None
 *
 **************************************************************************/
Data_t* Buf_Dequeue(Buf_Handler_t* buf){
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a722:	2101      	movs	r1, #1
 800a724:	4618      	mov	r0, r3
 800a726:	f7fd fef7 	bl	8008518 <xQueueSemaphoreTake>
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f878 	bl	800a820 <Buf_IsEmpty>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <Buf_Dequeue+0x36>
		xSemaphoreGive(buf->mutex);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a73c:	2300      	movs	r3, #0
 800a73e:	2200      	movs	r2, #0
 800a740:	2100      	movs	r1, #0
 800a742:	f7fd fc73 	bl	800802c <xQueueGenericSend>
		return NULL;
 800a746:	2300      	movs	r3, #0
 800a748:	e03f      	b.n	800a7ca <Buf_Dequeue+0xb6>
	}
	static Data_t rt;
	memcpy(&rt,&(buf->data[buf->rear]),sizeof(Data_t));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a750:	461a      	mov	r2, r3
 800a752:	4613      	mov	r3, r2
 800a754:	015b      	lsls	r3, r3, #5
 800a756:	4413      	add	r3, r2
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	4a1d      	ldr	r2, [pc, #116]	; (800a7d4 <Buf_Dequeue+0xc0>)
 800a760:	4610      	mov	r0, r2
 800a762:	4619      	mov	r1, r3
 800a764:	2342      	movs	r3, #66	; 0x42
 800a766:	461a      	mov	r2, r3
 800a768:	f000 fd56 	bl	800b218 <memcpy>
	if (buf->front == buf->rear){
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f993 2298 	ldrsb.w	r2, [r3, #664]	; 0x298
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a778:	429a      	cmp	r2, r3
 800a77a:	d10a      	bne.n	800a792 <Buf_Dequeue+0x7e>
		buf->front = buf->rear = -1;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	22ff      	movs	r2, #255	; 0xff
 800a780:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f993 2299 	ldrsb.w	r2, [r3, #665]	; 0x299
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800a790:	e012      	b.n	800a7b8 <Buf_Dequeue+0xa4>
	}else {
		buf->rear = (buf->rear + 1) % BUF_SIZE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <Buf_Dequeue+0xc4>)
 800a79c:	fb83 1302 	smull	r1, r3, r3, r2
 800a7a0:	1099      	asrs	r1, r3, #2
 800a7a2:	17d3      	asrs	r3, r2, #31
 800a7a4:	1ac9      	subs	r1, r1, r3
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	440b      	add	r3, r1
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	1ad1      	subs	r1, r2, r3
 800a7b0:	b24a      	sxtb	r2, r1
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	}
	xSemaphoreGive(buf->mutex);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a7be:	2300      	movs	r3, #0
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	f7fd fc32 	bl	800802c <xQueueGenericSend>
	return &rt ;
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <Buf_Dequeue+0xc0>)
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20001910 	.word	0x20001910
 800a7d8:	66666667 	.word	0x66666667

0800a7dc <Buf_IsFull>:
 * @fn					- Buf_IsFull
 *
 * @Note				- func to check if the Buf is full
 *
 **************************************************************************/
Buf_Status_t Buf_IsFull(Buf_Handler_t* buf){
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	return ((buf->front+1) % BUF_SIZE) == buf->rear;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a7ea:	1c59      	adds	r1, r3, #1
 800a7ec:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <Buf_IsFull+0x40>)
 800a7ee:	fb83 2301 	smull	r2, r3, r3, r1
 800a7f2:	109a      	asrs	r2, r3, #2
 800a7f4:	17cb      	asrs	r3, r1, #31
 800a7f6:	1ad2      	subs	r2, r2, r3
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	1aca      	subs	r2, r1, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a808:	429a      	cmp	r2, r3
 800a80a:	bf0c      	ite	eq
 800a80c:	2301      	moveq	r3, #1
 800a80e:	2300      	movne	r3, #0
 800a810:	b2db      	uxtb	r3, r3
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	66666667 	.word	0x66666667

0800a820 <Buf_IsEmpty>:
 * @fn					- Buf_IsEmpty
 *
 * @Note				- func to check if the Buf is empty
 *
 **************************************************************************/
Buf_Status_t Buf_IsEmpty(Buf_Handler_t* buf){
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	return !(buf->front == -1);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a832:	bf14      	ite	ne
 800a834:	2301      	movne	r3, #1
 800a836:	2300      	moveq	r3, #0
 800a838:	b2db      	uxtb	r3, r3
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	bc80      	pop	{r7}
 800a842:	4770      	bx	lr

0800a844 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a848:	2200      	movs	r2, #0
 800a84a:	4912      	ldr	r1, [pc, #72]	; (800a894 <MX_USB_DEVICE_Init+0x50>)
 800a84c:	4812      	ldr	r0, [pc, #72]	; (800a898 <MX_USB_DEVICE_Init+0x54>)
 800a84e:	f7fc f92e 	bl	8006aae <USBD_Init>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a858:	f7f5 feda 	bl	8000610 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a85c:	490f      	ldr	r1, [pc, #60]	; (800a89c <MX_USB_DEVICE_Init+0x58>)
 800a85e:	480e      	ldr	r0, [pc, #56]	; (800a898 <MX_USB_DEVICE_Init+0x54>)
 800a860:	f7fc f950 	bl	8006b04 <USBD_RegisterClass>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a86a:	f7f5 fed1 	bl	8000610 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a86e:	490c      	ldr	r1, [pc, #48]	; (800a8a0 <MX_USB_DEVICE_Init+0x5c>)
 800a870:	4809      	ldr	r0, [pc, #36]	; (800a898 <MX_USB_DEVICE_Init+0x54>)
 800a872:	f7fc f881 	bl	8006978 <USBD_CDC_RegisterInterface>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a87c:	f7f5 fec8 	bl	8000610 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a880:	4805      	ldr	r0, [pc, #20]	; (800a898 <MX_USB_DEVICE_Init+0x54>)
 800a882:	f7fc f958 	bl	8006b36 <USBD_Start>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a88c:	f7f5 fec0 	bl	8000610 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a890:	bf00      	nop
 800a892:	bd80      	pop	{r7, pc}
 800a894:	20000130 	.word	0x20000130
 800a898:	20002760 	.word	0x20002760
 800a89c:	20000018 	.word	0x20000018
 800a8a0:	20000120 	.word	0x20000120

0800a8a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	4905      	ldr	r1, [pc, #20]	; (800a8c0 <CDC_Init_FS+0x1c>)
 800a8ac:	4805      	ldr	r0, [pc, #20]	; (800a8c4 <CDC_Init_FS+0x20>)
 800a8ae:	f7fc f879 	bl	80069a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8b2:	4905      	ldr	r1, [pc, #20]	; (800a8c8 <CDC_Init_FS+0x24>)
 800a8b4:	4803      	ldr	r0, [pc, #12]	; (800a8c4 <CDC_Init_FS+0x20>)
 800a8b6:	f7fc f88e 	bl	80069d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20002c18 	.word	0x20002c18
 800a8c4:	20002760 	.word	0x20002760
 800a8c8:	20002a24 	.word	0x20002a24

0800a8cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr
	...

0800a8dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	6039      	str	r1, [r7, #0]
 800a8e6:	71fb      	strb	r3, [r7, #7]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	2b23      	cmp	r3, #35	; 0x23
 800a8f0:	d84a      	bhi.n	800a988 <CDC_Control_FS+0xac>
 800a8f2:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <CDC_Control_FS+0x1c>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a989 	.word	0x0800a989
 800a8fc:	0800a989 	.word	0x0800a989
 800a900:	0800a989 	.word	0x0800a989
 800a904:	0800a989 	.word	0x0800a989
 800a908:	0800a989 	.word	0x0800a989
 800a90c:	0800a989 	.word	0x0800a989
 800a910:	0800a989 	.word	0x0800a989
 800a914:	0800a989 	.word	0x0800a989
 800a918:	0800a989 	.word	0x0800a989
 800a91c:	0800a989 	.word	0x0800a989
 800a920:	0800a989 	.word	0x0800a989
 800a924:	0800a989 	.word	0x0800a989
 800a928:	0800a989 	.word	0x0800a989
 800a92c:	0800a989 	.word	0x0800a989
 800a930:	0800a989 	.word	0x0800a989
 800a934:	0800a989 	.word	0x0800a989
 800a938:	0800a989 	.word	0x0800a989
 800a93c:	0800a989 	.word	0x0800a989
 800a940:	0800a989 	.word	0x0800a989
 800a944:	0800a989 	.word	0x0800a989
 800a948:	0800a989 	.word	0x0800a989
 800a94c:	0800a989 	.word	0x0800a989
 800a950:	0800a989 	.word	0x0800a989
 800a954:	0800a989 	.word	0x0800a989
 800a958:	0800a989 	.word	0x0800a989
 800a95c:	0800a989 	.word	0x0800a989
 800a960:	0800a989 	.word	0x0800a989
 800a964:	0800a989 	.word	0x0800a989
 800a968:	0800a989 	.word	0x0800a989
 800a96c:	0800a989 	.word	0x0800a989
 800a970:	0800a989 	.word	0x0800a989
 800a974:	0800a989 	.word	0x0800a989
 800a978:	0800a989 	.word	0x0800a989
 800a97c:	0800a989 	.word	0x0800a989
 800a980:	0800a989 	.word	0x0800a989
 800a984:	0800a989 	.word	0x0800a989
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a988:	bf00      	nop
  }

  return (USBD_OK);
 800a98a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop

0800a998 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b092      	sub	sp, #72	; 0x48
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	4818      	ldr	r0, [pc, #96]	; (800aa08 <CDC_Receive_FS+0x70>)
 800a9a6:	f7fc f816 	bl	80069d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9aa:	4817      	ldr	r0, [pc, #92]	; (800aa08 <CDC_Receive_FS+0x70>)
 800a9ac:	f7fc f855 	bl	8006a5a <USBD_CDC_ReceivePacket>

  // create a buffer of 64 to transmit only 64 char
  uint8_t buffer [64];
  memset(buffer,'\0',64);
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	2240      	movs	r2, #64	; 0x40
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 fc3b 	bl	800b234 <memset>
  memcpy(buffer,Buf,*Len);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	f107 0308 	add.w	r3, r7, #8
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fc25 	bl	800b218 <memcpy>

  if(xQueueSendFromISR(queueUSBtoCom, buffer, NULL) != pdPASS)
 800a9ce:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <CDC_Receive_FS+0x74>)
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f107 0108 	add.w	r1, r7, #8
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f7fd fc25 	bl	8008228 <xQueueGenericSendFromISR>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d004      	beq.n	800a9ee <CDC_Receive_FS+0x56>
  {
	  // Handle error: Failed to send data
	  errortosendqueue ++;
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <CDC_Receive_FS+0x78>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	4a09      	ldr	r2, [pc, #36]	; (800aa10 <CDC_Receive_FS+0x78>)
 800a9ec:	6013      	str	r3, [r2, #0]
  }

  memset(Buf,'\0',*Len);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fc1c 	bl	800b234 <memset>


  return (USBD_OK);
 800a9fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3748      	adds	r7, #72	; 0x48
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20002760 	.word	0x20002760
 800aa0c:	200023e8 	.word	0x200023e8
 800aa10:	2000213c 	.word	0x2000213c

0800aa14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <CDC_Transmit_FS+0x48>)
 800aa26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e00b      	b.n	800aa52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa3a:	887b      	ldrh	r3, [r7, #2]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	4806      	ldr	r0, [pc, #24]	; (800aa5c <CDC_Transmit_FS+0x48>)
 800aa42:	f7fb ffaf 	bl	80069a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa46:	4805      	ldr	r0, [pc, #20]	; (800aa5c <CDC_Transmit_FS+0x48>)
 800aa48:	f7fb ffd8 	bl	80069fc <USBD_CDC_TransmitPacket>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20002760 	.word	0x20002760

0800aa60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	6039      	str	r1, [r7, #0]
 800aa6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2212      	movs	r2, #18
 800aa70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa72:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bc80      	pop	{r7}
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	2000014c 	.word	0x2000014c

0800aa84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2204      	movs	r2, #4
 800aa94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa96:	4b03      	ldr	r3, [pc, #12]	; (800aaa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bc80      	pop	{r7}
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000160 	.word	0x20000160

0800aaa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4907      	ldr	r1, [pc, #28]	; (800aadc <USBD_FS_ProductStrDescriptor+0x34>)
 800aabe:	4808      	ldr	r0, [pc, #32]	; (800aae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aac0:	f7fc ffb2 	bl	8007a28 <USBD_GetString>
 800aac4:	e004      	b.n	800aad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4904      	ldr	r1, [pc, #16]	; (800aadc <USBD_FS_ProductStrDescriptor+0x34>)
 800aaca:	4805      	ldr	r0, [pc, #20]	; (800aae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aacc:	f7fc ffac 	bl	8007a28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20002e0c 	.word	0x20002e0c
 800aae0:	0800b3c4 	.word	0x0800b3c4

0800aae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	4904      	ldr	r1, [pc, #16]	; (800ab04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aaf4:	4804      	ldr	r0, [pc, #16]	; (800ab08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aaf6:	f7fc ff97 	bl	8007a28 <USBD_GetString>
  return USBD_StrDesc;
 800aafa:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20002e0c 	.word	0x20002e0c
 800ab08:	0800b3dc 	.word	0x0800b3dc

0800ab0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	6039      	str	r1, [r7, #0]
 800ab16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	221a      	movs	r2, #26
 800ab1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab1e:	f000 f843 	bl	800aba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab22:	4b02      	ldr	r3, [pc, #8]	; (800ab2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000164 	.word	0x20000164

0800ab30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab3c:	79fb      	ldrb	r3, [r7, #7]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d105      	bne.n	800ab4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4907      	ldr	r1, [pc, #28]	; (800ab64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab46:	4808      	ldr	r0, [pc, #32]	; (800ab68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab48:	f7fc ff6e 	bl	8007a28 <USBD_GetString>
 800ab4c:	e004      	b.n	800ab58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	4904      	ldr	r1, [pc, #16]	; (800ab64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab52:	4805      	ldr	r0, [pc, #20]	; (800ab68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab54:	f7fc ff68 	bl	8007a28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab58:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20002e0c 	.word	0x20002e0c
 800ab68:	0800b3f0 	.word	0x0800b3f0

0800ab6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d105      	bne.n	800ab8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	4907      	ldr	r1, [pc, #28]	; (800aba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab82:	4808      	ldr	r0, [pc, #32]	; (800aba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab84:	f7fc ff50 	bl	8007a28 <USBD_GetString>
 800ab88:	e004      	b.n	800ab94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	4904      	ldr	r1, [pc, #16]	; (800aba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab8e:	4805      	ldr	r0, [pc, #20]	; (800aba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab90:	f7fc ff4a 	bl	8007a28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab94:	4b02      	ldr	r3, [pc, #8]	; (800aba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20002e0c 	.word	0x20002e0c
 800aba4:	0800b3fc 	.word	0x0800b3fc

0800aba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abae:	4b0f      	ldr	r3, [pc, #60]	; (800abec <Get_SerialNum+0x44>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <Get_SerialNum+0x48>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abba:	4b0e      	ldr	r3, [pc, #56]	; (800abf4 <Get_SerialNum+0x4c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abce:	2208      	movs	r2, #8
 800abd0:	4909      	ldr	r1, [pc, #36]	; (800abf8 <Get_SerialNum+0x50>)
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f814 	bl	800ac00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abd8:	2204      	movs	r2, #4
 800abda:	4908      	ldr	r1, [pc, #32]	; (800abfc <Get_SerialNum+0x54>)
 800abdc:	68b8      	ldr	r0, [r7, #8]
 800abde:	f000 f80f 	bl	800ac00 <IntToUnicode>
  }
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	1ffff7e8 	.word	0x1ffff7e8
 800abf0:	1ffff7ec 	.word	0x1ffff7ec
 800abf4:	1ffff7f0 	.word	0x1ffff7f0
 800abf8:	20000166 	.word	0x20000166
 800abfc:	20000176 	.word	0x20000176

0800ac00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac12:	2300      	movs	r3, #0
 800ac14:	75fb      	strb	r3, [r7, #23]
 800ac16:	e027      	b.n	800ac68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	0f1b      	lsrs	r3, r3, #28
 800ac1c:	2b09      	cmp	r3, #9
 800ac1e:	d80b      	bhi.n	800ac38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	0f1b      	lsrs	r3, r3, #28
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	440b      	add	r3, r1
 800ac30:	3230      	adds	r2, #48	; 0x30
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e00a      	b.n	800ac4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4619      	mov	r1, r3
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	440b      	add	r3, r1
 800ac48:	3237      	adds	r2, #55	; 0x37
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	3301      	adds	r3, #1
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	3301      	adds	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
 800ac68:	7dfa      	ldrb	r2, [r7, #23]
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d3d3      	bcc.n	800ac18 <IntToUnicode+0x18>
  }
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bc80      	pop	{r7}
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a0d      	ldr	r2, [pc, #52]	; (800acc0 <HAL_PCD_MspInit+0x44>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d113      	bne.n	800acb6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ac8e:	4b0d      	ldr	r3, [pc, #52]	; (800acc4 <HAL_PCD_MspInit+0x48>)
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	4a0c      	ldr	r2, [pc, #48]	; (800acc4 <HAL_PCD_MspInit+0x48>)
 800ac94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac98:	61d3      	str	r3, [r2, #28]
 800ac9a:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <HAL_PCD_MspInit+0x48>)
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800aca6:	2200      	movs	r2, #0
 800aca8:	2105      	movs	r1, #5
 800acaa:	2014      	movs	r0, #20
 800acac:	f7f5 ff19 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800acb0:	2014      	movs	r0, #20
 800acb2:	f7f5 ff32 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800acb6:	bf00      	nop
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	40005c00 	.word	0x40005c00
 800acc4:	40021000 	.word	0x40021000

0800acc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f7fb ff71 	bl	8006bc6 <USBD_LL_SetupStage>
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800acfe:	78fa      	ldrb	r2, [r7, #3]
 800ad00:	6879      	ldr	r1, [r7, #4]
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	440b      	add	r3, r1
 800ad0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	4619      	mov	r1, r3
 800ad16:	f7fb ffa3 	bl	8006c60 <USBD_LL_DataOutStage>
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ad34:	78fa      	ldrb	r2, [r7, #3]
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	440b      	add	r3, r1
 800ad42:	333c      	adds	r3, #60	; 0x3c
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f7fb fffa 	bl	8006d42 <USBD_LL_DataInStage>
}
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b082      	sub	sp, #8
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fc f90a 	bl	8006f7e <USBD_LL_SOF>
}
 800ad6a:	bf00      	nop
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d001      	beq.n	800ad8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad86:	f7f5 fc43 	bl	8000610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ad90:	7bfa      	ldrb	r2, [r7, #15]
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fc f8ba 	bl	8006f0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fc f873 	bl	8006e8c <USBD_LL_Reset>
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fc f8b4 	bl	8006f2c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adcc:	4b04      	ldr	r3, [pc, #16]	; (800ade0 <HAL_PCD_SuspendCallback+0x30>)
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	4a03      	ldr	r2, [pc, #12]	; (800ade0 <HAL_PCD_SuspendCallback+0x30>)
 800add2:	f043 0306 	orr.w	r3, r3, #6
 800add6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	e000ed00 	.word	0xe000ed00

0800ade4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fc f8ae 	bl	8006f54 <USBD_LL_Resume>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ae08:	4a28      	ldr	r2, [pc, #160]	; (800aeac <USBD_LL_Init+0xac>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a26      	ldr	r2, [pc, #152]	; (800aeac <USBD_LL_Init+0xac>)
 800ae14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ae18:	4b24      	ldr	r3, [pc, #144]	; (800aeac <USBD_LL_Init+0xac>)
 800ae1a:	4a25      	ldr	r2, [pc, #148]	; (800aeb0 <USBD_LL_Init+0xb0>)
 800ae1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ae1e:	4b23      	ldr	r3, [pc, #140]	; (800aeac <USBD_LL_Init+0xac>)
 800ae20:	2208      	movs	r2, #8
 800ae22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ae24:	4b21      	ldr	r3, [pc, #132]	; (800aeac <USBD_LL_Init+0xac>)
 800ae26:	2202      	movs	r2, #2
 800ae28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ae2a:	4b20      	ldr	r3, [pc, #128]	; (800aeac <USBD_LL_Init+0xac>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ae30:	4b1e      	ldr	r3, [pc, #120]	; (800aeac <USBD_LL_Init+0xac>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ae36:	4b1d      	ldr	r3, [pc, #116]	; (800aeac <USBD_LL_Init+0xac>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ae3c:	481b      	ldr	r0, [pc, #108]	; (800aeac <USBD_LL_Init+0xac>)
 800ae3e:	f7f6 f847 	bl	8000ed0 <HAL_PCD_Init>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ae48:	f7f5 fbe2 	bl	8000610 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae52:	2318      	movs	r3, #24
 800ae54:	2200      	movs	r2, #0
 800ae56:	2100      	movs	r1, #0
 800ae58:	f7f7 fd68 	bl	800292c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae62:	2358      	movs	r3, #88	; 0x58
 800ae64:	2200      	movs	r2, #0
 800ae66:	2180      	movs	r1, #128	; 0x80
 800ae68:	f7f7 fd60 	bl	800292c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae72:	23c0      	movs	r3, #192	; 0xc0
 800ae74:	2200      	movs	r2, #0
 800ae76:	2181      	movs	r1, #129	; 0x81
 800ae78:	f7f7 fd58 	bl	800292c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae82:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ae86:	2200      	movs	r2, #0
 800ae88:	2101      	movs	r1, #1
 800ae8a:	f7f7 fd4f 	bl	800292c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2182      	movs	r1, #130	; 0x82
 800ae9c:	f7f7 fd46 	bl	800292c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	2000300c 	.word	0x2000300c
 800aeb0:	40005c00 	.word	0x40005c00

0800aeb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f6 f8ff 	bl	80010ce <HAL_PCD_Start>
 800aed0:	4603      	mov	r3, r0
 800aed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 f94e 	bl	800b178 <USBD_Get_USB_Status>
 800aedc:	4603      	mov	r3, r0
 800aede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	4608      	mov	r0, r1
 800aef4:	4611      	mov	r1, r2
 800aef6:	461a      	mov	r2, r3
 800aef8:	4603      	mov	r3, r0
 800aefa:	70fb      	strb	r3, [r7, #3]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70bb      	strb	r3, [r7, #2]
 800af00:	4613      	mov	r3, r2
 800af02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af12:	78bb      	ldrb	r3, [r7, #2]
 800af14:	883a      	ldrh	r2, [r7, #0]
 800af16:	78f9      	ldrb	r1, [r7, #3]
 800af18:	f7f6 fa56 	bl	80013c8 <HAL_PCD_EP_Open>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	4618      	mov	r0, r3
 800af24:	f000 f928 	bl	800b178 <USBD_Get_USB_Status>
 800af28:	4603      	mov	r3, r0
 800af2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af50:	78fa      	ldrb	r2, [r7, #3]
 800af52:	4611      	mov	r1, r2
 800af54:	4618      	mov	r0, r3
 800af56:	f7f6 fa94 	bl	8001482 <HAL_PCD_EP_Close>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f909 	bl	800b178 <USBD_Get_USB_Status>
 800af66:	4603      	mov	r3, r0
 800af68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	460b      	mov	r3, r1
 800af7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af8e:	78fa      	ldrb	r2, [r7, #3]
 800af90:	4611      	mov	r1, r2
 800af92:	4618      	mov	r0, r3
 800af94:	f7f6 fb3c 	bl	8001610 <HAL_PCD_EP_SetStall>
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 f8ea 	bl	800b178 <USBD_Get_USB_Status>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	460b      	mov	r3, r1
 800afbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afcc:	78fa      	ldrb	r2, [r7, #3]
 800afce:	4611      	mov	r1, r2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7f6 fb7d 	bl	80016d0 <HAL_PCD_EP_ClrStall>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 f8cb 	bl	800b178 <USBD_Get_USB_Status>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b002:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	da0c      	bge.n	800b026 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b00c:	78fb      	ldrb	r3, [r7, #3]
 800b00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b012:	68f9      	ldr	r1, [r7, #12]
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	440b      	add	r3, r1
 800b020:	3302      	adds	r3, #2
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	e00b      	b.n	800b03e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b026:	78fb      	ldrb	r3, [r7, #3]
 800b028:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b02c:	68f9      	ldr	r1, [r7, #12]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	440b      	add	r3, r1
 800b038:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b03c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	bc80      	pop	{r7}
 800b046:	4770      	bx	lr

0800b048 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b062:	78fa      	ldrb	r2, [r7, #3]
 800b064:	4611      	mov	r1, r2
 800b066:	4618      	mov	r0, r3
 800b068:	f7f6 f989 	bl	800137e <HAL_PCD_SetAddress>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f880 	bl	800b178 <USBD_Get_USB_Status>
 800b078:	4603      	mov	r3, r0
 800b07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b086      	sub	sp, #24
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	461a      	mov	r2, r3
 800b092:	460b      	mov	r3, r1
 800b094:	72fb      	strb	r3, [r7, #11]
 800b096:	4613      	mov	r3, r2
 800b098:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b0a8:	893b      	ldrh	r3, [r7, #8]
 800b0aa:	7af9      	ldrb	r1, [r7, #11]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	f7f6 fa78 	bl	80015a2 <HAL_PCD_EP_Transmit>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 f85d 	bl	800b178 <USBD_Get_USB_Status>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	607a      	str	r2, [r7, #4]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	460b      	mov	r3, r1
 800b0da:	72fb      	strb	r3, [r7, #11]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b0ee:	893b      	ldrh	r3, [r7, #8]
 800b0f0:	7af9      	ldrb	r1, [r7, #11]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	f7f6 fa0d 	bl	8001512 <HAL_PCD_EP_Receive>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 f83a 	bl	800b178 <USBD_Get_USB_Status>
 800b104:	4603      	mov	r3, r0
 800b106:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b108:	7dbb      	ldrb	r3, [r7, #22]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b124:	78fa      	ldrb	r2, [r7, #3]
 800b126:	4611      	mov	r1, r2
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f6 fa23 	bl	8001574 <HAL_PCD_EP_GetRxCount>
 800b12e:	4603      	mov	r3, r0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b140:	4b02      	ldr	r3, [pc, #8]	; (800b14c <USBD_static_malloc+0x14>)
}
 800b142:	4618      	mov	r0, r3
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	bc80      	pop	{r7}
 800b14a:	4770      	bx	lr
 800b14c:	20001954 	.word	0x20001954

0800b150 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bc80      	pop	{r7}
 800b160:	4770      	bx	lr

0800b162 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	460b      	mov	r3, r1
 800b16c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	bc80      	pop	{r7}
 800b176:	4770      	bx	lr

0800b178 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d817      	bhi.n	800b1bc <USBD_Get_USB_Status+0x44>
 800b18c:	a201      	add	r2, pc, #4	; (adr r2, 800b194 <USBD_Get_USB_Status+0x1c>)
 800b18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b192:	bf00      	nop
 800b194:	0800b1a5 	.word	0x0800b1a5
 800b198:	0800b1ab 	.word	0x0800b1ab
 800b19c:	0800b1b1 	.word	0x0800b1b1
 800b1a0:	0800b1b7 	.word	0x0800b1b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a8:	e00b      	b.n	800b1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ae:	e008      	b.n	800b1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b4:	e005      	b.n	800b1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ba:	e002      	b.n	800b1c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c0:	bf00      	nop
  }
  return usb_status;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bc80      	pop	{r7}
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop

0800b1d0 <__libc_init_array>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	2600      	movs	r6, #0
 800b1d4:	4d0c      	ldr	r5, [pc, #48]	; (800b208 <__libc_init_array+0x38>)
 800b1d6:	4c0d      	ldr	r4, [pc, #52]	; (800b20c <__libc_init_array+0x3c>)
 800b1d8:	1b64      	subs	r4, r4, r5
 800b1da:	10a4      	asrs	r4, r4, #2
 800b1dc:	42a6      	cmp	r6, r4
 800b1de:	d109      	bne.n	800b1f4 <__libc_init_array+0x24>
 800b1e0:	f000 f842 	bl	800b268 <_init>
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	4d0a      	ldr	r5, [pc, #40]	; (800b210 <__libc_init_array+0x40>)
 800b1e8:	4c0a      	ldr	r4, [pc, #40]	; (800b214 <__libc_init_array+0x44>)
 800b1ea:	1b64      	subs	r4, r4, r5
 800b1ec:	10a4      	asrs	r4, r4, #2
 800b1ee:	42a6      	cmp	r6, r4
 800b1f0:	d105      	bne.n	800b1fe <__libc_init_array+0x2e>
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
 800b1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1f8:	4798      	blx	r3
 800b1fa:	3601      	adds	r6, #1
 800b1fc:	e7ee      	b.n	800b1dc <__libc_init_array+0xc>
 800b1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b202:	4798      	blx	r3
 800b204:	3601      	adds	r6, #1
 800b206:	e7f2      	b.n	800b1ee <__libc_init_array+0x1e>
 800b208:	0800b438 	.word	0x0800b438
 800b20c:	0800b438 	.word	0x0800b438
 800b210:	0800b438 	.word	0x0800b438
 800b214:	0800b43c 	.word	0x0800b43c

0800b218 <memcpy>:
 800b218:	440a      	add	r2, r1
 800b21a:	4291      	cmp	r1, r2
 800b21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b220:	d100      	bne.n	800b224 <memcpy+0xc>
 800b222:	4770      	bx	lr
 800b224:	b510      	push	{r4, lr}
 800b226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b22a:	4291      	cmp	r1, r2
 800b22c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b230:	d1f9      	bne.n	800b226 <memcpy+0xe>
 800b232:	bd10      	pop	{r4, pc}

0800b234 <memset>:
 800b234:	4603      	mov	r3, r0
 800b236:	4402      	add	r2, r0
 800b238:	4293      	cmp	r3, r2
 800b23a:	d100      	bne.n	800b23e <memset+0xa>
 800b23c:	4770      	bx	lr
 800b23e:	f803 1b01 	strb.w	r1, [r3], #1
 800b242:	e7f9      	b.n	800b238 <memset+0x4>

0800b244 <strncmp>:
 800b244:	b510      	push	{r4, lr}
 800b246:	b16a      	cbz	r2, 800b264 <strncmp+0x20>
 800b248:	3901      	subs	r1, #1
 800b24a:	1884      	adds	r4, r0, r2
 800b24c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b250:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b254:	4293      	cmp	r3, r2
 800b256:	d103      	bne.n	800b260 <strncmp+0x1c>
 800b258:	42a0      	cmp	r0, r4
 800b25a:	d001      	beq.n	800b260 <strncmp+0x1c>
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1f5      	bne.n	800b24c <strncmp+0x8>
 800b260:	1a98      	subs	r0, r3, r2
 800b262:	bd10      	pop	{r4, pc}
 800b264:	4610      	mov	r0, r2
 800b266:	e7fc      	b.n	800b262 <strncmp+0x1e>

0800b268 <_init>:
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	bf00      	nop
 800b26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26e:	bc08      	pop	{r3}
 800b270:	469e      	mov	lr, r3
 800b272:	4770      	bx	lr

0800b274 <_fini>:
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	bf00      	nop
 800b278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27a:	bc08      	pop	{r3}
 800b27c:	469e      	mov	lr, r3
 800b27e:	4770      	bx	lr
