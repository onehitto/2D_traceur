
2D_traceur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800ae98  0800ae98  0001ae98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af6c  0800af6c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800af6c  0800af6c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af6c  0800af6c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af70  0800af70  0001af70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800af74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031bc  20000180  0800b0f4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000333c  0800b0f4  0002333c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026164  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005498  00000000  00000000  0004630d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0004b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0004ced8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014a58  00000000  00000000  0004e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006dd0  00000000  00000000  00062e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00069be8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d20  00000000  00000000  00069c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae80 	.word	0x0800ae80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800ae80 	.word	0x0800ae80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000019c 	.word	0x2000019c
 800018c:	200001f0 	.word	0x200001f0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08e      	sub	sp, #56	; 0x38
 8000194:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fbd7 	bl	8000948 <HAL_Init>
  SystemClock_Config();
 800019a:	f000 f845 	bl	8000228 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f961 	bl	8000464 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f89b 	bl	80002dc <MX_TIM2_Init>
  MX_TIM4_Init();
 80001a6:	f000 f90f 	bl	80003c8 <MX_TIM4_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  Com_Init();
 80001aa:	f009 ffbd 	bl	800a128 <Com_Init>
  Servo_Init(&servo, &htim2);
 80001ae:	4918      	ldr	r1, [pc, #96]	; (8000210 <main+0x80>)
 80001b0:	4818      	ldr	r0, [pc, #96]	; (8000214 <main+0x84>)
 80001b2:	f009 fe88 	bl	8009ec6 <Servo_Init>
  G_Code_Init();
 80001b6:	f00a f83f 	bl	800a238 <G_Code_Init>
  /* USER CODE END RTOS_QUEUES */
  HAL_Delay(10);
 80001ba:	200a      	movs	r0, #10
 80001bc:	f000 fbf6 	bl	80009ac <HAL_Delay>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x88>)
 80001c2:	f107 041c 	add.w	r4, r7, #28
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(ComTask, StartComTask, osPriorityNormal, 0, 256);
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <main+0x8c>)
 80001d6:	463c      	mov	r4, r7
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 fd54 	bl	8007c9a <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <main+0x90>)
 80001f6:	6013      	str	r3, [r2, #0]
  ComTaskHandle = osThreadCreate(osThread(ComTask), NULL); // every 20ms
 80001f8:	463b      	mov	r3, r7
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f007 fd4c 	bl	8007c9a <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0x94>)
 8000206:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 8000208:	f007 fd40 	bl	8007c8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x7c>
 800020e:	bf00      	nop
 8000210:	200023ec 	.word	0x200023ec
 8000214:	200023e0 	.word	0x200023e0
 8000218:	0800aeac 	.word	0x0800aeac
 800021c:	0800aec8 	.word	0x0800aec8
 8000220:	20001b78 	.word	0x20001b78
 8000224:	200023e8 	.word	0x200023e8

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f00a fe1a 	bl	800ae70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fbd4 	bl	8002a2c <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 f9ff 	bl	800068c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fe3e 	bl	8002f2c <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 f9e9 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ba:	2310      	movs	r3, #16
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 ffdb 	bl	8003280 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d0:	f000 f9dc 	bl	800068c <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0320 	add.w	r3, r7, #32
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000314:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000316:	228f      	movs	r2, #143	; 0x8f
 8000318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000322:	f242 7210 	movw	r2, #10000	; 0x2710
 8000326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000334:	4823      	ldr	r0, [pc, #140]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000336:	f003 f859 	bl	80033ec <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000340:	f000 f9a4 	bl	800068c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4619      	mov	r1, r3
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000352:	f003 fbdf 	bl	8003b14 <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800035c:	f000 f996 	bl	800068c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000362:	f003 f913 	bl	800358c <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800036c:	f000 f98e 	bl	800068c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000380:	f003 ff58 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800038a:	f000 f97f 	bl	800068c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000392:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000396:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	4619      	mov	r1, r3
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003a8:	f003 faf2 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003b2:	f000 f96b 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003b8:	f000 f9de 	bl	8000778 <HAL_TIM_MspPostInit>

}
 80003bc:	bf00      	nop
 80003be:	3738      	adds	r7, #56	; 0x38
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	200023ec 	.word	0x200023ec

080003c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM4_Init+0x94>)
 80003e6:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <MX_TIM4_Init+0x98>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;//64-1;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM4_Init+0x94>)
 80003ec:	2207      	movs	r2, #7
 80003ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM4_Init+0x94>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;//11250;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_TIM4_Init+0x94>)
 80003f8:	f242 3228 	movw	r2, #9000	; 0x2328
 80003fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_TIM4_Init+0x94>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_TIM4_Init+0x94>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_TIM4_Init+0x94>)
 800040c:	f002 ffee 	bl	80033ec <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000416:	f000 f939 	bl	800068c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	; (800045c <MX_TIM4_Init+0x94>)
 8000428:	f003 fb74 	bl	8003b14 <HAL_TIM_ConfigClockSource>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f92b 	bl	800068c <Error_Handler>
  }
  //if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 // {
    //Error_Handler();
  //}
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_TIM4_Init+0x94>)
 8000444:	f003 fef6 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800044e:	f000 f91d 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20001b80 	.word	0x20001b80
 8000460:	40000800 	.word	0x40000800

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b40      	ldr	r3, [pc, #256]	; (800057c <MX_GPIO_Init+0x118>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a3f      	ldr	r2, [pc, #252]	; (800057c <MX_GPIO_Init+0x118>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b3d      	ldr	r3, [pc, #244]	; (800057c <MX_GPIO_Init+0x118>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b3a      	ldr	r3, [pc, #232]	; (800057c <MX_GPIO_Init+0x118>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <MX_GPIO_Init+0x118>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <MX_GPIO_Init+0x118>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_GPIO_Init+0x118>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a33      	ldr	r2, [pc, #204]	; (800057c <MX_GPIO_Init+0x118>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <MX_GPIO_Init+0x118>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b2e      	ldr	r3, [pc, #184]	; (800057c <MX_GPIO_Init+0x118>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a2d      	ldr	r2, [pc, #180]	; (800057c <MX_GPIO_Init+0x118>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b2b      	ldr	r3, [pc, #172]	; (800057c <MX_GPIO_Init+0x118>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_13, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80004de:	4828      	ldr	r0, [pc, #160]	; (8000580 <MX_GPIO_Init+0x11c>)
 80004e0:	f000 fd03 	bl	8000eea <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004e4:	2200      	movs	r2, #0
 80004e6:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <MX_GPIO_Init+0x120>)
 80004ec:	f000 fcfd 	bl	8000eea <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004f0:	2200      	movs	r2, #0
 80004f2:	f248 31f8 	movw	r1, #33784	; 0x83f8
 80004f6:	4824      	ldr	r0, [pc, #144]	; (8000588 <MX_GPIO_Init+0x124>)
 80004f8:	f000 fcf7 	bl	8000eea <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80004fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <MX_GPIO_Init+0x11c>)
 8000516:	f000 fb4d 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 PB15 */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11;
 800051a:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2302      	movs	r3, #2
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <MX_GPIO_Init+0x124>)
 8000534:	f000 fb3e 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000538:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800053c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <MX_GPIO_Init+0x120>)
 8000552:	f000 fb2f 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000556:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800055a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_GPIO_Init+0x124>)
 8000570:	f000 fb20 	bl	8000bb4 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	40011000 	.word	0x40011000
 8000584:	40010800 	.word	0x40010800
 8000588:	40010c00 	.word	0x40010c00

0800058c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint8_t timflag = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  cnc_init();
 8000598:	f009 fc22 	bl	8009de0 <cnc_init>

  for(;;)
  {

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && timflag == 0){
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	4816      	ldr	r0, [pc, #88]	; (80005fc <StartDefaultTask+0x70>)
 80005a2:	f000 fc8b 	bl	8000ebc <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d118      	bne.n	80005de <StartDefaultTask+0x52>
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d115      	bne.n	80005de <StartDefaultTask+0x52>
		  GoToStep(&Motor1,1000,10);
 80005b2:	220a      	movs	r2, #10
 80005b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005b8:	4811      	ldr	r0, [pc, #68]	; (8000600 <StartDefaultTask+0x74>)
 80005ba:	f009 fd81 	bl	800a0c0 <GoToStep>
		  GoToStep(&Motor2,1000,10);
 80005be:	220a      	movs	r2, #10
 80005c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <StartDefaultTask+0x78>)
 80005c6:	f009 fd7b 	bl	800a0c0 <GoToStep>

		  timflag = 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <StartDefaultTask+0x7c>)
 80005d4:	f000 fca1 	bl	8000f1a <HAL_GPIO_TogglePin>
		  HAL_TIM_Base_Start_IT(&htim4);
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <StartDefaultTask+0x80>)
 80005da:	f002 ff57 	bl	800348c <HAL_TIM_Base_Start_IT>
		  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET && timflag == 1){
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <StartDefaultTask+0x70>)
 80005e4:	f000 fc6a 	bl	8000ebc <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d1d6      	bne.n	800059c <StartDefaultTask+0x10>
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1d3      	bne.n	800059c <StartDefaultTask+0x10>
	  		  timflag = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && timflag == 0){
 80005f8:	e7d0      	b.n	800059c <StartDefaultTask+0x10>
 80005fa:	bf00      	nop
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	200026d0 	.word	0x200026d0
 8000604:	20002100 	.word	0x20002100
 8000608:	40011000 	.word	0x40011000
 800060c:	20001b80 	.word	0x20001b80

08000610 <StartComTask>:
  * @brief  Function implementing the ComTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Header_StartComTask */
void StartComTask(void const * argument){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	for(;;)
	  {
			osDelay(20);
 8000618:	2014      	movs	r0, #20
 800061a:	f007 fb8a 	bl	8007d32 <osDelay>
			Com_Transmit();
 800061e:	f009 fd9b 	bl	800a158 <Com_Transmit>
			Com_Receive();
 8000622:	f009 fdc1 	bl	800a1a8 <Com_Receive>
			osDelay(20);
 8000626:	e7f7      	b.n	8000618 <StartComTask+0x8>

08000628 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063a:	f000 f99b 	bl	8000974 <HAL_IncTick>
  }
  if (htim->Instance == TIM4) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d112      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x46>
	  cnc_DriveM(&Motor1);
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800064a:	f009 fc17 	bl	8009e7c <cnc_DriveM>
	  cnc_DriveM(&Motor2);
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000650:	f009 fc14 	bl	8009e7c <cnc_DriveM>
	  if (Motor1.Status == ST_OFF && Motor2.Status == ST_OFF)
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000656:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800065a:	2b00      	cmp	r3, #0
 800065c:	d107      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x46>
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000660:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x46>
		  HAL_TIM_Base_Stop_IT(&htim4);
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800066a:	f002 ff61 	bl	8003530 <HAL_TIM_Base_Stop_IT>
	  }

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40000400 	.word	0x40000400
 800067c:	40000800 	.word	0x40000800
 8000680:	200026d0 	.word	0x200026d0
 8000684:	20002100 	.word	0x20002100
 8000688:	20001b80 	.word	0x20001b80

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_MspInit+0x68>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <HAL_MspInit+0x68>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_MspInit+0x68>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_MspInit+0x68>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a11      	ldr	r2, [pc, #68]	; (8000700 <HAL_MspInit+0x68>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x68>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210f      	movs	r1, #15
 80006d2:	f06f 0001 	mvn.w	r0, #1
 80006d6:	f000 fa42 	bl	8000b5e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_MspInit+0x6c>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_MspInit+0x6c>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000

08000708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000718:	d10c      	bne.n	8000734 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_TIM_Base_MspInit+0x68>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_TIM_Base_MspInit+0x68>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_TIM_Base_MspInit+0x68>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
    }

}
 8000732:	e018      	b.n	8000766 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_TIM_Base_MspInit+0x6c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d113      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x5e>
      __HAL_RCC_TIM4_CLK_ENABLE();
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_TIM_Base_MspInit+0x68>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <HAL_TIM_Base_MspInit+0x68>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_TIM_Base_MspInit+0x68>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2105      	movs	r1, #5
 800075a:	201e      	movs	r0, #30
 800075c:	f000 f9ff 	bl	8000b5e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000760:	201e      	movs	r0, #30
 8000762:	f000 fa18 	bl	8000b96 <HAL_NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	40000800 	.word	0x40000800

08000778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000796:	d117      	bne.n	80007c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_TIM_MspPostInit+0x58>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <HAL_TIM_MspPostInit+0x58>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_TIM_MspPostInit+0x58>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <HAL_TIM_MspPostInit+0x5c>)
 80007c4:	f000 f9f6 	bl	8000bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800

080007d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	201d      	movs	r0, #29
 80007ee:	f000 f9b6 	bl	8000b5e <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007f2:	201d      	movs	r0, #29
 80007f4:	f000 f9cf 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <HAL_InitTick+0xa0>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <HAL_InitTick+0xa0>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	61d3      	str	r3, [r2, #28]
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_InitTick+0xa0>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000810:	f107 0210 	add.w	r2, r7, #16
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fce2 	bl	80031e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000820:	f002 fccc 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8000824:	4603      	mov	r3, r0
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <HAL_InitTick+0xa4>)
 800082e:	fba2 2303 	umull	r2, r3, r2, r3
 8000832:	0c9b      	lsrs	r3, r3, #18
 8000834:	3b01      	subs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_InitTick+0xa8>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <HAL_InitTick+0xac>)
 800083c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_InitTick+0xa8>)
 8000840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000844:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_InitTick+0xa8>)
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_InitTick+0xa8>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_InitTick+0xa8>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <HAL_InitTick+0xa8>)
 800085a:	f002 fdc7 	bl	80033ec <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d104      	bne.n	800086e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <HAL_InitTick+0xa8>)
 8000866:	f002 fe11 	bl	800348c <HAL_TIM_Base_Start_IT>
 800086a:	4603      	mov	r3, r0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	431bde83 	.word	0x431bde83
 8000880:	20002714 	.word	0x20002714
 8000884:	40000400 	.word	0x40000400

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
	...

080008b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008ba:	f000 fc6c 	bl	8001196 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000304c 	.word	0x2000304c

080008c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <TIM3_IRQHandler+0x10>)
 80008ce:	f002 ff57 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20002714 	.word	0x20002714

080008dc <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim4);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <TIM4_IRQHandler+0x10>)
 80008e2:	f002 ff4d 	bl	8003780 <HAL_TIM_IRQHandler>

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20001b80 	.word	0x20001b80

080008f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff fff8 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f00a fa71 	bl	800ae0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc31 	bl	8000190 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000938:	0800af74 	.word	0x0800af74
  ldr r2, =_sbss
 800093c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000940:	2000333c 	.word	0x2000333c

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f8f5 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ff3a 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe98 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x1c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <HAL_IncTick+0x20>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000008 	.word	0x20000008
 8000994:	2000275c 	.word	0x2000275c

08000998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <HAL_GetTick+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	2000275c 	.word	0x2000275c

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff fff0 	bl	8000998 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffe0 	bl	8000998 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4906      	ldr	r1, [pc, #24]	; (8000a8c <__NVIC_EnableIRQ+0x34>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff4f 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff64 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ffb2 	bl	8000ae4 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff81 	bl	8000a90 <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff57 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b08b      	sub	sp, #44	; 0x2c
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	e169      	b.n	8000e9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 8158 	bne.w	8000e96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4a9a      	ldr	r2, [pc, #616]	; (8000e54 <HAL_GPIO_Init+0x2a0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d05e      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000bf0:	4a98      	ldr	r2, [pc, #608]	; (8000e54 <HAL_GPIO_Init+0x2a0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d875      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000bf6:	4a98      	ldr	r2, [pc, #608]	; (8000e58 <HAL_GPIO_Init+0x2a4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d058      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000bfc:	4a96      	ldr	r2, [pc, #600]	; (8000e58 <HAL_GPIO_Init+0x2a4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d86f      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c02:	4a96      	ldr	r2, [pc, #600]	; (8000e5c <HAL_GPIO_Init+0x2a8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d052      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000c08:	4a94      	ldr	r2, [pc, #592]	; (8000e5c <HAL_GPIO_Init+0x2a8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d869      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c0e:	4a94      	ldr	r2, [pc, #592]	; (8000e60 <HAL_GPIO_Init+0x2ac>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d04c      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000c14:	4a92      	ldr	r2, [pc, #584]	; (8000e60 <HAL_GPIO_Init+0x2ac>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d863      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c1a:	4a92      	ldr	r2, [pc, #584]	; (8000e64 <HAL_GPIO_Init+0x2b0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d046      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000c20:	4a90      	ldr	r2, [pc, #576]	; (8000e64 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d85d      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c26:	2b12      	cmp	r3, #18
 8000c28:	d82a      	bhi.n	8000c80 <HAL_GPIO_Init+0xcc>
 8000c2a:	2b12      	cmp	r3, #18
 8000c2c:	d859      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c2e:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <HAL_GPIO_Init+0x80>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000caf 	.word	0x08000caf
 8000c38:	08000c89 	.word	0x08000c89
 8000c3c:	08000c9b 	.word	0x08000c9b
 8000c40:	08000cdd 	.word	0x08000cdd
 8000c44:	08000ce3 	.word	0x08000ce3
 8000c48:	08000ce3 	.word	0x08000ce3
 8000c4c:	08000ce3 	.word	0x08000ce3
 8000c50:	08000ce3 	.word	0x08000ce3
 8000c54:	08000ce3 	.word	0x08000ce3
 8000c58:	08000ce3 	.word	0x08000ce3
 8000c5c:	08000ce3 	.word	0x08000ce3
 8000c60:	08000ce3 	.word	0x08000ce3
 8000c64:	08000ce3 	.word	0x08000ce3
 8000c68:	08000ce3 	.word	0x08000ce3
 8000c6c:	08000ce3 	.word	0x08000ce3
 8000c70:	08000ce3 	.word	0x08000ce3
 8000c74:	08000ce3 	.word	0x08000ce3
 8000c78:	08000c91 	.word	0x08000c91
 8000c7c:	08000ca5 	.word	0x08000ca5
 8000c80:	4a79      	ldr	r2, [pc, #484]	; (8000e68 <HAL_GPIO_Init+0x2b4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c86:	e02c      	b.n	8000ce2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e029      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	3304      	adds	r3, #4
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e024      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	3308      	adds	r3, #8
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e01f      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	330c      	adds	r3, #12
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e01a      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e013      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d105      	bne.n	8000cd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	611a      	str	r2, [r3, #16]
          break;
 8000cce:	e009      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	615a      	str	r2, [r3, #20]
          break;
 8000cda:	e003      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
          break;
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          break;
 8000ce2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2bff      	cmp	r3, #255	; 0xff
 8000ce8:	d801      	bhi.n	8000cee <HAL_GPIO_Init+0x13a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	e001      	b.n	8000cf2 <HAL_GPIO_Init+0x13e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2bff      	cmp	r3, #255	; 0xff
 8000cf8:	d802      	bhi.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x152>
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	3b08      	subs	r3, #8
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	401a      	ands	r2, r3
 8000d18:	6a39      	ldr	r1, [r7, #32]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	431a      	orrs	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80b1 	beq.w	8000e96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d34:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <HAL_GPIO_Init+0x2b8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a4c      	ldr	r2, [pc, #304]	; (8000e6c <HAL_GPIO_Init+0x2b8>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <HAL_GPIO_Init+0x2b8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d4c:	4a48      	ldr	r2, [pc, #288]	; (8000e70 <HAL_GPIO_Init+0x2bc>)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a40      	ldr	r2, [pc, #256]	; (8000e74 <HAL_GPIO_Init+0x2c0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d013      	beq.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	; (8000e78 <HAL_GPIO_Init+0x2c4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00d      	beq.n	8000d9c <HAL_GPIO_Init+0x1e8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3e      	ldr	r2, [pc, #248]	; (8000e7c <HAL_GPIO_Init+0x2c8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d007      	beq.n	8000d98 <HAL_GPIO_Init+0x1e4>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a3d      	ldr	r2, [pc, #244]	; (8000e80 <HAL_GPIO_Init+0x2cc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <HAL_GPIO_Init+0x1e0>
 8000d90:	2303      	movs	r3, #3
 8000d92:	e006      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e004      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000da0:	2300      	movs	r3, #0
 8000da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da4:	f002 0203 	and.w	r2, r2, #3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db2:	492f      	ldr	r1, [pc, #188]	; (8000e70 <HAL_GPIO_Init+0x2bc>)
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	492c      	ldr	r1, [pc, #176]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4928      	ldr	r1, [pc, #160]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	4922      	ldr	r1, [pc, #136]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60cb      	str	r3, [r1, #12]
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	491e      	ldr	r1, [pc, #120]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	4918      	ldr	r1, [pc, #96]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	604b      	str	r3, [r1, #4]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4914      	ldr	r1, [pc, #80]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d021      	beq.n	8000e88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	490e      	ldr	r1, [pc, #56]	; (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
 8000e50:	e021      	b.n	8000e96 <HAL_GPIO_Init+0x2e2>
 8000e52:	bf00      	nop
 8000e54:	10320000 	.word	0x10320000
 8000e58:	10310000 	.word	0x10310000
 8000e5c:	10220000 	.word	0x10220000
 8000e60:	10210000 	.word	0x10210000
 8000e64:	10120000 	.word	0x10120000
 8000e68:	10110000 	.word	0x10110000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	40010800 	.word	0x40010800
 8000e78:	40010c00 	.word	0x40010c00
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40011400 	.word	0x40011400
 8000e84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4909      	ldr	r1, [pc, #36]	; (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	3301      	adds	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f47f ae8e 	bne.w	8000bc8 <HAL_GPIO_Init+0x14>
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	372c      	adds	r7, #44	; 0x2c
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	807b      	strh	r3, [r7, #2]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000efa:	787b      	ldrb	r3, [r7, #1]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f00:	887a      	ldrh	r2, [r7, #2]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f06:	e003      	b.n	8000f10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	041a      	lsls	r2, r3, #16
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	611a      	str	r2, [r3, #16]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	041a      	lsls	r2, r3, #16
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	611a      	str	r2, [r3, #16]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af06      	add	r7, sp, #24
 8000f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0f1      	b.n	8001142 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f009 fca0 	bl	800a8b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 f9eb 	bl	8004360 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	687e      	ldr	r6, [r7, #4]
 8000f92:	466d      	mov	r5, sp
 8000f94:	f106 0410 	add.w	r4, r6, #16
 8000f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	1d33      	adds	r3, r6, #4
 8000fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f003 f9b5 	bl	8004314 <USB_CoreInit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e0c2      	b.n	8001142 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 f9e6 	bl	8004394 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e040      	b.n	8001050 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	3301      	adds	r3, #1
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	3303      	adds	r3, #3
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3338      	adds	r3, #56	; 0x38
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	333c      	adds	r3, #60	; 0x3c
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3340      	adds	r3, #64	; 0x40
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	3301      	adds	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3b9      	bcc.n	8000fce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e044      	b.n	80010ea <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	440b      	add	r3, r1
 80010dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3301      	adds	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3b5      	bcc.n	8001060 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	687e      	ldr	r6, [r7, #4]
 80010fc:	466d      	mov	r5, sp
 80010fe:	f106 0410 	add.w	r4, r6, #16
 8001102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	602b      	str	r3, [r5, #0]
 800110a:	1d33      	adds	r3, r6, #4
 800110c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f003 f94c 	bl	80043ac <USB_DevInit>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2202      	movs	r2, #2
 800111e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00d      	b.n	8001142 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f005 f968 	bl	8006410 <USB_DevDisconnect>

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800114a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_PCD_Start+0x16>
 800115c:	2302      	movs	r3, #2
 800115e:	e016      	b.n	800118e <HAL_PCD_Start+0x44>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f003 f8e1 	bl	8004334 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001172:	2101      	movs	r1, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f009 fe12 	bl	800ad9e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f005 f93c 	bl	80063fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b088      	sub	sp, #32
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 f93e 	bl	8006424 <USB_ReadInterrupts>
 80011a8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fb1d 	bl	80017f4 <PCD_EP_ISR_Handler>

    return;
 80011ba:	e11b      	b.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d013      	beq.n	80011ee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011d8:	b292      	uxth	r2, r2
 80011da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f009 fbe5 	bl	800a9ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011e4:	2100      	movs	r1, #0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f907 	bl	80013fa <HAL_PCD_SetAddress>

    return;
 80011ec:	e102      	b.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00c      	beq.n	8001212 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800120a:	b292      	uxth	r2, r2
 800120c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001210:	e0f0      	b.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800122e:	b292      	uxth	r2, r2
 8001230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001234:	e0de      	b.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d027      	beq.n	8001290 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0204 	bic.w	r2, r2, #4
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	b292      	uxth	r2, r2
 800126c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f009 fbd5 	bl	800aa20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001288:	b292      	uxth	r2, r2
 800128a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800128e:	e0b1      	b.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8085 	beq.w	80013a6 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800129c:	2300      	movs	r3, #0
 800129e:	77fb      	strb	r3, [r7, #31]
 80012a0:	e011      	b.n	80012c6 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	7ffb      	ldrb	r3, [r7, #31]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	441a      	add	r2, r3
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	8812      	ldrh	r2, [r2, #0]
 80012b2:	b292      	uxth	r2, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f107 0120 	add.w	r1, r7, #32
 80012ba:	440b      	add	r3, r1
 80012bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80012c0:	7ffb      	ldrb	r3, [r7, #31]
 80012c2:	3301      	adds	r3, #1
 80012c4:	77fb      	strb	r3, [r7, #31]
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d9ea      	bls.n	80012a2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0201 	orr.w	r2, r2, #1
 80012de:	b292      	uxth	r2, r2
 80012e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	b292      	uxth	r2, r2
 80012f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80012fc:	bf00      	nop
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001306:	b29b      	uxth	r3, r3
 8001308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f6      	beq.n	80012fe <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	77fb      	strb	r3, [r7, #31]
 800132c:	e010      	b.n	8001350 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	4611      	mov	r1, r2
 8001336:	7ffa      	ldrb	r2, [r7, #31]
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	440a      	add	r2, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	f107 0120 	add.w	r1, r7, #32
 8001342:	440b      	add	r3, r1
 8001344:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001348:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	3301      	adds	r3, #1
 800134e:	77fb      	strb	r3, [r7, #31]
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	2b07      	cmp	r3, #7
 8001354:	d9eb      	bls.n	800132e <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0208 	orr.w	r2, r2, #8
 8001368:	b292      	uxth	r2, r2
 800136a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001380:	b292      	uxth	r2, r2
 8001382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0204 	orr.w	r2, r2, #4
 8001398:	b292      	uxth	r2, r2
 800139a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f009 fb24 	bl	800a9ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013a4:	e026      	b.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00f      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013c2:	b292      	uxth	r2, r2
 80013c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f009 fae2 	bl	800a992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013ce:	e011      	b.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013f2:	bf00      	nop
  }
}
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_PCD_SetAddress+0x1a>
 8001410:	2302      	movs	r3, #2
 8001412:	e013      	b.n	800143c <HAL_PCD_SetAddress+0x42>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	78fa      	ldrb	r2, [r7, #3]
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f004 ffd2 	bl	80063d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	70fb      	strb	r3, [r7, #3]
 8001456:	460b      	mov	r3, r1
 8001458:	803b      	strh	r3, [r7, #0]
 800145a:	4613      	mov	r3, r2
 800145c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da0e      	bge.n	8001488 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	705a      	strb	r2, [r3, #1]
 8001486:	e00e      	b.n	80014a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	f003 0207 	and.w	r2, r3, #7
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014b2:	883a      	ldrh	r2, [r7, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	78ba      	ldrb	r2, [r7, #2]
 80014bc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014be:	78bb      	ldrb	r3, [r7, #2]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d102      	bne.n	80014ca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_PCD_EP_Open+0x94>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e00e      	b.n	80014f6 <HAL_PCD_EP_Open+0xb2>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 ff80 	bl	80043ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80014f4:	7afb      	ldrb	r3, [r7, #11]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800150a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da0e      	bge.n	8001530 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2201      	movs	r2, #1
 800152c:	705a      	strb	r2, [r3, #1]
 800152e:	e00e      	b.n	800154e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	b2da      	uxtb	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_PCD_EP_Close+0x6a>
 8001564:	2302      	movs	r3, #2
 8001566:	e00e      	b.n	8001586 <HAL_PCD_EP_Close+0x88>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68f9      	ldr	r1, [r7, #12]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 faf8 	bl	8004b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	460b      	mov	r3, r1
 800159c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	f003 0207 	and.w	r2, r3, #7
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2200      	movs	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2200      	movs	r2, #0
 80015cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6979      	ldr	r1, [r7, #20]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fcaf 	bl	8004f44 <USB_EPStartXfer>

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	f003 0207 	and.w	r2, r3, #7
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	460b      	mov	r3, r1
 800162c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162e:	7afb      	ldrb	r3, [r7, #11]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2201      	movs	r2, #1
 8001668:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	b2da      	uxtb	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	4618      	mov	r0, r3
 800167e:	f003 fc61 	bl	8004f44 <USB_EPStartXfer>

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	f003 0207 	and.w	r2, r3, #7
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d901      	bls.n	80016aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e04c      	b.n	8001744 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da0e      	bge.n	80016d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	705a      	strb	r2, [r3, #1]
 80016ce:	e00c      	b.n	80016ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_PCD_EP_SetStall+0x7e>
 8001706:	2302      	movs	r3, #2
 8001708:	e01c      	b.n	8001744 <HAL_PCD_EP_SetStall+0xb8>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fd5f 	bl	80061dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001732:	4619      	mov	r1, r3
 8001734:	4610      	mov	r0, r2
 8001736:	f004 fe84 	bl	8006442 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f003 020f 	and.w	r2, r3, #15
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d901      	bls.n	800176a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e040      	b.n	80017ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800176a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800176e:	2b00      	cmp	r3, #0
 8001770:	da0e      	bge.n	8001790 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	705a      	strb	r2, [r3, #1]
 800178e:	e00e      	b.n	80017ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 0207 	and.w	r2, r3, #7
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_PCD_EP_ClrStall+0x82>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e00e      	b.n	80017ec <HAL_PCD_EP_ClrStall+0xa0>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68f9      	ldr	r1, [r7, #12]
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fd4d 	bl	800627c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b096      	sub	sp, #88	; 0x58
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017fc:	e3bf      	b.n	8001f7e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001806:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800180a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001818:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 8179 	bne.w	8001b14 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d152      	bne.n	80018d4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800183a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183e:	81fb      	strh	r3, [r7, #14]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800184a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800184e:	b29b      	uxth	r3, r3
 8001850:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3328      	adds	r3, #40	; 0x28
 8001856:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001860:	b29b      	uxth	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	3302      	adds	r3, #2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001882:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	441a      	add	r2, r3
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001892:	2100      	movs	r1, #0
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f009 f862 	bl	800a95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 836b 	beq.w	8001f7e <PCD_EP_ISR_Handler+0x78a>
 80018a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 8366 	bne.w	8001f7e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b292      	uxth	r2, r2
 80018c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018d2:	e354      	b.n	8001f7e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d034      	beq.n	800195c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	3306      	adds	r3, #6
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800192c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001930:	b29b      	uxth	r3, r3
 8001932:	f004 fdd6 	bl	80064e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001942:	4013      	ands	r3, r2
 8001944:	823b      	strh	r3, [r7, #16]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	8a3a      	ldrh	r2, [r7, #16]
 800194c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001950:	b292      	uxth	r2, r2
 8001952:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f008 ffd5 	bl	800a904 <HAL_PCD_SetupStageCallback>
 800195a:	e310      	b.n	8001f7e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800195c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001960:	2b00      	cmp	r3, #0
 8001962:	f280 830c 	bge.w	8001f7e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29a      	uxth	r2, r3
 800196e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001972:	4013      	ands	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	8bfa      	ldrh	r2, [r7, #30]
 800197c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001980:	b292      	uxth	r2, r2
 8001982:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198c:	b29b      	uxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	3306      	adds	r3, #6
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d019      	beq.n	80019ec <PCD_EP_ISR_Handler+0x1f8>
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d015      	beq.n	80019ec <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	6959      	ldr	r1, [r3, #20]
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f004 fd86 	bl	80064e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	441a      	add	r2, r3
 80019e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019e4:	2100      	movs	r1, #0
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f008 ff9e 	bl	800a928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 82bd 	bne.w	8001f7e <PCD_EP_ISR_Handler+0x78a>
 8001a04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a08:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a10:	f000 82b5 	beq.w	8001f7e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4413      	add	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	801a      	strh	r2, [r3, #0]
 8001a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b3e      	cmp	r3, #62	; 0x3e
 8001a4a:	d91d      	bls.n	8001a88 <PCD_EP_ISR_Handler+0x294>
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <PCD_EP_ISR_Handler+0x272>
 8001a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a62:	3b01      	subs	r3, #1
 8001a64:	647b      	str	r3, [r7, #68]	; 0x44
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	e026      	b.n	8001ad6 <PCD_EP_ISR_Handler+0x2e2>
 8001a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <PCD_EP_ISR_Handler+0x2b2>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	801a      	strh	r2, [r3, #0]
 8001aa4:	e017      	b.n	8001ad6 <PCD_EP_ISR_Handler+0x2e2>
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x2cc>
 8001aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abc:	3301      	adds	r3, #1
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	827b      	strh	r3, [r7, #18]
 8001ae8:	8a7b      	ldrh	r3, [r7, #18]
 8001aea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001aee:	827b      	strh	r3, [r7, #18]
 8001af0:	8a7b      	ldrh	r3, [r7, #18]
 8001af2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001af6:	827b      	strh	r3, [r7, #18]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	8a7b      	ldrh	r3, [r7, #18]
 8001afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	8013      	strh	r3, [r2, #0]
 8001b12:	e234      	b.n	8001f7e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b28:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f280 80fc 	bge.w	8001d2a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b48:	4013      	ands	r3, r2
 8001b4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b64:	b292      	uxth	r2, r2
 8001b66:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b68:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b80:	7b1b      	ldrb	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d125      	bne.n	8001bd2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3306      	adds	r3, #6
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001bb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8092 	beq.w	8001ce0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	6959      	ldr	r1, [r3, #20]
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	88da      	ldrh	r2, [r3, #6]
 8001bc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bcc:	f004 fc89 	bl	80064e2 <USB_ReadPMA>
 8001bd0:	e086      	b.n	8001ce0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd4:	78db      	ldrb	r3, [r3, #3]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d10a      	bne.n	8001bf0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bde:	461a      	mov	r2, r3
 8001be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f9d9 	bl	8001f9a <HAL_PCD_EP_DB_Receive>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001bee:	e077      	b.n	8001ce0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	441a      	add	r2, r3
 8001c1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d024      	beq.n	8001c98 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	3302      	adds	r3, #2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d02e      	beq.n	8001ce0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c88:	6959      	ldr	r1, [r3, #20]
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	891a      	ldrh	r2, [r3, #8]
 8001c8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c92:	f004 fc26 	bl	80064e2 <USB_ReadPMA>
 8001c96:	e023      	b.n	8001ce0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	3306      	adds	r3, #6
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	6959      	ldr	r1, [r3, #20]
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	895a      	ldrh	r2, [r3, #10]
 8001cd8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cdc:	f004 fc01 	bl	80064e2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ce8:	441a      	add	r2, r3
 8001cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cf6:	441a      	add	r2, r3
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <PCD_EP_ISR_Handler+0x51c>
 8001d04:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d206      	bcs.n	8001d1e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f008 fe06 	bl	800a928 <HAL_PCD_DataOutStageCallback>
 8001d1c:	e005      	b.n	8001d2a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f90d 	bl	8004f44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8123 	beq.w	8001f7e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	441a      	add	r2, r3
 8001d78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	78db      	ldrb	r3, [r3, #3]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	f040 80a2 	bne.w	8001ed6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9a:	7b1b      	ldrb	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8093 	beq.w	8001ec8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001da2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d046      	beq.n	8001e3c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d126      	bne.n	8001e04 <PCD_EP_ISR_Handler+0x610>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	4413      	add	r3, r2
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	011a      	lsls	r2, r3, #4
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ddc:	623b      	str	r3, [r7, #32]
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	e061      	b.n	8001ec8 <PCD_EP_ISR_Handler+0x6d4>
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	785b      	ldrb	r3, [r3, #1]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d15d      	bne.n	8001ec8 <PCD_EP_ISR_Handler+0x6d4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	4413      	add	r3, r2
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	011a      	lsls	r2, r3, #4
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	2200      	movs	r2, #0
 8001e38:	801a      	strh	r2, [r3, #0]
 8001e3a:	e045      	b.n	8001ec8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d126      	bne.n	8001e98 <PCD_EP_ISR_Handler+0x6a4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5e:	4413      	add	r3, r2
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	011a      	lsls	r2, r3, #4
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	e017      	b.n	8001ec8 <PCD_EP_ISR_Handler+0x6d4>
 8001e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d113      	bne.n	8001ec8 <PCD_EP_ISR_Handler+0x6d4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eae:	4413      	add	r3, r2
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	011a      	lsls	r2, r3, #4
 8001eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eba:	4413      	add	r3, r2
 8001ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f008 fd45 	bl	800a95e <HAL_PCD_DataInStageCallback>
 8001ed4:	e053      	b.n	8001f7e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d146      	bne.n	8001f70 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d907      	bls.n	8001f2a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	619a      	str	r2, [r3, #24]
 8001f28:	e002      	b.n	8001f30 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f008 fd0d 	bl	800a95e <HAL_PCD_DataInStageCallback>
 8001f44:	e01b      	b.n	8001f7e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f4e:	441a      	add	r2, r3
 8001f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f52:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f5c:	441a      	add	r2, r3
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f60:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 ffeb 	bl	8004f44 <USB_EPStartXfer>
 8001f6e:	e006      	b.n	8001f7e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f74:	461a      	mov	r2, r3
 8001f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f91b 	bl	80021b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f6ff ac37 	blt.w	80017fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3758      	adds	r7, #88	; 0x58
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b088      	sub	sp, #32
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d07e      	beq.n	80020b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	8b7b      	ldrh	r3, [r7, #26]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d306      	bcc.n	8001ff4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	8b7b      	ldrh	r3, [r7, #26]
 8001fec:	1ad2      	subs	r2, r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	619a      	str	r2, [r3, #24]
 8001ff2:	e002      	b.n	8001ffa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d123      	bne.n	800204a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201c:	833b      	strh	r3, [r7, #24]
 800201e:	8b3b      	ldrh	r3, [r7, #24]
 8002020:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002024:	833b      	strh	r3, [r7, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	441a      	add	r2, r3
 8002034:	8b3b      	ldrh	r3, [r7, #24]
 8002036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800203a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800203e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002046:	b29b      	uxth	r3, r3
 8002048:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01f      	beq.n	8002094 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	82fb      	strh	r3, [r7, #22]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	441a      	add	r2, r3
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002090:	b29b      	uxth	r3, r3
 8002092:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002094:	8b7b      	ldrh	r3, [r7, #26]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	6959      	ldr	r1, [r3, #20]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	891a      	ldrh	r2, [r3, #8]
 80020a8:	8b7b      	ldrh	r3, [r7, #26]
 80020aa:	f004 fa1a 	bl	80064e2 <USB_ReadPMA>
 80020ae:	e07c      	b.n	80021aa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	3306      	adds	r3, #6
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	8b7b      	ldrh	r3, [r7, #26]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d306      	bcc.n	80020f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	619a      	str	r2, [r3, #24]
 80020f0:	e002      	b.n	80020f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d123      	bne.n	8002148 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	83fb      	strh	r3, [r7, #30]
 800211c:	8bfb      	ldrh	r3, [r7, #30]
 800211e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002122:	83fb      	strh	r3, [r7, #30]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	8bfb      	ldrh	r3, [r7, #30]
 8002134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	b29b      	uxth	r3, r3
 8002146:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11f      	bne.n	8002192 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216c:	83bb      	strh	r3, [r7, #28]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	441a      	add	r2, r3
 800217c:	8bbb      	ldrh	r3, [r7, #28]
 800217e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800218e:	b29b      	uxth	r3, r3
 8002190:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002192:	8b7b      	ldrh	r3, [r7, #26]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	6959      	ldr	r1, [r3, #20]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	895a      	ldrh	r2, [r3, #10]
 80021a4:	8b7b      	ldrh	r3, [r7, #26]
 80021a6:	f004 f99c 	bl	80064e2 <USB_ReadPMA>
    }
  }

  return count;
 80021aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0a4      	sub	sp, #144	; 0x90
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 81dd 	beq.w	8002588 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	3302      	adds	r3, #2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002202:	429a      	cmp	r2, r3
 8002204:	d907      	bls.n	8002216 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	619a      	str	r2, [r3, #24]
 8002214:	e002      	b.n	800221c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 80b9 	bne.w	8002398 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d126      	bne.n	800227c <HAL_PCD_EP_DB_Transmit+0xc8>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	4413      	add	r3, r2
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	011a      	lsls	r2, r3, #4
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	4413      	add	r3, r2
 8002250:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002260:	b29a      	uxth	r2, r3
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002274:	b29a      	uxth	r2, r3
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	e01a      	b.n	80022b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d116      	bne.n	80022b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	4413      	add	r3, r2
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	011a      	lsls	r2, r3, #4
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	4413      	add	r3, r2
 80022a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	2200      	movs	r2, #0
 80022b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d126      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0x15a>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	011a      	lsls	r2, r3, #4
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	801a      	strh	r2, [r3, #0]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002306:	b29a      	uxth	r2, r3
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	e017      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0x18a>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d113      	bne.n	800233e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	4413      	add	r3, r2
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	011a      	lsls	r2, r3, #4
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	4413      	add	r3, r2
 8002332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2200      	movs	r2, #0
 800233c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f008 fb0a 	bl	800a95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 82fc 	beq.w	800294e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002370:	82fb      	strh	r3, [r7, #22]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	441a      	add	r2, r3
 8002380:	8afb      	ldrh	r3, [r7, #22]
 8002382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002392:	b29b      	uxth	r3, r3
 8002394:	8013      	strh	r3, [r2, #0]
 8002396:	e2da      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d021      	beq.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	441a      	add	r2, r3
 80023ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80023d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	f040 82ae 	bne.w	800294e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023fa:	441a      	add	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002408:	441a      	add	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	429a      	cmp	r2, r3
 8002418:	d30b      	bcc.n	8002432 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6a1a      	ldr	r2, [r3, #32]
 8002426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	621a      	str	r2, [r3, #32]
 8002430:	e017      	b.n	8002462 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800243a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800243e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800244a:	e00a      	b.n	8002462 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d165      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x382>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247e:	4413      	add	r3, r2
 8002480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	011a      	lsls	r2, r3, #4
 8002488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248a:	4413      	add	r3, r2
 800248c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249c:	b29a      	uxth	r2, r3
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a6:	2b3e      	cmp	r3, #62	; 0x3e
 80024a8:	d91d      	bls.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x332>
 80024aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_PCD_EP_DB_Transmit+0x310>
 80024be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c0:	3b01      	subs	r3, #1
 80024c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	029b      	lsls	r3, r3, #10
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4313      	orrs	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024de:	b29a      	uxth	r2, r3
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	e044      	b.n	8002570 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <HAL_PCD_EP_DB_Transmit+0x350>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	801a      	strh	r2, [r3, #0]
 8002502:	e035      	b.n	8002570 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
 800250c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251a:	3301      	adds	r3, #1
 800251c:	64bb      	str	r3, [r7, #72]	; 0x48
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29a      	uxth	r2, r3
 8002524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002526:	b29b      	uxth	r3, r3
 8002528:	029b      	lsls	r3, r3, #10
 800252a:	b29b      	uxth	r3, r3
 800252c:	4313      	orrs	r3, r2
 800252e:	b29a      	uxth	r2, r3
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	e01c      	b.n	8002570 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d118      	bne.n	8002570 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	647b      	str	r3, [r7, #68]	; 0x44
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002552:	4413      	add	r3, r2
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	011a      	lsls	r2, r3, #4
 800255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255e:	4413      	add	r3, r2
 8002560:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002564:	643b      	str	r3, [r7, #64]	; 0x40
 8002566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256a:	b29a      	uxth	r2, r3
 800256c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6959      	ldr	r1, [r3, #20]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	891a      	ldrh	r2, [r3, #8]
 800257c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002580:	b29b      	uxth	r3, r3
 8002582:	f003 ff69 	bl	8006458 <USB_WritePMA>
 8002586:	e1e2      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	3306      	adds	r3, #6
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025bc:	429a      	cmp	r2, r3
 80025be:	d307      	bcc.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025c8:	1ad2      	subs	r2, r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	e002      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 80c0 	bne.w	8002760 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d126      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0x482>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025fc:	4413      	add	r3, r2
 80025fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	011a      	lsls	r2, r3, #4
 8002606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002608:	4413      	add	r3, r2
 800260a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800260e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261a:	b29a      	uxth	r2, r3
 800261c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262e:	b29a      	uxth	r2, r3
 8002630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	e01a      	b.n	800266c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d116      	bne.n	800266c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	667b      	str	r3, [r7, #100]	; 0x64
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002652:	4413      	add	r3, r2
 8002654:	667b      	str	r3, [r7, #100]	; 0x64
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	011a      	lsls	r2, r3, #4
 800265c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800265e:	4413      	add	r3, r2
 8002660:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002664:	663b      	str	r3, [r7, #96]	; 0x60
 8002666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002668:	2200      	movs	r2, #0
 800266a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	677b      	str	r3, [r7, #116]	; 0x74
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d12b      	bne.n	80026d2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	4413      	add	r3, r2
 8002690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	011a      	lsls	r2, r3, #4
 8002698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269a:	4413      	add	r3, r2
 800269c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b6:	801a      	strh	r2, [r3, #0]
 80026b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ce:	801a      	strh	r2, [r3, #0]
 80026d0:	e017      	b.n	8002702 <HAL_PCD_EP_DB_Transmit+0x54e>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d113      	bne.n	8002702 <HAL_PCD_EP_DB_Transmit+0x54e>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e8:	4413      	add	r3, r2
 80026ea:	677b      	str	r3, [r7, #116]	; 0x74
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	011a      	lsls	r2, r3, #4
 80026f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f4:	4413      	add	r3, r2
 80026f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026fa:	673b      	str	r3, [r7, #112]	; 0x70
 80026fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026fe:	2200      	movs	r2, #0
 8002700:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f008 f928 	bl	800a95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 811a 	bne.w	800294e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002734:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	441a      	add	r2, r3
 8002746:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800274a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800274e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275a:	b29b      	uxth	r3, r3
 800275c:	8013      	strh	r3, [r2, #0]
 800275e:	e0f6      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d121      	bne.n	80027ae <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800279a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f040 80ca 	bne.w	800294e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027c2:	441a      	add	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027d0:	441a      	add	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d30b      	bcc.n	80027fa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6a1a      	ldr	r2, [r3, #32]
 80027ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	621a      	str	r2, [r3, #32]
 80027f8:	e017      	b.n	800282a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d108      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002802:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002812:	e00a      	b.n	800282a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	657b      	str	r3, [r7, #84]	; 0x54
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	785b      	ldrb	r3, [r3, #1]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d165      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0x750>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	4413      	add	r3, r2
 800284e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	011a      	lsls	r2, r3, #4
 8002856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002858:	4413      	add	r3, r2
 800285a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800285e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	b29a      	uxth	r2, r3
 800286c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002874:	2b3e      	cmp	r3, #62	; 0x3e
 8002876:	d91d      	bls.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x700>
 8002878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_PCD_EP_DB_Transmit+0x6de>
 800288c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288e:	3b01      	subs	r3, #1
 8002890:	66bb      	str	r3, [r7, #104]	; 0x68
 8002892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29a      	uxth	r2, r3
 8002898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289a:	b29b      	uxth	r3, r3
 800289c:	029b      	lsls	r3, r3, #10
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	e041      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x784>
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80028bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ce:	801a      	strh	r2, [r3, #0]
 80028d0:	e032      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x784>
 80028d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80028da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_PCD_EP_DB_Transmit+0x738>
 80028e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e8:	3301      	adds	r3, #1
 80028ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	e019      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x784>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d115      	bne.n	8002938 <HAL_PCD_EP_DB_Transmit+0x784>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	4413      	add	r3, r2
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	011a      	lsls	r2, r3, #4
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	4413      	add	r3, r2
 8002928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800292c:	653b      	str	r3, [r7, #80]	; 0x50
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002932:	b29a      	uxth	r2, r3
 8002934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002936:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6959      	ldr	r1, [r3, #20]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	895a      	ldrh	r2, [r3, #10]
 8002944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002948:	b29b      	uxth	r3, r3
 800294a:	f003 fd85 	bl	8006458 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002968:	82bb      	strh	r3, [r7, #20]
 800296a:	8abb      	ldrh	r3, [r7, #20]
 800296c:	f083 0310 	eor.w	r3, r3, #16
 8002970:	82bb      	strh	r3, [r7, #20]
 8002972:	8abb      	ldrh	r3, [r7, #20]
 8002974:	f083 0320 	eor.w	r3, r3, #32
 8002978:	82bb      	strh	r3, [r7, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	8abb      	ldrh	r3, [r7, #20]
 800298a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299a:	b29b      	uxth	r3, r3
 800299c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3790      	adds	r7, #144	; 0x90
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	4613      	mov	r3, r2
 80029b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e009      	b.n	80029f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029de:	897a      	ldrh	r2, [r7, #10]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2200      	movs	r2, #0
 80029fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	80da      	strh	r2, [r3, #6]
 8002a06:	e00b      	b.n	8002a20 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e26c      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8087 	beq.w	8002b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a58:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d112      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
 8002a64:	4b8c      	ldr	r3, [pc, #560]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x12c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d168      	bne.n	8002b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e246      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x76>
 8002a94:	4b80      	ldr	r3, [pc, #512]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a7f      	ldr	r2, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e02e      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7a      	ldr	r2, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b78      	ldr	r3, [pc, #480]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xbc>
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a67      	ldr	r2, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fd ff46 	bl	8000998 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fd ff42 	bl	8000998 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1fa      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe4>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fd ff32 	bl	8000998 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fd ff2e 	bl	8000998 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1e6      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x10c>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
 8002b7e:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1ba      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4939      	ldr	r1, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fd fee7 	bl	8000998 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fd fee3 	bl	8000998 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e19b      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4927      	ldr	r1, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fd fec6 	bl	8000998 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fd fec2 	bl	8000998 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e17a      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03a      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fd fea6 	bl	8000998 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fd fea2 	bl	8000998 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e15a      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f000 fae8 	bl	8003244 <RCC_Delay>
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fd fe8c 	bl	8000998 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fd fe88 	bl	8000998 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d908      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e140      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	42420000 	.word	0x42420000
 8002ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	4b9e      	ldr	r3, [pc, #632]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e9      	bne.n	8002c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80a6 	beq.w	8002e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b97      	ldr	r3, [pc, #604]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b94      	ldr	r3, [pc, #592]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a93      	ldr	r2, [pc, #588]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b91      	ldr	r3, [pc, #580]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b8e      	ldr	r3, [pc, #568]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a8a      	ldr	r2, [pc, #552]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fe49 	bl	8000998 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fd fe45 	bl	8000998 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	; 0x64
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0fd      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x312>
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a75      	ldr	r2, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a72      	ldr	r2, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x356>
 8002d68:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a6c      	ldr	r2, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fd fdf9 	bl	8000998 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fd fdf5 	bl	8000998 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0ab      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCC_OscConfig+0x37e>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fd fde3 	bl	8000998 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fddf 	bl	8000998 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e095      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8081 	beq.w	8002f16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e14:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d061      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d146      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fd fdb3 	bl	8000998 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fd fdaf 	bl	8000998 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e067      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	492d      	ldr	r1, [pc, #180]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a19      	ldr	r1, [r3, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	430b      	orrs	r3, r1
 8002e82:	4927      	ldr	r1, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fd fd83 	bl	8000998 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fd fd7f 	bl	8000998 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e037      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46a>
 8002eb4:	e02f      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fd6c 	bl	8000998 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fd fd68 	bl	8000998 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e020      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x498>
 8002ee2:	e018      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e013      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42420060 	.word	0x42420060

08002f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0d0      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d910      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b67      	ldr	r3, [pc, #412]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4965      	ldr	r1, [pc, #404]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f88:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002faa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	494d      	ldr	r1, [pc, #308]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d040      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e073      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06b      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4936      	ldr	r1, [pc, #216]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fd fcbc 	bl	8000998 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fd fcb8 	bl	8000998 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e053      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d210      	bcs.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4922      	ldr	r1, [pc, #136]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e032      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4916      	ldr	r1, [pc, #88]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490e      	ldr	r1, [pc, #56]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f821 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490a      	ldr	r1, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1cc>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1d0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fb7c 	bl	80007d8 <HAL_InitTick>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	0800af40 	.word	0x0800af40
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <HAL_RCC_GetSysClockFreq+0x94>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b04      	cmp	r3, #4
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x30>
 800312a:	2b08      	cmp	r3, #8
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x36>
 800312e:	e027      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003130:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_RCC_GetSysClockFreq+0x98>)
 8003132:	613b      	str	r3, [r7, #16]
      break;
 8003134:	e027      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0c9b      	lsrs	r3, r3, #18
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d010      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_RCC_GetSysClockFreq+0x94>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	0c5b      	lsrs	r3, r3, #17
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	fb02 f203 	mul.w	r2, r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e004      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	613b      	str	r3, [r7, #16]
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetSysClockFreq+0x98>)
 8003182:	613b      	str	r3, [r7, #16]
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	693b      	ldr	r3, [r7, #16]
}
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	007a1200 	.word	0x007a1200
 800319c:	0800af58 	.word	0x0800af58
 80031a0:	0800af68 	.word	0x0800af68
 80031a4:	003d0900 	.word	0x003d0900

080031a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b02      	ldr	r3, [pc, #8]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff2 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4903      	ldr	r1, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	0800af50 	.word	0x0800af50

080031e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	220f      	movs	r2, #15
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_RCC_GetClockConfig+0x58>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCC_GetClockConfig+0x58>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_GetClockConfig+0x58>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_RCC_GetClockConfig+0x58>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0207 	and.w	r2, r3, #7
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40021000 	.word	0x40021000
 8003240:	40022000 	.word	0x40022000

08003244 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <RCC_Delay+0x34>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <RCC_Delay+0x38>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0a5b      	lsrs	r3, r3, #9
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003260:	bf00      	nop
  }
  while (Delay --);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1e5a      	subs	r2, r3, #1
 8003266:	60fa      	str	r2, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f9      	bne.n	8003260 <RCC_Delay+0x1c>
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	20000000 	.word	0x20000000
 800327c:	10624dd3 	.word	0x10624dd3

08003280 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d07d      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800329c:	2300      	movs	r3, #0
 800329e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a0:	4b4f      	ldr	r3, [pc, #316]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b6:	61d3      	str	r3, [r2, #28]
 80032b8:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d118      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a42      	ldr	r2, [pc, #264]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e0:	f7fd fb5a 	bl	8000998 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	e008      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e8:	f7fd fb56 	bl	8000998 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e06d      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fa:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d02e      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	429a      	cmp	r2, r3
 8003322:	d027      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003324:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800332e:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d014      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fd fb25 	bl	8000998 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fd fb21 	bl	8000998 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e036      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ee      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4917      	ldr	r1, [pc, #92]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003382:	4313      	orrs	r3, r2
 8003384:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d105      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003396:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	490b      	ldr	r1, [pc, #44]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4904      	ldr	r1, [pc, #16]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	42420440 	.word	0x42420440

080033ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e041      	b.n	8003482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd f978 	bl	8000708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f000 fc5e 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e03a      	b.n	800351a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_TIM_Base_Start_IT+0x98>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x58>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d009      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x58>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_TIM_Base_Start_IT+0x9c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x58>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <HAL_TIM_Base_Start_IT+0xa0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d111      	bne.n	8003508 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d010      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	e007      	b.n	8003518 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800

08003530 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a1a      	ldr	r2, [r3, #32]
 800354e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10f      	bne.n	8003578 <HAL_TIM_Base_Stop_IT+0x48>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	f240 4344 	movw	r3, #1092	; 0x444
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <HAL_TIM_Base_Stop_IT+0x48>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fb8e 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start+0x24>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e022      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b04      	cmp	r3, #4
 8003664:	d109      	bne.n	800367a <HAL_TIM_PWM_Start+0x3e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e015      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d109      	bne.n	8003694 <HAL_TIM_PWM_Start+0x58>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e008      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e05e      	b.n	800376c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0x82>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	e013      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0x92>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	e00b      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fd7c 	bl	80041ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d107      	bne.n	800370e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d009      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_TIM_PWM_Start+0x13c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIM_PWM_Start+0x140>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d010      	beq.n	800376a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	e007      	b.n	800376a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800

08003780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0202 	mvn.w	r2, #2
 80037ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa76 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa69 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa78 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0204 	mvn.w	r2, #4
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa4c 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa3f 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa4e 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa22 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa15 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa24 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2208      	movs	r2, #8
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f9f8 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9eb 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f9fa 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fc fe92 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fce9 	bl	8004302 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9be 	bl	8003cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0220 	mvn.w	r2, #32
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fcb4 	bl	80042f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0ae      	b.n	8003b0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	f200 809f 	bhi.w	8003afc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003afd 	.word	0x08003afd
 80039cc:	08003afd 	.word	0x08003afd
 80039d0:	08003afd 	.word	0x08003afd
 80039d4:	08003a39 	.word	0x08003a39
 80039d8:	08003afd 	.word	0x08003afd
 80039dc:	08003afd 	.word	0x08003afd
 80039e0:	08003afd 	.word	0x08003afd
 80039e4:	08003a7b 	.word	0x08003a7b
 80039e8:	08003afd 	.word	0x08003afd
 80039ec:	08003afd 	.word	0x08003afd
 80039f0:	08003afd 	.word	0x08003afd
 80039f4:	08003abb 	.word	0x08003abb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f9d6 	bl	8003db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0208 	orr.w	r2, r2, #8
 8003a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0204 	bic.w	r2, r2, #4
 8003a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6999      	ldr	r1, [r3, #24]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	619a      	str	r2, [r3, #24]
      break;
 8003a36:	e064      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa1c 	bl	8003e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6999      	ldr	r1, [r3, #24]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	619a      	str	r2, [r3, #24]
      break;
 8003a78:	e043      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fa65 	bl	8003f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0208 	orr.w	r2, r2, #8
 8003a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0204 	bic.w	r2, r2, #4
 8003aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69d9      	ldr	r1, [r3, #28]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	61da      	str	r2, [r3, #28]
      break;
 8003ab8:	e023      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 faaf 	bl	8004024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69d9      	ldr	r1, [r3, #28]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	021a      	lsls	r2, r3, #8
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	61da      	str	r2, [r3, #28]
      break;
 8003afa:	e002      	b.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIM_ConfigClockSource+0x1c>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0b4      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x186>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b68:	d03e      	beq.n	8003be8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6e:	f200 8087 	bhi.w	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	f000 8086 	beq.w	8003c86 <HAL_TIM_ConfigClockSource+0x172>
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7e:	d87f      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b70      	cmp	r3, #112	; 0x70
 8003b82:	d01a      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0xa6>
 8003b84:	2b70      	cmp	r3, #112	; 0x70
 8003b86:	d87b      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b60      	cmp	r3, #96	; 0x60
 8003b8a:	d050      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x11a>
 8003b8c:	2b60      	cmp	r3, #96	; 0x60
 8003b8e:	d877      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b50      	cmp	r3, #80	; 0x50
 8003b92:	d03c      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xfa>
 8003b94:	2b50      	cmp	r3, #80	; 0x50
 8003b96:	d873      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d058      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x13a>
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	d86f      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b30      	cmp	r3, #48	; 0x30
 8003ba2:	d064      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ba4:	2b30      	cmp	r3, #48	; 0x30
 8003ba6:	d86b      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d060      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d867      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d05c      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d05a      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x15a>
 8003bb8:	e062      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6899      	ldr	r1, [r3, #8]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f000 faf0 	bl	80041ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	609a      	str	r2, [r3, #8]
      break;
 8003be6:	e04f      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f000 fad9 	bl	80041ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c0a:	609a      	str	r2, [r3, #8]
      break;
 8003c0c:	e03c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f000 fa50 	bl	80040c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2150      	movs	r1, #80	; 0x50
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 faa7 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003c2c:	e02c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 fa6e 	bl	800411c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2160      	movs	r1, #96	; 0x60
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fa97 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e01c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 fa30 	bl	80040c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2140      	movs	r1, #64	; 0x40
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa87 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e00c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f000 fa7e 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003c7e:	e003      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e000      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
	...

08003cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <TIM_Base_SetConfig+0xb8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0x30>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x30>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <TIM_Base_SetConfig+0xbc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x30>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a25      	ldr	r2, [pc, #148]	; (8003dac <TIM_Base_SetConfig+0xc0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <TIM_Base_SetConfig+0xb8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00b      	beq.n	8003d4e <TIM_Base_SetConfig+0x62>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d007      	beq.n	8003d4e <TIM_Base_SetConfig+0x62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <TIM_Base_SetConfig+0xbc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d003      	beq.n	8003d4e <TIM_Base_SetConfig+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <TIM_Base_SetConfig+0xc0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d108      	bne.n	8003d60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <TIM_Base_SetConfig+0xb8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	615a      	str	r2, [r3, #20]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800

08003db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 0201 	bic.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <TIM_OC1_SetConfig+0xc8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10c      	bne.n	8003e26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0308 	bic.w	r3, r3, #8
 8003e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <TIM_OC1_SetConfig+0xc8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d111      	bne.n	8003e52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40012c00 	.word	0x40012c00

08003e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f023 0210 	bic.w	r2, r3, #16
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0320 	bic.w	r3, r3, #32
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <TIM_OC2_SetConfig+0xd0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10d      	bne.n	8003ef8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <TIM_OC2_SetConfig+0xd0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d113      	bne.n	8003f28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00

08003f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <TIM_OC3_SetConfig+0xd0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <TIM_OC3_SetConfig+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d113      	bne.n	8003ffa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00

08004024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <TIM_OC4_SetConfig+0x98>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d109      	bne.n	8004098 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00

080040c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f023 0201 	bic.w	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 030a 	bic.w	r3, r3, #10
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0210 	bic.w	r2, r3, #16
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	031b      	lsls	r3, r3, #12
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004158:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	f043 0307 	orr.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2201      	movs	r2, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1a      	ldr	r2, [r3, #32]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004248:	2302      	movs	r3, #2
 800424a:	e046      	b.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d009      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a10      	ldr	r2, [pc, #64]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10c      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800

080042f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004314:	b084      	sub	sp, #16
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	f107 0014 	add.w	r0, r7, #20
 8004322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	b004      	add	sp, #16
 8004332:	4770      	bx	lr

08004334 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004344:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004348:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004368:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800436c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	b29b      	uxth	r3, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	4013      	ands	r3, r2
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043ac:	b084      	sub	sp, #16
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	f107 0014 	add.w	r0, r7, #20
 80043ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	b004      	add	sp, #16
 80043ea:	4770      	bx	lr

080043ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b09d      	sub	sp, #116	; 0x74
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	78db      	ldrb	r3, [r3, #3]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d81f      	bhi.n	800445e <USB_ActivateEndpoint+0x72>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <USB_ActivateEndpoint+0x38>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004435 	.word	0x08004435
 8004428:	08004451 	.word	0x08004451
 800442c:	08004467 	.word	0x08004467
 8004430:	08004443 	.word	0x08004443
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004434:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800443c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004440:	e012      	b.n	8004468 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004442:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004446:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800444a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800444e:	e00b      	b.n	8004468 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004450:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004458:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800445c:	e004      	b.n	8004468 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004464:	e000      	b.n	8004468 <USB_ActivateEndpoint+0x7c>
      break;
 8004466:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80044bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	7b1b      	ldrb	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 8178 	bne.w	80047ca <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8084 	beq.w	80045ec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	4413      	add	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	011a      	lsls	r2, r3, #4
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	88db      	ldrh	r3, [r3, #6]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	827b      	strh	r3, [r7, #18]
 8004526:	8a7b      	ldrh	r3, [r7, #18]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <USB_ActivateEndpoint+0x17c>
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	823b      	strh	r3, [r7, #16]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	8a3b      	ldrh	r3, [r7, #16]
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	78db      	ldrb	r3, [r3, #3]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d020      	beq.n	80045b2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004586:	81bb      	strh	r3, [r7, #12]
 8004588:	89bb      	ldrh	r3, [r7, #12]
 800458a:	f083 0320 	eor.w	r3, r3, #32
 800458e:	81bb      	strh	r3, [r7, #12]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	89bb      	ldrh	r3, [r7, #12]
 800459c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8013      	strh	r3, [r2, #0]
 80045b0:	e2d5      	b.n	8004b5e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c8:	81fb      	strh	r3, [r7, #14]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	89fb      	ldrh	r3, [r7, #14]
 80045d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	8013      	strh	r3, [r2, #0]
 80045ea:	e2b8      	b.n	8004b5e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	4413      	add	r3, r2
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	011a      	lsls	r2, r3, #4
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	4413      	add	r3, r2
 800460a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	88db      	ldrh	r3, [r3, #6]
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	b29b      	uxth	r3, r3
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	4413      	add	r3, r2
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	011a      	lsls	r2, r3, #4
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	4413      	add	r3, r2
 800463e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800464e:	b29a      	uxth	r2, r3
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b3e      	cmp	r3, #62	; 0x3e
 800465a:	d91d      	bls.n	8004698 <USB_ActivateEndpoint+0x2ac>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	66bb      	str	r3, [r7, #104]	; 0x68
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <USB_ActivateEndpoint+0x28a>
 8004670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004672:	3b01      	subs	r3, #1
 8004674:	66bb      	str	r3, [r7, #104]	; 0x68
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29a      	uxth	r2, r3
 800467c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800467e:	b29b      	uxth	r3, r3
 8004680:	029b      	lsls	r3, r3, #10
 8004682:	b29b      	uxth	r3, r3
 8004684:	4313      	orrs	r3, r2
 8004686:	b29b      	uxth	r3, r3
 8004688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800468c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004690:	b29a      	uxth	r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	e026      	b.n	80046e6 <USB_ActivateEndpoint+0x2fa>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <USB_ActivateEndpoint+0x2ca>
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	e017      	b.n	80046e6 <USB_ActivateEndpoint+0x2fa>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <USB_ActivateEndpoint+0x2e4>
 80046ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046cc:	3301      	adds	r3, #1
 80046ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d8:	b29b      	uxth	r3, r3
 80046da:	029b      	lsls	r3, r3, #10
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4313      	orrs	r3, r2
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80046f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01b      	beq.n	8004736 <USB_ActivateEndpoint+0x34a>
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004714:	843b      	strh	r3, [r7, #32]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	8c3b      	ldrh	r3, [r7, #32]
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d124      	bne.n	8004788 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	83bb      	strh	r3, [r7, #28]
 8004756:	8bbb      	ldrh	r3, [r7, #28]
 8004758:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800475c:	83bb      	strh	r3, [r7, #28]
 800475e:	8bbb      	ldrh	r3, [r7, #28]
 8004760:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004764:	83bb      	strh	r3, [r7, #28]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8bbb      	ldrh	r3, [r7, #28]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
 8004786:	e1ea      	b.n	8004b5e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	83fb      	strh	r3, [r7, #30]
 80047a0:	8bfb      	ldrh	r3, [r7, #30]
 80047a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047a6:	83fb      	strh	r3, [r7, #30]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	8bfb      	ldrh	r3, [r7, #30]
 80047b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
 80047c8:	e1c9      	b.n	8004b5e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	78db      	ldrb	r3, [r3, #3]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d11e      	bne.n	8004810 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	441a      	add	r2, r3
 80047f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80047fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004802:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480a:	b29b      	uxth	r3, r3
 800480c:	8013      	strh	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	441a      	add	r2, r3
 8004834:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800483c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004848:	b29b      	uxth	r3, r3
 800484a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004856:	b29b      	uxth	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800485c:	4413      	add	r3, r2
 800485e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	011a      	lsls	r2, r3, #4
 8004866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004868:	4413      	add	r3, r2
 800486a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800486e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	891b      	ldrh	r3, [r3, #8]
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	b29b      	uxth	r3, r3
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	4413      	add	r3, r2
 8004892:	657b      	str	r3, [r7, #84]	; 0x54
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	011a      	lsls	r2, r3, #4
 800489a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489c:	4413      	add	r3, r2
 800489e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048a2:	653b      	str	r3, [r7, #80]	; 0x50
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	895b      	ldrh	r3, [r3, #10]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 8093 	bne.w	80049e4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01b      	beq.n	8004912 <USB_ActivateEndpoint+0x526>
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004920:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01b      	beq.n	8004962 <USB_ActivateEndpoint+0x576>
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004940:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	873b      	strh	r3, [r7, #56]	; 0x38
 800497a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800497c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004980:	873b      	strh	r3, [r7, #56]	; 0x38
 8004982:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004984:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004988:	873b      	strh	r3, [r7, #56]	; 0x38
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	441a      	add	r2, r3
 8004994:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]
 80049e2:	e0bc      	b.n	8004b5e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01d      	beq.n	8004a3c <USB_ActivateEndpoint+0x650>
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01d      	beq.n	8004a94 <USB_ActivateEndpoint+0x6a8>
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	78db      	ldrb	r3, [r3, #3]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d024      	beq.n	8004ae6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ab6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004aba:	f083 0320 	eor.w	r3, r3, #32
 8004abe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
 8004ae4:	e01d      	b.n	8004b22 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004b5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3774      	adds	r7, #116	; 0x74
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b08d      	sub	sp, #52	; 0x34
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	7b1b      	ldrb	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 808e 	bne.w	8004c9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d044      	beq.n	8004c12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	81bb      	strh	r3, [r7, #12]
 8004b96:	89bb      	ldrh	r3, [r7, #12]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <USB_DeactivateEndpoint+0x6c>
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	817b      	strh	r3, [r7, #10]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	897b      	ldrh	r3, [r7, #10]
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bee:	813b      	strh	r3, [r7, #8]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	893b      	ldrh	r3, [r7, #8]
 8004bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8013      	strh	r3, [r2, #0]
 8004c10:	e192      	b.n	8004f38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	827b      	strh	r3, [r7, #18]
 8004c20:	8a7b      	ldrh	r3, [r7, #18]
 8004c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01b      	beq.n	8004c62 <USB_DeactivateEndpoint+0xf6>
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	823b      	strh	r3, [r7, #16]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	8a3b      	ldrh	r3, [r7, #16]
 8004c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	81fb      	strh	r3, [r7, #14]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	441a      	add	r2, r3
 8004c84:	89fb      	ldrh	r3, [r7, #14]
 8004c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]
 8004c9a:	e14d      	b.n	8004f38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 80a5 	bne.w	8004df0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	843b      	strh	r3, [r7, #32]
 8004cb4:	8c3b      	ldrh	r3, [r7, #32]
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01b      	beq.n	8004cf6 <USB_DeactivateEndpoint+0x18a>
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	83fb      	strh	r3, [r7, #30]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	8bfb      	ldrh	r3, [r7, #30]
 8004ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	83bb      	strh	r3, [r7, #28]
 8004d04:	8bbb      	ldrh	r3, [r7, #28]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01b      	beq.n	8004d46 <USB_DeactivateEndpoint+0x1da>
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	837b      	strh	r3, [r7, #26]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	8b7b      	ldrh	r3, [r7, #26]
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	833b      	strh	r3, [r7, #24]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	8b3b      	ldrh	r3, [r7, #24]
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d94:	82fb      	strh	r3, [r7, #22]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	8afb      	ldrh	r3, [r7, #22]
 8004da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dcc:	82bb      	strh	r3, [r7, #20]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	8abb      	ldrh	r3, [r7, #20]
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]
 8004dee:	e0a3      	b.n	8004f38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004dfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01b      	beq.n	8004e40 <USB_DeactivateEndpoint+0x2d4>
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01b      	beq.n	8004e90 <USB_DeactivateEndpoint+0x324>
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ede:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3734      	adds	r7, #52	; 0x34
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b0c2      	sub	sp, #264	; 0x108
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	1d3b      	adds	r3, r7, #4
 8004f4c:	6018      	str	r0, [r3, #0]
 8004f4e:	463b      	mov	r3, r7
 8004f50:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f52:	463b      	mov	r3, r7
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 8545 	bne.w	80059e8 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d905      	bls.n	8004f7a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004f6e:	463b      	mov	r3, r7
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f78:	e004      	b.n	8004f84 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	7b1b      	ldrb	r3, [r3, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d128      	bne.n	8004fe0 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6959      	ldr	r1, [r3, #20]
 8004f94:	463b      	mov	r3, r7
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	88da      	ldrh	r2, [r3, #6]
 8004f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	1d38      	adds	r0, r7, #4
 8004fa2:	6800      	ldr	r0, [r0, #0]
 8004fa4:	f001 fa58 	bl	8006458 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	1d3b      	adds	r3, r7, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	f000 bcdb 	b.w	8005996 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	78db      	ldrb	r3, [r3, #3]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	f040 836f 	bne.w	80056ca <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	f240 8313 	bls.w	8005624 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	463b      	mov	r3, r7
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 816d 	beq.w	800534a <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005070:	1d3b      	adds	r3, r7, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d16e      	bne.n	800515e <USB_EPStartXfer+0x21a>
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508e:	b29b      	uxth	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	4413      	add	r3, r2
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	011a      	lsls	r2, r3, #4
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	4413      	add	r3, r2
 80050a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050be:	2b3e      	cmp	r3, #62	; 0x3e
 80050c0:	d921      	bls.n	8005106 <USB_EPStartXfer+0x1c2>
 80050c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <USB_EPStartXfer+0x19e>
 80050d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050dc:	3b01      	subs	r3, #1
 80050de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	029b      	lsls	r3, r3, #10
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e047      	b.n	8005196 <USB_EPStartXfer+0x252>
 8005106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <USB_EPStartXfer+0x1e0>
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511c:	b29a      	uxth	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	e038      	b.n	8005196 <USB_EPStartXfer+0x252>
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800512e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <USB_EPStartXfer+0x200>
 800513a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800513e:	3301      	adds	r3, #1
 8005140:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29a      	uxth	r2, r3
 800514a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	4313      	orrs	r3, r2
 8005156:	b29a      	uxth	r2, r3
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	e01b      	b.n	8005196 <USB_EPStartXfer+0x252>
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d116      	bne.n	8005196 <USB_EPStartXfer+0x252>
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005170:	b29b      	uxth	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	4413      	add	r3, r2
 8005178:	633b      	str	r3, [r7, #48]	; 0x30
 800517a:	463b      	mov	r3, r7
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	011a      	lsls	r2, r3, #4
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	4413      	add	r3, r2
 8005186:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800518c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005190:	b29a      	uxth	r2, r3
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	895b      	ldrh	r3, [r3, #10]
 800519c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051a0:	463b      	mov	r3, r7
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6959      	ldr	r1, [r3, #20]
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051b0:	1d38      	adds	r0, r7, #4
 80051b2:	6800      	ldr	r0, [r0, #0]
 80051b4:	f001 f950 	bl	8006458 <USB_WritePMA>
            ep->xfer_buff += len;
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c2:	441a      	add	r2, r3
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051ca:	463b      	mov	r3, r7
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1a      	ldr	r2, [r3, #32]
 80051d0:	463b      	mov	r3, r7
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d909      	bls.n	80051ee <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 80051da:	463b      	mov	r3, r7
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	621a      	str	r2, [r3, #32]
 80051ec:	e008      	b.n	8005200 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2200      	movs	r2, #0
 80051fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005200:	463b      	mov	r3, r7
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d16e      	bne.n	80052e8 <USB_EPStartXfer+0x3a4>
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005218:	b29b      	uxth	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	4413      	add	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	011a      	lsls	r2, r3, #4
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	4413      	add	r3, r2
 800522e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800523e:	b29a      	uxth	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005248:	2b3e      	cmp	r3, #62	; 0x3e
 800524a:	d921      	bls.n	8005290 <USB_EPStartXfer+0x34c>
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <USB_EPStartXfer+0x328>
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005266:	3b01      	subs	r3, #1
 8005268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29a      	uxth	r2, r3
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	b29b      	uxth	r3, r3
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	b29b      	uxth	r3, r3
 800527c:	4313      	orrs	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005288:	b29a      	uxth	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	e04a      	b.n	8005326 <USB_EPStartXfer+0x3e2>
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <USB_EPStartXfer+0x36a>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	e03b      	b.n	8005326 <USB_EPStartXfer+0x3e2>
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <USB_EPStartXfer+0x38a>
 80052c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c8:	3301      	adds	r3, #1
 80052ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d8:	b29b      	uxth	r3, r3
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	b29b      	uxth	r3, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e01e      	b.n	8005326 <USB_EPStartXfer+0x3e2>
 80052e8:	463b      	mov	r3, r7
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d119      	bne.n	8005326 <USB_EPStartXfer+0x3e2>
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	4413      	add	r3, r2
 8005308:	623b      	str	r3, [r7, #32]
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	011a      	lsls	r2, r3, #4
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	4413      	add	r3, r2
 8005316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005320:	b29a      	uxth	r2, r3
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	891b      	ldrh	r3, [r3, #8]
 800532c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6959      	ldr	r1, [r3, #20]
 8005336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533a:	b29b      	uxth	r3, r3
 800533c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005340:	1d38      	adds	r0, r7, #4
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	f001 f888 	bl	8006458 <USB_WritePMA>
 8005348:	e325      	b.n	8005996 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800534a:	463b      	mov	r3, r7
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d16e      	bne.n	8005432 <USB_EPStartXfer+0x4ee>
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	64bb      	str	r3, [r7, #72]	; 0x48
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005362:	b29b      	uxth	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005368:	4413      	add	r3, r2
 800536a:	64bb      	str	r3, [r7, #72]	; 0x48
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	011a      	lsls	r2, r3, #4
 8005374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005376:	4413      	add	r3, r2
 8005378:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800537c:	647b      	str	r3, [r7, #68]	; 0x44
 800537e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005388:	b29a      	uxth	r2, r3
 800538a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005392:	2b3e      	cmp	r3, #62	; 0x3e
 8005394:	d921      	bls.n	80053da <USB_EPStartXfer+0x496>
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <USB_EPStartXfer+0x472>
 80053ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053b0:	3b01      	subs	r3, #1
 80053b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e04a      	b.n	8005470 <USB_EPStartXfer+0x52c>
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <USB_EPStartXfer+0x4b4>
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	e03b      	b.n	8005470 <USB_EPStartXfer+0x52c>
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <USB_EPStartXfer+0x4d4>
 800540e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005412:	3301      	adds	r3, #1
 8005414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005422:	b29b      	uxth	r3, r3
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	b29b      	uxth	r3, r3
 8005428:	4313      	orrs	r3, r2
 800542a:	b29a      	uxth	r2, r3
 800542c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	e01e      	b.n	8005470 <USB_EPStartXfer+0x52c>
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d119      	bne.n	8005470 <USB_EPStartXfer+0x52c>
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	653b      	str	r3, [r7, #80]	; 0x50
 8005442:	1d3b      	adds	r3, r7, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005450:	4413      	add	r3, r2
 8005452:	653b      	str	r3, [r7, #80]	; 0x50
 8005454:	463b      	mov	r3, r7
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	011a      	lsls	r2, r3, #4
 800545c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800545e:	4413      	add	r3, r2
 8005460:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546a:	b29a      	uxth	r2, r3
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	891b      	ldrh	r3, [r3, #8]
 8005476:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800547a:	463b      	mov	r3, r7
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6959      	ldr	r1, [r3, #20]
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005484:	b29b      	uxth	r3, r3
 8005486:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800548a:	1d38      	adds	r0, r7, #4
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f000 ffe3 	bl	8006458 <USB_WritePMA>
            ep->xfer_buff += len;
 8005492:	463b      	mov	r3, r7
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695a      	ldr	r2, [r3, #20]
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549c:	441a      	add	r2, r3
 800549e:	463b      	mov	r3, r7
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054a4:	463b      	mov	r3, r7
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d909      	bls.n	80054c8 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 80054b4:	463b      	mov	r3, r7
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a1a      	ldr	r2, [r3, #32]
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	463b      	mov	r3, r7
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	621a      	str	r2, [r3, #32]
 80054c6:	e008      	b.n	80054da <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054d2:	463b      	mov	r3, r7
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	643b      	str	r3, [r7, #64]	; 0x40
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d16e      	bne.n	80055c8 <USB_EPStartXfer+0x684>
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	4413      	add	r3, r2
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
 8005502:	463b      	mov	r3, r7
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	011a      	lsls	r2, r3, #4
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	4413      	add	r3, r2
 800550e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551e:	b29a      	uxth	r2, r3
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005528:	2b3e      	cmp	r3, #62	; 0x3e
 800552a:	d921      	bls.n	8005570 <USB_EPStartXfer+0x62c>
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <USB_EPStartXfer+0x608>
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	3b01      	subs	r3, #1
 8005548:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29a      	uxth	r2, r3
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005556:	b29b      	uxth	r3, r3
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	b29b      	uxth	r3, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	b29b      	uxth	r3, r3
 8005560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005568:	b29a      	uxth	r2, r3
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	e047      	b.n	8005600 <USB_EPStartXfer+0x6bc>
 8005570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <USB_EPStartXfer+0x64a>
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005586:	b29a      	uxth	r2, r3
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	801a      	strh	r2, [r3, #0]
 800558c:	e038      	b.n	8005600 <USB_EPStartXfer+0x6bc>
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d004      	beq.n	80055ae <USB_EPStartXfer+0x66a>
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	3301      	adds	r3, #1
 80055aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	029b      	lsls	r3, r3, #10
 80055bc:	b29b      	uxth	r3, r3
 80055be:	4313      	orrs	r3, r2
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	e01b      	b.n	8005600 <USB_EPStartXfer+0x6bc>
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d116      	bne.n	8005600 <USB_EPStartXfer+0x6bc>
 80055d2:	1d3b      	adds	r3, r7, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055da:	b29b      	uxth	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e0:	4413      	add	r3, r2
 80055e2:	643b      	str	r3, [r7, #64]	; 0x40
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	011a      	lsls	r2, r3, #4
 80055ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	895b      	ldrh	r3, [r3, #10]
 8005606:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6959      	ldr	r1, [r3, #20]
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	b29b      	uxth	r3, r3
 8005616:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800561a:	1d38      	adds	r0, r7, #4
 800561c:	6800      	ldr	r0, [r0, #0]
 800561e:	f000 ff1b 	bl	8006458 <USB_WritePMA>
 8005622:	e1b8      	b.n	8005996 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005624:	463b      	mov	r3, r7
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800562e:	1d3b      	adds	r3, r7, #4
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005648:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005672:	1d3b      	adds	r3, r7, #4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005678:	1d3b      	adds	r3, r7, #4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005680:	b29b      	uxth	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005686:	4413      	add	r3, r2
 8005688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	011a      	lsls	r2, r3, #4
 8005692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005694:	4413      	add	r3, r2
 8005696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800569a:	65bb      	str	r3, [r7, #88]	; 0x58
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	891b      	ldrh	r3, [r3, #8]
 80056ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6959      	ldr	r1, [r3, #20]
 80056b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056c0:	1d38      	adds	r0, r7, #4
 80056c2:	6800      	ldr	r0, [r0, #0]
 80056c4:	f000 fec8 	bl	8006458 <USB_WritePMA>
 80056c8:	e165      	b.n	8005996 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056dc:	1d3b      	adds	r3, r7, #4
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a5 	beq.w	8005842 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	673b      	str	r3, [r7, #112]	; 0x70
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d16e      	bne.n	80057e6 <USB_EPStartXfer+0x8a2>
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	66bb      	str	r3, [r7, #104]	; 0x68
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800571c:	4413      	add	r3, r2
 800571e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	011a      	lsls	r2, r3, #4
 8005728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800572a:	4413      	add	r3, r2
 800572c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005730:	667b      	str	r3, [r7, #100]	; 0x64
 8005732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800573c:	b29a      	uxth	r2, r3
 800573e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005746:	2b3e      	cmp	r3, #62	; 0x3e
 8005748:	d921      	bls.n	800578e <USB_EPStartXfer+0x84a>
 800574a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <USB_EPStartXfer+0x826>
 8005760:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005764:	3b01      	subs	r3, #1
 8005766:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800576a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29a      	uxth	r2, r3
 8005770:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005774:	b29b      	uxth	r3, r3
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	b29b      	uxth	r3, r3
 800577a:	4313      	orrs	r3, r2
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	e047      	b.n	800581e <USB_EPStartXfer+0x8da>
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <USB_EPStartXfer+0x868>
 8005796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	e038      	b.n	800581e <USB_EPStartXfer+0x8da>
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <USB_EPStartXfer+0x888>
 80057c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057c6:	3301      	adds	r3, #1
 80057c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	029b      	lsls	r3, r3, #10
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	b29a      	uxth	r2, r3
 80057e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	e01b      	b.n	800581e <USB_EPStartXfer+0x8da>
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d116      	bne.n	800581e <USB_EPStartXfer+0x8da>
 80057f0:	1d3b      	adds	r3, r7, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057fe:	4413      	add	r3, r2
 8005800:	673b      	str	r3, [r7, #112]	; 0x70
 8005802:	463b      	mov	r3, r7
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	011a      	lsls	r2, r3, #4
 800580a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800580c:	4413      	add	r3, r2
 800580e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005812:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005818:	b29a      	uxth	r2, r3
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800581e:	463b      	mov	r3, r7
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	895b      	ldrh	r3, [r3, #10]
 8005824:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005828:	463b      	mov	r3, r7
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6959      	ldr	r1, [r3, #20]
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005832:	b29b      	uxth	r3, r3
 8005834:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005838:	1d38      	adds	r0, r7, #4
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	f000 fe0c 	bl	8006458 <USB_WritePMA>
 8005840:	e0a9      	b.n	8005996 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005842:	463b      	mov	r3, r7
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	785b      	ldrb	r3, [r3, #1]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d16e      	bne.n	800592a <USB_EPStartXfer+0x9e6>
 800584c:	1d3b      	adds	r3, r7, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005860:	4413      	add	r3, r2
 8005862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	011a      	lsls	r2, r3, #4
 800586c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800586e:	4413      	add	r3, r2
 8005870:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005874:	67bb      	str	r3, [r7, #120]	; 0x78
 8005876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005880:	b29a      	uxth	r2, r3
 8005882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588a:	2b3e      	cmp	r3, #62	; 0x3e
 800588c:	d921      	bls.n	80058d2 <USB_EPStartXfer+0x98e>
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <USB_EPStartXfer+0x96a>
 80058a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058a8:	3b01      	subs	r3, #1
 80058aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	029b      	lsls	r3, r3, #10
 80058bc:	b29b      	uxth	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	e050      	b.n	8005974 <USB_EPStartXfer+0xa30>
 80058d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <USB_EPStartXfer+0x9ac>
 80058da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e041      	b.n	8005974 <USB_EPStartXfer+0xa30>
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <USB_EPStartXfer+0x9cc>
 8005906:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800590a:	3301      	adds	r3, #1
 800590c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29a      	uxth	r2, r3
 8005916:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800591a:	b29b      	uxth	r3, r3
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	b29b      	uxth	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	b29a      	uxth	r2, r3
 8005924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e024      	b.n	8005974 <USB_EPStartXfer+0xa30>
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d11f      	bne.n	8005974 <USB_EPStartXfer+0xa30>
 8005934:	1d3b      	adds	r3, r7, #4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594c:	4413      	add	r3, r2
 800594e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800595e:	4413      	add	r3, r2
 8005960:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596c:	b29a      	uxth	r2, r3
 800596e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005972:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	891b      	ldrh	r3, [r3, #8]
 800597a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800597e:	463b      	mov	r3, r7
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6959      	ldr	r1, [r3, #20]
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005988:	b29b      	uxth	r3, r3
 800598a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800598e:	1d38      	adds	r0, r7, #4
 8005990:	6800      	ldr	r0, [r0, #0]
 8005992:	f000 fd61 	bl	8006458 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	817b      	strh	r3, [r7, #10]
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	f083 0310 	eor.w	r3, r3, #16
 80059b8:	817b      	strh	r3, [r7, #10]
 80059ba:	897b      	ldrh	r3, [r7, #10]
 80059bc:	f083 0320 	eor.w	r3, r3, #32
 80059c0:	817b      	strh	r3, [r7, #10]
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]
 80059e6:	e3f3      	b.n	80061d0 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059e8:	463b      	mov	r3, r7
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	7b1b      	ldrb	r3, [r3, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 809c 	bne.w	8005b2c <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059f4:	463b      	mov	r3, r7
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	463b      	mov	r3, r7
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d90e      	bls.n	8005a22 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8005a04:	463b      	mov	r3, r7
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005a0e:	463b      	mov	r3, r7
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a18:	1ad2      	subs	r2, r2, r3
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	619a      	str	r2, [r3, #24]
 8005a20:	e008      	b.n	8005a34 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2200      	movs	r2, #0
 8005a32:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a34:	1d3b      	adds	r3, r7, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a52:	463b      	mov	r3, r7
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	011a      	lsls	r2, r3, #4
 8005a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a5e:	4413      	add	r3, r2
 8005a60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a80:	2b3e      	cmp	r3, #62	; 0x3e
 8005a82:	d923      	bls.n	8005acc <USB_EPStartXfer+0xb88>
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <USB_EPStartXfer+0xb60>
 8005a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	029b      	lsls	r3, r3, #10
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	e353      	b.n	8006174 <USB_EPStartXfer+0x1230>
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10c      	bne.n	8005aee <USB_EPStartXfer+0xbaa>
 8005ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e342      	b.n	8006174 <USB_EPStartXfer+0x1230>
 8005aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <USB_EPStartXfer+0xbca>
 8005b04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b08:	3301      	adds	r3, #1
 8005b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	4313      	orrs	r3, r2
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	e323      	b.n	8006174 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	78db      	ldrb	r3, [r3, #3]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	f040 81a9 	bne.w	8005e8a <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 8082 	bne.w	8005c48 <USB_EPStartXfer+0xd04>
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b4c:	1d3b      	adds	r3, r7, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	011a      	lsls	r2, r3, #4
 8005b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b3e      	cmp	r3, #62	; 0x3e
 8005b94:	d925      	bls.n	8005be2 <USB_EPStartXfer+0xc9e>
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <USB_EPStartXfer+0xc76>
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e058      	b.n	8005c94 <USB_EPStartXfer+0xd50>
 8005be2:	463b      	mov	r3, r7
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10c      	bne.n	8005c06 <USB_EPStartXfer+0xcc2>
 8005bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	e046      	b.n	8005c94 <USB_EPStartXfer+0xd50>
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <USB_EPStartXfer+0xce6>
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c24:	3301      	adds	r3, #1
 8005c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e025      	b.n	8005c94 <USB_EPStartXfer+0xd50>
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d120      	bne.n	8005c94 <USB_EPStartXfer+0xd50>
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c5a:	1d3b      	adds	r3, r7, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	011a      	lsls	r2, r3, #4
 8005c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 8082 	bne.w	8005dac <USB_EPStartXfer+0xe68>
 8005ca8:	1d3b      	adds	r3, r7, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cb0:	1d3b      	adds	r3, r7, #4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	011a      	lsls	r2, r3, #4
 8005cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf8:	d925      	bls.n	8005d46 <USB_EPStartXfer+0xe02>
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d06:	463b      	mov	r3, r7
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <USB_EPStartXfer+0xdda>
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	029b      	lsls	r3, r3, #10
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	4313      	orrs	r3, r2
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	e054      	b.n	8005df0 <USB_EPStartXfer+0xeac>
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10c      	bne.n	8005d6a <USB_EPStartXfer+0xe26>
 8005d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e042      	b.n	8005df0 <USB_EPStartXfer+0xeac>
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d76:	463b      	mov	r3, r7
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d004      	beq.n	8005d8e <USB_EPStartXfer+0xe4a>
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d88:	3301      	adds	r3, #1
 8005d8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	4313      	orrs	r3, r2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e021      	b.n	8005df0 <USB_EPStartXfer+0xeac>
 8005dac:	463b      	mov	r3, r7
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d11c      	bne.n	8005df0 <USB_EPStartXfer+0xeac>
 8005db6:	1d3b      	adds	r3, r7, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	011a      	lsls	r2, r3, #4
 8005dd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005de2:	463b      	mov	r3, r7
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 81bc 	beq.w	8006174 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005dfc:	1d3b      	adds	r3, r7, #4
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	463b      	mov	r3, r7
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <USB_EPStartXfer+0xee4>
 8005e1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10d      	bne.n	8005e44 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 819f 	bne.w	8006174 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 8198 	bne.w	8006174 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	8013      	strh	r3, [r2, #0]
 8005e88:	e174      	b.n	8006174 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	78db      	ldrb	r3, [r3, #3]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	f040 816d 	bne.w	8006170 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e96:	463b      	mov	r3, r7
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d90e      	bls.n	8005ec4 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	e008      	b.n	8005ed6 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005ece:	463b      	mov	r3, r7
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d17b      	bne.n	8005fd8 <USB_EPStartXfer+0x1094>
 8005ee0:	1d3b      	adds	r3, r7, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ef8:	4413      	add	r3, r2
 8005efa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	011a      	lsls	r2, r3, #4
 8005f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f2e:	d923      	bls.n	8005f78 <USB_EPStartXfer+0x1034>
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <USB_EPStartXfer+0x100c>
 8005f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	029b      	lsls	r3, r3, #10
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	e054      	b.n	8006022 <USB_EPStartXfer+0x10de>
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10c      	bne.n	8005f9a <USB_EPStartXfer+0x1056>
 8005f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e043      	b.n	8006022 <USB_EPStartXfer+0x10de>
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <USB_EPStartXfer+0x1076>
 8005fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e024      	b.n	8006022 <USB_EPStartXfer+0x10de>
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d11f      	bne.n	8006022 <USB_EPStartXfer+0x10de>
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	011a      	lsls	r2, r3, #4
 8006008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600c:	4413      	add	r3, r2
 800600e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006012:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800602a:	463b      	mov	r3, r7
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d17b      	bne.n	800612c <USB_EPStartXfer+0x11e8>
 8006034:	1d3b      	adds	r3, r7, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800604c:	4413      	add	r3, r2
 800604e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006052:	463b      	mov	r3, r7
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	011a      	lsls	r2, r3, #4
 800605a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800605e:	4413      	add	r3, r2
 8006060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006074:	b29a      	uxth	r2, r3
 8006076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	2b3e      	cmp	r3, #62	; 0x3e
 8006082:	d923      	bls.n	80060cc <USB_EPStartXfer+0x1188>
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	2b00      	cmp	r3, #0
 8006098:	d104      	bne.n	80060a4 <USB_EPStartXfer+0x1160>
 800609a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800609e:	3b01      	subs	r3, #1
 80060a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	029b      	lsls	r3, r3, #10
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e053      	b.n	8006174 <USB_EPStartXfer+0x1230>
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10c      	bne.n	80060ee <USB_EPStartXfer+0x11aa>
 80060d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	e042      	b.n	8006174 <USB_EPStartXfer+0x1230>
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <USB_EPStartXfer+0x11ca>
 8006104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006108:	3301      	adds	r3, #1
 800610a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800610e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611a:	b29b      	uxth	r3, r3
 800611c:	029b      	lsls	r3, r3, #10
 800611e:	b29b      	uxth	r3, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	b29a      	uxth	r2, r3
 8006124:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	e023      	b.n	8006174 <USB_EPStartXfer+0x1230>
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d11e      	bne.n	8006174 <USB_EPStartXfer+0x1230>
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613e:	b29b      	uxth	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006146:	4413      	add	r3, r2
 8006148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	011a      	lsls	r2, r3, #4
 8006154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006158:	4413      	add	r3, r2
 800615a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800615e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	b29a      	uxth	r2, r3
 8006168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800616c:	801a      	strh	r2, [r3, #0]
 800616e:	e001      	b.n	8006174 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e02e      	b.n	80061d2 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006192:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006196:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800619a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800619e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	463b      	mov	r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d020      	beq.n	8006230 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006204:	81bb      	strh	r3, [r7, #12]
 8006206:	89bb      	ldrh	r3, [r7, #12]
 8006208:	f083 0310 	eor.w	r3, r3, #16
 800620c:	81bb      	strh	r3, [r7, #12]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	89bb      	ldrh	r3, [r7, #12]
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]
 800622e:	e01f      	b.n	8006270 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	81fb      	strh	r3, [r7, #14]
 8006248:	89fb      	ldrh	r3, [r7, #14]
 800624a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800624e:	81fb      	strh	r3, [r7, #14]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	89fb      	ldrh	r3, [r7, #14]
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	7b1b      	ldrb	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 809d 	bne.w	80063ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d04c      	beq.n	8006332 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	823b      	strh	r3, [r7, #16]
 80062a6:	8a3b      	ldrh	r3, [r7, #16]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <USB_EPClearStall+0x6c>
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	81fb      	strh	r3, [r7, #14]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	89fb      	ldrh	r3, [r7, #14]
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	78db      	ldrb	r3, [r3, #3]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d06c      	beq.n	80063ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	81bb      	strh	r3, [r7, #12]
 8006308:	89bb      	ldrh	r3, [r7, #12]
 800630a:	f083 0320 	eor.w	r3, r3, #32
 800630e:	81bb      	strh	r3, [r7, #12]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	89bb      	ldrh	r3, [r7, #12]
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]
 8006330:	e04b      	b.n	80063ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	82fb      	strh	r3, [r7, #22]
 8006340:	8afb      	ldrh	r3, [r7, #22]
 8006342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01b      	beq.n	8006382 <USB_EPClearStall+0x106>
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006360:	82bb      	strh	r3, [r7, #20]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	8abb      	ldrh	r3, [r7, #20]
 800636e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800637a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637e:	b29b      	uxth	r3, r3
 8006380:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	827b      	strh	r3, [r7, #18]
 800639a:	8a7b      	ldrh	r3, [r7, #18]
 800639c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063a0:	827b      	strh	r3, [r7, #18]
 80063a2:	8a7b      	ldrh	r3, [r7, #18]
 80063a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063a8:	827b      	strh	r3, [r7, #18]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	8a7b      	ldrh	r3, [r7, #18]
 80063b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2280      	movs	r2, #128	; 0x80
 80063ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr

08006424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006432:	b29b      	uxth	r3, r3
 8006434:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006436:	68fb      	ldr	r3, [r7, #12]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006458:	b480      	push	{r7}
 800645a:	b08b      	sub	sp, #44	; 0x2c
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	460b      	mov	r3, r1
 8006468:	80fb      	strh	r3, [r7, #6]
 800646a:	4613      	mov	r3, r2
 800646c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800646e:	88bb      	ldrh	r3, [r7, #4]
 8006470:	3301      	adds	r3, #1
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	005a      	lsls	r2, r3, #1
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	e01e      	b.n	80064d0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	3301      	adds	r3, #1
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	b21a      	sxth	r2, r3
 80064a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b21b      	sxth	r3, r3
 80064aa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	8a7a      	ldrh	r2, [r7, #18]
 80064b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	3302      	adds	r3, #2
 80064b6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	3302      	adds	r3, #2
 80064bc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	3301      	adds	r3, #1
 80064c2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	3b01      	subs	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1dd      	bne.n	8006492 <USB_WritePMA+0x3a>
  }
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	372c      	adds	r7, #44	; 0x2c
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b08b      	sub	sp, #44	; 0x2c
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	4611      	mov	r1, r2
 80064ee:	461a      	mov	r2, r3
 80064f0:	460b      	mov	r3, r1
 80064f2:	80fb      	strh	r3, [r7, #6]
 80064f4:	4613      	mov	r3, r2
 80064f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	005a      	lsls	r2, r3, #1
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006514:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
 800651a:	e01b      	b.n	8006554 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	3302      	adds	r3, #2
 8006528:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3301      	adds	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	0a1b      	lsrs	r3, r3, #8
 800653c:	b2da      	uxtb	r2, r3
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	3301      	adds	r3, #1
 8006546:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	3302      	adds	r3, #2
 800654c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	3b01      	subs	r3, #1
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e0      	bne.n	800651c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800655a:	88bb      	ldrh	r3, [r7, #4]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	701a      	strb	r2, [r3, #0]
  }
}
 8006576:	bf00      	nop
 8006578:	372c      	adds	r7, #44	; 0x2c
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d115      	bne.n	80065c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659c:	2202      	movs	r2, #2
 800659e:	2181      	movs	r1, #129	; 0x81
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f004 fac0 	bl	800ab26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b0:	2202      	movs	r2, #2
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f004 fab6 	bl	800ab26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80065c2:	e012      	b.n	80065ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	2202      	movs	r2, #2
 80065c8:	2181      	movs	r1, #129	; 0x81
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f004 faab 	bl	800ab26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065d6:	2340      	movs	r3, #64	; 0x40
 80065d8:	2202      	movs	r2, #2
 80065da:	2101      	movs	r1, #1
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f004 faa2 	bl	800ab26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ea:	2308      	movs	r3, #8
 80065ec:	2203      	movs	r2, #3
 80065ee:	2182      	movs	r1, #130	; 0x82
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f004 fa98 	bl	800ab26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006600:	f004 fbb8 	bl	800ad74 <USBD_static_malloc>
 8006604:	4602      	mov	r2, r0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	e026      	b.n	800666a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2200      	movs	r2, #0
 800663a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	7c1b      	ldrb	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800664c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006650:	2101      	movs	r1, #1
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f004 fb58 	bl	800ad08 <USBD_LL_PrepareReceive>
 8006658:	e007      	b.n	800666a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	2101      	movs	r1, #1
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f004 fb4f 	bl	800ad08 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006684:	2181      	movs	r1, #129	; 0x81
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f004 fa73 	bl	800ab72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006692:	2101      	movs	r1, #1
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f004 fa6c 	bl	800ab72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066a2:	2182      	movs	r1, #130	; 0x82
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f004 fa64 	bl	800ab72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	4618      	mov	r0, r3
 80066cc:	f004 fb5e 	bl	800ad8c <USBD_static_free>
    pdev->pClassData = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006708:	2b00      	cmp	r3, #0
 800670a:	d039      	beq.n	8006780 <USBD_CDC_Setup+0x9e>
 800670c:	2b20      	cmp	r3, #32
 800670e:	d17f      	bne.n	8006810 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	88db      	ldrh	r3, [r3, #6]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d029      	beq.n	800676c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b25b      	sxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	da11      	bge.n	8006746 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800672e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	88d2      	ldrh	r2, [r2, #6]
 8006734:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006736:	6939      	ldr	r1, [r7, #16]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	88db      	ldrh	r3, [r3, #6]
 800673c:	461a      	mov	r2, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fa09 	bl	8007b56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006744:	e06b      	b.n	800681e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	785a      	ldrb	r2, [r3, #1]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800675c:	6939      	ldr	r1, [r7, #16]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	88db      	ldrh	r3, [r3, #6]
 8006762:	461a      	mov	r2, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fa24 	bl	8007bb2 <USBD_CtlPrepareRx>
      break;
 800676a:	e058      	b.n	800681e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	7850      	ldrb	r0, [r2, #1]
 8006778:	2200      	movs	r2, #0
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	4798      	blx	r3
      break;
 800677e:	e04e      	b.n	800681e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b0b      	cmp	r3, #11
 8006786:	d02e      	beq.n	80067e6 <USBD_CDC_Setup+0x104>
 8006788:	2b0b      	cmp	r3, #11
 800678a:	dc38      	bgt.n	80067fe <USBD_CDC_Setup+0x11c>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <USBD_CDC_Setup+0xb4>
 8006790:	2b0a      	cmp	r3, #10
 8006792:	d014      	beq.n	80067be <USBD_CDC_Setup+0xdc>
 8006794:	e033      	b.n	80067fe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679c:	2b03      	cmp	r3, #3
 800679e:	d107      	bne.n	80067b0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80067a0:	f107 030c 	add.w	r3, r7, #12
 80067a4:	2202      	movs	r2, #2
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 f9d4 	bl	8007b56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ae:	e02e      	b.n	800680e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f965 	bl	8007a82 <USBD_CtlError>
            ret = USBD_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	75fb      	strb	r3, [r7, #23]
          break;
 80067bc:	e027      	b.n	800680e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d107      	bne.n	80067d8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80067c8:	f107 030f 	add.w	r3, r7, #15
 80067cc:	2201      	movs	r2, #1
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 f9c0 	bl	8007b56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067d6:	e01a      	b.n	800680e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 f951 	bl	8007a82 <USBD_CtlError>
            ret = USBD_FAIL;
 80067e0:	2302      	movs	r3, #2
 80067e2:	75fb      	strb	r3, [r7, #23]
          break;
 80067e4:	e013      	b.n	800680e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d00d      	beq.n	800680c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 f945 	bl	8007a82 <USBD_CtlError>
            ret = USBD_FAIL;
 80067f8:	2302      	movs	r3, #2
 80067fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067fc:	e006      	b.n	800680c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 f93e 	bl	8007a82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006806:	2302      	movs	r3, #2
 8006808:	75fb      	strb	r3, [r7, #23]
          break;
 800680a:	e000      	b.n	800680e <USBD_CDC_Setup+0x12c>
          break;
 800680c:	bf00      	nop
      }
      break;
 800680e:	e006      	b.n	800681e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 f935 	bl	8007a82 <USBD_CtlError>
      ret = USBD_FAIL;
 8006818:	2302      	movs	r3, #2
 800681a:	75fb      	strb	r3, [r7, #23]
      break;
 800681c:	bf00      	nop
  }

  return ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006842:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d03a      	beq.n	80068c4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	331c      	adds	r3, #28
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d029      	beq.n	80068b8 <USBD_CDC_DataIn+0x90>
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	331c      	adds	r3, #28
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	78f9      	ldrb	r1, [r7, #3]
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	460b      	mov	r3, r1
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4403      	add	r3, r0
 8006884:	3338      	adds	r3, #56	; 0x38
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	fbb2 f1f3 	udiv	r1, r2, r3
 800688c:	fb03 f301 	mul.w	r3, r3, r1
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d110      	bne.n	80068b8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	331c      	adds	r3, #28
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068aa:	78f9      	ldrb	r1, [r7, #3]
 80068ac:	2300      	movs	r3, #0
 80068ae:	2200      	movs	r2, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f004 fa06 	bl	800acc2 <USBD_LL_Transmit>
 80068b6:	e003      	b.n	80068c0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80068c4:	2302      	movs	r3, #2
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f004 fa31 	bl	800ad4e <USBD_LL_GetRxDataSize>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00d      	beq.n	800691a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006912:	4611      	mov	r1, r2
 8006914:	4798      	blx	r3

    return USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	e000      	b.n	800691c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800691a:	2302      	movs	r3, #2
  }
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006932:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800693a:	2b00      	cmp	r3, #0
 800693c:	d015      	beq.n	800696a <USBD_CDC_EP0_RxReady+0x46>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006944:	2bff      	cmp	r3, #255	; 0xff
 8006946:	d010      	beq.n	800696a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006956:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800695e:	b292      	uxth	r2, r2
 8006960:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	22ff      	movs	r2, #255	; 0xff
 8006966:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2243      	movs	r2, #67	; 0x43
 8006980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006982:	4b03      	ldr	r3, [pc, #12]	; (8006990 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000094 	.word	0x20000094

08006994 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2243      	movs	r2, #67	; 0x43
 80069a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80069a2:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000050 	.word	0x20000050

080069b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2243      	movs	r2, #67	; 0x43
 80069c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80069c2:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	200000d8 	.word	0x200000d8

080069d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	220a      	movs	r2, #10
 80069e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069e2:	4b03      	ldr	r3, [pc, #12]	; (80069f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	2000000c 	.word	0x2000000c

080069f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069fe:	2302      	movs	r3, #2
 8006a00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr

08006a20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a3e:	88fa      	ldrh	r2, [r7, #6]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01c      	beq.n	8006acc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d115      	bne.n	8006ac8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2181      	movs	r1, #129	; 0x81
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f004 f8ff 	bl	800acc2 <USBD_LL_Transmit>

      return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e002      	b.n	8006ace <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d017      	beq.n	8006b20 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7c1b      	ldrb	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b02:	2101      	movs	r1, #1
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f004 f8ff 	bl	800ad08 <USBD_LL_PrepareReceive>
 8006b0a:	e007      	b.n	8006b1c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b12:	2340      	movs	r3, #64	; 0x40
 8006b14:	2101      	movs	r1, #1
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f004 f8f6 	bl	800ad08 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e000      	b.n	8006b22 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b20:	2302      	movs	r3, #2
  }
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	4613      	mov	r3, r2
 8006b36:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e01a      	b.n	8006b78 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	79fa      	ldrb	r2, [r7, #7]
 8006b6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f003 ff63 	bl	800aa3c <USBD_LL_Init>

  return USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]
 8006ba0:	e001      	b.n	8006ba6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f003 ff98 	bl	800aaf0 <USBD_LL_Start>

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006bea:	2302      	movs	r3, #2
 8006bec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00c      	beq.n	8006c12 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	4611      	mov	r1, r2
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	4611      	mov	r1, r2
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3

  return USBD_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fed8 	bl	8007a0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c68:	461a      	mov	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d016      	beq.n	8006cac <USBD_LL_SetupStage+0x6a>
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d81c      	bhi.n	8006cbc <USBD_LL_SetupStage+0x7a>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <USBD_LL_SetupStage+0x4a>
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d008      	beq.n	8006c9c <USBD_LL_SetupStage+0x5a>
 8006c8a:	e017      	b.n	8006cbc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f9cb 	bl	8007030 <USBD_StdDevReq>
      break;
 8006c9a:	e01a      	b.n	8006cd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fa2d 	bl	8007104 <USBD_StdItfReq>
      break;
 8006caa:	e012      	b.n	8006cd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fa6d 	bl	8007194 <USBD_StdEPReq>
      break;
 8006cba:	e00a      	b.n	8006cd2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f003 ff70 	bl	800abb0 <USBD_LL_StallEP>
      break;
 8006cd0:	bf00      	nop
  }

  return USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d14b      	bne.n	8006d88 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cf6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d134      	bne.n	8006d6c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d919      	bls.n	8006d42 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d203      	bcs.n	8006d30 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	e002      	b.n	8006d36 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 ff57 	bl	8007bee <USBD_CtlContinueRx>
 8006d40:	e038      	b.n	8006db4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d105      	bne.n	8006d64 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 ff54 	bl	8007c12 <USBD_CtlSendStatus>
 8006d6a:	e023      	b.n	8006db4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d11e      	bne.n	8006db4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d7e:	2100      	movs	r1, #0
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f003 ff15 	bl	800abb0 <USBD_LL_StallEP>
 8006d86:	e015      	b.n	8006db4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00d      	beq.n	8006db0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d108      	bne.n	8006db0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	7afa      	ldrb	r2, [r7, #11]
 8006da8:	4611      	mov	r1, r2
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	4798      	blx	r3
 8006dae:	e001      	b.n	8006db4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006db0:	2302      	movs	r3, #2
 8006db2:	e000      	b.n	8006db6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b086      	sub	sp, #24
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d17f      	bne.n	8006ed2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3314      	adds	r3, #20
 8006dd6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d15c      	bne.n	8006e9c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d915      	bls.n	8006e1a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fec1 	bl	8007b8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f003 ff78 	bl	800ad08 <USBD_LL_PrepareReceive>
 8006e18:	e04e      	b.n	8006eb8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	6912      	ldr	r2, [r2, #16]
 8006e22:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e26:	fb02 f201 	mul.w	r2, r2, r1
 8006e2a:	1a9b      	subs	r3, r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11c      	bne.n	8006e6a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d316      	bcc.n	8006e6a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d20f      	bcs.n	8006e6a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fe9d 	bl	8007b8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f003 ff50 	bl	800ad08 <USBD_LL_PrepareReceive>
 8006e68:	e026      	b.n	8006eb8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d105      	bne.n	8006e8c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e8c:	2180      	movs	r1, #128	; 0x80
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f003 fe8e 	bl	800abb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fecf 	bl	8007c38 <USBD_CtlReceiveStatus>
 8006e9a:	e00d      	b.n	8006eb8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d004      	beq.n	8006eb0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006eb0:	2180      	movs	r1, #128	; 0x80
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f003 fe7c 	bl	800abb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d11d      	bne.n	8006efe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff fe81 	bl	8006bca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ed0:	e015      	b.n	8006efe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00d      	beq.n	8006efa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d108      	bne.n	8006efa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	7afa      	ldrb	r2, [r7, #11]
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	4798      	blx	r3
 8006ef8:	e001      	b.n	8006efe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006efa:	2302      	movs	r3, #2
 8006efc:	e000      	b.n	8006f00 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f10:	2340      	movs	r3, #64	; 0x40
 8006f12:	2200      	movs	r2, #0
 8006f14:	2100      	movs	r1, #0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f003 fe05 	bl	800ab26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2240      	movs	r2, #64	; 0x40
 8006f28:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f003 fdf7 	bl	800ab26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2240      	movs	r2, #64	; 0x40
 8006f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6852      	ldr	r2, [r2, #4]
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
  }

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	78fa      	ldrb	r2, [r7, #3]
 8006f9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d105      	bne.n	8006fee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	2b03      	cmp	r3, #3
 800700a:	d10b      	bne.n	8007024 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d005      	beq.n	8007056 <USBD_StdDevReq+0x26>
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d84f      	bhi.n	80070ee <USBD_StdDevReq+0xbe>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <USBD_StdDevReq+0x36>
 8007052:	2b20      	cmp	r3, #32
 8007054:	d14b      	bne.n	80070ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
      break;
 8007064:	e048      	b.n	80070f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	785b      	ldrb	r3, [r3, #1]
 800706a:	2b09      	cmp	r3, #9
 800706c:	d839      	bhi.n	80070e2 <USBD_StdDevReq+0xb2>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <USBD_StdDevReq+0x44>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	080070c5 	.word	0x080070c5
 8007078:	080070d9 	.word	0x080070d9
 800707c:	080070e3 	.word	0x080070e3
 8007080:	080070cf 	.word	0x080070cf
 8007084:	080070e3 	.word	0x080070e3
 8007088:	080070a7 	.word	0x080070a7
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070e3 	.word	0x080070e3
 8007094:	080070bb 	.word	0x080070bb
 8007098:	080070b1 	.word	0x080070b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9dc 	bl	800745c <USBD_GetDescriptor>
          break;
 80070a4:	e022      	b.n	80070ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fb3f 	bl	800772c <USBD_SetAddress>
          break;
 80070ae:	e01d      	b.n	80070ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fb7e 	bl	80077b4 <USBD_SetConfig>
          break;
 80070b8:	e018      	b.n	80070ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fc07 	bl	80078d0 <USBD_GetConfig>
          break;
 80070c2:	e013      	b.n	80070ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fc37 	bl	800793a <USBD_GetStatus>
          break;
 80070cc:	e00e      	b.n	80070ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc65 	bl	80079a0 <USBD_SetFeature>
          break;
 80070d6:	e009      	b.n	80070ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fc74 	bl	80079c8 <USBD_ClrFeature>
          break;
 80070e0:	e004      	b.n	80070ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fccc 	bl	8007a82 <USBD_CtlError>
          break;
 80070ea:	bf00      	nop
      }
      break;
 80070ec:	e004      	b.n	80070f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fcc6 	bl	8007a82 <USBD_CtlError>
      break;
 80070f6:	bf00      	nop
  }

  return ret;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop

08007104 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d005      	beq.n	800712a <USBD_StdItfReq+0x26>
 800711e:	2b40      	cmp	r3, #64	; 0x40
 8007120:	d82e      	bhi.n	8007180 <USBD_StdItfReq+0x7c>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <USBD_StdItfReq+0x26>
 8007126:	2b20      	cmp	r3, #32
 8007128:	d12a      	bne.n	8007180 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007130:	3b01      	subs	r3, #1
 8007132:	2b02      	cmp	r3, #2
 8007134:	d81d      	bhi.n	8007172 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	889b      	ldrh	r3, [r3, #4]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b01      	cmp	r3, #1
 800713e:	d813      	bhi.n	8007168 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d110      	bne.n	800717c <USBD_StdItfReq+0x78>
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10d      	bne.n	800717c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fd56 	bl	8007c12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007166:	e009      	b.n	800717c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc89 	bl	8007a82 <USBD_CtlError>
          break;
 8007170:	e004      	b.n	800717c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fc84 	bl	8007a82 <USBD_CtlError>
          break;
 800717a:	e000      	b.n	800717e <USBD_StdItfReq+0x7a>
          break;
 800717c:	bf00      	nop
      }
      break;
 800717e:	e004      	b.n	800718a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fc7d 	bl	8007a82 <USBD_CtlError>
      break;
 8007188:	bf00      	nop
  }

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	889b      	ldrh	r3, [r3, #4]
 80071a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d007      	beq.n	80071c4 <USBD_StdEPReq+0x30>
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	f200 8146 	bhi.w	8007446 <USBD_StdEPReq+0x2b2>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <USBD_StdEPReq+0x40>
 80071be:	2b20      	cmp	r3, #32
 80071c0:	f040 8141 	bne.w	8007446 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
      break;
 80071d2:	e13d      	b.n	8007450 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d10a      	bne.n	80071f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	e12d      	b.n	8007452 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d007      	beq.n	800720e <USBD_StdEPReq+0x7a>
 80071fe:	2b03      	cmp	r3, #3
 8007200:	f300 811b 	bgt.w	800743a <USBD_StdEPReq+0x2a6>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d072      	beq.n	80072ee <USBD_StdEPReq+0x15a>
 8007208:	2b01      	cmp	r3, #1
 800720a:	d03a      	beq.n	8007282 <USBD_StdEPReq+0xee>
 800720c:	e115      	b.n	800743a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007214:	2b02      	cmp	r3, #2
 8007216:	d002      	beq.n	800721e <USBD_StdEPReq+0x8a>
 8007218:	2b03      	cmp	r3, #3
 800721a:	d015      	beq.n	8007248 <USBD_StdEPReq+0xb4>
 800721c:	e02b      	b.n	8007276 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00c      	beq.n	800723e <USBD_StdEPReq+0xaa>
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b80      	cmp	r3, #128	; 0x80
 8007228:	d009      	beq.n	800723e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f003 fcbe 	bl	800abb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007234:	2180      	movs	r1, #128	; 0x80
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f003 fcba 	bl	800abb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800723c:	e020      	b.n	8007280 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc1e 	bl	8007a82 <USBD_CtlError>
              break;
 8007246:	e01b      	b.n	8007280 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10e      	bne.n	800726e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <USBD_StdEPReq+0xda>
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b80      	cmp	r3, #128	; 0x80
 800725a:	d008      	beq.n	800726e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	88db      	ldrh	r3, [r3, #6]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f003 fca1 	bl	800abb0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fccf 	bl	8007c12 <USBD_CtlSendStatus>

              break;
 8007274:	e004      	b.n	8007280 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc02 	bl	8007a82 <USBD_CtlError>
              break;
 800727e:	bf00      	nop
          }
          break;
 8007280:	e0e0      	b.n	8007444 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007288:	2b02      	cmp	r3, #2
 800728a:	d002      	beq.n	8007292 <USBD_StdEPReq+0xfe>
 800728c:	2b03      	cmp	r3, #3
 800728e:	d015      	beq.n	80072bc <USBD_StdEPReq+0x128>
 8007290:	e026      	b.n	80072e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00c      	beq.n	80072b2 <USBD_StdEPReq+0x11e>
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d009      	beq.n	80072b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f003 fc84 	bl	800abb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072a8:	2180      	movs	r1, #128	; 0x80
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f003 fc80 	bl	800abb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072b0:	e01c      	b.n	80072ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fbe4 	bl	8007a82 <USBD_CtlError>
              break;
 80072ba:	e017      	b.n	80072ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	885b      	ldrh	r3, [r3, #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d112      	bne.n	80072ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f003 fc8b 	bl	800abee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fc9a 	bl	8007c12 <USBD_CtlSendStatus>
              }
              break;
 80072de:	e004      	b.n	80072ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fbcd 	bl	8007a82 <USBD_CtlError>
              break;
 80072e8:	e000      	b.n	80072ec <USBD_StdEPReq+0x158>
              break;
 80072ea:	bf00      	nop
          }
          break;
 80072ec:	e0aa      	b.n	8007444 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d002      	beq.n	80072fe <USBD_StdEPReq+0x16a>
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d032      	beq.n	8007362 <USBD_StdEPReq+0x1ce>
 80072fc:	e097      	b.n	800742e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <USBD_StdEPReq+0x180>
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b80      	cmp	r3, #128	; 0x80
 8007308:	d004      	beq.n	8007314 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fbb8 	bl	8007a82 <USBD_CtlError>
                break;
 8007312:	e091      	b.n	8007438 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007318:	2b00      	cmp	r3, #0
 800731a:	da0b      	bge.n	8007334 <USBD_StdEPReq+0x1a0>
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	3310      	adds	r3, #16
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	e00b      	b.n	800734c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	4413      	add	r3, r2
 800734a:	3304      	adds	r3, #4
 800734c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2202      	movs	r2, #2
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fbfb 	bl	8007b56 <USBD_CtlSendData>
              break;
 8007360:	e06a      	b.n	8007438 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	da11      	bge.n	800738e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	f003 020f 	and.w	r2, r3, #15
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	3318      	adds	r3, #24
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d117      	bne.n	80073b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fb7b 	bl	8007a82 <USBD_CtlError>
                  break;
 800738c:	e054      	b.n	8007438 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	f003 020f 	and.w	r2, r3, #15
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fb68 	bl	8007a82 <USBD_CtlError>
                  break;
 80073b2:	e041      	b.n	8007438 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da0b      	bge.n	80073d4 <USBD_StdEPReq+0x240>
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	3310      	adds	r3, #16
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	4413      	add	r3, r2
 80073d0:	3304      	adds	r3, #4
 80073d2:	e00b      	b.n	80073ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	4413      	add	r3, r2
 80073ea:	3304      	adds	r3, #4
 80073ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <USBD_StdEPReq+0x266>
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b80      	cmp	r3, #128	; 0x80
 80073f8:	d103      	bne.n	8007402 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e00e      	b.n	8007420 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f003 fc10 	bl	800ac2c <USBD_LL_IsStallEP>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2201      	movs	r2, #1
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e002      	b.n	8007420 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2202      	movs	r2, #2
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fb95 	bl	8007b56 <USBD_CtlSendData>
              break;
 800742c:	e004      	b.n	8007438 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb26 	bl	8007a82 <USBD_CtlError>
              break;
 8007436:	bf00      	nop
          }
          break;
 8007438:	e004      	b.n	8007444 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb20 	bl	8007a82 <USBD_CtlError>
          break;
 8007442:	bf00      	nop
      }
      break;
 8007444:	e004      	b.n	8007450 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fb1a 	bl	8007a82 <USBD_CtlError>
      break;
 800744e:	bf00      	nop
  }

  return ret;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	885b      	ldrh	r3, [r3, #2]
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	2b06      	cmp	r3, #6
 800747e:	f200 8128 	bhi.w	80076d2 <USBD_GetDescriptor+0x276>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <USBD_GetDescriptor+0x2c>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074a5 	.word	0x080074a5
 800748c:	080074bd 	.word	0x080074bd
 8007490:	080074fd 	.word	0x080074fd
 8007494:	080076d3 	.word	0x080076d3
 8007498:	080076d3 	.word	0x080076d3
 800749c:	08007673 	.word	0x08007673
 80074a0:	0800769f 	.word	0x0800769f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7c12      	ldrb	r2, [r2, #16]
 80074b0:	f107 0108 	add.w	r1, r7, #8
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	60f8      	str	r0, [r7, #12]
      break;
 80074ba:	e112      	b.n	80076e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7c1b      	ldrb	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10d      	bne.n	80074e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	f107 0208 	add.w	r2, r7, #8
 80074d0:	4610      	mov	r0, r2
 80074d2:	4798      	blx	r3
 80074d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3301      	adds	r3, #1
 80074da:	2202      	movs	r2, #2
 80074dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074de:	e100      	b.n	80076e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	f107 0208 	add.w	r2, r7, #8
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	2202      	movs	r2, #2
 80074f8:	701a      	strb	r2, [r3, #0]
      break;
 80074fa:	e0f2      	b.n	80076e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	885b      	ldrh	r3, [r3, #2]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b05      	cmp	r3, #5
 8007504:	f200 80ac 	bhi.w	8007660 <USBD_GetDescriptor+0x204>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <USBD_GetDescriptor+0xb4>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007529 	.word	0x08007529
 8007514:	0800755d 	.word	0x0800755d
 8007518:	08007591 	.word	0x08007591
 800751c:	080075c5 	.word	0x080075c5
 8007520:	080075f9 	.word	0x080075f9
 8007524:	0800762d 	.word	0x0800762d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	7c12      	ldrb	r2, [r2, #16]
 8007540:	f107 0108 	add.w	r1, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800754a:	e091      	b.n	8007670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa97 	bl	8007a82 <USBD_CtlError>
            err++;
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	3301      	adds	r3, #1
 8007558:	72fb      	strb	r3, [r7, #11]
          break;
 800755a:	e089      	b.n	8007670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7c12      	ldrb	r2, [r2, #16]
 8007574:	f107 0108 	add.w	r1, r7, #8
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800757e:	e077      	b.n	8007670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa7d 	bl	8007a82 <USBD_CtlError>
            err++;
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	3301      	adds	r3, #1
 800758c:	72fb      	strb	r3, [r7, #11]
          break;
 800758e:	e06f      	b.n	8007670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7c12      	ldrb	r2, [r2, #16]
 80075a8:	f107 0108 	add.w	r1, r7, #8
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b2:	e05d      	b.n	8007670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa63 	bl	8007a82 <USBD_CtlError>
            err++;
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	3301      	adds	r3, #1
 80075c0:	72fb      	strb	r3, [r7, #11]
          break;
 80075c2:	e055      	b.n	8007670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7c12      	ldrb	r2, [r2, #16]
 80075dc:	f107 0108 	add.w	r1, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e6:	e043      	b.n	8007670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa49 	bl	8007a82 <USBD_CtlError>
            err++;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	3301      	adds	r3, #1
 80075f4:	72fb      	strb	r3, [r7, #11]
          break;
 80075f6:	e03b      	b.n	8007670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	7c12      	ldrb	r2, [r2, #16]
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761a:	e029      	b.n	8007670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa2f 	bl	8007a82 <USBD_CtlError>
            err++;
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	3301      	adds	r3, #1
 8007628:	72fb      	strb	r3, [r7, #11]
          break;
 800762a:	e021      	b.n	8007670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	7c12      	ldrb	r2, [r2, #16]
 8007644:	f107 0108 	add.w	r1, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764e:	e00f      	b.n	8007670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa15 	bl	8007a82 <USBD_CtlError>
            err++;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	3301      	adds	r3, #1
 800765c:	72fb      	strb	r3, [r7, #11]
          break;
 800765e:	e007      	b.n	8007670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa0d 	bl	8007a82 <USBD_CtlError>
          err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800766e:	e038      	b.n	80076e2 <USBD_GetDescriptor+0x286>
 8007670:	e037      	b.n	80076e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7c1b      	ldrb	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007682:	f107 0208 	add.w	r2, r7, #8
 8007686:	4610      	mov	r0, r2
 8007688:	4798      	blx	r3
 800768a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800768c:	e029      	b.n	80076e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f9f6 	bl	8007a82 <USBD_CtlError>
        err++;
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	3301      	adds	r3, #1
 800769a:	72fb      	strb	r3, [r7, #11]
      break;
 800769c:	e021      	b.n	80076e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7c1b      	ldrb	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10d      	bne.n	80076c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	f107 0208 	add.w	r2, r7, #8
 80076b2:	4610      	mov	r0, r2
 80076b4:	4798      	blx	r3
 80076b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	2207      	movs	r2, #7
 80076be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c0:	e00f      	b.n	80076e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f9dc 	bl	8007a82 <USBD_CtlError>
        err++;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	3301      	adds	r3, #1
 80076ce:	72fb      	strb	r3, [r7, #11]
      break;
 80076d0:	e007      	b.n	80076e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f9d4 	bl	8007a82 <USBD_CtlError>
      err++;
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	3301      	adds	r3, #1
 80076de:	72fb      	strb	r3, [r7, #11]
      break;
 80076e0:	bf00      	nop
  }

  if (err != 0U)
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d11c      	bne.n	8007722 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d011      	beq.n	8007712 <USBD_GetDescriptor+0x2b6>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	88db      	ldrh	r3, [r3, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88da      	ldrh	r2, [r3, #6]
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	4293      	cmp	r3, r2
 80076fe:	bf28      	it	cs
 8007700:	4613      	movcs	r3, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007706:	893b      	ldrh	r3, [r7, #8]
 8007708:	461a      	mov	r2, r3
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa22 	bl	8007b56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa79 	bl	8007c12 <USBD_CtlSendStatus>
 8007720:	e000      	b.n	8007724 <USBD_GetDescriptor+0x2c8>
    return;
 8007722:	bf00      	nop
    }
  }
}
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop

0800772c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	889b      	ldrh	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d130      	bne.n	80077a0 <USBD_SetAddress+0x74>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	88db      	ldrh	r3, [r3, #6]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d12c      	bne.n	80077a0 <USBD_SetAddress+0x74>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	2b7f      	cmp	r3, #127	; 0x7f
 800774c:	d828      	bhi.n	80077a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007758:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	2b03      	cmp	r3, #3
 8007762:	d104      	bne.n	800776e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f98b 	bl	8007a82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776c:	e01d      	b.n	80077aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7bfa      	ldrb	r2, [r7, #15]
 8007772:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f003 fa82 	bl	800ac84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fa46 	bl	8007c12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007794:	e009      	b.n	80077aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779e:	e004      	b.n	80077aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f96d 	bl	8007a82 <USBD_CtlError>
  }
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	885b      	ldrh	r3, [r3, #2]
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	4b41      	ldr	r3, [pc, #260]	; (80078cc <USBD_SetConfig+0x118>)
 80077c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077c8:	4b40      	ldr	r3, [pc, #256]	; (80078cc <USBD_SetConfig+0x118>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d904      	bls.n	80077da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f955 	bl	8007a82 <USBD_CtlError>
 80077d8:	e075      	b.n	80078c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d002      	beq.n	80077ea <USBD_SetConfig+0x36>
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d023      	beq.n	8007830 <USBD_SetConfig+0x7c>
 80077e8:	e062      	b.n	80078b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80077ea:	4b38      	ldr	r3, [pc, #224]	; (80078cc <USBD_SetConfig+0x118>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01a      	beq.n	8007828 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077f2:	4b36      	ldr	r3, [pc, #216]	; (80078cc <USBD_SetConfig+0x118>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2203      	movs	r2, #3
 8007800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007804:	4b31      	ldr	r3, [pc, #196]	; (80078cc <USBD_SetConfig+0x118>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff f9e7 	bl	8006bde <USBD_SetClassConfig>
 8007810:	4603      	mov	r3, r0
 8007812:	2b02      	cmp	r3, #2
 8007814:	d104      	bne.n	8007820 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f932 	bl	8007a82 <USBD_CtlError>
            return;
 800781e:	e052      	b.n	80078c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9f6 	bl	8007c12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007826:	e04e      	b.n	80078c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9f2 	bl	8007c12 <USBD_CtlSendStatus>
        break;
 800782e:	e04a      	b.n	80078c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007830:	4b26      	ldr	r3, [pc, #152]	; (80078cc <USBD_SetConfig+0x118>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d112      	bne.n	800785e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007840:	4b22      	ldr	r3, [pc, #136]	; (80078cc <USBD_SetConfig+0x118>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800784a:	4b20      	ldr	r3, [pc, #128]	; (80078cc <USBD_SetConfig+0x118>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff f9e3 	bl	8006c1c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9db 	bl	8007c12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800785c:	e033      	b.n	80078c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800785e:	4b1b      	ldr	r3, [pc, #108]	; (80078cc <USBD_SetConfig+0x118>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d01d      	beq.n	80078a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff f9d1 	bl	8006c1c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800787a:	4b14      	ldr	r3, [pc, #80]	; (80078cc <USBD_SetConfig+0x118>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <USBD_SetConfig+0x118>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff f9a7 	bl	8006bde <USBD_SetClassConfig>
 8007890:	4603      	mov	r3, r0
 8007892:	2b02      	cmp	r3, #2
 8007894:	d104      	bne.n	80078a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8f2 	bl	8007a82 <USBD_CtlError>
            return;
 800789e:	e012      	b.n	80078c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9b6 	bl	8007c12 <USBD_CtlSendStatus>
        break;
 80078a6:	e00e      	b.n	80078c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9b2 	bl	8007c12 <USBD_CtlSendStatus>
        break;
 80078ae:	e00a      	b.n	80078c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f8e5 	bl	8007a82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078b8:	4b04      	ldr	r3, [pc, #16]	; (80078cc <USBD_SetConfig+0x118>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff f9ac 	bl	8006c1c <USBD_ClrClassConfig>
        break;
 80078c4:	bf00      	nop
    }
  }
}
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200003f0 	.word	0x200003f0

080078d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88db      	ldrh	r3, [r3, #6]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d004      	beq.n	80078ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f8cc 	bl	8007a82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078ea:	e022      	b.n	8007932 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	dc02      	bgt.n	80078fc <USBD_GetConfig+0x2c>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	dc03      	bgt.n	8007902 <USBD_GetConfig+0x32>
 80078fa:	e015      	b.n	8007928 <USBD_GetConfig+0x58>
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d00b      	beq.n	8007918 <USBD_GetConfig+0x48>
 8007900:	e012      	b.n	8007928 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3308      	adds	r3, #8
 800790c:	2201      	movs	r2, #1
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f920 	bl	8007b56 <USBD_CtlSendData>
        break;
 8007916:	e00c      	b.n	8007932 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	2201      	movs	r2, #1
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f918 	bl	8007b56 <USBD_CtlSendData>
        break;
 8007926:	e004      	b.n	8007932 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f8a9 	bl	8007a82 <USBD_CtlError>
        break;
 8007930:	bf00      	nop
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794a:	3b01      	subs	r3, #1
 800794c:	2b02      	cmp	r3, #2
 800794e:	d81e      	bhi.n	800798e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	88db      	ldrh	r3, [r3, #6]
 8007954:	2b02      	cmp	r3, #2
 8007956:	d004      	beq.n	8007962 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f891 	bl	8007a82 <USBD_CtlError>
        break;
 8007960:	e01a      	b.n	8007998 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f043 0202 	orr.w	r2, r3, #2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	330c      	adds	r3, #12
 8007982:	2202      	movs	r2, #2
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f8e5 	bl	8007b56 <USBD_CtlSendData>
      break;
 800798c:	e004      	b.n	8007998 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f876 	bl	8007a82 <USBD_CtlError>
      break;
 8007996:	bf00      	nop
  }
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	885b      	ldrh	r3, [r3, #2]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d106      	bne.n	80079c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f929 	bl	8007c12 <USBD_CtlSendStatus>
  }
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d8:	3b01      	subs	r3, #1
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d80b      	bhi.n	80079f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d10c      	bne.n	8007a00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f90f 	bl	8007c12 <USBD_CtlSendStatus>
      }
      break;
 80079f4:	e004      	b.n	8007a00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f842 	bl	8007a82 <USBD_CtlError>
      break;
 80079fe:	e000      	b.n	8007a02 <USBD_ClrFeature+0x3a>
      break;
 8007a00:	bf00      	nop
  }
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	785a      	ldrb	r2, [r3, #1]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	3302      	adds	r3, #2
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	3303      	adds	r3, #3
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	4413      	add	r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	3304      	adds	r3, #4
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	3305      	adds	r3, #5
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	3306      	adds	r3, #6
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	3307      	adds	r3, #7
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4413      	add	r3, r2
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	80da      	strh	r2, [r3, #6]

}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a8c:	2180      	movs	r1, #128	; 0x80
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f003 f88e 	bl	800abb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a94:	2100      	movs	r1, #0
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f003 f88a 	bl	800abb0 <USBD_LL_StallEP>
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d032      	beq.n	8007b20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f834 	bl	8007b28 <USBD_GetLen>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	75fa      	strb	r2, [r7, #23]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4413      	add	r3, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	75fa      	strb	r2, [r7, #23]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4413      	add	r3, r2
 8007aec:	2203      	movs	r2, #3
 8007aee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007af0:	e012      	b.n	8007b18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	60fa      	str	r2, [r7, #12]
 8007af8:	7dfa      	ldrb	r2, [r7, #23]
 8007afa:	1c51      	adds	r1, r2, #1
 8007afc:	75f9      	strb	r1, [r7, #23]
 8007afe:	4611      	mov	r1, r2
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	440a      	add	r2, r1
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	75fa      	strb	r2, [r7, #23]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4413      	add	r3, r2
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e8      	bne.n	8007af2 <USBD_GetString+0x4e>
    }
  }
}
 8007b20:	bf00      	nop
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b34:	e005      	b.n	8007b42 <USBD_GetLen+0x1a>
  {
    len++;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1f5      	bne.n	8007b36 <USBD_GetLen+0xe>
  }

  return len;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr

08007b56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	4613      	mov	r3, r2
 8007b62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f003 f89f 	bl	800acc2 <USBD_LL_Transmit>

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b9c:	88fb      	ldrh	r3, [r7, #6]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f003 f88d 	bl	800acc2 <USBD_LL_Transmit>

  return USBD_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007bd0:	88fa      	ldrh	r2, [r7, #6]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f003 f892 	bl	800ad08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	2100      	movs	r1, #0
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f003 f880 	bl	800ad08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c22:	2300      	movs	r3, #0
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f003 f84a 	bl	800acc2 <USBD_LL_Transmit>

  return USBD_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2205      	movs	r2, #5
 8007c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f003 f85a 	bl	800ad08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	4603      	mov	r3, r0
 8007c66:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c70:	2b84      	cmp	r3, #132	; 0x84
 8007c72:	d005      	beq.n	8007c80 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3303      	adds	r3, #3
 8007c7e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c80:	68fb      	ldr	r3, [r7, #12]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr

08007c8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c90:	f000 fed4 	bl	8008a3c <vTaskStartScheduler>
  
  return osOK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9c:	b089      	sub	sp, #36	; 0x24
 8007c9e:	af04      	add	r7, sp, #16
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d020      	beq.n	8007cee <osThreadCreate+0x54>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01c      	beq.n	8007cee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685c      	ldr	r4, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681d      	ldr	r5, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691e      	ldr	r6, [r3, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff ffc9 	bl	8007c5e <makeFreeRtosPriority>
 8007ccc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cd6:	9202      	str	r2, [sp, #8]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	9100      	str	r1, [sp, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	4632      	mov	r2, r6
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 fceb 	bl	80086be <xTaskCreateStatic>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e01c      	b.n	8007d28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685c      	ldr	r4, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cfa:	b29e      	uxth	r6, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff ffab 	bl	8007c5e <makeFreeRtosPriority>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	9200      	str	r2, [sp, #0]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	4632      	mov	r2, r6
 8007d16:	4629      	mov	r1, r5
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fd2c 	bl	8008776 <xTaskCreate>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d001      	beq.n	8007d28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e000      	b.n	8007d2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d28:	68fb      	ldr	r3, [r7, #12]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <osDelay+0x16>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	e000      	b.n	8007d4a <osDelay+0x18>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fe42 	bl	80089d4 <vTaskDelay>
  
  return osOK;
 8007d50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f103 0208 	add.w	r2, r3, #8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f103 0208 	add.w	r2, r3, #8
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f103 0208 	add.w	r2, r3, #8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr

08007d98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]
}
 8007dec:	bf00      	nop
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr

08007df6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d103      	bne.n	8007e16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e00c      	b.n	8007e30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e002      	b.n	8007e24 <vListInsert+0x2e>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d2f6      	bcs.n	8007e1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr

08007e66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6892      	ldr	r2, [r2, #8]
 8007e7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6852      	ldr	r2, [r2, #4]
 8007e86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d103      	bne.n	8007e9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	1e5a      	subs	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr

08007eb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ee2:	f001 fce3 	bl	80098ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	441a      	add	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f12:	3b01      	subs	r3, #1
 8007f14:	68f9      	ldr	r1, [r7, #12]
 8007f16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	441a      	add	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	22ff      	movs	r2, #255	; 0xff
 8007f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d114      	bne.n	8007f62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01a      	beq.n	8007f76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3310      	adds	r3, #16
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 ffbf 	bl	8008ec8 <xTaskRemoveFromEventList>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d012      	beq.n	8007f76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f50:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <xQueueGenericReset+0xcc>)
 8007f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	e009      	b.n	8007f76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3310      	adds	r3, #16
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fef7 	bl	8007d5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3324      	adds	r3, #36	; 0x24
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fef2 	bl	8007d5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f76:	f001 fcc9 	bl	800990c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f7a:	2301      	movs	r3, #1
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	613b      	str	r3, [r7, #16]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61fb      	str	r3, [r7, #28]
 8007fbc:	e004      	b.n	8007fc8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	fb02 f303 	mul.w	r3, r2, r3
 8007fc6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	3348      	adds	r3, #72	; 0x48
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fd2f 	bl	8009a30 <pvPortMalloc>
 8007fd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00f      	beq.n	8007ffa <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	3348      	adds	r3, #72	; 0x48
 8007fde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fe8:	79fa      	ldrb	r2, [r7, #7]
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 f805 	bl	8008004 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
	}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3720      	adds	r7, #32
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d103      	bne.n	8008020 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e002      	b.n	8008026 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008032:	2101      	movs	r1, #1
 8008034:	69b8      	ldr	r0, [r7, #24]
 8008036:	f7ff ff3f 	bl	8007eb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008062:	2300      	movs	r3, #0
 8008064:	2200      	movs	r2, #0
 8008066:	2100      	movs	r1, #0
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f81d 	bl	80080a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008076:	b580      	push	{r7, lr}
 8008078:	b086      	sub	sp, #24
 800807a:	af00      	add	r7, sp, #0
 800807c:	4603      	mov	r3, r0
 800807e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008080:	2301      	movs	r3, #1
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	461a      	mov	r2, r3
 800808c:	6939      	ldr	r1, [r7, #16]
 800808e:	6978      	ldr	r0, [r7, #20]
 8008090:	f7ff ff7a 	bl	8007f88 <xQueueGenericCreate>
 8008094:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7ff ffd3 	bl	8008042 <prvInitialiseMutex>

		return pxNewQueue;
 800809c:	68fb      	ldr	r3, [r7, #12]
	}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08e      	sub	sp, #56	; 0x38
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080b6:	2300      	movs	r3, #0
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <xQueueGenericSend+0x32>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <xQueueGenericSend+0x40>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <xQueueGenericSend+0x44>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <xQueueGenericSend+0x46>
 80080ec:	2300      	movs	r3, #0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <xQueueGenericSend+0x60>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d103      	bne.n	8008116 <xQueueGenericSend+0x6e>
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <xQueueGenericSend+0x72>
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <xQueueGenericSend+0x74>
 800811a:	2300      	movs	r3, #0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <xQueueGenericSend+0x8e>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	623b      	str	r3, [r7, #32]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008136:	f001 f887 	bl	8009248 <xTaskGetSchedulerState>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <xQueueGenericSend+0x9e>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <xQueueGenericSend+0xa2>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <xQueueGenericSend+0xa4>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <xQueueGenericSend+0xbe>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61fb      	str	r3, [r7, #28]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008166:	f001 fba1 	bl	80098ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	429a      	cmp	r2, r3
 8008174:	d302      	bcc.n	800817c <xQueueGenericSend+0xd4>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d129      	bne.n	80081d0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008182:	f000 f9b2 	bl	80084ea <prvCopyDataToQueue>
 8008186:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d010      	beq.n	80081b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	3324      	adds	r3, #36	; 0x24
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fe97 	bl	8008ec8 <xTaskRemoveFromEventList>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d013      	beq.n	80081c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081a0:	4b3f      	ldr	r3, [pc, #252]	; (80082a0 <xQueueGenericSend+0x1f8>)
 80081a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	e00a      	b.n	80081c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081b8:	4b39      	ldr	r3, [pc, #228]	; (80082a0 <xQueueGenericSend+0x1f8>)
 80081ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081c8:	f001 fba0 	bl	800990c <vPortExitCritical>
				return pdPASS;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e063      	b.n	8008298 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d103      	bne.n	80081de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081d6:	f001 fb99 	bl	800990c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	e05c      	b.n	8008298 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081e4:	f107 0314 	add.w	r3, r7, #20
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fecf 	bl	8008f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081f2:	f001 fb8b 	bl	800990c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081f6:	f000 fc81 	bl	8008afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081fa:	f001 fb57 	bl	80098ac <vPortEnterCritical>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008204:	b25b      	sxtb	r3, r3
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d103      	bne.n	8008214 <xQueueGenericSend+0x16c>
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800821a:	b25b      	sxtb	r3, r3
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008220:	d103      	bne.n	800822a <xQueueGenericSend+0x182>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800822a:	f001 fb6f 	bl	800990c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800822e:	1d3a      	adds	r2, r7, #4
 8008230:	f107 0314 	add.w	r3, r7, #20
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f000 febe 	bl	8008fb8 <xTaskCheckForTimeOut>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d124      	bne.n	800828c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008244:	f000 fa23 	bl	800868e <prvIsQueueFull>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d018      	beq.n	8008280 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	3310      	adds	r3, #16
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fe12 	bl	8008e80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800825c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825e:	f000 f9ae 	bl	80085be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008262:	f000 fc59 	bl	8008b18 <xTaskResumeAll>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	f47f af7c 	bne.w	8008166 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <xQueueGenericSend+0x1f8>)
 8008270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	e772      	b.n	8008166 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008282:	f000 f99c 	bl	80085be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008286:	f000 fc47 	bl	8008b18 <xTaskResumeAll>
 800828a:	e76c      	b.n	8008166 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800828c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800828e:	f000 f996 	bl	80085be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008292:	f000 fc41 	bl	8008b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008296:	2300      	movs	r3, #0
		}
	}
}
 8008298:	4618      	mov	r0, r3
 800829a:	3738      	adds	r7, #56	; 0x38
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08e      	sub	sp, #56	; 0x38
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082b6:	2300      	movs	r3, #0
 80082b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	623b      	str	r3, [r7, #32]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	61fb      	str	r3, [r7, #28]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f4:	f000 ffa8 	bl	8009248 <xTaskGetSchedulerState>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <xQueueSemaphoreTake+0x60>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <xQueueSemaphoreTake+0x64>
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <xQueueSemaphoreTake+0x66>
 8008308:	2300      	movs	r3, #0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	61bb      	str	r3, [r7, #24]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008324:	f001 fac2 	bl	80098ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	d024      	beq.n	800837e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	1e5a      	subs	r2, r3, #1
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008344:	f001 f94a 	bl	80095dc <pvTaskIncrementMutexHeldCount>
 8008348:	4602      	mov	r2, r0
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00f      	beq.n	8008376 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	3310      	adds	r3, #16
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fdb4 	bl	8008ec8 <xTaskRemoveFromEventList>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008366:	4b54      	ldr	r3, [pc, #336]	; (80084b8 <xQueueSemaphoreTake+0x214>)
 8008368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008376:	f001 fac9 	bl	800990c <vPortExitCritical>
				return pdPASS;
 800837a:	2301      	movs	r3, #1
 800837c:	e097      	b.n	80084ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d111      	bne.n	80083a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	617b      	str	r3, [r7, #20]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083a0:	f001 fab4 	bl	800990c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083a4:	2300      	movs	r3, #0
 80083a6:	e082      	b.n	80084ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fdea 	bl	8008f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083b8:	2301      	movs	r3, #1
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083bc:	f001 faa6 	bl	800990c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083c0:	f000 fb9c 	bl	8008afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083c4:	f001 fa72 	bl	80098ac <vPortEnterCritical>
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d4:	d103      	bne.n	80083de <xQueueSemaphoreTake+0x13a>
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d103      	bne.n	80083f4 <xQueueSemaphoreTake+0x150>
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f4:	f001 fa8a 	bl	800990c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083f8:	463a      	mov	r2, r7
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fdd9 	bl	8008fb8 <xTaskCheckForTimeOut>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d132      	bne.n	8008472 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800840c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800840e:	f000 f928 	bl	8008662 <prvIsQueueEmpty>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d026      	beq.n	8008466 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d109      	bne.n	8008434 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008420:	f001 fa44 	bl	80098ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 ff2b 	bl	8009284 <xTaskPriorityInherit>
 800842e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008430:	f001 fa6c 	bl	800990c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	3324      	adds	r3, #36	; 0x24
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fd1f 	bl	8008e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008444:	f000 f8bb 	bl	80085be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008448:	f000 fb66 	bl	8008b18 <xTaskResumeAll>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	f47f af68 	bne.w	8008324 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008454:	4b18      	ldr	r3, [pc, #96]	; (80084b8 <xQueueSemaphoreTake+0x214>)
 8008456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	e75e      	b.n	8008324 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008468:	f000 f8a9 	bl	80085be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800846c:	f000 fb54 	bl	8008b18 <xTaskResumeAll>
 8008470:	e758      	b.n	8008324 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008474:	f000 f8a3 	bl	80085be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008478:	f000 fb4e 	bl	8008b18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800847c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800847e:	f000 f8f0 	bl	8008662 <prvIsQueueEmpty>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	f43f af4d 	beq.w	8008324 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00d      	beq.n	80084ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008490:	f001 fa0c 	bl	80098ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008496:	f000 f811 	bl	80084bc <prvGetDisinheritPriorityAfterTimeout>
 800849a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fffa 	bl	800949c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084a8:	f001 fa30 	bl	800990c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3738      	adds	r7, #56	; 0x38
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d006      	beq.n	80084da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f1c3 0307 	rsb	r3, r3, #7
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e001      	b.n	80084de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80084de:	68fb      	ldr	r3, [r7, #12]
	}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr

080084ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10d      	bne.n	8008524 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d14d      	bne.n	80085ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 ff3b 	bl	8009390 <xTaskPriorityDisinherit>
 800851a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]
 8008522:	e043      	b.n	80085ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d119      	bne.n	800855e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6898      	ldr	r0, [r3, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	461a      	mov	r2, r3
 8008534:	68b9      	ldr	r1, [r7, #8]
 8008536:	f002 fc8d 	bl	800ae54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	441a      	add	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d32b      	bcc.n	80085ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	e026      	b.n	80085ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	68d8      	ldr	r0, [r3, #12]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	461a      	mov	r2, r3
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	f002 fc73 	bl	800ae54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	425b      	negs	r3, r3
 8008578:	441a      	add	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d207      	bcs.n	800859a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	425b      	negs	r3, r3
 8008594:	441a      	add	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d105      	bne.n	80085ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085b4:	697b      	ldr	r3, [r7, #20]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085c6:	f001 f971 	bl	80098ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085d2:	e011      	b.n	80085f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d012      	beq.n	8008602 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3324      	adds	r3, #36	; 0x24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fc71 	bl	8008ec8 <xTaskRemoveFromEventList>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085ec:	f000 fd46 	bl	800907c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dce9      	bgt.n	80085d4 <prvUnlockQueue+0x16>
 8008600:	e000      	b.n	8008604 <prvUnlockQueue+0x46>
					break;
 8008602:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	22ff      	movs	r2, #255	; 0xff
 8008608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800860c:	f001 f97e 	bl	800990c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008610:	f001 f94c 	bl	80098ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800861a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800861c:	e011      	b.n	8008642 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d012      	beq.n	800864c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3310      	adds	r3, #16
 800862a:	4618      	mov	r0, r3
 800862c:	f000 fc4c 	bl	8008ec8 <xTaskRemoveFromEventList>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008636:	f000 fd21 	bl	800907c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	3b01      	subs	r3, #1
 800863e:	b2db      	uxtb	r3, r3
 8008640:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	dce9      	bgt.n	800861e <prvUnlockQueue+0x60>
 800864a:	e000      	b.n	800864e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800864c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	22ff      	movs	r2, #255	; 0xff
 8008652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008656:	f001 f959 	bl	800990c <vPortExitCritical>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800866a:	f001 f91f 	bl	80098ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008676:	2301      	movs	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	e001      	b.n	8008680 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008680:	f001 f944 	bl	800990c <vPortExitCritical>

	return xReturn;
 8008684:	68fb      	ldr	r3, [r7, #12]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008696:	f001 f909 	bl	80098ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d102      	bne.n	80086ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086a6:	2301      	movs	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e001      	b.n	80086b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086b0:	f001 f92c 	bl	800990c <vPortExitCritical>

	return xReturn;
 80086b4:	68fb      	ldr	r3, [r7, #12]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b08e      	sub	sp, #56	; 0x38
 80086c2:	af04      	add	r7, sp, #16
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
 80086ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	623b      	str	r3, [r7, #32]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10a      	bne.n	8008704 <xTaskCreateStatic+0x46>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	61fb      	str	r3, [r7, #28]
}
 8008700:	bf00      	nop
 8008702:	e7fe      	b.n	8008702 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008704:	2354      	movs	r3, #84	; 0x54
 8008706:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b54      	cmp	r3, #84	; 0x54
 800870c:	d00a      	beq.n	8008724 <xTaskCreateStatic+0x66>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	61bb      	str	r3, [r7, #24]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	d01e      	beq.n	8008768 <xTaskCreateStatic+0xaa>
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01b      	beq.n	8008768 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008738:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2202      	movs	r2, #2
 800873e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008742:	2300      	movs	r3, #0
 8008744:	9303      	str	r3, [sp, #12]
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	9302      	str	r3, [sp, #8]
 800874a:	f107 0314 	add.w	r3, r7, #20
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f850 	bl	8008800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008762:	f000 f8cd 	bl	8008900 <prvAddNewTaskToReadyList>
 8008766:	e001      	b.n	800876c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008768:	2300      	movs	r3, #0
 800876a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800876c:	697b      	ldr	r3, [r7, #20]
	}
 800876e:	4618      	mov	r0, r3
 8008770:	3728      	adds	r7, #40	; 0x28
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008776:	b580      	push	{r7, lr}
 8008778:	b08c      	sub	sp, #48	; 0x30
 800877a:	af04      	add	r7, sp, #16
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	603b      	str	r3, [r7, #0]
 8008782:	4613      	mov	r3, r2
 8008784:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008786:	88fb      	ldrh	r3, [r7, #6]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4618      	mov	r0, r3
 800878c:	f001 f950 	bl	8009a30 <pvPortMalloc>
 8008790:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00e      	beq.n	80087b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008798:	2054      	movs	r0, #84	; 0x54
 800879a:	f001 f949 	bl	8009a30 <pvPortMalloc>
 800879e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	631a      	str	r2, [r3, #48]	; 0x30
 80087ac:	e005      	b.n	80087ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087ae:	6978      	ldr	r0, [r7, #20]
 80087b0:	f001 fa02 	bl	8009bb8 <vPortFree>
 80087b4:	e001      	b.n	80087ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d017      	beq.n	80087f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087c8:	88fa      	ldrh	r2, [r7, #6]
 80087ca:	2300      	movs	r3, #0
 80087cc:	9303      	str	r3, [sp, #12]
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	9302      	str	r3, [sp, #8]
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68b9      	ldr	r1, [r7, #8]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 f80e 	bl	8008800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087e4:	69f8      	ldr	r0, [r7, #28]
 80087e6:	f000 f88b 	bl	8008900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087ea:	2301      	movs	r3, #1
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	e002      	b.n	80087f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087f0:	f04f 33ff 	mov.w	r3, #4294967295
 80087f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087f6:	69bb      	ldr	r3, [r7, #24]
	}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3720      	adds	r7, #32
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008818:	3b01      	subs	r3, #1
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	f023 0307 	bic.w	r3, r3, #7
 8008826:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	617b      	str	r3, [r7, #20]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008848:	2300      	movs	r3, #0
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	e012      	b.n	8008874 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	7819      	ldrb	r1, [r3, #0]
 8008856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	4413      	add	r3, r2
 800885c:	3334      	adds	r3, #52	; 0x34
 800885e:	460a      	mov	r2, r1
 8008860:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	2b0f      	cmp	r3, #15
 8008878:	d9e9      	bls.n	800884e <prvInitialiseNewTask+0x4e>
 800887a:	e000      	b.n	800887e <prvInitialiseNewTask+0x7e>
		{
			break;
 800887c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	2b06      	cmp	r3, #6
 800888a:	d901      	bls.n	8008890 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800888c:	2306      	movs	r3, #6
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008894:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800889a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	2200      	movs	r2, #0
 80088a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	3304      	adds	r3, #4
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fa76 	bl	8007d98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	3318      	adds	r3, #24
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff fa71 	bl	8007d98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	f1c3 0207 	rsb	r2, r3, #7
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	2200      	movs	r2, #0
 80088d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	68f9      	ldr	r1, [r7, #12]
 80088de:	69b8      	ldr	r0, [r7, #24]
 80088e0:	f000 fef6 	bl	80096d0 <pxPortInitialiseStack>
 80088e4:	4602      	mov	r2, r0
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f6:	bf00      	nop
 80088f8:	3720      	adds	r7, #32
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008908:	f000 ffd0 	bl	80098ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800890c:	4b2a      	ldr	r3, [pc, #168]	; (80089b8 <prvAddNewTaskToReadyList+0xb8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	4a29      	ldr	r2, [pc, #164]	; (80089b8 <prvAddNewTaskToReadyList+0xb8>)
 8008914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008916:	4b29      	ldr	r3, [pc, #164]	; (80089bc <prvAddNewTaskToReadyList+0xbc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d109      	bne.n	8008932 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800891e:	4a27      	ldr	r2, [pc, #156]	; (80089bc <prvAddNewTaskToReadyList+0xbc>)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008924:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <prvAddNewTaskToReadyList+0xb8>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d110      	bne.n	800894e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800892c:	f000 fbca 	bl	80090c4 <prvInitialiseTaskLists>
 8008930:	e00d      	b.n	800894e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008932:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <prvAddNewTaskToReadyList+0xc0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d109      	bne.n	800894e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800893a:	4b20      	ldr	r3, [pc, #128]	; (80089bc <prvAddNewTaskToReadyList+0xbc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	429a      	cmp	r2, r3
 8008946:	d802      	bhi.n	800894e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008948:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <prvAddNewTaskToReadyList+0xbc>)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800894e:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <prvAddNewTaskToReadyList+0xc4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3301      	adds	r3, #1
 8008954:	4a1b      	ldr	r2, [pc, #108]	; (80089c4 <prvAddNewTaskToReadyList+0xc4>)
 8008956:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	2201      	movs	r2, #1
 800895e:	409a      	lsls	r2, r3
 8008960:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <prvAddNewTaskToReadyList+0xc8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4313      	orrs	r3, r2
 8008966:	4a18      	ldr	r2, [pc, #96]	; (80089c8 <prvAddNewTaskToReadyList+0xc8>)
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4a15      	ldr	r2, [pc, #84]	; (80089cc <prvAddNewTaskToReadyList+0xcc>)
 8008978:	441a      	add	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3304      	adds	r3, #4
 800897e:	4619      	mov	r1, r3
 8008980:	4610      	mov	r0, r2
 8008982:	f7ff fa15 	bl	8007db0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008986:	f000 ffc1 	bl	800990c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800898a:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <prvAddNewTaskToReadyList+0xc0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00e      	beq.n	80089b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008992:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <prvAddNewTaskToReadyList+0xbc>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d207      	bcs.n	80089b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <prvAddNewTaskToReadyList+0xd0>)
 80089a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	200004f4 	.word	0x200004f4
 80089bc:	200003f4 	.word	0x200003f4
 80089c0:	20000500 	.word	0x20000500
 80089c4:	20000510 	.word	0x20000510
 80089c8:	200004fc 	.word	0x200004fc
 80089cc:	200003f8 	.word	0x200003f8
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d017      	beq.n	8008a16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089e6:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <vTaskDelay+0x60>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <vTaskDelay+0x30>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60bb      	str	r3, [r7, #8]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a04:	f000 f87a 	bl	8008afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a08:	2100      	movs	r1, #0
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fdfa 	bl	8009604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a10:	f000 f882 	bl	8008b18 <xTaskResumeAll>
 8008a14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d107      	bne.n	8008a2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <vTaskDelay+0x64>)
 8008a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	2000051c 	.word	0x2000051c
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08a      	sub	sp, #40	; 0x28
 8008a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a4a:	463a      	mov	r2, r7
 8008a4c:	1d39      	adds	r1, r7, #4
 8008a4e:	f107 0308 	add.w	r3, r7, #8
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7f7 fb84 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	9202      	str	r2, [sp, #8]
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	2300      	movs	r3, #0
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	460a      	mov	r2, r1
 8008a6a:	491e      	ldr	r1, [pc, #120]	; (8008ae4 <vTaskStartScheduler+0xa8>)
 8008a6c:	481e      	ldr	r0, [pc, #120]	; (8008ae8 <vTaskStartScheduler+0xac>)
 8008a6e:	f7ff fe26 	bl	80086be <xTaskCreateStatic>
 8008a72:	4603      	mov	r3, r0
 8008a74:	4a1d      	ldr	r2, [pc, #116]	; (8008aec <vTaskStartScheduler+0xb0>)
 8008a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a78:	4b1c      	ldr	r3, [pc, #112]	; (8008aec <vTaskStartScheduler+0xb0>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a80:	2301      	movs	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e001      	b.n	8008a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d116      	bne.n	8008abe <vTaskStartScheduler+0x82>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008aa4:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <vTaskStartScheduler+0xb4>)
 8008aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aac:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <vTaskStartScheduler+0xb8>)
 8008aae:	2201      	movs	r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008ab2:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <vTaskStartScheduler+0xbc>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ab8:	f000 fe86 	bl	80097c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008abc:	e00e      	b.n	8008adc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d10a      	bne.n	8008adc <vTaskStartScheduler+0xa0>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60fb      	str	r3, [r7, #12]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <vTaskStartScheduler+0x9e>
}
 8008adc:	bf00      	nop
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	0800aee4 	.word	0x0800aee4
 8008ae8:	08009095 	.word	0x08009095
 8008aec:	20000518 	.word	0x20000518
 8008af0:	20000514 	.word	0x20000514
 8008af4:	20000500 	.word	0x20000500
 8008af8:	200004f8 	.word	0x200004f8

08008afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b00:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <vTaskSuspendAll+0x18>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	4a03      	ldr	r2, [pc, #12]	; (8008b14 <vTaskSuspendAll+0x18>)
 8008b08:	6013      	str	r3, [r2, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	2000051c 	.word	0x2000051c

08008b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b26:	4b41      	ldr	r3, [pc, #260]	; (8008c2c <xTaskResumeAll+0x114>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	603b      	str	r3, [r7, #0]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b44:	f000 feb2 	bl	80098ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b48:	4b38      	ldr	r3, [pc, #224]	; (8008c2c <xTaskResumeAll+0x114>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	4a37      	ldr	r2, [pc, #220]	; (8008c2c <xTaskResumeAll+0x114>)
 8008b50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b52:	4b36      	ldr	r3, [pc, #216]	; (8008c2c <xTaskResumeAll+0x114>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d161      	bne.n	8008c1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b5a:	4b35      	ldr	r3, [pc, #212]	; (8008c30 <xTaskResumeAll+0x118>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d05d      	beq.n	8008c1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b62:	e02e      	b.n	8008bc2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008b64:	4b33      	ldr	r3, [pc, #204]	; (8008c34 <xTaskResumeAll+0x11c>)
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3318      	adds	r3, #24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff f978 	bl	8007e66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff f973 	bl	8007e66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	2201      	movs	r2, #1
 8008b86:	409a      	lsls	r2, r3
 8008b88:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <xTaskResumeAll+0x120>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	4a2a      	ldr	r2, [pc, #168]	; (8008c38 <xTaskResumeAll+0x120>)
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4a27      	ldr	r2, [pc, #156]	; (8008c3c <xTaskResumeAll+0x124>)
 8008ba0:	441a      	add	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	4610      	mov	r0, r2
 8008baa:	f7ff f901 	bl	8007db0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb2:	4b23      	ldr	r3, [pc, #140]	; (8008c40 <xTaskResumeAll+0x128>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d302      	bcc.n	8008bc2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008bbc:	4b21      	ldr	r3, [pc, #132]	; (8008c44 <xTaskResumeAll+0x12c>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bc2:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <xTaskResumeAll+0x11c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1cc      	bne.n	8008b64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bd0:	f000 fb16 	bl	8009200 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008bd4:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <xTaskResumeAll+0x130>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d010      	beq.n	8008c02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008be0:	f000 f836 	bl	8008c50 <xTaskIncrementTick>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008bea:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <xTaskResumeAll+0x12c>)
 8008bec:	2201      	movs	r2, #1
 8008bee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1f1      	bne.n	8008be0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008bfc:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <xTaskResumeAll+0x130>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c02:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <xTaskResumeAll+0x12c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <xTaskResumeAll+0x134>)
 8008c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c1e:	f000 fe75 	bl	800990c <vPortExitCritical>

	return xAlreadyYielded;
 8008c22:	68bb      	ldr	r3, [r7, #8]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	2000051c 	.word	0x2000051c
 8008c30:	200004f4 	.word	0x200004f4
 8008c34:	200004b4 	.word	0x200004b4
 8008c38:	200004fc 	.word	0x200004fc
 8008c3c:	200003f8 	.word	0x200003f8
 8008c40:	200003f4 	.word	0x200003f4
 8008c44:	20000508 	.word	0x20000508
 8008c48:	20000504 	.word	0x20000504
 8008c4c:	e000ed04 	.word	0xe000ed04

08008c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c5a:	4b51      	ldr	r3, [pc, #324]	; (8008da0 <xTaskIncrementTick+0x150>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f040 808d 	bne.w	8008d7e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c64:	4b4f      	ldr	r3, [pc, #316]	; (8008da4 <xTaskIncrementTick+0x154>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c6c:	4a4d      	ldr	r2, [pc, #308]	; (8008da4 <xTaskIncrementTick+0x154>)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d120      	bne.n	8008cba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c78:	4b4b      	ldr	r3, [pc, #300]	; (8008da8 <xTaskIncrementTick+0x158>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00a      	beq.n	8008c98 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	603b      	str	r3, [r7, #0]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <xTaskIncrementTick+0x46>
 8008c98:	4b43      	ldr	r3, [pc, #268]	; (8008da8 <xTaskIncrementTick+0x158>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	4b43      	ldr	r3, [pc, #268]	; (8008dac <xTaskIncrementTick+0x15c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a41      	ldr	r2, [pc, #260]	; (8008da8 <xTaskIncrementTick+0x158>)
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	4a41      	ldr	r2, [pc, #260]	; (8008dac <xTaskIncrementTick+0x15c>)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	4b40      	ldr	r3, [pc, #256]	; (8008db0 <xTaskIncrementTick+0x160>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	4a3f      	ldr	r2, [pc, #252]	; (8008db0 <xTaskIncrementTick+0x160>)
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	f000 faa3 	bl	8009200 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cba:	4b3e      	ldr	r3, [pc, #248]	; (8008db4 <xTaskIncrementTick+0x164>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d34d      	bcc.n	8008d60 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc4:	4b38      	ldr	r3, [pc, #224]	; (8008da8 <xTaskIncrementTick+0x158>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <xTaskIncrementTick+0x82>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e000      	b.n	8008cd4 <xTaskIncrementTick+0x84>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd8:	4b36      	ldr	r3, [pc, #216]	; (8008db4 <xTaskIncrementTick+0x164>)
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	601a      	str	r2, [r3, #0]
					break;
 8008ce0:	e03e      	b.n	8008d60 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008ce2:	4b31      	ldr	r3, [pc, #196]	; (8008da8 <xTaskIncrementTick+0x158>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d203      	bcs.n	8008d02 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cfa:	4a2e      	ldr	r2, [pc, #184]	; (8008db4 <xTaskIncrementTick+0x164>)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6013      	str	r3, [r2, #0]
						break;
 8008d00:	e02e      	b.n	8008d60 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	3304      	adds	r3, #4
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff f8ad 	bl	8007e66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	3318      	adds	r3, #24
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff f8a4 	bl	8007e66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	2201      	movs	r2, #1
 8008d24:	409a      	lsls	r2, r3
 8008d26:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <xTaskIncrementTick+0x168>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	4a22      	ldr	r2, [pc, #136]	; (8008db8 <xTaskIncrementTick+0x168>)
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <xTaskIncrementTick+0x16c>)
 8008d3e:	441a      	add	r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7ff f832 	bl	8007db0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d50:	4b1b      	ldr	r3, [pc, #108]	; (8008dc0 <xTaskIncrementTick+0x170>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d3b4      	bcc.n	8008cc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d5e:	e7b1      	b.n	8008cc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d60:	4b17      	ldr	r3, [pc, #92]	; (8008dc0 <xTaskIncrementTick+0x170>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4915      	ldr	r1, [pc, #84]	; (8008dbc <xTaskIncrementTick+0x16c>)
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d907      	bls.n	8008d88 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	e004      	b.n	8008d88 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d7e:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <xTaskIncrementTick+0x174>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a0f      	ldr	r2, [pc, #60]	; (8008dc4 <xTaskIncrementTick+0x174>)
 8008d86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <xTaskIncrementTick+0x178>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d94:	697b      	ldr	r3, [r7, #20]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	2000051c 	.word	0x2000051c
 8008da4:	200004f8 	.word	0x200004f8
 8008da8:	200004ac 	.word	0x200004ac
 8008dac:	200004b0 	.word	0x200004b0
 8008db0:	2000050c 	.word	0x2000050c
 8008db4:	20000514 	.word	0x20000514
 8008db8:	200004fc 	.word	0x200004fc
 8008dbc:	200003f8 	.word	0x200003f8
 8008dc0:	200003f4 	.word	0x200003f4
 8008dc4:	20000504 	.word	0x20000504
 8008dc8:	20000508 	.word	0x20000508

08008dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dd2:	4b26      	ldr	r3, [pc, #152]	; (8008e6c <vTaskSwitchContext+0xa0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dda:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <vTaskSwitchContext+0xa4>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008de0:	e03f      	b.n	8008e62 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008de2:	4b23      	ldr	r3, [pc, #140]	; (8008e70 <vTaskSwitchContext+0xa4>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008de8:	4b22      	ldr	r3, [pc, #136]	; (8008e74 <vTaskSwitchContext+0xa8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	fab3 f383 	clz	r3, r3
 8008df4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008df6:	7afb      	ldrb	r3, [r7, #11]
 8008df8:	f1c3 031f 	rsb	r3, r3, #31
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	491e      	ldr	r1, [pc, #120]	; (8008e78 <vTaskSwitchContext+0xac>)
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10a      	bne.n	8008e28 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	607b      	str	r3, [r7, #4]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <vTaskSwitchContext+0x5a>
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4a11      	ldr	r2, [pc, #68]	; (8008e78 <vTaskSwitchContext+0xac>)
 8008e34:	4413      	add	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d104      	bne.n	8008e58 <vTaskSwitchContext+0x8c>
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	605a      	str	r2, [r3, #4]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	4a07      	ldr	r2, [pc, #28]	; (8008e7c <vTaskSwitchContext+0xb0>)
 8008e60:	6013      	str	r3, [r2, #0]
}
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr
 8008e6c:	2000051c 	.word	0x2000051c
 8008e70:	20000508 	.word	0x20000508
 8008e74:	200004fc 	.word	0x200004fc
 8008e78:	200003f8 	.word	0x200003f8
 8008e7c:	200003f4 	.word	0x200003f4

08008e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10a      	bne.n	8008ea6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	60fb      	str	r3, [r7, #12]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <vTaskPlaceOnEventList+0x44>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3318      	adds	r3, #24
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fe ffa1 	bl	8007df6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	6838      	ldr	r0, [r7, #0]
 8008eb8:	f000 fba4 	bl	8009604 <prvAddCurrentTaskToDelayedList>
}
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	200003f4 	.word	0x200003f4

08008ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	60fb      	str	r3, [r7, #12]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	3318      	adds	r3, #24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe ffb4 	bl	8007e66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008efe:	4b1d      	ldr	r3, [pc, #116]	; (8008f74 <xTaskRemoveFromEventList+0xac>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d11c      	bne.n	8008f40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe ffab 	bl	8007e66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	2201      	movs	r2, #1
 8008f16:	409a      	lsls	r2, r3
 8008f18:	4b17      	ldr	r3, [pc, #92]	; (8008f78 <xTaskRemoveFromEventList+0xb0>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	4a16      	ldr	r2, [pc, #88]	; (8008f78 <xTaskRemoveFromEventList+0xb0>)
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a13      	ldr	r2, [pc, #76]	; (8008f7c <xTaskRemoveFromEventList+0xb4>)
 8008f30:	441a      	add	r2, r3
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fe ff39 	bl	8007db0 <vListInsertEnd>
 8008f3e:	e005      	b.n	8008f4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3318      	adds	r3, #24
 8008f44:	4619      	mov	r1, r3
 8008f46:	480e      	ldr	r0, [pc, #56]	; (8008f80 <xTaskRemoveFromEventList+0xb8>)
 8008f48:	f7fe ff32 	bl	8007db0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <xTaskRemoveFromEventList+0xbc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d905      	bls.n	8008f66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <xTaskRemoveFromEventList+0xc0>)
 8008f60:	2201      	movs	r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	e001      	b.n	8008f6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008f6a:	697b      	ldr	r3, [r7, #20]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	2000051c 	.word	0x2000051c
 8008f78:	200004fc 	.word	0x200004fc
 8008f7c:	200003f8 	.word	0x200003f8
 8008f80:	200004b4 	.word	0x200004b4
 8008f84:	200003f4 	.word	0x200003f4
 8008f88:	20000508 	.word	0x20000508

08008f8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f94:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <vTaskInternalSetTimeOutState+0x24>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <vTaskInternalSetTimeOutState+0x28>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	605a      	str	r2, [r3, #4]
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	2000050c 	.word	0x2000050c
 8008fb4:	200004f8 	.word	0x200004f8

08008fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	613b      	str	r3, [r7, #16]
}
 8008fda:	bf00      	nop
 8008fdc:	e7fe      	b.n	8008fdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	60fb      	str	r3, [r7, #12]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ffa:	f000 fc57 	bl	80098ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ffe:	4b1d      	ldr	r3, [pc, #116]	; (8009074 <xTaskCheckForTimeOut+0xbc>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d102      	bne.n	800901e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009018:	2300      	movs	r3, #0
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	e023      	b.n	8009066 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <xTaskCheckForTimeOut+0xc0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d007      	beq.n	800903a <xTaskCheckForTimeOut+0x82>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	429a      	cmp	r2, r3
 8009032:	d302      	bcc.n	800903a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009034:	2301      	movs	r3, #1
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	e015      	b.n	8009066 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	429a      	cmp	r2, r3
 8009042:	d20b      	bcs.n	800905c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	1ad2      	subs	r2, r2, r3
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff ff9b 	bl	8008f8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009056:	2300      	movs	r3, #0
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	e004      	b.n	8009066 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009062:	2301      	movs	r3, #1
 8009064:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009066:	f000 fc51 	bl	800990c <vPortExitCritical>

	return xReturn;
 800906a:	69fb      	ldr	r3, [r7, #28]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200004f8 	.word	0x200004f8
 8009078:	2000050c 	.word	0x2000050c

0800907c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009080:	4b03      	ldr	r3, [pc, #12]	; (8009090 <vTaskMissedYield+0x14>)
 8009082:	2201      	movs	r2, #1
 8009084:	601a      	str	r2, [r3, #0]
}
 8009086:	bf00      	nop
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	20000508 	.word	0x20000508

08009094 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800909c:	f000 f852 	bl	8009144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <prvIdleTask+0x28>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d9f9      	bls.n	800909c <prvIdleTask+0x8>
			{
				taskYIELD();
 80090a8:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <prvIdleTask+0x2c>)
 80090aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090b8:	e7f0      	b.n	800909c <prvIdleTask+0x8>
 80090ba:	bf00      	nop
 80090bc:	200003f8 	.word	0x200003f8
 80090c0:	e000ed04 	.word	0xe000ed04

080090c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ca:	2300      	movs	r3, #0
 80090cc:	607b      	str	r3, [r7, #4]
 80090ce:	e00c      	b.n	80090ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4a12      	ldr	r2, [pc, #72]	; (8009124 <prvInitialiseTaskLists+0x60>)
 80090dc:	4413      	add	r3, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fe3b 	bl	8007d5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3301      	adds	r3, #1
 80090e8:	607b      	str	r3, [r7, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b06      	cmp	r3, #6
 80090ee:	d9ef      	bls.n	80090d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090f0:	480d      	ldr	r0, [pc, #52]	; (8009128 <prvInitialiseTaskLists+0x64>)
 80090f2:	f7fe fe32 	bl	8007d5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090f6:	480d      	ldr	r0, [pc, #52]	; (800912c <prvInitialiseTaskLists+0x68>)
 80090f8:	f7fe fe2f 	bl	8007d5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090fc:	480c      	ldr	r0, [pc, #48]	; (8009130 <prvInitialiseTaskLists+0x6c>)
 80090fe:	f7fe fe2c 	bl	8007d5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009102:	480c      	ldr	r0, [pc, #48]	; (8009134 <prvInitialiseTaskLists+0x70>)
 8009104:	f7fe fe29 	bl	8007d5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009108:	480b      	ldr	r0, [pc, #44]	; (8009138 <prvInitialiseTaskLists+0x74>)
 800910a:	f7fe fe26 	bl	8007d5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <prvInitialiseTaskLists+0x78>)
 8009110:	4a05      	ldr	r2, [pc, #20]	; (8009128 <prvInitialiseTaskLists+0x64>)
 8009112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009114:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <prvInitialiseTaskLists+0x7c>)
 8009116:	4a05      	ldr	r2, [pc, #20]	; (800912c <prvInitialiseTaskLists+0x68>)
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	200003f8 	.word	0x200003f8
 8009128:	20000484 	.word	0x20000484
 800912c:	20000498 	.word	0x20000498
 8009130:	200004b4 	.word	0x200004b4
 8009134:	200004c8 	.word	0x200004c8
 8009138:	200004e0 	.word	0x200004e0
 800913c:	200004ac 	.word	0x200004ac
 8009140:	200004b0 	.word	0x200004b0

08009144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800914a:	e019      	b.n	8009180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800914c:	f000 fbae 	bl	80098ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009150:	4b10      	ldr	r3, [pc, #64]	; (8009194 <prvCheckTasksWaitingTermination+0x50>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3304      	adds	r3, #4
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe fe82 	bl	8007e66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009162:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <prvCheckTasksWaitingTermination+0x54>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3b01      	subs	r3, #1
 8009168:	4a0b      	ldr	r2, [pc, #44]	; (8009198 <prvCheckTasksWaitingTermination+0x54>)
 800916a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <prvCheckTasksWaitingTermination+0x58>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3b01      	subs	r3, #1
 8009172:	4a0a      	ldr	r2, [pc, #40]	; (800919c <prvCheckTasksWaitingTermination+0x58>)
 8009174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009176:	f000 fbc9 	bl	800990c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f810 	bl	80091a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <prvCheckTasksWaitingTermination+0x58>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e1      	bne.n	800914c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	200004c8 	.word	0x200004c8
 8009198:	200004f4 	.word	0x200004f4
 800919c:	200004dc 	.word	0x200004dc

080091a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d108      	bne.n	80091c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fcfe 	bl	8009bb8 <vPortFree>
				vPortFree( pxTCB );
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fcfb 	bl	8009bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091c2:	e018      	b.n	80091f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d103      	bne.n	80091d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fcf2 	bl	8009bb8 <vPortFree>
	}
 80091d4:	e00f      	b.n	80091f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d00a      	beq.n	80091f6 <prvDeleteTCB+0x56>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	60fb      	str	r3, [r7, #12]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <prvDeleteTCB+0x54>
	}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009206:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <prvResetNextTaskUnblockTime+0x40>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <prvResetNextTaskUnblockTime+0x14>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <prvResetNextTaskUnblockTime+0x16>
 8009214:	2300      	movs	r3, #0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800921a:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <prvResetNextTaskUnblockTime+0x44>)
 800921c:	f04f 32ff 	mov.w	r2, #4294967295
 8009220:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009222:	e008      	b.n	8009236 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009224:	4b06      	ldr	r3, [pc, #24]	; (8009240 <prvResetNextTaskUnblockTime+0x40>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	4a04      	ldr	r2, [pc, #16]	; (8009244 <prvResetNextTaskUnblockTime+0x44>)
 8009234:	6013      	str	r3, [r2, #0]
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	bc80      	pop	{r7}
 800923e:	4770      	bx	lr
 8009240:	200004ac 	.word	0x200004ac
 8009244:	20000514 	.word	0x20000514

08009248 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800924e:	4b0b      	ldr	r3, [pc, #44]	; (800927c <xTaskGetSchedulerState+0x34>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d102      	bne.n	800925c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009256:	2301      	movs	r3, #1
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	e008      	b.n	800926e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800925c:	4b08      	ldr	r3, [pc, #32]	; (8009280 <xTaskGetSchedulerState+0x38>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009264:	2302      	movs	r3, #2
 8009266:	607b      	str	r3, [r7, #4]
 8009268:	e001      	b.n	800926e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800926a:	2300      	movs	r3, #0
 800926c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800926e:	687b      	ldr	r3, [r7, #4]
	}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	bc80      	pop	{r7}
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	20000500 	.word	0x20000500
 8009280:	2000051c 	.word	0x2000051c

08009284 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d06e      	beq.n	8009378 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929e:	4b39      	ldr	r3, [pc, #228]	; (8009384 <xTaskPriorityInherit+0x100>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d25e      	bcs.n	8009366 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	db06      	blt.n	80092be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b0:	4b34      	ldr	r3, [pc, #208]	; (8009384 <xTaskPriorityInherit+0x100>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	f1c3 0207 	rsb	r2, r3, #7
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6959      	ldr	r1, [r3, #20]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4a2e      	ldr	r2, [pc, #184]	; (8009388 <xTaskPriorityInherit+0x104>)
 80092d0:	4413      	add	r3, r2
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d101      	bne.n	80092da <xTaskPriorityInherit+0x56>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <xTaskPriorityInherit+0x58>
 80092da:	2300      	movs	r3, #0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d03a      	beq.n	8009356 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe fdbe 	bl	8007e66 <uxListRemove>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d115      	bne.n	800931c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f4:	4924      	ldr	r1, [pc, #144]	; (8009388 <xTaskPriorityInherit+0x104>)
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <xTaskPriorityInherit+0x98>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	2201      	movs	r2, #1
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	43da      	mvns	r2, r3
 8009312:	4b1e      	ldr	r3, [pc, #120]	; (800938c <xTaskPriorityInherit+0x108>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4013      	ands	r3, r2
 8009318:	4a1c      	ldr	r2, [pc, #112]	; (800938c <xTaskPriorityInherit+0x108>)
 800931a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800931c:	4b19      	ldr	r3, [pc, #100]	; (8009384 <xTaskPriorityInherit+0x100>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	2201      	movs	r2, #1
 800932c:	409a      	lsls	r2, r3
 800932e:	4b17      	ldr	r3, [pc, #92]	; (800938c <xTaskPriorityInherit+0x108>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4313      	orrs	r3, r2
 8009334:	4a15      	ldr	r2, [pc, #84]	; (800938c <xTaskPriorityInherit+0x108>)
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4a10      	ldr	r2, [pc, #64]	; (8009388 <xTaskPriorityInherit+0x104>)
 8009346:	441a      	add	r2, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f7fe fd2e 	bl	8007db0 <vListInsertEnd>
 8009354:	e004      	b.n	8009360 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009356:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <xTaskPriorityInherit+0x100>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	e008      	b.n	8009378 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800936a:	4b06      	ldr	r3, [pc, #24]	; (8009384 <xTaskPriorityInherit+0x100>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	429a      	cmp	r2, r3
 8009372:	d201      	bcs.n	8009378 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009374:	2301      	movs	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009378:	68fb      	ldr	r3, [r7, #12]
	}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200003f4 	.word	0x200003f4
 8009388:	200003f8 	.word	0x200003f8
 800938c:	200004fc 	.word	0x200004fc

08009390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d06e      	beq.n	8009484 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093a6:	4b3a      	ldr	r3, [pc, #232]	; (8009490 <xTaskPriorityDisinherit+0x100>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d00a      	beq.n	80093c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60fb      	str	r3, [r7, #12]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60bb      	str	r3, [r7, #8]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e8:	1e5a      	subs	r2, r3, #1
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d044      	beq.n	8009484 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d140      	bne.n	8009484 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	3304      	adds	r3, #4
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fd2d 	bl	8007e66 <uxListRemove>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d115      	bne.n	800943e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009416:	491f      	ldr	r1, [pc, #124]	; (8009494 <xTaskPriorityDisinherit+0x104>)
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <xTaskPriorityDisinherit+0xae>
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	2201      	movs	r2, #1
 800942e:	fa02 f303 	lsl.w	r3, r2, r3
 8009432:	43da      	mvns	r2, r3
 8009434:	4b18      	ldr	r3, [pc, #96]	; (8009498 <xTaskPriorityDisinherit+0x108>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4013      	ands	r3, r2
 800943a:	4a17      	ldr	r2, [pc, #92]	; (8009498 <xTaskPriorityDisinherit+0x108>)
 800943c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944a:	f1c3 0207 	rsb	r2, r3, #7
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009456:	2201      	movs	r2, #1
 8009458:	409a      	lsls	r2, r3
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <xTaskPriorityDisinherit+0x108>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4313      	orrs	r3, r2
 8009460:	4a0d      	ldr	r2, [pc, #52]	; (8009498 <xTaskPriorityDisinherit+0x108>)
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4a08      	ldr	r2, [pc, #32]	; (8009494 <xTaskPriorityDisinherit+0x104>)
 8009472:	441a      	add	r2, r3
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	3304      	adds	r3, #4
 8009478:	4619      	mov	r1, r3
 800947a:	4610      	mov	r0, r2
 800947c:	f7fe fc98 	bl	8007db0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009484:	697b      	ldr	r3, [r7, #20]
	}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200003f4 	.word	0x200003f4
 8009494:	200003f8 	.word	0x200003f8
 8009498:	200004fc 	.word	0x200004fc

0800949c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80094aa:	2301      	movs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 8088 	beq.w	80095c6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10a      	bne.n	80094d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	60fb      	str	r3, [r7, #12]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d902      	bls.n	80094e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	e002      	b.n	80094ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d068      	beq.n	80095c6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d163      	bne.n	80095c6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094fe:	4b34      	ldr	r3, [pc, #208]	; (80095d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	d10a      	bne.n	800951e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	60bb      	str	r3, [r7, #8]
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	db04      	blt.n	800953c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	f1c3 0207 	rsb	r2, r3, #7
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	6959      	ldr	r1, [r3, #20]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4a22      	ldr	r2, [pc, #136]	; (80095d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800954c:	4413      	add	r3, r2
 800954e:	4299      	cmp	r1, r3
 8009550:	d101      	bne.n	8009556 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009556:	2300      	movs	r3, #0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d034      	beq.n	80095c6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	3304      	adds	r3, #4
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fc80 	bl	8007e66 <uxListRemove>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d115      	bne.n	8009598 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009570:	4918      	ldr	r1, [pc, #96]	; (80095d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	2201      	movs	r2, #1
 8009588:	fa02 f303 	lsl.w	r3, r2, r3
 800958c:	43da      	mvns	r2, r3
 800958e:	4b12      	ldr	r3, [pc, #72]	; (80095d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4013      	ands	r3, r2
 8009594:	4a10      	ldr	r2, [pc, #64]	; (80095d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009596:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	2201      	movs	r2, #1
 800959e:	409a      	lsls	r2, r3
 80095a0:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	4a0c      	ldr	r2, [pc, #48]	; (80095d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4a07      	ldr	r2, [pc, #28]	; (80095d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80095b8:	441a      	add	r2, r3
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	3304      	adds	r3, #4
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fe fbf5 	bl	8007db0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095c6:	bf00      	nop
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	200003f4 	.word	0x200003f4
 80095d4:	200003f8 	.word	0x200003f8
 80095d8:	200004fc 	.word	0x200004fc

080095dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <pvTaskIncrementMutexHeldCount+0x24>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d004      	beq.n	80095f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <pvTaskIncrementMutexHeldCount+0x24>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095ee:	3201      	adds	r2, #1
 80095f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80095f2:	4b03      	ldr	r3, [pc, #12]	; (8009600 <pvTaskIncrementMutexHeldCount+0x24>)
 80095f4:	681b      	ldr	r3, [r3, #0]
	}
 80095f6:	4618      	mov	r0, r3
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	200003f4 	.word	0x200003f4

08009604 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800960e:	4b29      	ldr	r3, [pc, #164]	; (80096b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009614:	4b28      	ldr	r3, [pc, #160]	; (80096b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3304      	adds	r3, #4
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fc23 	bl	8007e66 <uxListRemove>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10b      	bne.n	800963e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009626:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	2201      	movs	r2, #1
 800962e:	fa02 f303 	lsl.w	r3, r2, r3
 8009632:	43da      	mvns	r2, r3
 8009634:	4b21      	ldr	r3, [pc, #132]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4013      	ands	r3, r2
 800963a:	4a20      	ldr	r2, [pc, #128]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800963c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009644:	d10a      	bne.n	800965c <prvAddCurrentTaskToDelayedList+0x58>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d007      	beq.n	800965c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800964c:	4b1a      	ldr	r3, [pc, #104]	; (80096b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	481a      	ldr	r0, [pc, #104]	; (80096c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009656:	f7fe fbab 	bl	8007db0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800965a:	e026      	b.n	80096aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4413      	add	r3, r2
 8009662:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009664:	4b14      	ldr	r3, [pc, #80]	; (80096b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	429a      	cmp	r2, r3
 8009672:	d209      	bcs.n	8009688 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009674:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3304      	adds	r3, #4
 800967e:	4619      	mov	r1, r3
 8009680:	4610      	mov	r0, r2
 8009682:	f7fe fbb8 	bl	8007df6 <vListInsert>
}
 8009686:	e010      	b.n	80096aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009688:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7fe fbae 	bl	8007df6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d202      	bcs.n	80096aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096a4:	4a09      	ldr	r2, [pc, #36]	; (80096cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6013      	str	r3, [r2, #0]
}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200004f8 	.word	0x200004f8
 80096b8:	200003f4 	.word	0x200003f4
 80096bc:	200004fc 	.word	0x200004fc
 80096c0:	200004e0 	.word	0x200004e0
 80096c4:	200004b0 	.word	0x200004b0
 80096c8:	200004ac 	.word	0x200004ac
 80096cc:	20000514 	.word	0x20000514

080096d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3b04      	subs	r3, #4
 80096e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3b04      	subs	r3, #4
 80096ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f023 0201 	bic.w	r2, r3, #1
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3b04      	subs	r3, #4
 80096fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009700:	4a08      	ldr	r2, [pc, #32]	; (8009724 <pxPortInitialiseStack+0x54>)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3b14      	subs	r3, #20
 800970a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3b20      	subs	r3, #32
 8009716:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009718:	68fb      	ldr	r3, [r7, #12]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	bc80      	pop	{r7}
 8009722:	4770      	bx	lr
 8009724:	08009729 	.word	0x08009729

08009728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800972e:	2300      	movs	r3, #0
 8009730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009732:	4b12      	ldr	r3, [pc, #72]	; (800977c <prvTaskExitError+0x54>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973a:	d00a      	beq.n	8009752 <prvTaskExitError+0x2a>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	60fb      	str	r3, [r7, #12]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <prvTaskExitError+0x28>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	60bb      	str	r3, [r7, #8]
}
 8009764:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009766:	bf00      	nop
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0fc      	beq.n	8009768 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	bc80      	pop	{r7}
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	2000011c 	.word	0x2000011c

08009780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <pxCurrentTCBConst2>)
 8009782:	6819      	ldr	r1, [r3, #0]
 8009784:	6808      	ldr	r0, [r1, #0]
 8009786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800978a:	f380 8809 	msr	PSP, r0
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8811 	msr	BASEPRI, r0
 800979a:	f04e 0e0d 	orr.w	lr, lr, #13
 800979e:	4770      	bx	lr

080097a0 <pxCurrentTCBConst2>:
 80097a0:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80097a8:	4806      	ldr	r0, [pc, #24]	; (80097c4 <prvPortStartFirstTask+0x1c>)
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	6800      	ldr	r0, [r0, #0]
 80097ae:	f380 8808 	msr	MSP, r0
 80097b2:	b662      	cpsie	i
 80097b4:	b661      	cpsie	f
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	df00      	svc	0
 80097c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097c2:	bf00      	nop
 80097c4:	e000ed08 	.word	0xe000ed08

080097c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097ce:	4b32      	ldr	r3, [pc, #200]	; (8009898 <xPortStartScheduler+0xd0>)
 80097d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	22ff      	movs	r2, #255	; 0xff
 80097de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	4b2a      	ldr	r3, [pc, #168]	; (800989c <xPortStartScheduler+0xd4>)
 80097f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097f6:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <xPortStartScheduler+0xd8>)
 80097f8:	2207      	movs	r2, #7
 80097fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097fc:	e009      	b.n	8009812 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097fe:	4b28      	ldr	r3, [pc, #160]	; (80098a0 <xPortStartScheduler+0xd8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3b01      	subs	r3, #1
 8009804:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <xPortStartScheduler+0xd8>)
 8009806:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	b2db      	uxtb	r3, r3
 8009810:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	b2db      	uxtb	r3, r3
 8009816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981a:	2b80      	cmp	r3, #128	; 0x80
 800981c:	d0ef      	beq.n	80097fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800981e:	4b20      	ldr	r3, [pc, #128]	; (80098a0 <xPortStartScheduler+0xd8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1c3 0307 	rsb	r3, r3, #7
 8009826:	2b04      	cmp	r3, #4
 8009828:	d00a      	beq.n	8009840 <xPortStartScheduler+0x78>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	60bb      	str	r3, [r7, #8]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009840:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <xPortStartScheduler+0xd8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <xPortStartScheduler+0xd8>)
 8009848:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800984a:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <xPortStartScheduler+0xd8>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009852:	4a13      	ldr	r2, [pc, #76]	; (80098a0 <xPortStartScheduler+0xd8>)
 8009854:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	b2da      	uxtb	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <xPortStartScheduler+0xdc>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a10      	ldr	r2, [pc, #64]	; (80098a4 <xPortStartScheduler+0xdc>)
 8009864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800986a:	4b0e      	ldr	r3, [pc, #56]	; (80098a4 <xPortStartScheduler+0xdc>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a0d      	ldr	r2, [pc, #52]	; (80098a4 <xPortStartScheduler+0xdc>)
 8009870:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009874:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009876:	f000 f8b9 	bl	80099ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800987a:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <xPortStartScheduler+0xe0>)
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009880:	f7ff ff92 	bl	80097a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009884:	f7ff faa2 	bl	8008dcc <vTaskSwitchContext>
	prvTaskExitError();
 8009888:	f7ff ff4e 	bl	8009728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	e000e400 	.word	0xe000e400
 800989c:	20000520 	.word	0x20000520
 80098a0:	20000524 	.word	0x20000524
 80098a4:	e000ed20 	.word	0xe000ed20
 80098a8:	2000011c 	.word	0x2000011c

080098ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	607b      	str	r3, [r7, #4]
}
 80098c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098c6:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <vPortEnterCritical+0x58>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	4a0d      	ldr	r2, [pc, #52]	; (8009904 <vPortEnterCritical+0x58>)
 80098ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098d0:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <vPortEnterCritical+0x58>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d10f      	bne.n	80098f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098d8:	4b0b      	ldr	r3, [pc, #44]	; (8009908 <vPortEnterCritical+0x5c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	603b      	str	r3, [r7, #0]
}
 80098f4:	bf00      	nop
 80098f6:	e7fe      	b.n	80098f6 <vPortEnterCritical+0x4a>
	}
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bc80      	pop	{r7}
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	2000011c 	.word	0x2000011c
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009912:	4b11      	ldr	r3, [pc, #68]	; (8009958 <vPortExitCritical+0x4c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <vPortExitCritical+0x24>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	607b      	str	r3, [r7, #4]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009930:	4b09      	ldr	r3, [pc, #36]	; (8009958 <vPortExitCritical+0x4c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3b01      	subs	r3, #1
 8009936:	4a08      	ldr	r2, [pc, #32]	; (8009958 <vPortExitCritical+0x4c>)
 8009938:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <vPortExitCritical+0x4c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d105      	bne.n	800994e <vPortExitCritical+0x42>
 8009942:	2300      	movs	r3, #0
 8009944:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800994c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	bc80      	pop	{r7}
 8009956:	4770      	bx	lr
 8009958:	2000011c 	.word	0x2000011c
 800995c:	00000000 	.word	0x00000000

08009960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009960:	f3ef 8009 	mrs	r0, PSP
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <pxCurrentTCBConst>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009970:	6010      	str	r0, [r2, #0]
 8009972:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009976:	f04f 0050 	mov.w	r0, #80	; 0x50
 800997a:	f380 8811 	msr	BASEPRI, r0
 800997e:	f7ff fa25 	bl	8008dcc <vTaskSwitchContext>
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8811 	msr	BASEPRI, r0
 800998a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800998e:	6819      	ldr	r1, [r3, #0]
 8009990:	6808      	ldr	r0, [r1, #0]
 8009992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009996:	f380 8809 	msr	PSP, r0
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	4770      	bx	lr

080099a0 <pxCurrentTCBConst>:
 80099a0:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099c2:	f7ff f945 	bl	8008c50 <xTaskIncrementTick>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <SysTick_Handler+0x40>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f383 8811 	msr	BASEPRI, r3
}
 80099de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099f0:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <vPortSetupTimerInterrupt+0x30>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099f6:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <vPortSetupTimerInterrupt+0x34>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <vPortSetupTimerInterrupt+0x38>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a09      	ldr	r2, [pc, #36]	; (8009a28 <vPortSetupTimerInterrupt+0x3c>)
 8009a02:	fba2 2303 	umull	r2, r3, r2, r3
 8009a06:	099b      	lsrs	r3, r3, #6
 8009a08:	4a08      	ldr	r2, [pc, #32]	; (8009a2c <vPortSetupTimerInterrupt+0x40>)
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a0e:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <vPortSetupTimerInterrupt+0x30>)
 8009a10:	2207      	movs	r2, #7
 8009a12:	601a      	str	r2, [r3, #0]
}
 8009a14:	bf00      	nop
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bc80      	pop	{r7}
 8009a1a:	4770      	bx	lr
 8009a1c:	e000e010 	.word	0xe000e010
 8009a20:	e000e018 	.word	0xe000e018
 8009a24:	20000000 	.word	0x20000000
 8009a28:	10624dd3 	.word	0x10624dd3
 8009a2c:	e000e014 	.word	0xe000e014

08009a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a3c:	f7ff f85e 	bl	8008afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a40:	4b58      	ldr	r3, [pc, #352]	; (8009ba4 <pvPortMalloc+0x174>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a48:	f000 f910 	bl	8009c6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a4c:	4b56      	ldr	r3, [pc, #344]	; (8009ba8 <pvPortMalloc+0x178>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 808e 	bne.w	8009b76 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01d      	beq.n	8009a9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a60:	2208      	movs	r2, #8
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4413      	add	r3, r2
 8009a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d014      	beq.n	8009a9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f023 0307 	bic.w	r3, r3, #7
 8009a78:	3308      	adds	r3, #8
 8009a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <pvPortMalloc+0x6c>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	617b      	str	r3, [r7, #20]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d069      	beq.n	8009b76 <pvPortMalloc+0x146>
 8009aa2:	4b42      	ldr	r3, [pc, #264]	; (8009bac <pvPortMalloc+0x17c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d864      	bhi.n	8009b76 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aac:	4b40      	ldr	r3, [pc, #256]	; (8009bb0 <pvPortMalloc+0x180>)
 8009aae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ab0:	4b3f      	ldr	r3, [pc, #252]	; (8009bb0 <pvPortMalloc+0x180>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ab6:	e004      	b.n	8009ac2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d903      	bls.n	8009ad4 <pvPortMalloc+0xa4>
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1f1      	bne.n	8009ab8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ad4:	4b33      	ldr	r3, [pc, #204]	; (8009ba4 <pvPortMalloc+0x174>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d04b      	beq.n	8009b76 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	4413      	add	r3, r2
 8009ae6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	1ad2      	subs	r2, r2, r3
 8009af8:	2308      	movs	r3, #8
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d91f      	bls.n	8009b40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4413      	add	r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <pvPortMalloc+0xf8>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	613b      	str	r3, [r7, #16]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b3a:	69b8      	ldr	r0, [r7, #24]
 8009b3c:	f000 f8f8 	bl	8009d30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b40:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <pvPortMalloc+0x17c>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	4a18      	ldr	r2, [pc, #96]	; (8009bac <pvPortMalloc+0x17c>)
 8009b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b4e:	4b17      	ldr	r3, [pc, #92]	; (8009bac <pvPortMalloc+0x17c>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	4b18      	ldr	r3, [pc, #96]	; (8009bb4 <pvPortMalloc+0x184>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d203      	bcs.n	8009b62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b5a:	4b14      	ldr	r3, [pc, #80]	; (8009bac <pvPortMalloc+0x17c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a15      	ldr	r2, [pc, #84]	; (8009bb4 <pvPortMalloc+0x184>)
 8009b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b76:	f7fe ffcf 	bl	8008b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	f003 0307 	and.w	r3, r3, #7
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00a      	beq.n	8009b9a <pvPortMalloc+0x16a>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	60fb      	str	r3, [r7, #12]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <pvPortMalloc+0x168>
	return pvReturn;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3728      	adds	r7, #40	; 0x28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20001900 	.word	0x20001900
 8009ba8:	2000190c 	.word	0x2000190c
 8009bac:	20001904 	.word	0x20001904
 8009bb0:	200018f8 	.word	0x200018f8
 8009bb4:	20001908 	.word	0x20001908

08009bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d048      	beq.n	8009c5c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bca:	2308      	movs	r3, #8
 8009bcc:	425b      	negs	r3, r3
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <vPortFree+0xac>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4013      	ands	r3, r2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <vPortFree+0x44>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60fb      	str	r3, [r7, #12]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00a      	beq.n	8009c1a <vPortFree+0x62>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	60bb      	str	r3, [r7, #8]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <vPortFree+0xac>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4013      	ands	r3, r2
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d019      	beq.n	8009c5c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d115      	bne.n	8009c5c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	4b0b      	ldr	r3, [pc, #44]	; (8009c64 <vPortFree+0xac>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	43db      	mvns	r3, r3
 8009c3a:	401a      	ands	r2, r3
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c40:	f7fe ff5c 	bl	8008afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <vPortFree+0xb0>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	4a06      	ldr	r2, [pc, #24]	; (8009c68 <vPortFree+0xb0>)
 8009c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c52:	6938      	ldr	r0, [r7, #16]
 8009c54:	f000 f86c 	bl	8009d30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c58:	f7fe ff5e 	bl	8008b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c5c:	bf00      	nop
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	2000190c 	.word	0x2000190c
 8009c68:	20001904 	.word	0x20001904

08009c6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c72:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009c76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c78:	4b27      	ldr	r3, [pc, #156]	; (8009d18 <prvHeapInit+0xac>)
 8009c7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00c      	beq.n	8009ca0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3307      	adds	r3, #7
 8009c8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0307 	bic.w	r3, r3, #7
 8009c92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	4a1f      	ldr	r2, [pc, #124]	; (8009d18 <prvHeapInit+0xac>)
 8009c9c:	4413      	add	r3, r2
 8009c9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ca4:	4a1d      	ldr	r2, [pc, #116]	; (8009d1c <prvHeapInit+0xb0>)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009caa:	4b1c      	ldr	r3, [pc, #112]	; (8009d1c <prvHeapInit+0xb0>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cb8:	2208      	movs	r2, #8
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f023 0307 	bic.w	r3, r3, #7
 8009cc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4a15      	ldr	r2, [pc, #84]	; (8009d20 <prvHeapInit+0xb4>)
 8009ccc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cce:	4b14      	ldr	r3, [pc, #80]	; (8009d20 <prvHeapInit+0xb4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <prvHeapInit+0xb4>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	1ad2      	subs	r2, r2, r3
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009cec:	4b0c      	ldr	r3, [pc, #48]	; (8009d20 <prvHeapInit+0xb4>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a0a      	ldr	r2, [pc, #40]	; (8009d24 <prvHeapInit+0xb8>)
 8009cfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <prvHeapInit+0xbc>)
 8009d02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d04:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <prvHeapInit+0xc0>)
 8009d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d0a:	601a      	str	r2, [r3, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000528 	.word	0x20000528
 8009d1c:	200018f8 	.word	0x200018f8
 8009d20:	20001900 	.word	0x20001900
 8009d24:	20001908 	.word	0x20001908
 8009d28:	20001904 	.word	0x20001904
 8009d2c:	2000190c 	.word	0x2000190c

08009d30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d38:	4b27      	ldr	r3, [pc, #156]	; (8009dd8 <prvInsertBlockIntoFreeList+0xa8>)
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	e002      	b.n	8009d44 <prvInsertBlockIntoFreeList+0x14>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d8f7      	bhi.n	8009d3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	4413      	add	r3, r2
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d108      	bne.n	8009d72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	441a      	add	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	441a      	add	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d118      	bne.n	8009db8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <prvInsertBlockIntoFreeList+0xac>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d00d      	beq.n	8009dae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	441a      	add	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	e008      	b.n	8009dc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dae:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <prvInsertBlockIntoFreeList+0xac>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	e003      	b.n	8009dc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d002      	beq.n	8009dce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr
 8009dd8:	200018f8 	.word	0x200018f8
 8009ddc:	20001900 	.word	0x20001900

08009de0 <cnc_init>:

#include "cnc_2d.h"



void cnc_init(void){
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0

	Motor1.Conf.ENB = 0;
 8009de4:	4b23      	ldr	r3, [pc, #140]	; (8009e74 <cnc_init+0x94>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Motor1.Conf.MS1 = 0;
 8009dec:	4b21      	ldr	r3, [pc, #132]	; (8009e74 <cnc_init+0x94>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	Motor1.Conf.MS2 = 0;
 8009df4:	4b1f      	ldr	r3, [pc, #124]	; (8009e74 <cnc_init+0x94>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Motor1.Conf.MS3 = 0;
 8009dfc:	4b1d      	ldr	r3, [pc, #116]	; (8009e74 <cnc_init+0x94>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Motor1.Conf.DIR = 0;
 8009e04:	4b1b      	ldr	r3, [pc, #108]	; (8009e74 <cnc_init+0x94>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Motor1.Status = ST_OFF;
 8009e0c:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <cnc_init+0x94>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Motor1.tar_steps = 0;
 8009e14:	4b17      	ldr	r3, [pc, #92]	; (8009e74 <cnc_init+0x94>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	63da      	str	r2, [r3, #60]	; 0x3c
	Motor1.Steps_count = 0;
 8009e1a:	4b16      	ldr	r3, [pc, #88]	; (8009e74 <cnc_init+0x94>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38

	Motor2.Conf.ENB = 0;
 8009e20:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <cnc_init+0x98>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Motor2.Conf.MS1 = 0;
 8009e28:	4b13      	ldr	r3, [pc, #76]	; (8009e78 <cnc_init+0x98>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	Motor2.Conf.MS2 = 0;
 8009e30:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <cnc_init+0x98>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Motor2.Conf.MS3 = 0;
 8009e38:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <cnc_init+0x98>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Motor2.Conf.DIR = 0;
 8009e40:	4b0d      	ldr	r3, [pc, #52]	; (8009e78 <cnc_init+0x98>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Motor2.Status = ST_OFF;
 8009e48:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <cnc_init+0x98>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Motor2.tar_steps = 0;
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <cnc_init+0x98>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	63da      	str	r2, [r3, #60]	; 0x3c
	Motor2.Steps_count = 0;
 8009e56:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <cnc_init+0x98>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38

	StM_Pin_Conf(&Motor1,&Motor2);
 8009e5c:	4906      	ldr	r1, [pc, #24]	; (8009e78 <cnc_init+0x98>)
 8009e5e:	4805      	ldr	r0, [pc, #20]	; (8009e74 <cnc_init+0x94>)
 8009e60:	f000 f892 	bl	8009f88 <StM_Pin_Conf>
	StM_Conf_Init(&Motor1);
 8009e64:	4803      	ldr	r0, [pc, #12]	; (8009e74 <cnc_init+0x94>)
 8009e66:	f000 f8e9 	bl	800a03c <StM_Conf_Init>
	StM_Conf_Init(&Motor2);
 8009e6a:	4803      	ldr	r0, [pc, #12]	; (8009e78 <cnc_init+0x98>)
 8009e6c:	f000 f8e6 	bl	800a03c <StM_Conf_Init>
}
 8009e70:	bf00      	nop
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	200026d0 	.word	0x200026d0
 8009e78:	20002100 	.word	0x20002100

08009e7c <cnc_DriveM>:


void cnc_DriveM(Step_Driver_Handler* Motor){
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	if (Motor->Status == ST_ORDER){
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d117      	bne.n	8009ebe <cnc_DriveM+0x42>
			  STM_Step(Motor);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f92a 	bl	800a0e8 <STM_Step>
			  if (Motor->Steps_count == Motor->tar_steps){
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d10e      	bne.n	8009ebe <cnc_DriveM+0x42>
					  Motor->Steps_count = 0;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	639a      	str	r2, [r3, #56]	; 0x38
					  Motor->Status = ST_OFF;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					  HAL_GPIO_WritePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP,GPIO_PIN_RESET);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f7f7 f816 	bl	8000eea <HAL_GPIO_WritePin>
			  	  }
	}
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <Servo_Init>:
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Init(Servo_Handle_t* servo,TIM_HandleTypeDef* ptim)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
	servo->ptim = ptim;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	601a      	str	r2, [r3, #0]
	servo->curr_pos = 0;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	711a      	strb	r2, [r3, #4]
	servo->Status = OFF;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	715a      	strb	r2, [r3, #5]
	Servo_Goto(servo, 0);
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f805 	bl	8009ef4 <Servo_Goto>


}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <Servo_Goto>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Goto(Servo_Handle_t* servo,uint8_t angle){
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
		uint16_t Period = servo->ptim->Init.Period;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	81fb      	strh	r3, [r7, #14]
		uint16_t duty = angle *( ( (Period / 10) - OFFSET) / MAX_ANGLE )+ OFFSET;
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	89fb      	ldrh	r3, [r7, #14]
 8009f0e:	4911      	ldr	r1, [pc, #68]	; (8009f54 <Servo_Goto+0x60>)
 8009f10:	fba1 1303 	umull	r1, r3, r1, r3
 8009f14:	08db      	lsrs	r3, r3, #3
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	3bfa      	subs	r3, #250	; 0xfa
 8009f1a:	490f      	ldr	r1, [pc, #60]	; (8009f58 <Servo_Goto+0x64>)
 8009f1c:	fb81 0103 	smull	r0, r1, r1, r3
 8009f20:	4419      	add	r1, r3
 8009f22:	11c9      	asrs	r1, r1, #7
 8009f24:	17db      	asrs	r3, r3, #31
 8009f26:	1acb      	subs	r3, r1, r3
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	fb03 f302 	mul.w	r3, r3, r2
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	33fa      	adds	r3, #250	; 0xfa
 8009f32:	81bb      	strh	r3, [r7, #12]
		servo->curr_pos = angle;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	711a      	strb	r2, [r3, #4]
		Servo_Start(servo);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f80e 	bl	8009f5c <Servo_Start>
		__HAL_TIM_SET_COMPARE(servo->ptim,TIM_CHANNEL_1,duty);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	89ba      	ldrh	r2, [r7, #12]
 8009f48:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009f4a:	bf00      	nop
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	cccccccd 	.word	0xcccccccd
 8009f58:	b60b60b7 	.word	0xb60b60b7

08009f5c <Servo_Start>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Start(Servo_Handle_t* servo){
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
	if(servo->Status == OFF ){
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	795b      	ldrb	r3, [r3, #5]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d108      	bne.n	8009f7e <Servo_Start+0x22>
		HAL_TIM_PWM_Start(servo->ptim, TIM_CHANNEL_1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f9 fb62 	bl	800363c <HAL_TIM_PWM_Start>
		servo->Status = ON;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	715a      	strb	r2, [r3, #5]
	}
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <StM_Pin_Conf>:



#include "Step_Driver.h"

void StM_Pin_Conf(Step_Driver_Handler * Motor1,Step_Driver_Handler * Motor2){
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]

	// pin B9 en
	Motor1->Pins.port_ENB = GPIOB;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a27      	ldr	r2, [pc, #156]	; (800a034 <StM_Pin_Conf+0xac>)
 8009f96:	601a      	str	r2, [r3, #0]
	Motor1->Pins.pin_ENB = GPIO_PIN_9;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f9e:	809a      	strh	r2, [r3, #4]
	// pin 8 MS1 : 0
	Motor1->Pins.port_MS1 = GPIOB;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a24      	ldr	r2, [pc, #144]	; (800a034 <StM_Pin_Conf+0xac>)
 8009fa4:	609a      	str	r2, [r3, #8]
	Motor1->Pins.pin_MS1 = GPIO_PIN_8;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fac:	819a      	strh	r2, [r3, #12]
	// pin 7 MS2 : 0
	Motor1->Pins.port_MS2 = GPIOB;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a20      	ldr	r2, [pc, #128]	; (800a034 <StM_Pin_Conf+0xac>)
 8009fb2:	611a      	str	r2, [r3, #16]
	Motor1->Pins.pin_MS2 = GPIO_PIN_7;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2280      	movs	r2, #128	; 0x80
 8009fb8:	829a      	strh	r2, [r3, #20]
	// pin 6 MS3 : 0
	Motor1->Pins.port_MS3 = GPIOB;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a1d      	ldr	r2, [pc, #116]	; (800a034 <StM_Pin_Conf+0xac>)
 8009fbe:	619a      	str	r2, [r3, #24]
	Motor1->Pins.pin_MS3 = GPIO_PIN_6;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2240      	movs	r2, #64	; 0x40
 8009fc4:	839a      	strh	r2, [r3, #28]
	// pin 4 DIR : 0
	Motor1->Pins.port_DIR = GPIOB;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a1a      	ldr	r2, [pc, #104]	; (800a034 <StM_Pin_Conf+0xac>)
 8009fca:	621a      	str	r2, [r3, #32]
	Motor1->Pins.pin_DIR = GPIO_PIN_4;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2210      	movs	r2, #16
 8009fd0:	849a      	strh	r2, [r3, #36]	; 0x24
	// pin B5 Step
	Motor1->Pins.port_STEP = GPIOB;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a17      	ldr	r2, [pc, #92]	; (800a034 <StM_Pin_Conf+0xac>)
 8009fd6:	629a      	str	r2, [r3, #40]	; 0x28
	Motor1->Pins.pin_STEP = GPIO_PIN_5;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	859a      	strh	r2, [r3, #44]	; 0x2c



	// pin B9 EN
	Motor2->Pins.port_ENB = GPIOB;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	4a14      	ldr	r2, [pc, #80]	; (800a034 <StM_Pin_Conf+0xac>)
 8009fe2:	601a      	str	r2, [r3, #0]
	Motor2->Pins.pin_ENB = GPIO_PIN_9;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fea:	809a      	strh	r2, [r3, #4]
	// pin A7 MS1
	Motor2->Pins.port_MS1 = GPIOA;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	4a12      	ldr	r2, [pc, #72]	; (800a038 <StM_Pin_Conf+0xb0>)
 8009ff0:	609a      	str	r2, [r3, #8]
	Motor2->Pins.pin_MS1 = GPIO_PIN_7;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2280      	movs	r2, #128	; 0x80
 8009ff6:	819a      	strh	r2, [r3, #12]
	// pin A6 MS2
	Motor2->Pins.port_MS2 = GPIOA;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	4a0f      	ldr	r2, [pc, #60]	; (800a038 <StM_Pin_Conf+0xb0>)
 8009ffc:	611a      	str	r2, [r3, #16]
	Motor2->Pins.pin_MS2 = GPIO_PIN_6;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2240      	movs	r2, #64	; 0x40
 800a002:	829a      	strh	r2, [r3, #20]
	// pin A5 MS3
	Motor2->Pins.port_MS3 = GPIOA;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	4a0c      	ldr	r2, [pc, #48]	; (800a038 <StM_Pin_Conf+0xb0>)
 800a008:	619a      	str	r2, [r3, #24]
	Motor2->Pins.pin_MS3 = GPIO_PIN_5;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2220      	movs	r2, #32
 800a00e:	839a      	strh	r2, [r3, #28]
	// pin A3 DIR
	Motor2->Pins.port_DIR = GPIOA;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	4a09      	ldr	r2, [pc, #36]	; (800a038 <StM_Pin_Conf+0xb0>)
 800a014:	621a      	str	r2, [r3, #32]
	Motor2->Pins.pin_DIR = GPIO_PIN_3;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2208      	movs	r2, #8
 800a01a:	849a      	strh	r2, [r3, #36]	; 0x24
	// pin A4 Step
	Motor2->Pins.port_STEP = GPIOA;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	4a06      	ldr	r2, [pc, #24]	; (800a038 <StM_Pin_Conf+0xb0>)
 800a020:	629a      	str	r2, [r3, #40]	; 0x28
	Motor2->Pins.pin_STEP = GPIO_PIN_4;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2210      	movs	r2, #16
 800a026:	859a      	strh	r2, [r3, #44]	; 0x2c

}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bc80      	pop	{r7}
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	40010c00 	.word	0x40010c00
 800a038:	40010800 	.word	0x40010800

0800a03c <StM_Conf_Init>:
	Motor2->Pins.port_STEP = GPIOA;
	Motor2->Pins.pin_STEP = GPIO_PIN_4;

}

void StM_Conf_Init(Step_Driver_Handler * Motor){
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]

	// pin ENB
	HAL_GPIO_WritePin(Motor->Pins.port_ENB, Motor->Pins.pin_ENB, Motor->Conf.ENB);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	8899      	ldrh	r1, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a052:	461a      	mov	r2, r3
 800a054:	f7f6 ff49 	bl	8000eea <HAL_GPIO_WritePin>
	// pin MS1
	HAL_GPIO_WritePin(Motor->Pins.port_MS1, Motor->Pins.pin_MS1, Motor->Conf.MS1);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6898      	ldr	r0, [r3, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	8999      	ldrh	r1, [r3, #12]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a066:	461a      	mov	r2, r3
 800a068:	f7f6 ff3f 	bl	8000eea <HAL_GPIO_WritePin>
	// pin MS2
	HAL_GPIO_WritePin(Motor->Pins.port_MS2, Motor->Pins.pin_MS2, Motor->Conf.MS2);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6918      	ldr	r0, [r3, #16]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	8a99      	ldrh	r1, [r3, #20]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a07a:	461a      	mov	r2, r3
 800a07c:	f7f6 ff35 	bl	8000eea <HAL_GPIO_WritePin>
	// pin MS3
	HAL_GPIO_WritePin(Motor->Pins.port_MS3, Motor->Pins.pin_MS3, Motor->Conf.MS3);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6998      	ldr	r0, [r3, #24]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8b99      	ldrh	r1, [r3, #28]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a08e:	461a      	mov	r2, r3
 800a090:	f7f6 ff2b 	bl	8000eea <HAL_GPIO_WritePin>
	// pin DIR
	HAL_GPIO_WritePin(Motor->Pins.port_DIR, Motor->Pins.pin_DIR, Motor->Conf.DIR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a18      	ldr	r0, [r3, #32]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f7f6 ff21 	bl	8000eea <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP, GPIO_PIN_RESET);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f7f6 ff19 	bl	8000eea <HAL_GPIO_WritePin>

}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <GoToStep>:
void GoToStep(Step_Driver_Handler * Motor,uint16_t tar_Step,uint8_t acc)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	807b      	strh	r3, [r7, #2]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	707b      	strb	r3, [r7, #1]
	Motor->Status = ST_ORDER;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Motor->tar_steps = tar_Step;
 800a0d8:	887a      	ldrh	r2, [r7, #2]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bc80      	pop	{r7}
 800a0e6:	4770      	bx	lr

0800a0e8 <STM_Step>:

void STM_Step(Step_Driver_Handler* Motor){
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7f6 ff0d 	bl	8000f1a <HAL_GPIO_TogglePin>
	if (HAL_GPIO_ReadPin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP) == GPIO_PIN_SET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7f6 fed6 	bl	8000ebc <HAL_GPIO_ReadPin>
 800a110:	4603      	mov	r3, r0
 800a112:	2b01      	cmp	r3, #1
 800a114:	d104      	bne.n	800a120 <STM_Step+0x38>
		Motor->Steps_count++;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38

}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <Com_Init>:
 * @fn					- Com_Init
 *
 * @Note				- Init the Com Stack
 *
 **************************************************************************/
void Com_Init(){
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
	Buf_Init(&Com_TXstorage) ;
 800a12c:	4807      	ldr	r0, [pc, #28]	; (800a14c <Com_Init+0x24>)
 800a12e:	f000 f891 	bl	800a254 <Buf_Init>
	Buf_Init(&Com_RXstorage) ;
 800a132:	4807      	ldr	r0, [pc, #28]	; (800a150 <Com_Init+0x28>)
 800a134:	f000 f88e 	bl	800a254 <Buf_Init>
	memset(buffer,'\0',64);
 800a138:	2240      	movs	r2, #64	; 0x40
 800a13a:	2100      	movs	r1, #0
 800a13c:	4805      	ldr	r0, [pc, #20]	; (800a154 <Com_Init+0x2c>)
 800a13e:	f000 fe97 	bl	800ae70 <memset>
	MX_USB_DEVICE_Init();
 800a142:	f000 f9ab 	bl	800a49c <MX_USB_DEVICE_Init>
}
 800a146:	bf00      	nop
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20001bc8 	.word	0x20001bc8
 800a150:	20001e64 	.word	0x20001e64
 800a154:	20002760 	.word	0x20002760

0800a158 <Com_Transmit>:
 * @fn					- Com_Transmit
 *
 * @Note				- Transmit Message
 *
 **************************************************************************/
void Com_Transmit(){
 800a158:	b590      	push	{r4, r7, lr}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	607b      	str	r3, [r7, #4]

	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 800a162:	e014      	b.n	800a18e <Com_Transmit+0x36>
		ptr = Buf_Dequeue(&Com_TXstorage);
 800a164:	480f      	ldr	r0, [pc, #60]	; (800a1a4 <Com_Transmit+0x4c>)
 800a166:	f000 f901 	bl	800a36c <Buf_Dequeue>
 800a16a:	6078      	str	r0, [r7, #4]
		while(CDC_Transmit_FS((uint8_t*) ptr->data, strlen(ptr->data)+1) != USBD_OK);
 800a16c:	bf00      	nop
 800a16e:	687c      	ldr	r4, [r7, #4]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4618      	mov	r0, r3
 800a174:	f7f5 ffec 	bl	8000150 <strlen>
 800a178:	4603      	mov	r3, r0
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	3301      	adds	r3, #1
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4619      	mov	r1, r3
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fa64 	bl	800a650 <CDC_Transmit_FS>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1ef      	bne.n	800a16e <Com_Transmit+0x16>
	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 800a18e:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <Com_Transmit+0x4c>)
 800a190:	f000 f972 	bl	800a478 <Buf_IsEmpty>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e4      	bne.n	800a164 <Com_Transmit+0xc>
	}
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd90      	pop	{r4, r7, pc}
 800a1a4:	20001bc8 	.word	0x20001bc8

0800a1a8 <Com_Receive>:
 * @fn					- Com_Receive
 *
 * @Note				- Store message received in the RXbuffer
 *
 **************************************************************************/
void Com_Receive(){
 800a1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1aa:	b093      	sub	sp, #76	; 0x4c
 800a1ac:	af00      	add	r7, sp, #0
	Data_t ptr;

	if (Buf_IsFull(&Com_RXstorage) != BUF_FULL && flag_data_received == 1 ){
 800a1ae:	481e      	ldr	r0, [pc, #120]	; (800a228 <Com_Receive+0x80>)
 800a1b0:	f000 f940 	bl	800a434 <Buf_IsFull>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d01c      	beq.n	800a1f4 <Com_Receive+0x4c>
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	; (800a22c <Com_Receive+0x84>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d118      	bne.n	800a1f4 <Com_Receive+0x4c>
		memcpy(ptr.data,buffer,MAX_SIZE_MESSAGE);
 800a1c2:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <Com_Receive+0x88>)
 800a1c4:	461c      	mov	r4, r3
 800a1c6:	1d3e      	adds	r6, r7, #4
 800a1c8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800a1cc:	4635      	mov	r5, r6
 800a1ce:	4623      	mov	r3, r4
 800a1d0:	6818      	ldr	r0, [r3, #0]
 800a1d2:	6859      	ldr	r1, [r3, #4]
 800a1d4:	689a      	ldr	r2, [r3, #8]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1da:	3410      	adds	r4, #16
 800a1dc:	3610      	adds	r6, #16
 800a1de:	4564      	cmp	r4, ip
 800a1e0:	d1f4      	bne.n	800a1cc <Com_Receive+0x24>
		flag_data_received = 0;
 800a1e2:	4b12      	ldr	r3, [pc, #72]	; (800a22c <Com_Receive+0x84>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	701a      	strb	r2, [r3, #0]
		Buf_Queue(&Com_RXstorage,&ptr);
 800a1e8:	1d3b      	adds	r3, r7, #4
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	480e      	ldr	r0, [pc, #56]	; (800a228 <Com_Receive+0x80>)
 800a1ee:	f000 f861 	bl	800a2b4 <Buf_Queue>
	else if (Buf_IsFull(&Com_RXstorage) == BUF_FULL && flag_data_received == 1){
				while(CDC_Transmit_FS((uint8_t*) "RX:Full\n", 8) != USBD_OK);
				flag_data_received = 0;
			}

}
 800a1f2:	e014      	b.n	800a21e <Com_Receive+0x76>
	else if (Buf_IsFull(&Com_RXstorage) == BUF_FULL && flag_data_received == 1){
 800a1f4:	480c      	ldr	r0, [pc, #48]	; (800a228 <Com_Receive+0x80>)
 800a1f6:	f000 f91d 	bl	800a434 <Buf_IsFull>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d10e      	bne.n	800a21e <Com_Receive+0x76>
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <Com_Receive+0x84>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d10a      	bne.n	800a21e <Com_Receive+0x76>
				while(CDC_Transmit_FS((uint8_t*) "RX:Full\n", 8) != USBD_OK);
 800a208:	bf00      	nop
 800a20a:	2108      	movs	r1, #8
 800a20c:	4809      	ldr	r0, [pc, #36]	; (800a234 <Com_Receive+0x8c>)
 800a20e:	f000 fa1f 	bl	800a650 <CDC_Transmit_FS>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1f8      	bne.n	800a20a <Com_Receive+0x62>
				flag_data_received = 0;
 800a218:	4b04      	ldr	r3, [pc, #16]	; (800a22c <Com_Receive+0x84>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
}
 800a21e:	bf00      	nop
 800a220:	374c      	adds	r7, #76	; 0x4c
 800a222:	46bd      	mov	sp, r7
 800a224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a226:	bf00      	nop
 800a228:	20001e64 	.word	0x20001e64
 800a22c:	20001910 	.word	0x20001910
 800a230:	20002760 	.word	0x20002760
 800a234:	0800aeec 	.word	0x0800aeec

0800a238 <G_Code_Init>:
 *      Author: soufiane
 */

#include "G_code.h"

void G_Code_Init(){
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
	Buf_Init(&Job_Stack);
 800a23c:	4803      	ldr	r0, [pc, #12]	; (800a24c <G_Code_Init+0x14>)
 800a23e:	f000 f809 	bl	800a254 <Buf_Init>
	Buf_Init(&Gcode_Stack);
 800a242:	4803      	ldr	r0, [pc, #12]	; (800a250 <G_Code_Init+0x18>)
 800a244:	f000 f806 	bl	800a254 <Buf_Init>
}
 800a248:	bf00      	nop
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20002434 	.word	0x20002434
 800a250:	20002144 	.word	0x20002144

0800a254 <Buf_Init>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Buf_Init(Buf_Handler_t* buf){
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	for (int index = 0;index<BUF_SIZE;index++)
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e011      	b.n	800a286 <Buf_Init+0x32>
		memset(buf->data[buf->rear].data,'\0',MESSAGE_SIZE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a268:	461a      	mov	r2, r3
 800a26a:	4613      	mov	r3, r2
 800a26c:	015b      	lsls	r3, r3, #5
 800a26e:	4413      	add	r3, r2
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	4413      	add	r3, r2
 800a276:	2240      	movs	r2, #64	; 0x40
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fdf8 	bl	800ae70 <memset>
	for (int index = 0;index<BUF_SIZE;index++)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b09      	cmp	r3, #9
 800a28a:	ddea      	ble.n	800a262 <Buf_Init+0xe>
	buf->front = -1;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	22ff      	movs	r2, #255	; 0xff
 800a290:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	buf->rear = -1;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	22ff      	movs	r2, #255	; 0xff
 800a298:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	buf->mutex = xSemaphoreCreateMutex();
 800a29c:	2001      	movs	r0, #1
 800a29e:	f7fd feea 	bl	8008076 <xQueueCreateMutex>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	if (buf->mutex == NULL){

	}
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <Buf_Queue>:
 * @return				- HAL_StatusTypeDef
 *
 * @Note				- None
 *
 **************************************************************************/
HAL_StatusTypeDef Buf_Queue(Buf_Handler_t* buf,Data_t* ptr){
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]

	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd ffec 	bl	80082a4 <xQueueSemaphoreTake>
	if (Buf_IsFull(buf) == BUF_FULL ){
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f8b1 	bl	800a434 <Buf_IsFull>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d109      	bne.n	800a2ec <Buf_Queue+0x38>
		xSemaphoreGive(buf->mutex);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a2de:	2300      	movs	r3, #0
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	f7fd fee0 	bl	80080a8 <xQueueGenericSend>
		return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e039      	b.n	800a360 <Buf_Queue+0xac>
	}
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f8c3 	bl	800a478 <Buf_IsEmpty>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d108      	bne.n	800a30a <Buf_Queue+0x56>
		buf->front = 0;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		buf->rear = 0;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a308:	e012      	b.n	800a330 <Buf_Queue+0x7c>
	}else{
		buf->front = (buf->front+1) % BUF_SIZE ;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	4b15      	ldr	r3, [pc, #84]	; (800a368 <Buf_Queue+0xb4>)
 800a314:	fb83 1302 	smull	r1, r3, r3, r2
 800a318:	1099      	asrs	r1, r3, #2
 800a31a:	17d3      	asrs	r3, r2, #31
 800a31c:	1ac9      	subs	r1, r1, r3
 800a31e:	460b      	mov	r3, r1
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	440b      	add	r3, r1
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	1ad1      	subs	r1, r2, r3
 800a328:	b24a      	sxtb	r2, r1
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	}
	memcpy(&buf->data[buf->front],ptr,sizeof(Data_t));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a336:	461a      	mov	r2, r3
 800a338:	4613      	mov	r3, r2
 800a33a:	015b      	lsls	r3, r3, #5
 800a33c:	4413      	add	r3, r2
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	4413      	add	r3, r2
 800a344:	2242      	movs	r2, #66	; 0x42
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fd83 	bl	800ae54 <memcpy>
	xSemaphoreGive(buf->mutex);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	f7fd fea5 	bl	80080a8 <xQueueGenericSend>
	return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	66666667 	.word	0x66666667

0800a36c <Buf_Dequeue>:
 * @fn					- Buf_Dequeue
 *
 * @Note				- None
 *
 **************************************************************************/
Data_t* Buf_Dequeue(Buf_Handler_t* buf){
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a37a:	2101      	movs	r1, #1
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fd ff91 	bl	80082a4 <xQueueSemaphoreTake>
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f878 	bl	800a478 <Buf_IsEmpty>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <Buf_Dequeue+0x36>
		xSemaphoreGive(buf->mutex);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a394:	2300      	movs	r3, #0
 800a396:	2200      	movs	r2, #0
 800a398:	2100      	movs	r1, #0
 800a39a:	f7fd fe85 	bl	80080a8 <xQueueGenericSend>
		return NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e03f      	b.n	800a422 <Buf_Dequeue+0xb6>
	}
	static Data_t rt;
	memcpy(&rt,&(buf->data[buf->rear]),sizeof(Data_t));
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	015b      	lsls	r3, r3, #5
 800a3ae:	4413      	add	r3, r2
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	4a1d      	ldr	r2, [pc, #116]	; (800a42c <Buf_Dequeue+0xc0>)
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	2342      	movs	r3, #66	; 0x42
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f000 fd48 	bl	800ae54 <memcpy>
	if (buf->front == buf->rear){
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f993 2298 	ldrsb.w	r2, [r3, #664]	; 0x298
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d10a      	bne.n	800a3ea <Buf_Dequeue+0x7e>
		buf->front = buf->rear = -1;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	22ff      	movs	r2, #255	; 0xff
 800a3d8:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f993 2299 	ldrsb.w	r2, [r3, #665]	; 0x299
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800a3e8:	e012      	b.n	800a410 <Buf_Dequeue+0xa4>
	}else {
		buf->rear = (buf->rear + 1) % BUF_SIZE;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <Buf_Dequeue+0xc4>)
 800a3f4:	fb83 1302 	smull	r1, r3, r3, r2
 800a3f8:	1099      	asrs	r1, r3, #2
 800a3fa:	17d3      	asrs	r3, r2, #31
 800a3fc:	1ac9      	subs	r1, r1, r3
 800a3fe:	460b      	mov	r3, r1
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	440b      	add	r3, r1
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	1ad1      	subs	r1, r2, r3
 800a408:	b24a      	sxtb	r2, r1
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	}
	xSemaphoreGive(buf->mutex);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a416:	2300      	movs	r3, #0
 800a418:	2200      	movs	r2, #0
 800a41a:	2100      	movs	r1, #0
 800a41c:	f7fd fe44 	bl	80080a8 <xQueueGenericSend>
	return &rt ;
 800a420:	4b02      	ldr	r3, [pc, #8]	; (800a42c <Buf_Dequeue+0xc0>)
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20001914 	.word	0x20001914
 800a430:	66666667 	.word	0x66666667

0800a434 <Buf_IsFull>:
 * @fn					- Buf_IsFull
 *
 * @Note				- func to check if the Buf is full
 *
 **************************************************************************/
Buf_Status_t Buf_IsFull(Buf_Handler_t* buf){
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	return ((buf->front+1) % BUF_SIZE) == buf->rear;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a442:	1c59      	adds	r1, r3, #1
 800a444:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <Buf_IsFull+0x40>)
 800a446:	fb83 2301 	smull	r2, r3, r3, r1
 800a44a:	109a      	asrs	r2, r3, #2
 800a44c:	17cb      	asrs	r3, r1, #31
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	1aca      	subs	r2, r1, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a460:	429a      	cmp	r2, r3
 800a462:	bf0c      	ite	eq
 800a464:	2301      	moveq	r3, #1
 800a466:	2300      	movne	r3, #0
 800a468:	b2db      	uxtb	r3, r3
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	bc80      	pop	{r7}
 800a472:	4770      	bx	lr
 800a474:	66666667 	.word	0x66666667

0800a478 <Buf_IsEmpty>:
 * @fn					- Buf_IsEmpty
 *
 * @Note				- func to check if the Buf is empty
 *
 **************************************************************************/
Buf_Status_t Buf_IsEmpty(Buf_Handler_t* buf){
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	return !(buf->front == -1);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48a:	bf14      	ite	ne
 800a48c:	2301      	movne	r3, #1
 800a48e:	2300      	moveq	r3, #0
 800a490:	b2db      	uxtb	r3, r3
}
 800a492:	4618      	mov	r0, r3
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	bc80      	pop	{r7}
 800a49a:	4770      	bx	lr

0800a49c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	4912      	ldr	r1, [pc, #72]	; (800a4ec <MX_USB_DEVICE_Init+0x50>)
 800a4a4:	4812      	ldr	r0, [pc, #72]	; (800a4f0 <MX_USB_DEVICE_Init+0x54>)
 800a4a6:	f7fc fb40 	bl	8006b2a <USBD_Init>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4b0:	f7f6 f8ec 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4b4:	490f      	ldr	r1, [pc, #60]	; (800a4f4 <MX_USB_DEVICE_Init+0x58>)
 800a4b6:	480e      	ldr	r0, [pc, #56]	; (800a4f0 <MX_USB_DEVICE_Init+0x54>)
 800a4b8:	f7fc fb62 	bl	8006b80 <USBD_RegisterClass>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4c2:	f7f6 f8e3 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4c6:	490c      	ldr	r1, [pc, #48]	; (800a4f8 <MX_USB_DEVICE_Init+0x5c>)
 800a4c8:	4809      	ldr	r0, [pc, #36]	; (800a4f0 <MX_USB_DEVICE_Init+0x54>)
 800a4ca:	f7fc fa93 	bl	80069f4 <USBD_CDC_RegisterInterface>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4d4:	f7f6 f8da 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4d8:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <MX_USB_DEVICE_Init+0x54>)
 800a4da:	f7fc fb6a 	bl	8006bb2 <USBD_Start>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4e4:	f7f6 f8d2 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4e8:	bf00      	nop
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20000130 	.word	0x20000130
 800a4f0:	200027a0 	.word	0x200027a0
 800a4f4:	20000018 	.word	0x20000018
 800a4f8:	20000120 	.word	0x20000120

0800a4fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a500:	2200      	movs	r2, #0
 800a502:	4905      	ldr	r1, [pc, #20]	; (800a518 <CDC_Init_FS+0x1c>)
 800a504:	4805      	ldr	r0, [pc, #20]	; (800a51c <CDC_Init_FS+0x20>)
 800a506:	f7fc fa8b 	bl	8006a20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a50a:	4905      	ldr	r1, [pc, #20]	; (800a520 <CDC_Init_FS+0x24>)
 800a50c:	4803      	ldr	r0, [pc, #12]	; (800a51c <CDC_Init_FS+0x20>)
 800a50e:	f7fc faa0 	bl	8006a52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a512:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a514:	4618      	mov	r0, r3
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20002c58 	.word	0x20002c58
 800a51c:	200027a0 	.word	0x200027a0
 800a520:	20002a64 	.word	0x20002a64

0800a524 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a528:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bc80      	pop	{r7}
 800a530:	4770      	bx	lr
	...

0800a534 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	6039      	str	r1, [r7, #0]
 800a53e:	71fb      	strb	r3, [r7, #7]
 800a540:	4613      	mov	r3, r2
 800a542:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	2b23      	cmp	r3, #35	; 0x23
 800a548:	d84a      	bhi.n	800a5e0 <CDC_Control_FS+0xac>
 800a54a:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <CDC_Control_FS+0x1c>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a5e1 	.word	0x0800a5e1
 800a554:	0800a5e1 	.word	0x0800a5e1
 800a558:	0800a5e1 	.word	0x0800a5e1
 800a55c:	0800a5e1 	.word	0x0800a5e1
 800a560:	0800a5e1 	.word	0x0800a5e1
 800a564:	0800a5e1 	.word	0x0800a5e1
 800a568:	0800a5e1 	.word	0x0800a5e1
 800a56c:	0800a5e1 	.word	0x0800a5e1
 800a570:	0800a5e1 	.word	0x0800a5e1
 800a574:	0800a5e1 	.word	0x0800a5e1
 800a578:	0800a5e1 	.word	0x0800a5e1
 800a57c:	0800a5e1 	.word	0x0800a5e1
 800a580:	0800a5e1 	.word	0x0800a5e1
 800a584:	0800a5e1 	.word	0x0800a5e1
 800a588:	0800a5e1 	.word	0x0800a5e1
 800a58c:	0800a5e1 	.word	0x0800a5e1
 800a590:	0800a5e1 	.word	0x0800a5e1
 800a594:	0800a5e1 	.word	0x0800a5e1
 800a598:	0800a5e1 	.word	0x0800a5e1
 800a59c:	0800a5e1 	.word	0x0800a5e1
 800a5a0:	0800a5e1 	.word	0x0800a5e1
 800a5a4:	0800a5e1 	.word	0x0800a5e1
 800a5a8:	0800a5e1 	.word	0x0800a5e1
 800a5ac:	0800a5e1 	.word	0x0800a5e1
 800a5b0:	0800a5e1 	.word	0x0800a5e1
 800a5b4:	0800a5e1 	.word	0x0800a5e1
 800a5b8:	0800a5e1 	.word	0x0800a5e1
 800a5bc:	0800a5e1 	.word	0x0800a5e1
 800a5c0:	0800a5e1 	.word	0x0800a5e1
 800a5c4:	0800a5e1 	.word	0x0800a5e1
 800a5c8:	0800a5e1 	.word	0x0800a5e1
 800a5cc:	0800a5e1 	.word	0x0800a5e1
 800a5d0:	0800a5e1 	.word	0x0800a5e1
 800a5d4:	0800a5e1 	.word	0x0800a5e1
 800a5d8:	0800a5e1 	.word	0x0800a5e1
 800a5dc:	0800a5e1 	.word	0x0800a5e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5e0:	bf00      	nop
  }

  return (USBD_OK);
 800a5e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop

0800a5f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	4811      	ldr	r0, [pc, #68]	; (800a644 <CDC_Receive_FS+0x54>)
 800a5fe:	f7fc fa28 	bl	8006a52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a602:	4810      	ldr	r0, [pc, #64]	; (800a644 <CDC_Receive_FS+0x54>)
 800a604:	f7fc fa67 	bl	8006ad6 <USBD_CDC_ReceivePacket>

  uint32_t len = *Len;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
  if (flag_data_received == 0){
 800a60e:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <CDC_Receive_FS+0x58>)
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d111      	bne.n	800a63a <CDC_Receive_FS+0x4a>
		flag_data_received = 1 ;
 800a616:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <CDC_Receive_FS+0x58>)
 800a618:	2201      	movs	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
		memset(buffer,'\0',64);
 800a61c:	2240      	movs	r2, #64	; 0x40
 800a61e:	2100      	movs	r1, #0
 800a620:	480a      	ldr	r0, [pc, #40]	; (800a64c <CDC_Receive_FS+0x5c>)
 800a622:	f000 fc25 	bl	800ae70 <memset>
		memcpy(buffer,Buf,len);
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	4808      	ldr	r0, [pc, #32]	; (800a64c <CDC_Receive_FS+0x5c>)
 800a62c:	f000 fc12 	bl	800ae54 <memcpy>
		memset(Buf,'\0',len);
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	2100      	movs	r1, #0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fc1b 	bl	800ae70 <memset>
  }


  return (USBD_OK);
 800a63a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	200027a0 	.word	0x200027a0
 800a648:	20001910 	.word	0x20001910
 800a64c:	20002760 	.word	0x20002760

0800a650 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a660:	4b0d      	ldr	r3, [pc, #52]	; (800a698 <CDC_Transmit_FS+0x48>)
 800a662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a666:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a672:	2301      	movs	r3, #1
 800a674:	e00b      	b.n	800a68e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a676:	887b      	ldrh	r3, [r7, #2]
 800a678:	461a      	mov	r2, r3
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	4806      	ldr	r0, [pc, #24]	; (800a698 <CDC_Transmit_FS+0x48>)
 800a67e:	f7fc f9cf 	bl	8006a20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a682:	4805      	ldr	r0, [pc, #20]	; (800a698 <CDC_Transmit_FS+0x48>)
 800a684:	f7fc f9f8 	bl	8006a78 <USBD_CDC_TransmitPacket>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200027a0 	.word	0x200027a0

0800a69c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	6039      	str	r1, [r7, #0]
 800a6a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2212      	movs	r2, #18
 800a6ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6ae:	4b03      	ldr	r3, [pc, #12]	; (800a6bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bc80      	pop	{r7}
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	2000014c 	.word	0x2000014c

0800a6c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2204      	movs	r2, #4
 800a6d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6d2:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bc80      	pop	{r7}
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	20000160 	.word	0x20000160

0800a6e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	4907      	ldr	r1, [pc, #28]	; (800a718 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6fa:	4808      	ldr	r0, [pc, #32]	; (800a71c <USBD_FS_ProductStrDescriptor+0x38>)
 800a6fc:	f7fd f9d2 	bl	8007aa4 <USBD_GetString>
 800a700:	e004      	b.n	800a70c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <USBD_FS_ProductStrDescriptor+0x34>)
 800a706:	4805      	ldr	r0, [pc, #20]	; (800a71c <USBD_FS_ProductStrDescriptor+0x38>)
 800a708:	f7fd f9cc 	bl	8007aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a70c:	4b02      	ldr	r3, [pc, #8]	; (800a718 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20002e4c 	.word	0x20002e4c
 800a71c:	0800aef8 	.word	0x0800aef8

0800a720 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	4904      	ldr	r1, [pc, #16]	; (800a740 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a730:	4804      	ldr	r0, [pc, #16]	; (800a744 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a732:	f7fd f9b7 	bl	8007aa4 <USBD_GetString>
  return USBD_StrDesc;
 800a736:	4b02      	ldr	r3, [pc, #8]	; (800a740 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20002e4c 	.word	0x20002e4c
 800a744:	0800af10 	.word	0x0800af10

0800a748 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	6039      	str	r1, [r7, #0]
 800a752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	221a      	movs	r2, #26
 800a758:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a75a:	f000 f843 	bl	800a7e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a75e:	4b02      	ldr	r3, [pc, #8]	; (800a768 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20000164 	.word	0x20000164

0800a76c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	6039      	str	r1, [r7, #0]
 800a776:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d105      	bne.n	800a78a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	4907      	ldr	r1, [pc, #28]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a782:	4808      	ldr	r0, [pc, #32]	; (800a7a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a784:	f7fd f98e 	bl	8007aa4 <USBD_GetString>
 800a788:	e004      	b.n	800a794 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	4904      	ldr	r1, [pc, #16]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a78e:	4805      	ldr	r0, [pc, #20]	; (800a7a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a790:	f7fd f988 	bl	8007aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a794:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20002e4c 	.word	0x20002e4c
 800a7a4:	0800af24 	.word	0x0800af24

0800a7a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	6039      	str	r1, [r7, #0]
 800a7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d105      	bne.n	800a7c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	4907      	ldr	r1, [pc, #28]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7be:	4808      	ldr	r0, [pc, #32]	; (800a7e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7c0:	f7fd f970 	bl	8007aa4 <USBD_GetString>
 800a7c4:	e004      	b.n	800a7d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4904      	ldr	r1, [pc, #16]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ca:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7cc:	f7fd f96a 	bl	8007aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7d0:	4b02      	ldr	r3, [pc, #8]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20002e4c 	.word	0x20002e4c
 800a7e0:	0800af30 	.word	0x0800af30

0800a7e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7ea:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <Get_SerialNum+0x44>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7f0:	4b0e      	ldr	r3, [pc, #56]	; (800a82c <Get_SerialNum+0x48>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7f6:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <Get_SerialNum+0x4c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4413      	add	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d009      	beq.n	800a81e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a80a:	2208      	movs	r2, #8
 800a80c:	4909      	ldr	r1, [pc, #36]	; (800a834 <Get_SerialNum+0x50>)
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 f814 	bl	800a83c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a814:	2204      	movs	r2, #4
 800a816:	4908      	ldr	r1, [pc, #32]	; (800a838 <Get_SerialNum+0x54>)
 800a818:	68b8      	ldr	r0, [r7, #8]
 800a81a:	f000 f80f 	bl	800a83c <IntToUnicode>
  }
}
 800a81e:	bf00      	nop
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	1ffff7e8 	.word	0x1ffff7e8
 800a82c:	1ffff7ec 	.word	0x1ffff7ec
 800a830:	1ffff7f0 	.word	0x1ffff7f0
 800a834:	20000166 	.word	0x20000166
 800a838:	20000176 	.word	0x20000176

0800a83c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]
 800a852:	e027      	b.n	800a8a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	0f1b      	lsrs	r3, r3, #28
 800a858:	2b09      	cmp	r3, #9
 800a85a:	d80b      	bhi.n	800a874 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	0f1b      	lsrs	r3, r3, #28
 800a860:	b2da      	uxtb	r2, r3
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	4619      	mov	r1, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	440b      	add	r3, r1
 800a86c:	3230      	adds	r2, #48	; 0x30
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]
 800a872:	e00a      	b.n	800a88a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	0f1b      	lsrs	r3, r3, #28
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	4619      	mov	r1, r3
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	440b      	add	r3, r1
 800a884:	3237      	adds	r2, #55	; 0x37
 800a886:	b2d2      	uxtb	r2, r2
 800a888:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	011b      	lsls	r3, r3, #4
 800a88e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a890:	7dfb      	ldrb	r3, [r7, #23]
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	3301      	adds	r3, #1
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	4413      	add	r3, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	75fb      	strb	r3, [r7, #23]
 800a8a4:	7dfa      	ldrb	r2, [r7, #23]
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d3d3      	bcc.n	800a854 <IntToUnicode+0x18>
  }
}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a0d      	ldr	r2, [pc, #52]	; (800a8fc <HAL_PCD_MspInit+0x44>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d113      	bne.n	800a8f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a8ca:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <HAL_PCD_MspInit+0x48>)
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	4a0c      	ldr	r2, [pc, #48]	; (800a900 <HAL_PCD_MspInit+0x48>)
 800a8d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a8d4:	61d3      	str	r3, [r2, #28]
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <HAL_PCD_MspInit+0x48>)
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2105      	movs	r1, #5
 800a8e6:	2014      	movs	r0, #20
 800a8e8:	f7f6 f939 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a8ec:	2014      	movs	r0, #20
 800a8ee:	f7f6 f952 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	40005c00 	.word	0x40005c00
 800a900:	40021000 	.word	0x40021000

0800a904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f7fc f991 	bl	8006c42 <USBD_LL_SetupStage>
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	6879      	ldr	r1, [r7, #4]
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	440b      	add	r3, r1
 800a948:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	4619      	mov	r1, r3
 800a952:	f7fc f9c3 	bl	8006cdc <USBD_LL_DataOutStage>
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a970:	78fa      	ldrb	r2, [r7, #3]
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	440b      	add	r3, r1
 800a97e:	333c      	adds	r3, #60	; 0x3c
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	4619      	mov	r1, r3
 800a986:	f7fc fa1a 	bl	8006dbe <USBD_LL_DataInStage>
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b082      	sub	sp, #8
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fc fb2a 	bl	8006ffa <USBD_LL_SOF>
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d001      	beq.n	800a9c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a9c2:	f7f5 fe63 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a9cc:	7bfa      	ldrb	r2, [r7, #15]
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fc fada 	bl	8006f8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fc fa93 	bl	8006f08 <USBD_LL_Reset>
}
 800a9e2:	bf00      	nop
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fc fad4 	bl	8006fa8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa08:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <HAL_PCD_SuspendCallback+0x30>)
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	4a03      	ldr	r2, [pc, #12]	; (800aa1c <HAL_PCD_SuspendCallback+0x30>)
 800aa0e:	f043 0306 	orr.w	r3, r3, #6
 800aa12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	e000ed00 	.word	0xe000ed00

0800aa20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fc face 	bl	8006fd0 <USBD_LL_Resume>
}
 800aa34:	bf00      	nop
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aa44:	4a28      	ldr	r2, [pc, #160]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a26      	ldr	r2, [pc, #152]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800aa54:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa56:	4a25      	ldr	r2, [pc, #148]	; (800aaec <USBD_LL_Init+0xb0>)
 800aa58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aa5a:	4b23      	ldr	r3, [pc, #140]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa5c:	2208      	movs	r2, #8
 800aa5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aa60:	4b21      	ldr	r3, [pc, #132]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa62:	2202      	movs	r2, #2
 800aa64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aa66:	4b20      	ldr	r3, [pc, #128]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aa6c:	4b1e      	ldr	r3, [pc, #120]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aa72:	4b1d      	ldr	r3, [pc, #116]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aa78:	481b      	ldr	r0, [pc, #108]	; (800aae8 <USBD_LL_Init+0xac>)
 800aa7a:	f7f6 fa67 	bl	8000f4c <HAL_PCD_Init>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aa84:	f7f5 fe02 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa8e:	2318      	movs	r3, #24
 800aa90:	2200      	movs	r2, #0
 800aa92:	2100      	movs	r1, #0
 800aa94:	f7f7 ff88 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa9e:	2358      	movs	r3, #88	; 0x58
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2180      	movs	r1, #128	; 0x80
 800aaa4:	f7f7 ff80 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaae:	23c0      	movs	r3, #192	; 0xc0
 800aab0:	2200      	movs	r2, #0
 800aab2:	2181      	movs	r1, #129	; 0x81
 800aab4:	f7f7 ff78 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aabe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aac2:	2200      	movs	r2, #0
 800aac4:	2101      	movs	r1, #1
 800aac6:	f7f7 ff6f 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aad4:	2200      	movs	r2, #0
 800aad6:	2182      	movs	r1, #130	; 0x82
 800aad8:	f7f7 ff66 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	2000304c 	.word	0x2000304c
 800aaec:	40005c00 	.word	0x40005c00

0800aaf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f6 fb1f 	bl	800114a <HAL_PCD_Start>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f94e 	bl	800adb4 <USBD_Get_USB_Status>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	4608      	mov	r0, r1
 800ab30:	4611      	mov	r1, r2
 800ab32:	461a      	mov	r2, r3
 800ab34:	4603      	mov	r3, r0
 800ab36:	70fb      	strb	r3, [r7, #3]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70bb      	strb	r3, [r7, #2]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab4e:	78bb      	ldrb	r3, [r7, #2]
 800ab50:	883a      	ldrh	r2, [r7, #0]
 800ab52:	78f9      	ldrb	r1, [r7, #3]
 800ab54:	f7f6 fc76 	bl	8001444 <HAL_PCD_EP_Open>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 f928 	bl	800adb4 <USBD_Get_USB_Status>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab8c:	78fa      	ldrb	r2, [r7, #3]
 800ab8e:	4611      	mov	r1, r2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f6 fcb4 	bl	80014fe <HAL_PCD_EP_Close>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 f909 	bl	800adb4 <USBD_Get_USB_Status>
 800aba2:	4603      	mov	r3, r0
 800aba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7f6 fd5c 	bl	800168c <HAL_PCD_EP_SetStall>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 f8ea 	bl	800adb4 <USBD_Get_USB_Status>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b084      	sub	sp, #16
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac08:	78fa      	ldrb	r2, [r7, #3]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7f6 fd9d 	bl	800174c <HAL_PCD_EP_ClrStall>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 f8cb 	bl	800adb4 <USBD_Get_USB_Status>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	da0c      	bge.n	800ac62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4e:	68f9      	ldr	r1, [r7, #12]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	440b      	add	r3, r1
 800ac5c:	3302      	adds	r3, #2
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	e00b      	b.n	800ac7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac68:	68f9      	ldr	r1, [r7, #12]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	440b      	add	r3, r1
 800ac74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ac78:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bc80      	pop	{r7}
 800ac82:	4770      	bx	lr

0800ac84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac9e:	78fa      	ldrb	r2, [r7, #3]
 800aca0:	4611      	mov	r1, r2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7f6 fba9 	bl	80013fa <HAL_PCD_SetAddress>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acac:	7bfb      	ldrb	r3, [r7, #15]
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 f880 	bl	800adb4 <USBD_Get_USB_Status>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b086      	sub	sp, #24
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	461a      	mov	r2, r3
 800acce:	460b      	mov	r3, r1
 800acd0:	72fb      	strb	r3, [r7, #11]
 800acd2:	4613      	mov	r3, r2
 800acd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ace4:	893b      	ldrh	r3, [r7, #8]
 800ace6:	7af9      	ldrb	r1, [r7, #11]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	f7f6 fc98 	bl	800161e <HAL_PCD_EP_Transmit>
 800acee:	4603      	mov	r3, r0
 800acf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f85d 	bl	800adb4 <USBD_Get_USB_Status>
 800acfa:	4603      	mov	r3, r0
 800acfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	461a      	mov	r2, r3
 800ad14:	460b      	mov	r3, r1
 800ad16:	72fb      	strb	r3, [r7, #11]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad2a:	893b      	ldrh	r3, [r7, #8]
 800ad2c:	7af9      	ldrb	r1, [r7, #11]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	f7f6 fc2d 	bl	800158e <HAL_PCD_EP_Receive>
 800ad34:	4603      	mov	r3, r0
 800ad36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 f83a 	bl	800adb4 <USBD_Get_USB_Status>
 800ad40:	4603      	mov	r3, r0
 800ad42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad44:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad60:	78fa      	ldrb	r2, [r7, #3]
 800ad62:	4611      	mov	r1, r2
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7f6 fc43 	bl	80015f0 <HAL_PCD_EP_GetRxCount>
 800ad6a:	4603      	mov	r3, r0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad7c:	4b02      	ldr	r3, [pc, #8]	; (800ad88 <USBD_static_malloc+0x14>)
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bc80      	pop	{r7}
 800ad86:	4770      	bx	lr
 800ad88:	20001958 	.word	0x20001958

0800ad8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]

}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bc80      	pop	{r7}
 800ad9c:	4770      	bx	lr

0800ad9e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	bc80      	pop	{r7}
 800adb2:	4770      	bx	lr

0800adb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800adc2:	79fb      	ldrb	r3, [r7, #7]
 800adc4:	2b03      	cmp	r3, #3
 800adc6:	d817      	bhi.n	800adf8 <USBD_Get_USB_Status+0x44>
 800adc8:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <USBD_Get_USB_Status+0x1c>)
 800adca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adce:	bf00      	nop
 800add0:	0800ade1 	.word	0x0800ade1
 800add4:	0800ade7 	.word	0x0800ade7
 800add8:	0800aded 	.word	0x0800aded
 800addc:	0800adf3 	.word	0x0800adf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
    break;
 800ade4:	e00b      	b.n	800adfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ade6:	2302      	movs	r3, #2
 800ade8:	73fb      	strb	r3, [r7, #15]
    break;
 800adea:	e008      	b.n	800adfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800adec:	2301      	movs	r3, #1
 800adee:	73fb      	strb	r3, [r7, #15]
    break;
 800adf0:	e005      	b.n	800adfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800adf2:	2302      	movs	r3, #2
 800adf4:	73fb      	strb	r3, [r7, #15]
    break;
 800adf6:	e002      	b.n	800adfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800adf8:	2302      	movs	r3, #2
 800adfa:	73fb      	strb	r3, [r7, #15]
    break;
 800adfc:	bf00      	nop
  }
  return usb_status;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bc80      	pop	{r7}
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop

0800ae0c <__libc_init_array>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	2600      	movs	r6, #0
 800ae10:	4d0c      	ldr	r5, [pc, #48]	; (800ae44 <__libc_init_array+0x38>)
 800ae12:	4c0d      	ldr	r4, [pc, #52]	; (800ae48 <__libc_init_array+0x3c>)
 800ae14:	1b64      	subs	r4, r4, r5
 800ae16:	10a4      	asrs	r4, r4, #2
 800ae18:	42a6      	cmp	r6, r4
 800ae1a:	d109      	bne.n	800ae30 <__libc_init_array+0x24>
 800ae1c:	f000 f830 	bl	800ae80 <_init>
 800ae20:	2600      	movs	r6, #0
 800ae22:	4d0a      	ldr	r5, [pc, #40]	; (800ae4c <__libc_init_array+0x40>)
 800ae24:	4c0a      	ldr	r4, [pc, #40]	; (800ae50 <__libc_init_array+0x44>)
 800ae26:	1b64      	subs	r4, r4, r5
 800ae28:	10a4      	asrs	r4, r4, #2
 800ae2a:	42a6      	cmp	r6, r4
 800ae2c:	d105      	bne.n	800ae3a <__libc_init_array+0x2e>
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae34:	4798      	blx	r3
 800ae36:	3601      	adds	r6, #1
 800ae38:	e7ee      	b.n	800ae18 <__libc_init_array+0xc>
 800ae3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3e:	4798      	blx	r3
 800ae40:	3601      	adds	r6, #1
 800ae42:	e7f2      	b.n	800ae2a <__libc_init_array+0x1e>
 800ae44:	0800af6c 	.word	0x0800af6c
 800ae48:	0800af6c 	.word	0x0800af6c
 800ae4c:	0800af6c 	.word	0x0800af6c
 800ae50:	0800af70 	.word	0x0800af70

0800ae54 <memcpy>:
 800ae54:	440a      	add	r2, r1
 800ae56:	4291      	cmp	r1, r2
 800ae58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae5c:	d100      	bne.n	800ae60 <memcpy+0xc>
 800ae5e:	4770      	bx	lr
 800ae60:	b510      	push	{r4, lr}
 800ae62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae66:	4291      	cmp	r1, r2
 800ae68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6c:	d1f9      	bne.n	800ae62 <memcpy+0xe>
 800ae6e:	bd10      	pop	{r4, pc}

0800ae70 <memset>:
 800ae70:	4603      	mov	r3, r0
 800ae72:	4402      	add	r2, r0
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d100      	bne.n	800ae7a <memset+0xa>
 800ae78:	4770      	bx	lr
 800ae7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae7e:	e7f9      	b.n	800ae74 <memset+0x4>

0800ae80 <_init>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	bf00      	nop
 800ae84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae86:	bc08      	pop	{r3}
 800ae88:	469e      	mov	lr, r3
 800ae8a:	4770      	bx	lr

0800ae8c <_fini>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	bf00      	nop
 800ae90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae92:	bc08      	pop	{r3}
 800ae94:	469e      	mov	lr, r3
 800ae96:	4770      	bx	lr
