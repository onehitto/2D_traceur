
2D_traceur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b408  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b62c  0800b62c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b62c  0800b62c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b62c  0800b62c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b630  0800b630  0001b630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003154  200001e4  0800b818  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003338  0800b818  00023338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002495c  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000521c  00000000  00000000  00044b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00049d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0004b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014067  00000000  00000000  0004c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006ce1  00000000  00000000  00060987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00067668  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006040  00000000  00000000  000676bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b500 	.word	0x0800b500

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800b500 	.word	0x0800b500

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000200 	.word	0x20000200
 800018c:	20000254 	.word	0x20000254

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08e      	sub	sp, #56	; 0x38
 8000194:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fbef 	bl	8000978 <HAL_Init>
  SystemClock_Config();
 800019a:	f000 f845 	bl	8000228 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f961 	bl	8000464 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f89b 	bl	80002dc <MX_TIM2_Init>
  MX_TIM4_Init();
 80001a6:	f000 f90f 	bl	80003c8 <MX_TIM4_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  Com_Init();
 80001aa:	f009 fe89 	bl	8009ec0 <Com_Init>
  Servo_Init(&servo, &htim2);
 80001ae:	4918      	ldr	r1, [pc, #96]	; (8000210 <main+0x80>)
 80001b0:	4818      	ldr	r0, [pc, #96]	; (8000214 <main+0x84>)
 80001b2:	f009 fe25 	bl	8009e00 <Servo_Init>
  G_Code_Init();
 80001b6:	f009 ff39 	bl	800a02c <G_Code_Init>
  /* USER CODE END RTOS_QUEUES */
  HAL_Delay(10);
 80001ba:	200a      	movs	r0, #10
 80001bc:	f000 fc0e 	bl	80009dc <HAL_Delay>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x88>)
 80001c2:	f107 041c 	add.w	r4, r7, #28
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(ComTask, StartComTask, osPriorityNormal, 0, 256);
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <main+0x8c>)
 80001d6:	463c      	mov	r4, r7
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 fd64 	bl	8007cba <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <main+0x90>)
 80001f6:	6013      	str	r3, [r2, #0]
  ComTaskHandle = osThreadCreate(osThread(ComTask), NULL); // every 20ms
 80001f8:	463b      	mov	r3, r7
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f007 fd5c 	bl	8007cba <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0x94>)
 8000206:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 8000208:	f007 fd50 	bl	8007cac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x7c>
 800020e:	bf00      	nop
 8000210:	2000241c 	.word	0x2000241c
 8000214:	20002410 	.word	0x20002410
 8000218:	0800b52c 	.word	0x0800b52c
 800021c:	0800b548 	.word	0x0800b548
 8000220:	20001bec 	.word	0x20001bec
 8000224:	20002418 	.word	0x20002418

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f00a fd1a 	bl	800ac70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fbec 	bl	8002a5c <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 f9fd 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fe56 	bl	8002f5c <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 f9e7 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ba:	2310      	movs	r3, #16
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fff3 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d0:	f000 f9da 	bl	8000688 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0320 	add.w	r3, r7, #32
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000314:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000316:	228f      	movs	r2, #143	; 0x8f
 8000318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000322:	f242 7210 	movw	r2, #10000	; 0x2710
 8000326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000334:	4823      	ldr	r0, [pc, #140]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000336:	f003 f871 	bl	800341c <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000340:	f000 f9a2 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4619      	mov	r1, r3
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000352:	f003 fbef 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800035c:	f000 f994 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000362:	f003 f923 	bl	80035ac <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800036c:	f000 f98c 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000380:	f003 ff68 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800038a:	f000 f97d 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000392:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000396:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	4619      	mov	r1, r3
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003a8:	f003 fb02 	bl	80039b0 <HAL_TIM_PWM_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003b2:	f000 f969 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003b8:	f000 f9c0 	bl	800073c <HAL_TIM_MspPostInit>

}
 80003bc:	bf00      	nop
 80003be:	3738      	adds	r7, #56	; 0x38
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	2000241c 	.word	0x2000241c

080003c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM4_Init+0x94>)
 80003e6:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <MX_TIM4_Init+0x98>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM4_Init+0x94>)
 80003ec:	228f      	movs	r2, #143	; 0x8f
 80003ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM4_Init+0x94>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_TIM4_Init+0x94>)
 80003f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80003fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_TIM4_Init+0x94>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_TIM4_Init+0x94>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_TIM4_Init+0x94>)
 800040c:	f003 f806 	bl	800341c <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000416:	f000 f937 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	; (800045c <MX_TIM4_Init+0x94>)
 8000428:	f003 fb84 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f929 	bl	8000688 <Error_Handler>
  }
  //if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 // {
    //Error_Handler();
  //}
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_TIM4_Init+0x94>)
 8000444:	f003 ff06 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800044e:	f000 f91b 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20001bf4 	.word	0x20001bf4
 8000460:	40000800 	.word	0x40000800

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b40      	ldr	r3, [pc, #256]	; (800057c <MX_GPIO_Init+0x118>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a3f      	ldr	r2, [pc, #252]	; (800057c <MX_GPIO_Init+0x118>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b3d      	ldr	r3, [pc, #244]	; (800057c <MX_GPIO_Init+0x118>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b3a      	ldr	r3, [pc, #232]	; (800057c <MX_GPIO_Init+0x118>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <MX_GPIO_Init+0x118>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <MX_GPIO_Init+0x118>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_GPIO_Init+0x118>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a33      	ldr	r2, [pc, #204]	; (800057c <MX_GPIO_Init+0x118>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <MX_GPIO_Init+0x118>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b2e      	ldr	r3, [pc, #184]	; (800057c <MX_GPIO_Init+0x118>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a2d      	ldr	r2, [pc, #180]	; (800057c <MX_GPIO_Init+0x118>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b2b      	ldr	r3, [pc, #172]	; (800057c <MX_GPIO_Init+0x118>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004de:	4828      	ldr	r0, [pc, #160]	; (8000580 <MX_GPIO_Init+0x11c>)
 80004e0:	f000 fd1b 	bl	8000f1a <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004e4:	2200      	movs	r2, #0
 80004e6:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <MX_GPIO_Init+0x120>)
 80004ec:	f000 fd15 	bl	8000f1a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004f0:	2200      	movs	r2, #0
 80004f2:	f248 31f0 	movw	r1, #33776	; 0x83f0
 80004f6:	4824      	ldr	r0, [pc, #144]	; (8000588 <MX_GPIO_Init+0x124>)
 80004f8:	f000 fd0f 	bl	8000f1a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <MX_GPIO_Init+0x11c>)
 8000516:	f000 fb65 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800051a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2302      	movs	r3, #2
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <MX_GPIO_Init+0x124>)
 8000534:	f000 fb56 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000538:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800053c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <MX_GPIO_Init+0x120>)
 8000552:	f000 fb47 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000556:	f248 33f0 	movw	r3, #33776	; 0x83f0
 800055a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_GPIO_Init+0x124>)
 8000570:	f000 fb38 	bl	8000be4 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	40011000 	.word	0x40011000
 8000584:	40010800 	.word	0x40010800
 8000588:	40010c00 	.word	0x40010c00

0800058c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  Data_t msg;
  uint8_t timflag = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  for(;;)
  {
	  osDelay(20);
 800059a:	2014      	movs	r0, #20
 800059c:	f007 fbd9 	bl	8007d52 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && timflag == 0){
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <StartDefaultTask+0x70>)
 80005a6:	f000 fca1 	bl	8000eec <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d115      	bne.n	80005dc <StartDefaultTask+0x50>
 80005b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d111      	bne.n	80005dc <StartDefaultTask+0x50>
		  timflag = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  	snprintf(msg.data,sizeof(msg.data),"<InfoServo>\n");
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <StartDefaultTask+0x74>)
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00a fb5a 	bl	800ac80 <sniprintf>
		  	Com_Queue_msg(&msg);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4618      	mov	r0, r3
 80005d2:	f009 fcb5 	bl	8009f40 <Com_Queue_msg>
		  	HAL_TIM_Base_Start_IT(&htim4);
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <StartDefaultTask+0x78>)
 80005d8:	f002 ff96 	bl	8003508 <HAL_TIM_Base_Start_IT>
		  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET && timflag == 1){
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <StartDefaultTask+0x70>)
 80005e2:	f000 fc83 	bl	8000eec <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1d6      	bne.n	800059a <StartDefaultTask+0xe>
 80005ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1d2      	bne.n	800059a <StartDefaultTask+0xe>
	  		  timflag = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  osDelay(20);
 80005fa:	e7ce      	b.n	800059a <StartDefaultTask+0xe>
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	0800b564 	.word	0x0800b564
 8000604:	20001bf4 	.word	0x20001bf4

08000608 <StartComTask>:
  * @brief  Function implementing the ComTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Header_StartComTask */
void StartComTask(void const * argument){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

	for(;;)
	  {
			osDelay(20);
 8000610:	2014      	movs	r0, #20
 8000612:	f007 fb9e 	bl	8007d52 <osDelay>
			Com_Transmit();
 8000616:	f009 fc6b 	bl	8009ef0 <Com_Transmit>
			Com_Receive();
 800061a:	f009 fca5 	bl	8009f68 <Com_Receive>
			Com_Assign();
 800061e:	f009 fcdf 	bl	8009fe0 <Com_Assign>
			osDelay(20);
 8000622:	e7f5      	b.n	8000610 <StartComTask+0x8>

08000624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a10      	ldr	r2, [pc, #64]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d101      	bne.n	800063a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000636:	f000 f9b5 	bl	80009a4 <HAL_IncTick>
  }
  if (htim->Instance == TIM4) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d112      	bne.n	800066a <HAL_TIM_PeriodElapsedCallback+0x46>
	  interruptCount++;
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	4a0c      	ldr	r2, [pc, #48]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800064c:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800064e:	2120      	movs	r1, #32
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000652:	f000 fc7a 	bl	8000f4a <HAL_GPIO_TogglePin>
	  if (interruptCount == 200){
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2bc8      	cmp	r3, #200	; 0xc8
 800065c:	d105      	bne.n	800066a <HAL_TIM_PeriodElapsedCallback+0x46>
	        HAL_TIM_Base_Stop(&htim2);
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000660:	f002 ff2b 	bl	80034ba <HAL_TIM_Base_Stop>
	        interruptCount = 0;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
	  }
    }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40000400 	.word	0x40000400
 8000678:	40000800 	.word	0x40000800
 800067c:	20000454 	.word	0x20000454
 8000680:	40010c00 	.word	0x40010c00
 8000684:	2000241c 	.word	0x2000241c

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_MspInit+0x68>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_MspInit+0x68>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_MspInit+0x68>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_MspInit+0x68>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <HAL_MspInit+0x68>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x68>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	210f      	movs	r1, #15
 80006ce:	f06f 0001 	mvn.w	r0, #1
 80006d2:	f000 fa5c 	bl	8000b8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x6c>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_MspInit+0x6c>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000

08000704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000714:	d10b      	bne.n	800072e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_TIM_Base_MspInit+0x34>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_TIM_Base_MspInit+0x34>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_TIM_Base_MspInit+0x34>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800075a:	d117      	bne.n	800078c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <HAL_TIM_MspPostInit+0x58>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <HAL_TIM_MspPostInit+0x58>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_TIM_MspPostInit+0x58>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <HAL_TIM_MspPostInit+0x5c>)
 8000788:	f000 fa2c 	bl	8000be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	201d      	movs	r0, #29
 80007b2:	f000 f9ec 	bl	8000b8e <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007b6:	201d      	movs	r0, #29
 80007b8:	f000 fa05 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <HAL_InitTick+0xa0>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	4a1e      	ldr	r2, [pc, #120]	; (800083c <HAL_InitTick+0xa0>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	61d3      	str	r3, [r2, #28]
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_InitTick+0xa0>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007d4:	f107 0210 	add.w	r2, r7, #16
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fd18 	bl	8003214 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007e4:	f002 fd02 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 80007e8:	4603      	mov	r3, r0
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <HAL_InitTick+0xa4>)
 80007f2:	fba2 2303 	umull	r2, r3, r2, r3
 80007f6:	0c9b      	lsrs	r3, r3, #18
 80007f8:	3b01      	subs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_InitTick+0xa8>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <HAL_InitTick+0xac>)
 8000800:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_InitTick+0xa8>)
 8000804:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000808:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_InitTick+0xa8>)
 800080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_InitTick+0xa8>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_InitTick+0xa8>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <HAL_InitTick+0xa8>)
 800081e:	f002 fdfd 	bl	800341c <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d104      	bne.n	8000832 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <HAL_InitTick+0xa8>)
 800082a:	f002 fe6d 	bl	8003508 <HAL_TIM_Base_Start_IT>
 800082e:	4603      	mov	r3, r0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3730      	adds	r7, #48	; 0x30
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	431bde83 	.word	0x431bde83
 8000844:	20002700 	.word	0x20002700
 8000848:	40000400 	.word	0x40000400

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
	...

08000878 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800087e:	f000 fca2 	bl	80011c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20003038 	.word	0x20003038

0800088c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <TIM3_IRQHandler+0x10>)
 8000892:	f002 ff85 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20002700 	.word	0x20002700

080008a0 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim4);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM4_IRQHandler+0x10>)
 80008a6:	f002 ff7b 	bl	80037a0 <HAL_TIM_IRQHandler>

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20001bf4 	.word	0x20001bf4

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f00a f98c 	bl	800ac00 <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20005000 	.word	0x20005000
 8000914:	00000400 	.word	0x00000400
 8000918:	20000458 	.word	0x20000458
 800091c:	20003338 	.word	0x20003338

08000920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800092c:	f7ff fff8 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000932:	490c      	ldr	r1, [pc, #48]	; (8000964 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a09      	ldr	r2, [pc, #36]	; (800096c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000948:	4c09      	ldr	r4, [pc, #36]	; (8000970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f00a f959 	bl	800ac0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fc19 	bl	8000190 <main>
  bx lr
 800095e:	4770      	bx	lr
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000968:	0800b634 	.word	0x0800b634
  ldr r2, =_sbss
 800096c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000970:	20003338 	.word	0x20003338

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f8f5 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ff04 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe7e 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <HAL_IncTick+0x20>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20002748 	.word	0x20002748

080009c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20002748 	.word	0x20002748

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff fff0 	bl	80009c8 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffe0 	bl	80009c8 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4906      	ldr	r1, [pc, #24]	; (8000abc <__NVIC_EnableIRQ+0x34>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff4f 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff64 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ffb2 	bl	8000b14 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff81 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff57 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b08b      	sub	sp, #44	; 0x2c
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e169      	b.n	8000ecc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 8158 	bne.w	8000ec6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a9a      	ldr	r2, [pc, #616]	; (8000e84 <HAL_GPIO_Init+0x2a0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d05e      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c20:	4a98      	ldr	r2, [pc, #608]	; (8000e84 <HAL_GPIO_Init+0x2a0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d875      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c26:	4a98      	ldr	r2, [pc, #608]	; (8000e88 <HAL_GPIO_Init+0x2a4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d058      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c2c:	4a96      	ldr	r2, [pc, #600]	; (8000e88 <HAL_GPIO_Init+0x2a4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d86f      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c32:	4a96      	ldr	r2, [pc, #600]	; (8000e8c <HAL_GPIO_Init+0x2a8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d052      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c38:	4a94      	ldr	r2, [pc, #592]	; (8000e8c <HAL_GPIO_Init+0x2a8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d869      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c3e:	4a94      	ldr	r2, [pc, #592]	; (8000e90 <HAL_GPIO_Init+0x2ac>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d04c      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c44:	4a92      	ldr	r2, [pc, #584]	; (8000e90 <HAL_GPIO_Init+0x2ac>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d863      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c4a:	4a92      	ldr	r2, [pc, #584]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d046      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c50:	4a90      	ldr	r2, [pc, #576]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d85d      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d82a      	bhi.n	8000cb0 <HAL_GPIO_Init+0xcc>
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d859      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <HAL_GPIO_Init+0x80>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000cdf 	.word	0x08000cdf
 8000c68:	08000cb9 	.word	0x08000cb9
 8000c6c:	08000ccb 	.word	0x08000ccb
 8000c70:	08000d0d 	.word	0x08000d0d
 8000c74:	08000d13 	.word	0x08000d13
 8000c78:	08000d13 	.word	0x08000d13
 8000c7c:	08000d13 	.word	0x08000d13
 8000c80:	08000d13 	.word	0x08000d13
 8000c84:	08000d13 	.word	0x08000d13
 8000c88:	08000d13 	.word	0x08000d13
 8000c8c:	08000d13 	.word	0x08000d13
 8000c90:	08000d13 	.word	0x08000d13
 8000c94:	08000d13 	.word	0x08000d13
 8000c98:	08000d13 	.word	0x08000d13
 8000c9c:	08000d13 	.word	0x08000d13
 8000ca0:	08000d13 	.word	0x08000d13
 8000ca4:	08000d13 	.word	0x08000d13
 8000ca8:	08000cc1 	.word	0x08000cc1
 8000cac:	08000cd5 	.word	0x08000cd5
 8000cb0:	4a79      	ldr	r2, [pc, #484]	; (8000e98 <HAL_GPIO_Init+0x2b4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d013      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cb6:	e02c      	b.n	8000d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e029      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e024      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e01f      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	330c      	adds	r3, #12
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	e01a      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e013      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	611a      	str	r2, [r3, #16]
          break;
 8000cfe:	e009      	b.n	8000d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	615a      	str	r2, [r3, #20]
          break;
 8000d0a:	e003      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          break;
 8000d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2bff      	cmp	r3, #255	; 0xff
 8000d18:	d801      	bhi.n	8000d1e <HAL_GPIO_Init+0x13a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	e001      	b.n	8000d22 <HAL_GPIO_Init+0x13e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3304      	adds	r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d802      	bhi.n	8000d30 <HAL_GPIO_Init+0x14c>
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x152>
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	3b08      	subs	r3, #8
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	401a      	ands	r2, r3
 8000d48:	6a39      	ldr	r1, [r7, #32]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	431a      	orrs	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 80b1 	beq.w	8000ec6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a4c      	ldr	r2, [pc, #304]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d7c:	4a48      	ldr	r2, [pc, #288]	; (8000ea0 <HAL_GPIO_Init+0x2bc>)
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <HAL_GPIO_Init+0x2c0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d013      	beq.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <HAL_GPIO_Init+0x2c4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_Init+0x1e8>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <HAL_GPIO_Init+0x2c8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <HAL_GPIO_Init+0x2cc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e006      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e004      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	0092      	lsls	r2, r2, #2
 8000dda:	4093      	lsls	r3, r2
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de2:	492f      	ldr	r1, [pc, #188]	; (8000ea0 <HAL_GPIO_Init+0x2bc>)
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	492c      	ldr	r1, [pc, #176]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4928      	ldr	r1, [pc, #160]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	4922      	ldr	r1, [pc, #136]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	60cb      	str	r3, [r1, #12]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	491e      	ldr	r1, [pc, #120]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4918      	ldr	r1, [pc, #96]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4914      	ldr	r1, [pc, #80]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d021      	beq.n	8000eb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
 8000e80:	e021      	b.n	8000ec6 <HAL_GPIO_Init+0x2e2>
 8000e82:	bf00      	nop
 8000e84:	10320000 	.word	0x10320000
 8000e88:	10310000 	.word	0x10310000
 8000e8c:	10220000 	.word	0x10220000
 8000e90:	10210000 	.word	0x10210000
 8000e94:	10120000 	.word	0x10120000
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40011400 	.word	0x40011400
 8000eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_GPIO_Init+0x304>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <HAL_GPIO_Init+0x304>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	3301      	adds	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f47f ae8e 	bne.w	8000bf8 <HAL_GPIO_Init+0x14>
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	372c      	adds	r7, #44	; 0x2c
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e001      	b.n	8000f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]
 8000f26:	4613      	mov	r3, r2
 8000f28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f2a:	787b      	ldrb	r3, [r7, #1]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f30:	887a      	ldrh	r2, [r7, #2]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f36:	e003      	b.n	8000f40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	041a      	lsls	r2, r3, #16
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	611a      	str	r2, [r3, #16]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f5c:	887a      	ldrh	r2, [r7, #2]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4013      	ands	r3, r2
 8000f62:	041a      	lsls	r2, r3, #16
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	611a      	str	r2, [r3, #16]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	b08b      	sub	sp, #44	; 0x2c
 8000f80:	af06      	add	r7, sp, #24
 8000f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0f1      	b.n	8001172 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f009 fb82 	bl	800a6ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 f9e3 	bl	8004380 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	687e      	ldr	r6, [r7, #4]
 8000fc2:	466d      	mov	r5, sp
 8000fc4:	f106 0410 	add.w	r4, r6, #16
 8000fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	602b      	str	r3, [r5, #0]
 8000fd0:	1d33      	adds	r3, r6, #4
 8000fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f003 f9ad 	bl	8004334 <USB_CoreInit>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0c2      	b.n	8001172 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 f9de 	bl	80043b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e040      	b.n	8001080 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	3301      	adds	r3, #1
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	3303      	adds	r3, #3
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	3338      	adds	r3, #56	; 0x38
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	333c      	adds	r3, #60	; 0x3c
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	3340      	adds	r3, #64	; 0x40
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3b9      	bcc.n	8000ffe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e044      	b.n	800111a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	440b      	add	r3, r1
 80010ca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3b5      	bcc.n	8001090 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	687e      	ldr	r6, [r7, #4]
 800112c:	466d      	mov	r5, sp
 800112e:	f106 0410 	add.w	r4, r6, #16
 8001132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	602b      	str	r3, [r5, #0]
 800113a:	1d33      	adds	r3, r6, #4
 800113c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f003 f944 	bl	80043cc <USB_DevInit>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2202      	movs	r2, #2
 800114e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00d      	b.n	8001172 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f005 f960 	bl	8006430 <USB_DevDisconnect>

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800117a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_PCD_Start+0x16>
 800118c:	2302      	movs	r3, #2
 800118e:	e016      	b.n	80011be <HAL_PCD_Start+0x44>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f003 f8d9 	bl	8004354 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011a2:	2101      	movs	r1, #1
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f009 fcf4 	bl	800ab92 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f934 	bl	800641c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b088      	sub	sp, #32
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 f936 	bl	8006444 <USB_ReadInterrupts>
 80011d8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fb1d 	bl	8001824 <PCD_EP_ISR_Handler>

    return;
 80011ea:	e11b      	b.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d013      	beq.n	800121e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011fe:	b29a      	uxth	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001208:	b292      	uxth	r2, r2
 800120a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f009 fac7 	bl	800a7a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001214:	2100      	movs	r1, #0
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f907 	bl	800142a <HAL_PCD_SetAddress>

    return;
 800121c:	e102      	b.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800123a:	b292      	uxth	r2, r2
 800123c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001240:	e0f0      	b.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00c      	beq.n	8001266 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001264:	e0de      	b.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d027      	beq.n	80012c0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0204 	bic.w	r2, r2, #4
 8001282:	b292      	uxth	r2, r2
 8001284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0208 	bic.w	r2, r2, #8
 800129a:	b292      	uxth	r2, r2
 800129c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f009 fab7 	bl	800a814 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012b8:	b292      	uxth	r2, r2
 80012ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012be:	e0b1      	b.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8085 	beq.w	80013d6 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	77fb      	strb	r3, [r7, #31]
 80012d0:	e011      	b.n	80012f6 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	441a      	add	r2, r3
 80012de:	7ffb      	ldrb	r3, [r7, #31]
 80012e0:	8812      	ldrh	r2, [r2, #0]
 80012e2:	b292      	uxth	r2, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	f107 0120 	add.w	r1, r7, #32
 80012ea:	440b      	add	r3, r1
 80012ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80012f0:	7ffb      	ldrb	r3, [r7, #31]
 80012f2:	3301      	adds	r3, #1
 80012f4:	77fb      	strb	r3, [r7, #31]
 80012f6:	7ffb      	ldrb	r3, [r7, #31]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d9ea      	bls.n	80012d2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	b292      	uxth	r2, r2
 8001310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800132c:	bf00      	nop
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001336:	b29b      	uxth	r3, r3
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f6      	beq.n	800132e <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001348:	b29a      	uxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001352:	b292      	uxth	r2, r2
 8001354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001358:	2300      	movs	r3, #0
 800135a:	77fb      	strb	r3, [r7, #31]
 800135c:	e010      	b.n	8001380 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	4611      	mov	r1, r2
 8001366:	7ffa      	ldrb	r2, [r7, #31]
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	440a      	add	r2, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	f107 0120 	add.w	r1, r7, #32
 8001372:	440b      	add	r3, r1
 8001374:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001378:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800137a:	7ffb      	ldrb	r3, [r7, #31]
 800137c:	3301      	adds	r3, #1
 800137e:	77fb      	strb	r3, [r7, #31]
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	2b07      	cmp	r3, #7
 8001384:	d9eb      	bls.n	800135e <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0208 	orr.w	r2, r2, #8
 8001398:	b292      	uxth	r2, r2
 800139a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0204 	orr.w	r2, r2, #4
 80013c8:	b292      	uxth	r2, r2
 80013ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f009 fa06 	bl	800a7e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013d4:	e026      	b.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00f      	beq.n	8001400 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013f2:	b292      	uxth	r2, r2
 80013f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f009 f9c4 	bl	800a786 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013fe:	e011      	b.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001412:	b29a      	uxth	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800141c:	b292      	uxth	r2, r2
 800141e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001422:	bf00      	nop
  }
}
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_PCD_SetAddress+0x1a>
 8001440:	2302      	movs	r3, #2
 8001442:	e013      	b.n	800146c <HAL_PCD_SetAddress+0x42>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	78fa      	ldrb	r2, [r7, #3]
 8001450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f004 ffca 	bl	80063f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	70fb      	strb	r3, [r7, #3]
 8001486:	460b      	mov	r3, r1
 8001488:	803b      	strh	r3, [r7, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da0e      	bge.n	80014b8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2201      	movs	r2, #1
 80014b4:	705a      	strb	r2, [r3, #1]
 80014b6:	e00e      	b.n	80014d6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	f003 0207 	and.w	r2, r3, #7
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014e2:	883a      	ldrh	r2, [r7, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	78ba      	ldrb	r2, [r7, #2]
 80014ec:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014ee:	78bb      	ldrb	r3, [r7, #2]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d102      	bne.n	80014fa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_PCD_EP_Open+0x94>
 8001504:	2302      	movs	r3, #2
 8001506:	e00e      	b.n	8001526 <HAL_PCD_EP_Open+0xb2>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	4618      	mov	r0, r3
 8001518:	f002 ff78 	bl	800440c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001524:	7afb      	ldrb	r3, [r7, #11]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800153a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da0e      	bge.n	8001560 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	705a      	strb	r2, [r3, #1]
 800155e:	e00e      	b.n	800157e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0207 	and.w	r2, r3, #7
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	b2da      	uxtb	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_PCD_EP_Close+0x6a>
 8001594:	2302      	movs	r3, #2
 8001596:	e00e      	b.n	80015b6 <HAL_PCD_EP_Close+0x88>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68f9      	ldr	r1, [r7, #12]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 faf0 	bl	8004b8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	460b      	mov	r3, r1
 80015cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	f003 0207 	and.w	r2, r3, #7
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2200      	movs	r2, #0
 80015fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	b2da      	uxtb	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6979      	ldr	r1, [r7, #20]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fca7 	bl	8004f64 <USB_EPStartXfer>

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0207 	and.w	r2, r3, #7
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	460b      	mov	r3, r1
 800165c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2201      	movs	r2, #1
 8001698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6979      	ldr	r1, [r7, #20]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fc59 	bl	8004f64 <USB_EPStartXfer>

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	f003 0207 	and.w	r2, r3, #7
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d901      	bls.n	80016da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e04c      	b.n	8001774 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	da0e      	bge.n	8001700 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	705a      	strb	r2, [r3, #1]
 80016fe:	e00c      	b.n	800171a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	b2da      	uxtb	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_PCD_EP_SetStall+0x7e>
 8001736:	2302      	movs	r3, #2
 8001738:	e01c      	b.n	8001774 <HAL_PCD_EP_SetStall+0xb8>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fd57 	bl	80061fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	2b00      	cmp	r3, #0
 8001756:	d108      	bne.n	800176a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f004 fe7c 	bl	8006462 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	f003 020f 	and.w	r2, r3, #15
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	d901      	bls.n	800179a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e040      	b.n	800181c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800179a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da0e      	bge.n	80017c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	705a      	strb	r2, [r3, #1]
 80017be:	e00e      	b.n	80017de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0207 	and.w	r2, r3, #7
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_PCD_EP_ClrStall+0x82>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e00e      	b.n	800181c <HAL_PCD_EP_ClrStall+0xa0>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68f9      	ldr	r1, [r7, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fd45 	bl	800629c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b096      	sub	sp, #88	; 0x58
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800182c:	e3bf      	b.n	8001fae <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001836:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800183a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001848:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 8179 	bne.w	8001b44 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	d152      	bne.n	8001904 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800186a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186e:	81fb      	strh	r3, [r7, #14]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800187a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800187e:	b29b      	uxth	r3, r3
 8001880:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3328      	adds	r3, #40	; 0x28
 8001886:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001890:	b29b      	uxth	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	3302      	adds	r3, #2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	441a      	add	r2, r3
 80018be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018c2:	2100      	movs	r1, #0
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f008 ff44 	bl	800a752 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 836b 	beq.w	8001fae <PCD_EP_ISR_Handler+0x78a>
 80018d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f040 8366 	bne.w	8001fae <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b292      	uxth	r2, r2
 80018f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001902:	e354      	b.n	8001fae <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800190a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800191a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191e:	2b00      	cmp	r3, #0
 8001920:	d034      	beq.n	800198c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	3306      	adds	r3, #6
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4413      	add	r3, r2
 8001940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800194a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001960:	b29b      	uxth	r3, r3
 8001962:	f004 fdce 	bl	8006502 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29a      	uxth	r2, r3
 800196e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001972:	4013      	ands	r3, r2
 8001974:	823b      	strh	r3, [r7, #16]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	8a3a      	ldrh	r2, [r7, #16]
 800197c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001980:	b292      	uxth	r2, r2
 8001982:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f008 feb7 	bl	800a6f8 <HAL_PCD_SetupStageCallback>
 800198a:	e310      	b.n	8001fae <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800198c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001990:	2b00      	cmp	r3, #0
 8001992:	f280 830c 	bge.w	8001fae <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29a      	uxth	r2, r3
 800199e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019a2:	4013      	ands	r3, r2
 80019a4:	83fb      	strh	r3, [r7, #30]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	8bfa      	ldrh	r2, [r7, #30]
 80019ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b0:	b292      	uxth	r2, r2
 80019b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	3306      	adds	r3, #6
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d019      	beq.n	8001a1c <PCD_EP_ISR_Handler+0x1f8>
 80019e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d015      	beq.n	8001a1c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f6:	6959      	ldr	r1, [r3, #20]
 80019f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f004 fd7e 	bl	8006502 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	441a      	add	r2, r3
 8001a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a14:	2100      	movs	r1, #0
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f008 fe80 	bl	800a71c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 82bd 	bne.w	8001fae <PCD_EP_ISR_Handler+0x78a>
 8001a34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a38:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a40:	f000 82b5 	beq.w	8001fae <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4413      	add	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	801a      	strh	r2, [r3, #0]
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2b3e      	cmp	r3, #62	; 0x3e
 8001a7a:	d91d      	bls.n	8001ab8 <PCD_EP_ISR_Handler+0x294>
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
 8001a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <PCD_EP_ISR_Handler+0x272>
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	3b01      	subs	r3, #1
 8001a94:	647b      	str	r3, [r7, #68]	; 0x44
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	029b      	lsls	r3, r3, #10
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e026      	b.n	8001b06 <PCD_EP_ISR_Handler+0x2e2>
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10a      	bne.n	8001ad6 <PCD_EP_ISR_Handler+0x2b2>
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	801a      	strh	r2, [r3, #0]
 8001ad4:	e017      	b.n	8001b06 <PCD_EP_ISR_Handler+0x2e2>
 8001ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x2cc>
 8001aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aec:	3301      	adds	r3, #1
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b16:	827b      	strh	r3, [r7, #18]
 8001b18:	8a7b      	ldrh	r3, [r7, #18]
 8001b1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b1e:	827b      	strh	r3, [r7, #18]
 8001b20:	8a7b      	ldrh	r3, [r7, #18]
 8001b22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b26:	827b      	strh	r3, [r7, #18]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	8a7b      	ldrh	r3, [r7, #18]
 8001b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	8013      	strh	r3, [r2, #0]
 8001b42:	e234      	b.n	8001fae <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b58:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f280 80fc 	bge.w	8001d5a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b78:	4013      	ands	r3, r2
 8001b7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b94:	b292      	uxth	r2, r2
 8001b96:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b98:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb0:	7b1b      	ldrb	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d125      	bne.n	8001c02 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	3306      	adds	r3, #6
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bde:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001be2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8092 	beq.w	8001d10 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	6959      	ldr	r1, [r3, #20]
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf6:	88da      	ldrh	r2, [r3, #6]
 8001bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bfc:	f004 fc81 	bl	8006502 <USB_ReadPMA>
 8001c00:	e086      	b.n	8001d10 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	78db      	ldrb	r3, [r3, #3]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d10a      	bne.n	8001c20 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c0e:	461a      	mov	r2, r3
 8001c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f9d9 	bl	8001fca <HAL_PCD_EP_DB_Receive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001c1e:	e077      	b.n	8001d10 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	441a      	add	r2, r3
 8001c4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	3302      	adds	r3, #2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001caa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d02e      	beq.n	8001d10 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	6959      	ldr	r1, [r3, #20]
 8001cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbc:	891a      	ldrh	r2, [r3, #8]
 8001cbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cc2:	f004 fc1e 	bl	8006502 <USB_ReadPMA>
 8001cc6:	e023      	b.n	8001d10 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3306      	adds	r3, #6
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cf4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	6959      	ldr	r1, [r3, #20]
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	895a      	ldrh	r2, [r3, #10]
 8001d08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d0c:	f004 fbf9 	bl	8006502 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	69da      	ldr	r2, [r3, #28]
 8001d14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d18:	441a      	add	r2, r3
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d26:	441a      	add	r2, r3
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <PCD_EP_ISR_Handler+0x51c>
 8001d34:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d206      	bcs.n	8001d4e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f008 fce8 	bl	800a71c <HAL_PCD_DataOutStageCallback>
 8001d4c:	e005      	b.n	8001d5a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 f905 	bl	8004f64 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8123 	beq.w	8001fae <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	441a      	add	r2, r3
 8001da8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dba:	78db      	ldrb	r3, [r3, #3]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	f040 80a2 	bne.w	8001f06 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dca:	7b1b      	ldrb	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8093 	beq.w	8001ef8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d046      	beq.n	8001e6c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d126      	bne.n	8001e34 <PCD_EP_ISR_Handler+0x610>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	4413      	add	r3, r2
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	011a      	lsls	r2, r3, #4
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	4413      	add	r3, r2
 8001e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	801a      	strh	r2, [r3, #0]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	e061      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x6d4>
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	785b      	ldrb	r3, [r3, #1]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d15d      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0x6d4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	4413      	add	r3, r2
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	011a      	lsls	r2, r3, #4
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	e045      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e74:	785b      	ldrb	r3, [r3, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d126      	bne.n	8001ec8 <PCD_EP_ISR_Handler+0x6a4>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8e:	4413      	add	r3, r2
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	011a      	lsls	r2, r3, #4
 8001e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	e017      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x6d4>
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d113      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0x6d4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ede:	4413      	add	r3, r2
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	011a      	lsls	r2, r3, #4
 8001ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eea:	4413      	add	r3, r2
 8001eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f008 fc27 	bl	800a752 <HAL_PCD_DataInStageCallback>
 8001f04:	e053      	b.n	8001fae <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d146      	bne.n	8001fa0 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	3302      	adds	r3, #2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d907      	bls.n	8001f5a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f52:	1ad2      	subs	r2, r2, r3
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	619a      	str	r2, [r3, #24]
 8001f58:	e002      	b.n	8001f60 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f008 fbef 	bl	800a752 <HAL_PCD_DataInStageCallback>
 8001f74:	e01b      	b.n	8001fae <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f7e:	441a      	add	r2, r3
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f8c:	441a      	add	r2, r3
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f90:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 ffe3 	bl	8004f64 <USB_EPStartXfer>
 8001f9e:	e006      	b.n	8001fae <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f91b 	bl	80021e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f6ff ac37 	blt.w	800182e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3758      	adds	r7, #88	; 0x58
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b088      	sub	sp, #32
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d07e      	beq.n	80020e0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	8b7b      	ldrh	r3, [r7, #26]
 8002012:	429a      	cmp	r2, r3
 8002014:	d306      	bcc.n	8002024 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	8b7b      	ldrh	r3, [r7, #26]
 800201c:	1ad2      	subs	r2, r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	619a      	str	r2, [r3, #24]
 8002022:	e002      	b.n	800202a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d123      	bne.n	800207a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204c:	833b      	strh	r3, [r7, #24]
 800204e:	8b3b      	ldrh	r3, [r7, #24]
 8002050:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002054:	833b      	strh	r3, [r7, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	441a      	add	r2, r3
 8002064:	8b3b      	ldrh	r3, [r7, #24]
 8002066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800206a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800206e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002076:	b29b      	uxth	r3, r3
 8002078:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01f      	beq.n	80020c4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	82fb      	strh	r3, [r7, #22]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	8afb      	ldrh	r3, [r7, #22]
 80020b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020c4:	8b7b      	ldrh	r3, [r7, #26]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8087 	beq.w	80021da <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	891a      	ldrh	r2, [r3, #8]
 80020d8:	8b7b      	ldrh	r3, [r7, #26]
 80020da:	f004 fa12 	bl	8006502 <USB_ReadPMA>
 80020de:	e07c      	b.n	80021da <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	3306      	adds	r3, #6
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002108:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	8b7b      	ldrh	r3, [r7, #26]
 8002110:	429a      	cmp	r2, r3
 8002112:	d306      	bcc.n	8002122 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	8b7b      	ldrh	r3, [r7, #26]
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	619a      	str	r2, [r3, #24]
 8002120:	e002      	b.n	8002128 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d123      	bne.n	8002178 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	83fb      	strh	r3, [r7, #30]
 800214c:	8bfb      	ldrh	r3, [r7, #30]
 800214e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002152:	83fb      	strh	r3, [r7, #30]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	441a      	add	r2, r3
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	b29b      	uxth	r3, r3
 8002176:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11f      	bne.n	80021c2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219c:	83bb      	strh	r3, [r7, #28]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	441a      	add	r2, r3
 80021ac:	8bbb      	ldrh	r3, [r7, #28]
 80021ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021be:	b29b      	uxth	r3, r3
 80021c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021c2:	8b7b      	ldrh	r3, [r7, #26]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6959      	ldr	r1, [r3, #20]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	895a      	ldrh	r2, [r3, #10]
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	f004 f994 	bl	8006502 <USB_ReadPMA>
    }
  }

  return count;
 80021da:	8b7b      	ldrh	r3, [r7, #26]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0a4      	sub	sp, #144	; 0x90
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 81dd 	beq.w	80025b8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	3302      	adds	r3, #2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002226:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002232:	429a      	cmp	r2, r3
 8002234:	d907      	bls.n	8002246 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800223e:	1ad2      	subs	r2, r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	619a      	str	r2, [r3, #24]
 8002244:	e002      	b.n	800224c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 80b9 	bne.w	80023c8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d126      	bne.n	80022ac <HAL_PCD_EP_DB_Transmit+0xc8>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	4413      	add	r3, r2
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	011a      	lsls	r2, r3, #4
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	4413      	add	r3, r2
 8002280:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002290:	b29a      	uxth	r2, r3
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	801a      	strh	r2, [r3, #0]
 80022aa:	e01a      	b.n	80022e2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	785b      	ldrb	r3, [r3, #1]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d116      	bne.n	80022e2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	4413      	add	r3, r2
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	011a      	lsls	r2, r3, #4
 80022d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d4:	4413      	add	r3, r2
 80022d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d126      	bne.n	800233e <HAL_PCD_EP_DB_Transmit+0x15a>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4413      	add	r3, r2
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	011a      	lsls	r2, r3, #4
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002322:	b29a      	uxth	r2, r3
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	801a      	strh	r2, [r3, #0]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002336:	b29a      	uxth	r2, r3
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	e017      	b.n	800236e <HAL_PCD_EP_DB_Transmit+0x18a>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d113      	bne.n	800236e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	4413      	add	r3, r2
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	011a      	lsls	r2, r3, #4
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	4413      	add	r3, r2
 8002362:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2200      	movs	r2, #0
 800236c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f008 f9ec 	bl	800a752 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 82fc 	beq.w	800297e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	82fb      	strh	r3, [r7, #22]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	441a      	add	r2, r3
 80023b0:	8afb      	ldrh	r3, [r7, #22]
 80023b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	8013      	strh	r3, [r2, #0]
 80023c6:	e2da      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d021      	beq.n	8002416 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	441a      	add	r2, r3
 80023fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002412:	b29b      	uxth	r3, r3
 8002414:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241c:	2b01      	cmp	r3, #1
 800241e:	f040 82ae 	bne.w	800297e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800242a:	441a      	add	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002438:	441a      	add	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	d30b      	bcc.n	8002462 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	621a      	str	r2, [r3, #32]
 8002460:	e017      	b.n	8002492 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800246a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800246e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800247a:	e00a      	b.n	8002492 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d165      	bne.n	8002566 <HAL_PCD_EP_DB_Transmit+0x382>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	4413      	add	r3, r2
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	011a      	lsls	r2, r3, #4
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	4413      	add	r3, r2
 80024bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024d6:	2b3e      	cmp	r3, #62	; 0x3e
 80024d8:	d91d      	bls.n	8002516 <HAL_PCD_EP_DB_Transmit+0x332>
 80024da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x310>
 80024ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f0:	3b01      	subs	r3, #1
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	b29b      	uxth	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800250a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250e:	b29a      	uxth	r2, r3
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	e044      	b.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <HAL_PCD_EP_DB_Transmit+0x350>
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252c:	b29a      	uxth	r2, r3
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	e035      	b.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
 800253c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254a:	3301      	adds	r3, #1
 800254c:	64bb      	str	r3, [r7, #72]	; 0x48
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002556:	b29b      	uxth	r3, r3
 8002558:	029b      	lsls	r3, r3, #10
 800255a:	b29b      	uxth	r3, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	e01c      	b.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d118      	bne.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	647b      	str	r3, [r7, #68]	; 0x44
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002582:	4413      	add	r3, r2
 8002584:	647b      	str	r3, [r7, #68]	; 0x44
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	011a      	lsls	r2, r3, #4
 800258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258e:	4413      	add	r3, r2
 8002590:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002594:	643b      	str	r3, [r7, #64]	; 0x40
 8002596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259a:	b29a      	uxth	r2, r3
 800259c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	6959      	ldr	r1, [r3, #20]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	891a      	ldrh	r2, [r3, #8]
 80025ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f003 ff61 	bl	8006478 <USB_WritePMA>
 80025b6:	e1e2      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	3306      	adds	r3, #6
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d307      	bcc.n	8002600 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025f8:	1ad2      	subs	r2, r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	619a      	str	r2, [r3, #24]
 80025fe:	e002      	b.n	8002606 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 80c0 	bne.w	8002790 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d126      	bne.n	8002666 <HAL_PCD_EP_DB_Transmit+0x482>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800262c:	4413      	add	r3, r2
 800262e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	011a      	lsls	r2, r3, #4
 8002636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002638:	4413      	add	r3, r2
 800263a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800263e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264a:	b29a      	uxth	r2, r3
 800264c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265e:	b29a      	uxth	r2, r3
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	e01a      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d116      	bne.n	800269c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	667b      	str	r3, [r7, #100]	; 0x64
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002682:	4413      	add	r3, r2
 8002684:	667b      	str	r3, [r7, #100]	; 0x64
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	011a      	lsls	r2, r3, #4
 800268c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800268e:	4413      	add	r3, r2
 8002690:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002694:	663b      	str	r3, [r7, #96]	; 0x60
 8002696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002698:	2200      	movs	r2, #0
 800269a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	677b      	str	r3, [r7, #116]	; 0x74
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d12b      	bne.n	8002702 <HAL_PCD_EP_DB_Transmit+0x51e>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	4413      	add	r3, r2
 80026c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	011a      	lsls	r2, r3, #4
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	4413      	add	r3, r2
 80026cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	e017      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d113      	bne.n	8002732 <HAL_PCD_EP_DB_Transmit+0x54e>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002718:	4413      	add	r3, r2
 800271a:	677b      	str	r3, [r7, #116]	; 0x74
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	011a      	lsls	r2, r3, #4
 8002722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002724:	4413      	add	r3, r2
 8002726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800272a:	673b      	str	r3, [r7, #112]	; 0x70
 800272c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f008 f80a 	bl	800a752 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 811a 	bne.w	800297e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800277a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]
 800278e:	e0f6      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d121      	bne.n	80027de <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027da:	b29b      	uxth	r3, r3
 80027dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	f040 80ca 	bne.w	800297e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027f2:	441a      	add	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002800:	441a      	add	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	429a      	cmp	r2, r3
 8002810:	d30b      	bcc.n	800282a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6a1a      	ldr	r2, [r3, #32]
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	621a      	str	r2, [r3, #32]
 8002828:	e017      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002842:	e00a      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	657b      	str	r3, [r7, #84]	; 0x54
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d165      	bne.n	8002934 <HAL_PCD_EP_DB_Transmit+0x750>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287c:	4413      	add	r3, r2
 800287e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	011a      	lsls	r2, r3, #4
 8002886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002888:	4413      	add	r3, r2
 800288a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800288e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289a:	b29a      	uxth	r2, r3
 800289c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a4:	2b3e      	cmp	r3, #62	; 0x3e
 80028a6:	d91d      	bls.n	80028e4 <HAL_PCD_EP_DB_Transmit+0x700>
 80028a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80028b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80028bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028be:	3b01      	subs	r3, #1
 80028c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80028c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	029b      	lsls	r3, r3, #10
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028dc:	b29a      	uxth	r2, r3
 80028de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	e041      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x784>
 80028e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_PCD_EP_DB_Transmit+0x71e>
 80028ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	e032      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x784>
 8002902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	66bb      	str	r3, [r7, #104]	; 0x68
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_PCD_EP_DB_Transmit+0x738>
 8002916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002918:	3301      	adds	r3, #1
 800291a:	66bb      	str	r3, [r7, #104]	; 0x68
 800291c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29a      	uxth	r2, r3
 8002922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002924:	b29b      	uxth	r3, r3
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	b29b      	uxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	b29a      	uxth	r2, r3
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	801a      	strh	r2, [r3, #0]
 8002932:	e019      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x784>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <HAL_PCD_EP_DB_Transmit+0x784>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	4413      	add	r3, r2
 800294c:	657b      	str	r3, [r7, #84]	; 0x54
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	011a      	lsls	r2, r3, #4
 8002954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002956:	4413      	add	r3, r2
 8002958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800295c:	653b      	str	r3, [r7, #80]	; 0x50
 800295e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002962:	b29a      	uxth	r2, r3
 8002964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002966:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6959      	ldr	r1, [r3, #20]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	895a      	ldrh	r2, [r3, #10]
 8002974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002978:	b29b      	uxth	r3, r3
 800297a:	f003 fd7d 	bl	8006478 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002998:	82bb      	strh	r3, [r7, #20]
 800299a:	8abb      	ldrh	r3, [r7, #20]
 800299c:	f083 0310 	eor.w	r3, r3, #16
 80029a0:	82bb      	strh	r3, [r7, #20]
 80029a2:	8abb      	ldrh	r3, [r7, #20]
 80029a4:	f083 0320 	eor.w	r3, r3, #32
 80029a8:	82bb      	strh	r3, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	441a      	add	r2, r3
 80029b8:	8abb      	ldrh	r3, [r7, #20]
 80029ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3790      	adds	r7, #144	; 0x90
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	4613      	mov	r3, r2
 80029e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e009      	b.n	8002a22 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a0e:	897a      	ldrh	r2, [r7, #10]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a22:	893b      	ldrh	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	80da      	strh	r2, [r3, #6]
 8002a36:	e00b      	b.n	8002a50 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e26c      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8087 	beq.w	8002b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a7c:	4b92      	ldr	r3, [pc, #584]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d00c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d112      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
 8002a94:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d06c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x12c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d168      	bne.n	8002b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e246      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x76>
 8002ac4:	4b80      	ldr	r3, [pc, #512]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a7f      	ldr	r2, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e02e      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7a      	ldr	r2, [pc, #488]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b78      	ldr	r3, [pc, #480]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a77      	ldr	r2, [pc, #476]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01d      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0xbc>
 8002afe:	4b72      	ldr	r3, [pc, #456]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a71      	ldr	r2, [pc, #452]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002b18:	4b6b      	ldr	r3, [pc, #428]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6a      	ldr	r2, [pc, #424]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a67      	ldr	r2, [pc, #412]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fd ff46 	bl	80009c8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fd ff42 	bl	80009c8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1fa      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b5d      	ldr	r3, [pc, #372]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe4>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fd ff32 	bl	80009c8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fd ff2e 	bl	80009c8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1e6      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x10c>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b96:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ba2:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d11c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x18c>
 8002bae:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x176>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e1ba      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4939      	ldr	r1, [pc, #228]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	e03a      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7fd fee7 	bl	80009c8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fd fee3 	bl	80009c8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e19b      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4927      	ldr	r1, [pc, #156]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fd fec6 	bl	80009c8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fd fec2 	bl	80009c8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e17a      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d03a      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d019      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fd fea6 	bl	80009c8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fd fea2 	bl	80009c8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e15a      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f000 fae8 	bl	8003274 <RCC_Delay>
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fd fe8c 	bl	80009c8 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7fd fe88 	bl	80009c8 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d908      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e140      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	42420000 	.word	0x42420000
 8002cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	4b9e      	ldr	r3, [pc, #632]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e9      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a6 	beq.w	8002e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b97      	ldr	r3, [pc, #604]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b94      	ldr	r3, [pc, #592]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a93      	ldr	r2, [pc, #588]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]
 8002d0a:	4b91      	ldr	r3, [pc, #580]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b8e      	ldr	r3, [pc, #568]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a8a      	ldr	r2, [pc, #552]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fd fe49 	bl	80009c8 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fd fe45 	bl	80009c8 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0fd      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b81      	ldr	r3, [pc, #516]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x312>
 8002d60:	4b7b      	ldr	r3, [pc, #492]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a7a      	ldr	r2, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	e02d      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x334>
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	4b73      	ldr	r3, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a72      	ldr	r2, [pc, #456]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	e01c      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x356>
 8002d98:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a6c      	ldr	r2, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6213      	str	r3, [r2, #32]
 8002dbe:	4b64      	ldr	r3, [pc, #400]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fd fdf9 	bl	80009c8 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fd fdf5 	bl	80009c8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0ab      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b57      	ldr	r3, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCC_OscConfig+0x37e>
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fd fde3 	bl	80009c8 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fd fddf 	bl	80009c8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e095      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ee      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2e:	4b48      	ldr	r3, [pc, #288]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a47      	ldr	r2, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8081 	beq.w	8002f46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e44:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d061      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d146      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCC_OscConfig+0x4fc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fd fdb3 	bl	80009c8 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fd fdaf 	bl	80009c8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e067      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d108      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e8e:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	492d      	ldr	r1, [pc, #180]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a19      	ldr	r1, [r3, #32]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	4927      	ldr	r1, [pc, #156]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x4fc>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fd fd83 	bl	80009c8 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fd fd7f 	bl	80009c8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e037      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x46a>
 8002ee4:	e02f      	b.n	8002f46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_RCC_OscConfig+0x4fc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fd fd6c 	bl	80009c8 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fd fd68 	bl	80009c8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e020      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x498>
 8002f12:	e018      	b.n	8002f46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e013      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42420060 	.word	0x42420060

08002f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0d0      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b67      	ldr	r3, [pc, #412]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4965      	ldr	r1, [pc, #404]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b8      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	494d      	ldr	r1, [pc, #308]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d040      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d115      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e07f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e073      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4936      	ldr	r1, [pc, #216]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fd fcbc 	bl	80009c8 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fd fcb8 	bl	80009c8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e053      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d210      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4922      	ldr	r1, [pc, #136]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e032      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4916      	ldr	r1, [pc, #88]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	490e      	ldr	r1, [pc, #56]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ea:	f000 f821 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030ee:	4602      	mov	r2, r0
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	490a      	ldr	r1, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	5ccb      	ldrb	r3, [r1, r3]
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fb46 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	0800b5cc 	.word	0x0800b5cc
 8003128:	20000000 	.word	0x20000000
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d002      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x30>
 800315a:	2b08      	cmp	r3, #8
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x36>
 800315e:	e027      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	613b      	str	r3, [r7, #16]
      break;
 8003164:	e027      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0c5b      	lsrs	r3, r3, #17
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	fb02 f203 	mul.w	r2, r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e004      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	613b      	str	r3, [r7, #16]
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031b2:	613b      	str	r3, [r7, #16]
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	693b      	ldr	r3, [r7, #16]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	007a1200 	.word	0x007a1200
 80031cc:	0800b5e4 	.word	0x0800b5e4
 80031d0:	0800b5f4 	.word	0x0800b5f4
 80031d4:	003d0900 	.word	0x003d0900

080031d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031dc:	4b02      	ldr	r3, [pc, #8]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	20000000 	.word	0x20000000

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f0:	f7ff fff2 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	0800b5dc 	.word	0x0800b5dc

08003214 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	220f      	movs	r2, #15
 8003222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_RCC_GetClockConfig+0x58>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_RCC_GetClockConfig+0x58>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_GetClockConfig+0x58>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_RCC_GetClockConfig+0x58>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_GetClockConfig+0x5c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0207 	and.w	r2, r3, #7
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	40022000 	.word	0x40022000

08003274 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <RCC_Delay+0x34>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <RCC_Delay+0x38>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0a5b      	lsrs	r3, r3, #9
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003290:	bf00      	nop
  }
  while (Delay --);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	60fa      	str	r2, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f9      	bne.n	8003290 <RCC_Delay+0x1c>
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	20000000 	.word	0x20000000
 80032ac:	10624dd3 	.word	0x10624dd3

080032b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d07d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d0:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10d      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	4b4c      	ldr	r3, [pc, #304]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	4a4b      	ldr	r2, [pc, #300]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	61d3      	str	r3, [r2, #28]
 80032e8:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d118      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003304:	4b43      	ldr	r3, [pc, #268]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a42      	ldr	r2, [pc, #264]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003310:	f7fd fb5a 	bl	80009c8 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	e008      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003318:	f7fd fb56 	bl	80009c8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e06d      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003336:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02e      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	429a      	cmp	r2, r3
 8003352:	d027      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003354:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800336a:	4a29      	ldr	r2, [pc, #164]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d014      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fd fb25 	bl	80009c8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd fb21 	bl	80009c8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e036      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4917      	ldr	r1, [pc, #92]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	490b      	ldr	r1, [pc, #44]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4904      	ldr	r1, [pc, #16]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	40007000 	.word	0x40007000
 8003418:	42420440 	.word	0x42420440

0800341c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e041      	b.n	80034b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd f95e 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f000 fc56 	bl	8003d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_TIM_Base_Stop+0x38>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	f240 4344 	movw	r3, #1092	; 0x444
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_Base_Stop+0x38>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
	...

08003508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e03a      	b.n	8003596 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIM_Base_Start_IT+0x98>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00e      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x58>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d009      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x58>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x58>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d111      	bne.n	8003584 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d010      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	e007      	b.n	8003594 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800

080035ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e041      	b.n	8003642 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f839 	bl	800364a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 fb8e 	bl	8003d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_TIM_PWM_Start+0x24>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e022      	b.n	80036c6 <HAL_TIM_PWM_Start+0x6a>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d109      	bne.n	800369a <HAL_TIM_PWM_Start+0x3e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e015      	b.n	80036c6 <HAL_TIM_PWM_Start+0x6a>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d109      	bne.n	80036b4 <HAL_TIM_PWM_Start+0x58>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e008      	b.n	80036c6 <HAL_TIM_PWM_Start+0x6a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e05e      	b.n	800378c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0x82>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036dc:	e013      	b.n	8003706 <HAL_TIM_PWM_Start+0xaa>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0x92>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	e00b      	b.n	8003706 <HAL_TIM_PWM_Start+0xaa>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036fc:	e003      	b.n	8003706 <HAL_TIM_PWM_Start+0xaa>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fd7c 	bl	800420c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_PWM_Start+0x138>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d107      	bne.n	800372e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_TIM_PWM_Start+0x138>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_TIM_PWM_Start+0xfa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d009      	beq.n	8003756 <HAL_TIM_PWM_Start+0xfa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a14      	ldr	r2, [pc, #80]	; (8003798 <HAL_TIM_PWM_Start+0x13c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIM_PWM_Start+0xfa>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a12      	ldr	r2, [pc, #72]	; (800379c <HAL_TIM_PWM_Start+0x140>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d111      	bne.n	800377a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b06      	cmp	r3, #6
 8003766:	d010      	beq.n	800378a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003778:	e007      	b.n	800378a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800

080037a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d122      	bne.n	80037fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0202 	mvn.w	r2, #2
 80037cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa76 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa69 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fa78 	bl	8003ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d122      	bne.n	8003850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b04      	cmp	r3, #4
 8003816:	d11b      	bne.n	8003850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0204 	mvn.w	r2, #4
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa4c 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa3f 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fa4e 	bl	8003ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b08      	cmp	r3, #8
 800385c:	d122      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d11b      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0208 	mvn.w	r2, #8
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2204      	movs	r2, #4
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa22 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa15 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa24 	bl	8003ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0210 	mvn.w	r2, #16
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2208      	movs	r2, #8
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9f8 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f9eb 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f9fa 	bl	8003ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0201 	mvn.w	r2, #1
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fc fe80 	bl	8000624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fce9 	bl	8004322 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9be 	bl	8003cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b20      	cmp	r3, #32
 8003996:	d107      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0220 	mvn.w	r2, #32
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fcb4 	bl	8004310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e0ae      	b.n	8003b2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	f200 809f 	bhi.w	8003b1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003b1d 	.word	0x08003b1d
 80039ec:	08003b1d 	.word	0x08003b1d
 80039f0:	08003b1d 	.word	0x08003b1d
 80039f4:	08003a59 	.word	0x08003a59
 80039f8:	08003b1d 	.word	0x08003b1d
 80039fc:	08003b1d 	.word	0x08003b1d
 8003a00:	08003b1d 	.word	0x08003b1d
 8003a04:	08003a9b 	.word	0x08003a9b
 8003a08:	08003b1d 	.word	0x08003b1d
 8003a0c:	08003b1d 	.word	0x08003b1d
 8003a10:	08003b1d 	.word	0x08003b1d
 8003a14:	08003adb 	.word	0x08003adb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f9d6 	bl	8003dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0208 	orr.w	r2, r2, #8
 8003a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6999      	ldr	r1, [r3, #24]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	619a      	str	r2, [r3, #24]
      break;
 8003a56:	e064      	b.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fa1c 	bl	8003e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6999      	ldr	r1, [r3, #24]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	619a      	str	r2, [r3, #24]
      break;
 8003a98:	e043      	b.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fa65 	bl	8003f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0208 	orr.w	r2, r2, #8
 8003ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0204 	bic.w	r2, r2, #4
 8003ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69d9      	ldr	r1, [r3, #28]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	61da      	str	r2, [r3, #28]
      break;
 8003ad8:	e023      	b.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 faaf 	bl	8004044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69d9      	ldr	r1, [r3, #28]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	61da      	str	r2, [r3, #28]
      break;
 8003b1a:	e002      	b.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_ConfigClockSource+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0b4      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x186>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b88:	d03e      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0xd4>
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	f200 8087 	bhi.w	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	f000 8086 	beq.w	8003ca6 <HAL_TIM_ConfigClockSource+0x172>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d87f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b70      	cmp	r3, #112	; 0x70
 8003ba2:	d01a      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xa6>
 8003ba4:	2b70      	cmp	r3, #112	; 0x70
 8003ba6:	d87b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b60      	cmp	r3, #96	; 0x60
 8003baa:	d050      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x11a>
 8003bac:	2b60      	cmp	r3, #96	; 0x60
 8003bae:	d877      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b50      	cmp	r3, #80	; 0x50
 8003bb2:	d03c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0xfa>
 8003bb4:	2b50      	cmp	r3, #80	; 0x50
 8003bb6:	d873      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d058      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x13a>
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d86f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b30      	cmp	r3, #48	; 0x30
 8003bc2:	d064      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bc4:	2b30      	cmp	r3, #48	; 0x30
 8003bc6:	d86b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d060      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d867      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05c      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d05a      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	e062      	b.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f000 faf0 	bl	80041ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	609a      	str	r2, [r3, #8]
      break;
 8003c06:	e04f      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6899      	ldr	r1, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f000 fad9 	bl	80041ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c2a:	609a      	str	r2, [r3, #8]
      break;
 8003c2c:	e03c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 fa50 	bl	80040e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2150      	movs	r1, #80	; 0x50
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 faa7 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e02c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 fa6e 	bl	800413c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2160      	movs	r1, #96	; 0x60
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa97 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e01c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 fa30 	bl	80040e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fa87 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e00c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f000 fa7e 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
	...

08003d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <TIM_Base_SetConfig+0xb8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_Base_SetConfig+0x30>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2a:	d007      	beq.n	8003d3c <TIM_Base_SetConfig+0x30>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <TIM_Base_SetConfig+0xbc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_Base_SetConfig+0x30>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <TIM_Base_SetConfig+0xc0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d108      	bne.n	8003d4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <TIM_Base_SetConfig+0xb8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d007      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <TIM_Base_SetConfig+0xbc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <TIM_Base_SetConfig+0xc0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d108      	bne.n	8003d80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <TIM_Base_SetConfig+0xb8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d103      	bne.n	8003db4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	615a      	str	r2, [r3, #20]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800

08003dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f023 0201 	bic.w	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 0302 	bic.w	r3, r3, #2
 8003e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <TIM_OC1_SetConfig+0xc8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10c      	bne.n	8003e46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0308 	bic.w	r3, r3, #8
 8003e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <TIM_OC1_SetConfig+0xc8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d111      	bne.n	8003e72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	621a      	str	r2, [r3, #32]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00

08003e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0210 	bic.w	r2, r3, #16
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0320 	bic.w	r3, r3, #32
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <TIM_OC2_SetConfig+0xd0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <TIM_OC2_SetConfig+0xd0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d113      	bne.n	8003f48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00

08003f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <TIM_OC3_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10d      	bne.n	8003fea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <TIM_OC3_SetConfig+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d113      	bne.n	800401a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40012c00 	.word	0x40012c00

08004044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800408e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	031b      	lsls	r3, r3, #12
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0f      	ldr	r2, [pc, #60]	; (80040dc <TIM_OC4_SetConfig+0x98>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d109      	bne.n	80040b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00

080040e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 030a 	bic.w	r3, r3, #10
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	031b      	lsls	r3, r3, #12
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004178:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	621a      	str	r2, [r3, #32]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f043 0307 	orr.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b087      	sub	sp, #28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	021a      	lsls	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	609a      	str	r2, [r3, #8]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2201      	movs	r2, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	43db      	mvns	r3, r3
 800422e:	401a      	ands	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004268:	2302      	movs	r3, #2
 800426a:	e046      	b.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d009      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a10      	ldr	r2, [pc, #64]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d10c      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800

08004310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004334:	b084      	sub	sp, #16
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	f107 0014 	add.w	r0, r7, #20
 8004342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	b004      	add	sp, #16
 8004352:	4770      	bx	lr

08004354 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004364:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004368:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004388:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800438c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	b29b      	uxth	r3, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	4013      	ands	r3, r2
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043cc:	b084      	sub	sp, #16
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	f107 0014 	add.w	r0, r7, #20
 80043da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	b004      	add	sp, #16
 800440a:	4770      	bx	lr

0800440c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800440c:	b480      	push	{r7}
 800440e:	b09d      	sub	sp, #116	; 0x74
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	78db      	ldrb	r3, [r3, #3]
 800443a:	2b03      	cmp	r3, #3
 800443c:	d81f      	bhi.n	800447e <USB_ActivateEndpoint+0x72>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <USB_ActivateEndpoint+0x38>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004455 	.word	0x08004455
 8004448:	08004471 	.word	0x08004471
 800444c:	08004487 	.word	0x08004487
 8004450:	08004463 	.word	0x08004463
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004454:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800445c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004460:	e012      	b.n	8004488 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004462:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004466:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800446a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800446e:	e00b      	b.n	8004488 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004470:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004478:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800447c:	e004      	b.n	8004488 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004484:	e000      	b.n	8004488 <USB_ActivateEndpoint+0x7c>
      break;
 8004486:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80044dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	7b1b      	ldrb	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8178 	bne.w	80047ea <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8084 	beq.w	800460c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4413      	add	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	011a      	lsls	r2, r3, #4
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	88db      	ldrh	r3, [r3, #6]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	827b      	strh	r3, [r7, #18]
 8004546:	8a7b      	ldrh	r3, [r7, #18]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01b      	beq.n	8004588 <USB_ActivateEndpoint+0x17c>
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	823b      	strh	r3, [r7, #16]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	8a3b      	ldrh	r3, [r7, #16]
 8004574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004584:	b29b      	uxth	r3, r3
 8004586:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d020      	beq.n	80045d2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a6:	81bb      	strh	r3, [r7, #12]
 80045a8:	89bb      	ldrh	r3, [r7, #12]
 80045aa:	f083 0320 	eor.w	r3, r3, #32
 80045ae:	81bb      	strh	r3, [r7, #12]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	89bb      	ldrh	r3, [r7, #12]
 80045bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]
 80045d0:	e2d5      	b.n	8004b7e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e8:	81fb      	strh	r3, [r7, #14]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
 800460a:	e2b8      	b.n	8004b7e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	4413      	add	r3, r2
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	011a      	lsls	r2, r3, #4
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	4413      	add	r3, r2
 800462a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	88db      	ldrh	r3, [r3, #6]
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	b29b      	uxth	r3, r3
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800464a:	b29b      	uxth	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	4413      	add	r3, r2
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	011a      	lsls	r2, r3, #4
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	4413      	add	r3, r2
 800465e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466e:	b29a      	uxth	r2, r3
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b3e      	cmp	r3, #62	; 0x3e
 800467a:	d91d      	bls.n	80046b8 <USB_ActivateEndpoint+0x2ac>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	66bb      	str	r3, [r7, #104]	; 0x68
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <USB_ActivateEndpoint+0x28a>
 8004690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004692:	3b01      	subs	r3, #1
 8004694:	66bb      	str	r3, [r7, #104]	; 0x68
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800469e:	b29b      	uxth	r3, r3
 80046a0:	029b      	lsls	r3, r3, #10
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	e026      	b.n	8004706 <USB_ActivateEndpoint+0x2fa>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <USB_ActivateEndpoint+0x2ca>
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	e017      	b.n	8004706 <USB_ActivateEndpoint+0x2fa>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <USB_ActivateEndpoint+0x2e4>
 80046ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ec:	3301      	adds	r3, #1
 80046ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	029b      	lsls	r3, r3, #10
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	b29a      	uxth	r2, r3
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	847b      	strh	r3, [r7, #34]	; 0x22
 8004714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01b      	beq.n	8004756 <USB_ActivateEndpoint+0x34a>
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	843b      	strh	r3, [r7, #32]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	441a      	add	r2, r3
 8004740:	8c3b      	ldrh	r3, [r7, #32]
 8004742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800474e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004752:	b29b      	uxth	r3, r3
 8004754:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d124      	bne.n	80047a8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	83bb      	strh	r3, [r7, #28]
 8004776:	8bbb      	ldrh	r3, [r7, #28]
 8004778:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800477c:	83bb      	strh	r3, [r7, #28]
 800477e:	8bbb      	ldrh	r3, [r7, #28]
 8004780:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004784:	83bb      	strh	r3, [r7, #28]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	8bbb      	ldrh	r3, [r7, #28]
 8004792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]
 80047a6:	e1ea      	b.n	8004b7e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	83fb      	strh	r3, [r7, #30]
 80047c0:	8bfb      	ldrh	r3, [r7, #30]
 80047c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047c6:	83fb      	strh	r3, [r7, #30]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	8bfb      	ldrh	r3, [r7, #30]
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]
 80047e8:	e1c9      	b.n	8004b7e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	78db      	ldrb	r3, [r3, #3]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d11e      	bne.n	8004830 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]
 800482e:	e01d      	b.n	800486c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	b29b      	uxth	r3, r3
 800486a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004876:	b29b      	uxth	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487c:	4413      	add	r3, r2
 800487e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	011a      	lsls	r2, r3, #4
 8004886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004888:	4413      	add	r3, r2
 800488a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	891b      	ldrh	r3, [r3, #8]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	657b      	str	r3, [r7, #84]	; 0x54
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b0:	4413      	add	r3, r2
 80048b2:	657b      	str	r3, [r7, #84]	; 0x54
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	011a      	lsls	r2, r3, #4
 80048ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048c2:	653b      	str	r3, [r7, #80]	; 0x50
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	895b      	ldrh	r3, [r3, #10]
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 8093 	bne.w	8004a04 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01b      	beq.n	8004932 <USB_ActivateEndpoint+0x526>
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004910:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800491e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004940:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01b      	beq.n	8004982 <USB_ActivateEndpoint+0x576>
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004960:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	441a      	add	r2, r3
 800496c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	873b      	strh	r3, [r7, #56]	; 0x38
 800499a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800499c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80049a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
 8004a02:	e0bc      	b.n	8004b7e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01d      	beq.n	8004a5c <USB_ActivateEndpoint+0x650>
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a36:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01d      	beq.n	8004ab4 <USB_ActivateEndpoint+0x6a8>
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	78db      	ldrb	r3, [r3, #3]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d024      	beq.n	8004b06 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ad6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ada:	f083 0320 	eor.w	r3, r3, #32
 8004ade:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]
 8004b04:	e01d      	b.n	8004b42 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004b7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3774      	adds	r7, #116	; 0x74
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b08d      	sub	sp, #52	; 0x34
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	7b1b      	ldrb	r3, [r3, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 808e 	bne.w	8004cbc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d044      	beq.n	8004c32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	81bb      	strh	r3, [r7, #12]
 8004bb6:	89bb      	ldrh	r3, [r7, #12]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01b      	beq.n	8004bf8 <USB_DeactivateEndpoint+0x6c>
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	817b      	strh	r3, [r7, #10]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	897b      	ldrh	r3, [r7, #10]
 8004be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0e:	813b      	strh	r3, [r7, #8]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
 8004c30:	e192      	b.n	8004f58 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	827b      	strh	r3, [r7, #18]
 8004c40:	8a7b      	ldrh	r3, [r7, #18]
 8004c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01b      	beq.n	8004c82 <USB_DeactivateEndpoint+0xf6>
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	823b      	strh	r3, [r7, #16]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	8a3b      	ldrh	r3, [r7, #16]
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c98:	81fb      	strh	r3, [r7, #14]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	89fb      	ldrh	r3, [r7, #14]
 8004ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	8013      	strh	r3, [r2, #0]
 8004cba:	e14d      	b.n	8004f58 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f040 80a5 	bne.w	8004e10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	843b      	strh	r3, [r7, #32]
 8004cd4:	8c3b      	ldrh	r3, [r7, #32]
 8004cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <USB_DeactivateEndpoint+0x18a>
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf4:	83fb      	strh	r3, [r7, #30]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	8bfb      	ldrh	r3, [r7, #30]
 8004d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	83bb      	strh	r3, [r7, #28]
 8004d24:	8bbb      	ldrh	r3, [r7, #28]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01b      	beq.n	8004d66 <USB_DeactivateEndpoint+0x1da>
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	837b      	strh	r3, [r7, #26]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	441a      	add	r2, r3
 8004d50:	8b7b      	ldrh	r3, [r7, #26]
 8004d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	833b      	strh	r3, [r7, #24]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	8b3b      	ldrh	r3, [r7, #24]
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db4:	82fb      	strh	r3, [r7, #22]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	8afb      	ldrh	r3, [r7, #22]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dec:	82bb      	strh	r3, [r7, #20]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	8abb      	ldrh	r3, [r7, #20]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
 8004e0e:	e0a3      	b.n	8004f58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <USB_DeactivateEndpoint+0x2d4>
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01b      	beq.n	8004eb0 <USB_DeactivateEndpoint+0x324>
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	441a      	add	r2, r3
 8004e9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3734      	adds	r7, #52	; 0x34
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b0c2      	sub	sp, #264	; 0x108
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	1d3b      	adds	r3, r7, #4
 8004f6c:	6018      	str	r0, [r3, #0]
 8004f6e:	463b      	mov	r3, r7
 8004f70:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f72:	463b      	mov	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f040 8545 	bne.w	8005a08 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f7e:	463b      	mov	r3, r7
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d905      	bls.n	8004f9a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f98:	e004      	b.n	8004fa4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	7b1b      	ldrb	r3, [r3, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d128      	bne.n	8005000 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004fae:	463b      	mov	r3, r7
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6959      	ldr	r1, [r3, #20]
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	88da      	ldrh	r2, [r3, #6]
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	1d38      	adds	r0, r7, #4
 8004fc2:	6800      	ldr	r0, [r0, #0]
 8004fc4:	f001 fa58 	bl	8006478 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	011a      	lsls	r2, r3, #4
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	f000 bcdb 	b.w	80059b6 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005000:	463b      	mov	r3, r7
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	78db      	ldrb	r3, [r3, #3]
 8005006:	2b02      	cmp	r3, #2
 8005008:	f040 836f 	bne.w	80056ea <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800500c:	463b      	mov	r3, r7
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	463b      	mov	r3, r7
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	429a      	cmp	r2, r3
 800501a:	f240 8313 	bls.w	8005644 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	463b      	mov	r3, r7
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	463b      	mov	r3, r7
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	441a      	add	r2, r3
 800504a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a1a      	ldr	r2, [r3, #32]
 8005068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506c:	1ad2      	subs	r2, r2, r3
 800506e:	463b      	mov	r3, r7
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 816d 	beq.w	800536a <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005090:	1d3b      	adds	r3, r7, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	633b      	str	r3, [r7, #48]	; 0x30
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d16e      	bne.n	800517e <USB_EPStartXfer+0x21a>
 80050a0:	1d3b      	adds	r3, r7, #4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	4413      	add	r3, r2
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	011a      	lsls	r2, r3, #4
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	4413      	add	r3, r2
 80050c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050de:	2b3e      	cmp	r3, #62	; 0x3e
 80050e0:	d921      	bls.n	8005126 <USB_EPStartXfer+0x1c2>
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <USB_EPStartXfer+0x19e>
 80050f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050fc:	3b01      	subs	r3, #1
 80050fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29a      	uxth	r2, r3
 8005108:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800510c:	b29b      	uxth	r3, r3
 800510e:	029b      	lsls	r3, r3, #10
 8005110:	b29b      	uxth	r3, r3
 8005112:	4313      	orrs	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511e:	b29a      	uxth	r2, r3
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e047      	b.n	80051b6 <USB_EPStartXfer+0x252>
 8005126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <USB_EPStartXfer+0x1e0>
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513c:	b29a      	uxth	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e038      	b.n	80051b6 <USB_EPStartXfer+0x252>
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <USB_EPStartXfer+0x200>
 800515a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800515e:	3301      	adds	r3, #1
 8005160:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	4313      	orrs	r3, r2
 8005176:	b29a      	uxth	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e01b      	b.n	80051b6 <USB_EPStartXfer+0x252>
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d116      	bne.n	80051b6 <USB_EPStartXfer+0x252>
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005190:	b29b      	uxth	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	4413      	add	r3, r2
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
 800519a:	463b      	mov	r3, r7
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	011a      	lsls	r2, r3, #4
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	4413      	add	r3, r2
 80051a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	895b      	ldrh	r3, [r3, #10]
 80051bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051c0:	463b      	mov	r3, r7
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051d0:	1d38      	adds	r0, r7, #4
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	f001 f950 	bl	8006478 <USB_WritePMA>
            ep->xfer_buff += len;
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e2:	441a      	add	r2, r3
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051ea:	463b      	mov	r3, r7
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d909      	bls.n	800520e <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 80051fa:	463b      	mov	r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1a      	ldr	r2, [r3, #32]
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005204:	1ad2      	subs	r2, r2, r3
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	621a      	str	r2, [r3, #32]
 800520c:	e008      	b.n	8005220 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005220:	463b      	mov	r3, r7
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d16e      	bne.n	8005308 <USB_EPStartXfer+0x3a4>
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	4413      	add	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525e:	b29a      	uxth	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005268:	2b3e      	cmp	r3, #62	; 0x3e
 800526a:	d921      	bls.n	80052b0 <USB_EPStartXfer+0x34c>
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <USB_EPStartXfer+0x328>
 8005282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005286:	3b01      	subs	r3, #1
 8005288:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29a      	uxth	r2, r3
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005296:	b29b      	uxth	r3, r3
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	b29b      	uxth	r3, r3
 800529c:	4313      	orrs	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e04a      	b.n	8005346 <USB_EPStartXfer+0x3e2>
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <USB_EPStartXfer+0x36a>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e03b      	b.n	8005346 <USB_EPStartXfer+0x3e2>
 80052ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <USB_EPStartXfer+0x38a>
 80052e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e8:	3301      	adds	r3, #1
 80052ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	029b      	lsls	r3, r3, #10
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4313      	orrs	r3, r2
 8005300:	b29a      	uxth	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e01e      	b.n	8005346 <USB_EPStartXfer+0x3e2>
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d119      	bne.n	8005346 <USB_EPStartXfer+0x3e2>
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	4413      	add	r3, r2
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	463b      	mov	r3, r7
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	011a      	lsls	r2, r3, #4
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	4413      	add	r3, r2
 8005336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005340:	b29a      	uxth	r2, r3
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	891b      	ldrh	r3, [r3, #8]
 800534c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6959      	ldr	r1, [r3, #20]
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535a:	b29b      	uxth	r3, r3
 800535c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005360:	1d38      	adds	r0, r7, #4
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	f001 f888 	bl	8006478 <USB_WritePMA>
 8005368:	e325      	b.n	80059b6 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d16e      	bne.n	8005452 <USB_EPStartXfer+0x4ee>
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	64bb      	str	r3, [r7, #72]	; 0x48
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005388:	4413      	add	r3, r2
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
 800538c:	463b      	mov	r3, r7
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	011a      	lsls	r2, r3, #4
 8005394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005396:	4413      	add	r3, r2
 8005398:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800539c:	647b      	str	r3, [r7, #68]	; 0x44
 800539e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b2:	2b3e      	cmp	r3, #62	; 0x3e
 80053b4:	d921      	bls.n	80053fa <USB_EPStartXfer+0x496>
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <USB_EPStartXfer+0x472>
 80053cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053d0:	3b01      	subs	r3, #1
 80053d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	029b      	lsls	r3, r3, #10
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	e04a      	b.n	8005490 <USB_EPStartXfer+0x52c>
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <USB_EPStartXfer+0x4b4>
 8005402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005410:	b29a      	uxth	r2, r3
 8005412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e03b      	b.n	8005490 <USB_EPStartXfer+0x52c>
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <USB_EPStartXfer+0x4d4>
 800542e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005432:	3301      	adds	r3, #1
 8005434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29a      	uxth	r2, r3
 800543e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005442:	b29b      	uxth	r3, r3
 8005444:	029b      	lsls	r3, r3, #10
 8005446:	b29b      	uxth	r3, r3
 8005448:	4313      	orrs	r3, r2
 800544a:	b29a      	uxth	r2, r3
 800544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e01e      	b.n	8005490 <USB_EPStartXfer+0x52c>
 8005452:	463b      	mov	r3, r7
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d119      	bne.n	8005490 <USB_EPStartXfer+0x52c>
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	653b      	str	r3, [r7, #80]	; 0x50
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005470:	4413      	add	r3, r2
 8005472:	653b      	str	r3, [r7, #80]	; 0x50
 8005474:	463b      	mov	r3, r7
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	011a      	lsls	r2, r3, #4
 800547c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547e:	4413      	add	r3, r2
 8005480:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548a:	b29a      	uxth	r2, r3
 800548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005490:	463b      	mov	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	891b      	ldrh	r3, [r3, #8]
 8005496:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6959      	ldr	r1, [r3, #20]
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054aa:	1d38      	adds	r0, r7, #4
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	f000 ffe3 	bl	8006478 <USB_WritePMA>
            ep->xfer_buff += len;
 80054b2:	463b      	mov	r3, r7
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054bc:	441a      	add	r2, r3
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d909      	bls.n	80054e8 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054de:	1ad2      	subs	r2, r2, r3
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	621a      	str	r2, [r3, #32]
 80054e6:	e008      	b.n	80054fa <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 80054e8:	463b      	mov	r3, r7
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2200      	movs	r2, #0
 80054f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005500:	463b      	mov	r3, r7
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d16e      	bne.n	80055e8 <USB_EPStartXfer+0x684>
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	4413      	add	r3, r2
 8005520:	63bb      	str	r3, [r7, #56]	; 0x38
 8005522:	463b      	mov	r3, r7
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	011a      	lsls	r2, r3, #4
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	4413      	add	r3, r2
 800552e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	b29a      	uxth	r2, r3
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005548:	2b3e      	cmp	r3, #62	; 0x3e
 800554a:	d921      	bls.n	8005590 <USB_EPStartXfer+0x62c>
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <USB_EPStartXfer+0x608>
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005566:	3b01      	subs	r3, #1
 8005568:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29a      	uxth	r2, r3
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005576:	b29b      	uxth	r3, r3
 8005578:	029b      	lsls	r3, r3, #10
 800557a:	b29b      	uxth	r3, r3
 800557c:	4313      	orrs	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005588:	b29a      	uxth	r2, r3
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	e047      	b.n	8005620 <USB_EPStartXfer+0x6bc>
 8005590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <USB_EPStartXfer+0x64a>
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e038      	b.n	8005620 <USB_EPStartXfer+0x6bc>
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <USB_EPStartXfer+0x66a>
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	3301      	adds	r3, #1
 80055ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29b      	uxth	r3, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	e01b      	b.n	8005620 <USB_EPStartXfer+0x6bc>
 80055e8:	463b      	mov	r3, r7
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d116      	bne.n	8005620 <USB_EPStartXfer+0x6bc>
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005600:	4413      	add	r3, r2
 8005602:	643b      	str	r3, [r7, #64]	; 0x40
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	011a      	lsls	r2, r3, #4
 800560c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560e:	4413      	add	r3, r2
 8005610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561a:	b29a      	uxth	r2, r3
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	895b      	ldrh	r3, [r3, #10]
 8005626:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6959      	ldr	r1, [r3, #20]
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005634:	b29b      	uxth	r3, r3
 8005636:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800563a:	1d38      	adds	r0, r7, #4
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f000 ff1b 	bl	8006478 <USB_WritePMA>
 8005642:	e1b8      	b.n	80059b6 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005698:	1d3b      	adds	r3, r7, #4
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a6:	4413      	add	r3, r2
 80056a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	011a      	lsls	r2, r3, #4
 80056b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b4:	4413      	add	r3, r2
 80056b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	891b      	ldrh	r3, [r3, #8]
 80056cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6959      	ldr	r1, [r3, #20]
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056e0:	1d38      	adds	r0, r7, #4
 80056e2:	6800      	ldr	r0, [r0, #0]
 80056e4:	f000 fec8 	bl	8006478 <USB_WritePMA>
 80056e8:	e165      	b.n	80059b6 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056ea:	463b      	mov	r3, r7
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f4:	1ad2      	subs	r2, r2, r3
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	463b      	mov	r3, r7
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80a5 	beq.w	8005862 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	673b      	str	r3, [r7, #112]	; 0x70
 800571e:	463b      	mov	r3, r7
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d16e      	bne.n	8005806 <USB_EPStartXfer+0x8a2>
 8005728:	1d3b      	adds	r3, r7, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	66bb      	str	r3, [r7, #104]	; 0x68
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800573c:	4413      	add	r3, r2
 800573e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005740:	463b      	mov	r3, r7
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	011a      	lsls	r2, r3, #4
 8005748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800574a:	4413      	add	r3, r2
 800574c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005750:	667b      	str	r3, [r7, #100]	; 0x64
 8005752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575c:	b29a      	uxth	r2, r3
 800575e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005766:	2b3e      	cmp	r3, #62	; 0x3e
 8005768:	d921      	bls.n	80057ae <USB_EPStartXfer+0x84a>
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <USB_EPStartXfer+0x826>
 8005780:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005784:	3b01      	subs	r3, #1
 8005786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800578a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29a      	uxth	r2, r3
 8005790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005794:	b29b      	uxth	r3, r3
 8005796:	029b      	lsls	r3, r3, #10
 8005798:	b29b      	uxth	r3, r3
 800579a:	4313      	orrs	r3, r2
 800579c:	b29b      	uxth	r3, r3
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	e047      	b.n	800583e <USB_EPStartXfer+0x8da>
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <USB_EPStartXfer+0x868>
 80057b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e038      	b.n	800583e <USB_EPStartXfer+0x8da>
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <USB_EPStartXfer+0x888>
 80057e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e01b      	b.n	800583e <USB_EPStartXfer+0x8da>
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d116      	bne.n	800583e <USB_EPStartXfer+0x8da>
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800581e:	4413      	add	r3, r2
 8005820:	673b      	str	r3, [r7, #112]	; 0x70
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	011a      	lsls	r2, r3, #4
 800582a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800582c:	4413      	add	r3, r2
 800582e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	b29a      	uxth	r2, r3
 800583a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	895b      	ldrh	r3, [r3, #10]
 8005844:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6959      	ldr	r1, [r3, #20]
 800584e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005852:	b29b      	uxth	r3, r3
 8005854:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005858:	1d38      	adds	r0, r7, #4
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	f000 fe0c 	bl	8006478 <USB_WritePMA>
 8005860:	e0a9      	b.n	80059b6 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d16e      	bne.n	800594a <USB_EPStartXfer+0x9e6>
 800586c:	1d3b      	adds	r3, r7, #4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005872:	1d3b      	adds	r3, r7, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005880:	4413      	add	r3, r2
 8005882:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	011a      	lsls	r2, r3, #4
 800588c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800588e:	4413      	add	r3, r2
 8005890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005894:	67bb      	str	r3, [r7, #120]	; 0x78
 8005896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058aa:	2b3e      	cmp	r3, #62	; 0x3e
 80058ac:	d921      	bls.n	80058f2 <USB_EPStartXfer+0x98e>
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <USB_EPStartXfer+0x96a>
 80058c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058c8:	3b01      	subs	r3, #1
 80058ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058d8:	b29b      	uxth	r3, r3
 80058da:	029b      	lsls	r3, r3, #10
 80058dc:	b29b      	uxth	r3, r3
 80058de:	4313      	orrs	r3, r2
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	e050      	b.n	8005994 <USB_EPStartXfer+0xa30>
 80058f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <USB_EPStartXfer+0x9ac>
 80058fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005908:	b29a      	uxth	r2, r3
 800590a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e041      	b.n	8005994 <USB_EPStartXfer+0xa30>
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <USB_EPStartXfer+0x9cc>
 8005926:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800592a:	3301      	adds	r3, #1
 800592c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29a      	uxth	r2, r3
 8005936:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800593a:	b29b      	uxth	r3, r3
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	b29b      	uxth	r3, r3
 8005940:	4313      	orrs	r3, r2
 8005942:	b29a      	uxth	r2, r3
 8005944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e024      	b.n	8005994 <USB_EPStartXfer+0xa30>
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d11f      	bne.n	8005994 <USB_EPStartXfer+0xa30>
 8005954:	1d3b      	adds	r3, r7, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005964:	b29b      	uxth	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800596c:	4413      	add	r3, r2
 800596e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	011a      	lsls	r2, r3, #4
 800597a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800597e:	4413      	add	r3, r2
 8005980:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598c:	b29a      	uxth	r2, r3
 800598e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005992:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	891b      	ldrh	r3, [r3, #8]
 800599a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6959      	ldr	r1, [r3, #20]
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059ae:	1d38      	adds	r0, r7, #4
 80059b0:	6800      	ldr	r0, [r0, #0]
 80059b2:	f000 fd61 	bl	8006478 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80059b6:	1d3b      	adds	r3, r7, #4
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	463b      	mov	r3, r7
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d0:	817b      	strh	r3, [r7, #10]
 80059d2:	897b      	ldrh	r3, [r7, #10]
 80059d4:	f083 0310 	eor.w	r3, r3, #16
 80059d8:	817b      	strh	r3, [r7, #10]
 80059da:	897b      	ldrh	r3, [r7, #10]
 80059dc:	f083 0320 	eor.w	r3, r3, #32
 80059e0:	817b      	strh	r3, [r7, #10]
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	441a      	add	r2, r3
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]
 8005a06:	e3f3      	b.n	80061f0 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a08:	463b      	mov	r3, r7
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	7b1b      	ldrb	r3, [r3, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 809c 	bne.w	8005b4c <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a14:	463b      	mov	r3, r7
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d90e      	bls.n	8005a42 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	619a      	str	r2, [r3, #24]
 8005a40:	e008      	b.n	8005a54 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2200      	movs	r2, #0
 8005a52:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5c:	1d3b      	adds	r3, r7, #4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	011a      	lsls	r2, r3, #4
 8005a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a7e:	4413      	add	r3, r2
 8005a80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa0:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa2:	d923      	bls.n	8005aec <USB_EPStartXfer+0xb88>
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <USB_EPStartXfer+0xb60>
 8005aba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	029b      	lsls	r3, r3, #10
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e353      	b.n	8006194 <USB_EPStartXfer+0x1230>
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10c      	bne.n	8005b0e <USB_EPStartXfer+0xbaa>
 8005af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e342      	b.n	8006194 <USB_EPStartXfer+0x1230>
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <USB_EPStartXfer+0xbca>
 8005b24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b28:	3301      	adds	r3, #1
 8005b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4313      	orrs	r3, r2
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e323      	b.n	8006194 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	78db      	ldrb	r3, [r3, #3]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	f040 81a9 	bne.w	8005eaa <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b58:	463b      	mov	r3, r7
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 8082 	bne.w	8005c68 <USB_EPStartXfer+0xd04>
 8005b64:	1d3b      	adds	r3, r7, #4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	011a      	lsls	r2, r3, #4
 8005b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	463b      	mov	r3, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb4:	d925      	bls.n	8005c02 <USB_EPStartXfer+0xc9e>
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <USB_EPStartXfer+0xc76>
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	4313      	orrs	r3, r2
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e058      	b.n	8005cb4 <USB_EPStartXfer+0xd50>
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10c      	bne.n	8005c26 <USB_EPStartXfer+0xcc2>
 8005c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	e046      	b.n	8005cb4 <USB_EPStartXfer+0xd50>
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <USB_EPStartXfer+0xce6>
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c44:	3301      	adds	r3, #1
 8005c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e025      	b.n	8005cb4 <USB_EPStartXfer+0xd50>
 8005c68:	463b      	mov	r3, r7
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d120      	bne.n	8005cb4 <USB_EPStartXfer+0xd50>
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	011a      	lsls	r2, r3, #4
 8005c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f040 8082 	bne.w	8005dcc <USB_EPStartXfer+0xe68>
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	011a      	lsls	r2, r3, #4
 8005cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b3e      	cmp	r3, #62	; 0x3e
 8005d18:	d925      	bls.n	8005d66 <USB_EPStartXfer+0xe02>
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <USB_EPStartXfer+0xdda>
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	4313      	orrs	r3, r2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e054      	b.n	8005e10 <USB_EPStartXfer+0xeac>
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10c      	bne.n	8005d8a <USB_EPStartXfer+0xe26>
 8005d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	e042      	b.n	8005e10 <USB_EPStartXfer+0xeac>
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <USB_EPStartXfer+0xe4a>
 8005da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da8:	3301      	adds	r3, #1
 8005daa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dc8:	801a      	strh	r2, [r3, #0]
 8005dca:	e021      	b.n	8005e10 <USB_EPStartXfer+0xeac>
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d11c      	bne.n	8005e10 <USB_EPStartXfer+0xeac>
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005de6:	4413      	add	r3, r2
 8005de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005df8:	4413      	add	r3, r2
 8005dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e02:	463b      	mov	r3, r7
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 81bc 	beq.w	8006194 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e1c:	1d3b      	adds	r3, r7, #4
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <USB_EPStartXfer+0xee4>
 8005e3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 819f 	bne.w	8006194 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 8198 	bne.w	8006194 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	463b      	mov	r3, r7
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	463b      	mov	r3, r7
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]
 8005ea8:	e174      	b.n	8006194 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005eaa:	463b      	mov	r3, r7
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f040 816d 	bne.w	8006190 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d90e      	bls.n	8005ee4 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	1ad2      	subs	r2, r2, r3
 8005edc:	463b      	mov	r3, r7
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	619a      	str	r2, [r3, #24]
 8005ee2:	e008      	b.n	8005ef6 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005eee:	463b      	mov	r3, r7
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d17b      	bne.n	8005ff8 <USB_EPStartXfer+0x1094>
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f08:	1d3b      	adds	r3, r7, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f18:	4413      	add	r3, r2
 8005f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f1e:	463b      	mov	r3, r7
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	011a      	lsls	r2, r3, #4
 8005f26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f4e:	d923      	bls.n	8005f98 <USB_EPStartXfer+0x1034>
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <USB_EPStartXfer+0x100c>
 8005f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4313      	orrs	r3, r2
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e054      	b.n	8006042 <USB_EPStartXfer+0x10de>
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10c      	bne.n	8005fba <USB_EPStartXfer+0x1056>
 8005fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	e043      	b.n	8006042 <USB_EPStartXfer+0x10de>
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <USB_EPStartXfer+0x1076>
 8005fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	029b      	lsls	r3, r3, #10
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4313      	orrs	r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e024      	b.n	8006042 <USB_EPStartXfer+0x10de>
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d11f      	bne.n	8006042 <USB_EPStartXfer+0x10de>
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601a:	4413      	add	r3, r2
 800601c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	011a      	lsls	r2, r3, #4
 8006028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800602c:	4413      	add	r3, r2
 800602e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	1d3b      	adds	r3, r7, #4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d17b      	bne.n	800614c <USB_EPStartXfer+0x11e8>
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800605c:	1d3b      	adds	r3, r7, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800606c:	4413      	add	r3, r2
 800606e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	011a      	lsls	r2, r3, #4
 800607a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800607e:	4413      	add	r3, r2
 8006080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006094:	b29a      	uxth	r2, r3
 8006096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a0:	2b3e      	cmp	r3, #62	; 0x3e
 80060a2:	d923      	bls.n	80060ec <USB_EPStartXfer+0x1188>
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <USB_EPStartXfer+0x1160>
 80060ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060be:	3b01      	subs	r3, #1
 80060c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	029b      	lsls	r3, r3, #10
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	4313      	orrs	r3, r2
 80060d8:	b29b      	uxth	r3, r3
 80060da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060e8:	801a      	strh	r2, [r3, #0]
 80060ea:	e053      	b.n	8006194 <USB_EPStartXfer+0x1230>
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10c      	bne.n	800610e <USB_EPStartXfer+0x11aa>
 80060f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e042      	b.n	8006194 <USB_EPStartXfer+0x1230>
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <USB_EPStartXfer+0x11ca>
 8006124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006128:	3301      	adds	r3, #1
 800612a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800612e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800613a:	b29b      	uxth	r3, r3
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	b29b      	uxth	r3, r3
 8006140:	4313      	orrs	r3, r2
 8006142:	b29a      	uxth	r2, r3
 8006144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e023      	b.n	8006194 <USB_EPStartXfer+0x1230>
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d11e      	bne.n	8006194 <USB_EPStartXfer+0x1230>
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615e:	b29b      	uxth	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006166:	4413      	add	r3, r2
 8006168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	011a      	lsls	r2, r3, #4
 8006174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006178:	4413      	add	r3, r2
 800617a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800617e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e001      	b.n	8006194 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e02e      	b.n	80061f2 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d020      	beq.n	8006250 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006224:	81bb      	strh	r3, [r7, #12]
 8006226:	89bb      	ldrh	r3, [r7, #12]
 8006228:	f083 0310 	eor.w	r3, r3, #16
 800622c:	81bb      	strh	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	89bb      	ldrh	r3, [r7, #12]
 800623a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624a:	b29b      	uxth	r3, r3
 800624c:	8013      	strh	r3, [r2, #0]
 800624e:	e01f      	b.n	8006290 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006266:	81fb      	strh	r3, [r7, #14]
 8006268:	89fb      	ldrh	r3, [r7, #14]
 800626a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800626e:	81fb      	strh	r3, [r7, #14]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	89fb      	ldrh	r3, [r7, #14]
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	7b1b      	ldrb	r3, [r3, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f040 809d 	bne.w	80063ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d04c      	beq.n	8006352 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	823b      	strh	r3, [r7, #16]
 80062c6:	8a3b      	ldrh	r3, [r7, #16]
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01b      	beq.n	8006308 <USB_EPClearStall+0x6c>
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	81fb      	strh	r3, [r7, #14]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	89fb      	ldrh	r3, [r7, #14]
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	78db      	ldrb	r3, [r3, #3]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d06c      	beq.n	80063ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006326:	81bb      	strh	r3, [r7, #12]
 8006328:	89bb      	ldrh	r3, [r7, #12]
 800632a:	f083 0320 	eor.w	r3, r3, #32
 800632e:	81bb      	strh	r3, [r7, #12]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	89bb      	ldrh	r3, [r7, #12]
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
 8006350:	e04b      	b.n	80063ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	82fb      	strh	r3, [r7, #22]
 8006360:	8afb      	ldrh	r3, [r7, #22]
 8006362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01b      	beq.n	80063a2 <USB_EPClearStall+0x106>
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006380:	82bb      	strh	r3, [r7, #20]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	441a      	add	r2, r3
 800638c:	8abb      	ldrh	r3, [r7, #20]
 800638e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800639a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639e:	b29b      	uxth	r3, r3
 80063a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	827b      	strh	r3, [r7, #18]
 80063ba:	8a7b      	ldrh	r3, [r7, #18]
 80063bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c0:	827b      	strh	r3, [r7, #18]
 80063c2:	8a7b      	ldrh	r3, [r7, #18]
 80063c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063c8:	827b      	strh	r3, [r7, #18]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	441a      	add	r2, r3
 80063d4:	8a7b      	ldrh	r3, [r7, #18]
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr

080063f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006452:	b29b      	uxth	r3, r3
 8006454:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr

08006462 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr

08006478 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006478:	b480      	push	{r7}
 800647a:	b08b      	sub	sp, #44	; 0x2c
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	460b      	mov	r3, r1
 8006488:	80fb      	strh	r3, [r7, #6]
 800648a:	4613      	mov	r3, r2
 800648c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800648e:	88bb      	ldrh	r3, [r7, #4]
 8006490:	3301      	adds	r3, #1
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	005a      	lsls	r2, r3, #1
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
 80064b0:	e01e      	b.n	80064f0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	b21a      	sxth	r2, r3
 80064c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	8a7a      	ldrh	r2, [r7, #18]
 80064d0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	3302      	adds	r3, #2
 80064d6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	3302      	adds	r3, #2
 80064dc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	3301      	adds	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	3301      	adds	r3, #1
 80064e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	3b01      	subs	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1dd      	bne.n	80064b2 <USB_WritePMA+0x3a>
  }
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	372c      	adds	r7, #44	; 0x2c
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006502:	b480      	push	{r7}
 8006504:	b08b      	sub	sp, #44	; 0x2c
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	4611      	mov	r1, r2
 800650e:	461a      	mov	r2, r3
 8006510:	460b      	mov	r3, r1
 8006512:	80fb      	strh	r3, [r7, #6]
 8006514:	4613      	mov	r3, r2
 8006516:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006518:	88bb      	ldrh	r3, [r7, #4]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	b29b      	uxth	r3, r3
 800651e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	005a      	lsls	r2, r3, #1
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006534:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
 800653a:	e01b      	b.n	8006574 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	3302      	adds	r3, #2
 8006548:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	b2da      	uxtb	r2, r3
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	3301      	adds	r3, #1
 8006556:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	b2da      	uxtb	r2, r3
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3301      	adds	r3, #1
 8006566:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	3302      	adds	r3, #2
 800656c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	3b01      	subs	r3, #1
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e0      	bne.n	800653c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800657a:	88bb      	ldrh	r3, [r7, #4]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	b2da      	uxtb	r2, r3
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	701a      	strb	r2, [r3, #0]
  }
}
 8006596:	bf00      	nop
 8006598:	372c      	adds	r7, #44	; 0x2c
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr

080065a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	7c1b      	ldrb	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d115      	bne.n	80065e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065bc:	2202      	movs	r2, #2
 80065be:	2181      	movs	r1, #129	; 0x81
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f004 f9aa 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d0:	2202      	movs	r2, #2
 80065d2:	2101      	movs	r1, #1
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f004 f9a0 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80065e2:	e012      	b.n	800660a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	2202      	movs	r2, #2
 80065e8:	2181      	movs	r1, #129	; 0x81
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f004 f995 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065f6:	2340      	movs	r3, #64	; 0x40
 80065f8:	2202      	movs	r2, #2
 80065fa:	2101      	movs	r1, #1
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f004 f98c 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800660a:	2308      	movs	r3, #8
 800660c:	2203      	movs	r2, #3
 800660e:	2182      	movs	r1, #130	; 0x82
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f004 f982 	bl	800a91a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800661c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006620:	f004 faa2 	bl	800ab68 <USBD_static_malloc>
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d102      	bne.n	800663c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006636:	2301      	movs	r3, #1
 8006638:	73fb      	strb	r3, [r7, #15]
 800663a:	e026      	b.n	800668a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2200      	movs	r2, #0
 800665a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7c1b      	ldrb	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800666c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006670:	2101      	movs	r1, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f004 fa42 	bl	800aafc <USBD_LL_PrepareReceive>
 8006678:	e007      	b.n	800668a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	2101      	movs	r1, #1
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f004 fa39 	bl	800aafc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066a4:	2181      	movs	r1, #129	; 0x81
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f004 f95d 	bl	800a966 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066b2:	2101      	movs	r1, #1
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f004 f956 	bl	800a966 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066c2:	2182      	movs	r1, #130	; 0x82
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f004 f94e 	bl	800a966 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00e      	beq.n	80066f8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	4618      	mov	r0, r3
 80066ec:	f004 fa48 	bl	800ab80 <USBD_static_free>
    pdev->pClassData = NULL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b086      	sub	sp, #24
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006712:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006728:	2b00      	cmp	r3, #0
 800672a:	d039      	beq.n	80067a0 <USBD_CDC_Setup+0x9e>
 800672c:	2b20      	cmp	r3, #32
 800672e:	d17f      	bne.n	8006830 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	88db      	ldrh	r3, [r3, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d029      	beq.n	800678c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b25b      	sxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	da11      	bge.n	8006766 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800674e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	88d2      	ldrh	r2, [r2, #6]
 8006754:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006756:	6939      	ldr	r1, [r7, #16]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	88db      	ldrh	r3, [r3, #6]
 800675c:	461a      	mov	r2, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fa09 	bl	8007b76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006764:	e06b      	b.n	800683e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	785a      	ldrb	r2, [r3, #1]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	88db      	ldrh	r3, [r3, #6]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800677c:	6939      	ldr	r1, [r7, #16]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88db      	ldrh	r3, [r3, #6]
 8006782:	461a      	mov	r2, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fa24 	bl	8007bd2 <USBD_CtlPrepareRx>
      break;
 800678a:	e058      	b.n	800683e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	7850      	ldrb	r0, [r2, #1]
 8006798:	2200      	movs	r2, #0
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	4798      	blx	r3
      break;
 800679e:	e04e      	b.n	800683e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b0b      	cmp	r3, #11
 80067a6:	d02e      	beq.n	8006806 <USBD_CDC_Setup+0x104>
 80067a8:	2b0b      	cmp	r3, #11
 80067aa:	dc38      	bgt.n	800681e <USBD_CDC_Setup+0x11c>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <USBD_CDC_Setup+0xb4>
 80067b0:	2b0a      	cmp	r3, #10
 80067b2:	d014      	beq.n	80067de <USBD_CDC_Setup+0xdc>
 80067b4:	e033      	b.n	800681e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d107      	bne.n	80067d0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80067c0:	f107 030c 	add.w	r3, r7, #12
 80067c4:	2202      	movs	r2, #2
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 f9d4 	bl	8007b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ce:	e02e      	b.n	800682e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 f965 	bl	8007aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 80067d8:	2302      	movs	r3, #2
 80067da:	75fb      	strb	r3, [r7, #23]
          break;
 80067dc:	e027      	b.n	800682e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d107      	bne.n	80067f8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80067e8:	f107 030f 	add.w	r3, r7, #15
 80067ec:	2201      	movs	r2, #1
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 f9c0 	bl	8007b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067f6:	e01a      	b.n	800682e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 f951 	bl	8007aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006800:	2302      	movs	r3, #2
 8006802:	75fb      	strb	r3, [r7, #23]
          break;
 8006804:	e013      	b.n	800682e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	2b03      	cmp	r3, #3
 800680e:	d00d      	beq.n	800682c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 f945 	bl	8007aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006818:	2302      	movs	r3, #2
 800681a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800681c:	e006      	b.n	800682c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f93e 	bl	8007aa2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006826:	2302      	movs	r3, #2
 8006828:	75fb      	strb	r3, [r7, #23]
          break;
 800682a:	e000      	b.n	800682e <USBD_CDC_Setup+0x12c>
          break;
 800682c:	bf00      	nop
      }
      break;
 800682e:	e006      	b.n	800683e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 f935 	bl	8007aa2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006838:	2302      	movs	r3, #2
 800683a:	75fb      	strb	r3, [r7, #23]
      break;
 800683c:	bf00      	nop
  }

  return ret;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006862:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d03a      	beq.n	80068e4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	331c      	adds	r3, #28
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d029      	beq.n	80068d8 <USBD_CDC_DataIn+0x90>
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	331c      	adds	r3, #28
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	78f9      	ldrb	r1, [r7, #3]
 8006898:	68b8      	ldr	r0, [r7, #8]
 800689a:	460b      	mov	r3, r1
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4403      	add	r3, r0
 80068a4:	3338      	adds	r3, #56	; 0x38
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80068ac:	fb03 f301 	mul.w	r3, r3, r1
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d110      	bne.n	80068d8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	331c      	adds	r3, #28
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068ca:	78f9      	ldrb	r1, [r7, #3]
 80068cc:	2300      	movs	r3, #0
 80068ce:	2200      	movs	r2, #0
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f004 f8f0 	bl	800aab6 <USBD_LL_Transmit>
 80068d6:	e003      	b.n	80068e0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e000      	b.n	80068e6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80068e4:	2302      	movs	r3, #2
  }
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006900:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f004 f91b 	bl	800ab42 <USBD_LL_GetRxDataSize>
 800690c:	4602      	mov	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006932:	4611      	mov	r1, r2
 8006934:	4798      	blx	r3

    return USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800693a:	2302      	movs	r3, #2
  }
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695a:	2b00      	cmp	r3, #0
 800695c:	d015      	beq.n	800698a <USBD_CDC_EP0_RxReady+0x46>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006964:	2bff      	cmp	r3, #255	; 0xff
 8006966:	d010      	beq.n	800698a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006976:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800697e:	b292      	uxth	r2, r2
 8006980:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2243      	movs	r2, #67	; 0x43
 80069a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80069a2:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000094 	.word	0x20000094

080069b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2243      	movs	r2, #67	; 0x43
 80069c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80069c2:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000050 	.word	0x20000050

080069d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2243      	movs	r2, #67	; 0x43
 80069e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80069e2:	4b03      	ldr	r3, [pc, #12]	; (80069f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200000d8 	.word	0x200000d8

080069f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	220a      	movs	r2, #10
 8006a00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006a02:	4b03      	ldr	r3, [pc, #12]	; (8006a10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	2000000c 	.word	0x2000000c

08006a14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a5e:	88fa      	ldrh	r2, [r7, #6]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b085      	sub	sp, #20
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01c      	beq.n	8006aec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d115      	bne.n	8006ae8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2181      	movs	r1, #129	; 0x81
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f003 ffe9 	bl	800aab6 <USBD_LL_Transmit>

      return USBD_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e002      	b.n	8006aee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006aec:	2302      	movs	r3, #2
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d017      	beq.n	8006b40 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7c1b      	ldrb	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f003 ffe9 	bl	800aafc <USBD_LL_PrepareReceive>
 8006b2a:	e007      	b.n	8006b3c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	2101      	movs	r1, #1
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f003 ffe0 	bl	800aafc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e000      	b.n	8006b42 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b40:	2302      	movs	r3, #2
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	4613      	mov	r3, r2
 8006b56:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e01a      	b.n	8006b98 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	79fa      	ldrb	r2, [r7, #7]
 8006b8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f003 fe4d 	bl	800a830 <USBD_LL_Init>

  return USBD_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d006      	beq.n	8006bc2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73fb      	strb	r3, [r7, #15]
 8006bc0:	e001      	b.n	8006bc6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f003 fe82 	bl	800a8e4 <USBD_LL_Start>

  return USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr

08006bfe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	460b      	mov	r3, r1
 8006c08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	4611      	mov	r1, r2
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	4611      	mov	r1, r2
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fed8 	bl	8007a2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c88:	461a      	mov	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d016      	beq.n	8006ccc <USBD_LL_SetupStage+0x6a>
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d81c      	bhi.n	8006cdc <USBD_LL_SetupStage+0x7a>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <USBD_LL_SetupStage+0x4a>
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d008      	beq.n	8006cbc <USBD_LL_SetupStage+0x5a>
 8006caa:	e017      	b.n	8006cdc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9cb 	bl	8007050 <USBD_StdDevReq>
      break;
 8006cba:	e01a      	b.n	8006cf2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fa2d 	bl	8007124 <USBD_StdItfReq>
      break;
 8006cca:	e012      	b.n	8006cf2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa6d 	bl	80071b4 <USBD_StdEPReq>
      break;
 8006cda:	e00a      	b.n	8006cf2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ce2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f003 fe5a 	bl	800a9a4 <USBD_LL_StallEP>
      break;
 8006cf0:	bf00      	nop
  }

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	460b      	mov	r3, r1
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d14b      	bne.n	8006da8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d16:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d134      	bne.n	8006d8c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d919      	bls.n	8006d62 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	1ad2      	subs	r2, r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d203      	bcs.n	8006d50 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	e002      	b.n	8006d56 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 ff57 	bl	8007c0e <USBD_CtlContinueRx>
 8006d60:	e038      	b.n	8006dd4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d105      	bne.n	8006d84 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 ff54 	bl	8007c32 <USBD_CtlSendStatus>
 8006d8a:	e023      	b.n	8006dd4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	d11e      	bne.n	8006dd4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d9e:	2100      	movs	r1, #0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f003 fdff 	bl	800a9a4 <USBD_LL_StallEP>
 8006da6:	e015      	b.n	8006dd4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00d      	beq.n	8006dd0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d108      	bne.n	8006dd0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	7afa      	ldrb	r2, [r7, #11]
 8006dc8:	4611      	mov	r1, r2
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	4798      	blx	r3
 8006dce:	e001      	b.n	8006dd4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e000      	b.n	8006dd6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b086      	sub	sp, #24
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	460b      	mov	r3, r1
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d17f      	bne.n	8006ef2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3314      	adds	r3, #20
 8006df6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d15c      	bne.n	8006ebc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d915      	bls.n	8006e3a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	1ad2      	subs	r2, r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 fec1 	bl	8007bae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f003 fe62 	bl	800aafc <USBD_LL_PrepareReceive>
 8006e38:	e04e      	b.n	8006ed8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	6912      	ldr	r2, [r2, #16]
 8006e42:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e46:	fb02 f201 	mul.w	r2, r2, r1
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d11c      	bne.n	8006e8a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d316      	bcc.n	8006e8a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d20f      	bcs.n	8006e8a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fe9d 	bl	8007bae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f003 fe3a 	bl	800aafc <USBD_LL_PrepareReceive>
 8006e88:	e026      	b.n	8006ed8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d105      	bne.n	8006eac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006eac:	2180      	movs	r1, #128	; 0x80
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f003 fd78 	bl	800a9a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fecf 	bl	8007c58 <USBD_CtlReceiveStatus>
 8006eba:	e00d      	b.n	8006ed8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d004      	beq.n	8006ed0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ed0:	2180      	movs	r1, #128	; 0x80
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f003 fd66 	bl	800a9a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d11d      	bne.n	8006f1e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff fe81 	bl	8006bea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ef0:	e015      	b.n	8006f1e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d108      	bne.n	8006f1a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	7afa      	ldrb	r2, [r7, #11]
 8006f12:	4611      	mov	r1, r2
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	4798      	blx	r3
 8006f18:	e001      	b.n	8006f1e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e000      	b.n	8006f20 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	2200      	movs	r2, #0
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f003 fcef 	bl	800a91a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2240      	movs	r2, #64	; 0x40
 8006f48:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2180      	movs	r1, #128	; 0x80
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f003 fce1 	bl	800a91a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2240      	movs	r2, #64	; 0x40
 8006f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6852      	ldr	r2, [r2, #4]
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
  }

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d105      	bne.n	800700e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr

0800701a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	2b03      	cmp	r3, #3
 800702a:	d10b      	bne.n	8007044 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d005      	beq.n	8007076 <USBD_StdDevReq+0x26>
 800706a:	2b40      	cmp	r3, #64	; 0x40
 800706c:	d84f      	bhi.n	800710e <USBD_StdDevReq+0xbe>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <USBD_StdDevReq+0x36>
 8007072:	2b20      	cmp	r3, #32
 8007074:	d14b      	bne.n	800710e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
      break;
 8007084:	e048      	b.n	8007118 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b09      	cmp	r3, #9
 800708c:	d839      	bhi.n	8007102 <USBD_StdDevReq+0xb2>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USBD_StdDevReq+0x44>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070e5 	.word	0x080070e5
 8007098:	080070f9 	.word	0x080070f9
 800709c:	08007103 	.word	0x08007103
 80070a0:	080070ef 	.word	0x080070ef
 80070a4:	08007103 	.word	0x08007103
 80070a8:	080070c7 	.word	0x080070c7
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	08007103 	.word	0x08007103
 80070b4:	080070db 	.word	0x080070db
 80070b8:	080070d1 	.word	0x080070d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9dc 	bl	800747c <USBD_GetDescriptor>
          break;
 80070c4:	e022      	b.n	800710c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb3f 	bl	800774c <USBD_SetAddress>
          break;
 80070ce:	e01d      	b.n	800710c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb7e 	bl	80077d4 <USBD_SetConfig>
          break;
 80070d8:	e018      	b.n	800710c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fc07 	bl	80078f0 <USBD_GetConfig>
          break;
 80070e2:	e013      	b.n	800710c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fc37 	bl	800795a <USBD_GetStatus>
          break;
 80070ec:	e00e      	b.n	800710c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fc65 	bl	80079c0 <USBD_SetFeature>
          break;
 80070f6:	e009      	b.n	800710c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fc74 	bl	80079e8 <USBD_ClrFeature>
          break;
 8007100:	e004      	b.n	800710c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fccc 	bl	8007aa2 <USBD_CtlError>
          break;
 800710a:	bf00      	nop
      }
      break;
 800710c:	e004      	b.n	8007118 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fcc6 	bl	8007aa2 <USBD_CtlError>
      break;
 8007116:	bf00      	nop
  }

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d005      	beq.n	800714a <USBD_StdItfReq+0x26>
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d82e      	bhi.n	80071a0 <USBD_StdItfReq+0x7c>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <USBD_StdItfReq+0x26>
 8007146:	2b20      	cmp	r3, #32
 8007148:	d12a      	bne.n	80071a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007150:	3b01      	subs	r3, #1
 8007152:	2b02      	cmp	r3, #2
 8007154:	d81d      	bhi.n	8007192 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	889b      	ldrh	r3, [r3, #4]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	d813      	bhi.n	8007188 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	88db      	ldrh	r3, [r3, #6]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d110      	bne.n	800719c <USBD_StdItfReq+0x78>
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10d      	bne.n	800719c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fd56 	bl	8007c32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007186:	e009      	b.n	800719c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fc89 	bl	8007aa2 <USBD_CtlError>
          break;
 8007190:	e004      	b.n	800719c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fc84 	bl	8007aa2 <USBD_CtlError>
          break;
 800719a:	e000      	b.n	800719e <USBD_StdItfReq+0x7a>
          break;
 800719c:	bf00      	nop
      }
      break;
 800719e:	e004      	b.n	80071aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fc7d 	bl	8007aa2 <USBD_CtlError>
      break;
 80071a8:	bf00      	nop
  }

  return USBD_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	889b      	ldrh	r3, [r3, #4]
 80071c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d007      	beq.n	80071e4 <USBD_StdEPReq+0x30>
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	f200 8146 	bhi.w	8007466 <USBD_StdEPReq+0x2b2>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <USBD_StdEPReq+0x40>
 80071de:	2b20      	cmp	r3, #32
 80071e0:	f040 8141 	bne.w	8007466 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
      break;
 80071f2:	e13d      	b.n	8007470 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d10a      	bne.n	8007216 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	e12d      	b.n	8007472 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b03      	cmp	r3, #3
 800721c:	d007      	beq.n	800722e <USBD_StdEPReq+0x7a>
 800721e:	2b03      	cmp	r3, #3
 8007220:	f300 811b 	bgt.w	800745a <USBD_StdEPReq+0x2a6>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d072      	beq.n	800730e <USBD_StdEPReq+0x15a>
 8007228:	2b01      	cmp	r3, #1
 800722a:	d03a      	beq.n	80072a2 <USBD_StdEPReq+0xee>
 800722c:	e115      	b.n	800745a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007234:	2b02      	cmp	r3, #2
 8007236:	d002      	beq.n	800723e <USBD_StdEPReq+0x8a>
 8007238:	2b03      	cmp	r3, #3
 800723a:	d015      	beq.n	8007268 <USBD_StdEPReq+0xb4>
 800723c:	e02b      	b.n	8007296 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00c      	beq.n	800725e <USBD_StdEPReq+0xaa>
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b80      	cmp	r3, #128	; 0x80
 8007248:	d009      	beq.n	800725e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f003 fba8 	bl	800a9a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007254:	2180      	movs	r1, #128	; 0x80
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f003 fba4 	bl	800a9a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800725c:	e020      	b.n	80072a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc1e 	bl	8007aa2 <USBD_CtlError>
              break;
 8007266:	e01b      	b.n	80072a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10e      	bne.n	800728e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <USBD_StdEPReq+0xda>
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d008      	beq.n	800728e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	88db      	ldrh	r3, [r3, #6]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f003 fb8b 	bl	800a9a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fccf 	bl	8007c32 <USBD_CtlSendStatus>

              break;
 8007294:	e004      	b.n	80072a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fc02 	bl	8007aa2 <USBD_CtlError>
              break;
 800729e:	bf00      	nop
          }
          break;
 80072a0:	e0e0      	b.n	8007464 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d002      	beq.n	80072b2 <USBD_StdEPReq+0xfe>
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d015      	beq.n	80072dc <USBD_StdEPReq+0x128>
 80072b0:	e026      	b.n	8007300 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00c      	beq.n	80072d2 <USBD_StdEPReq+0x11e>
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b80      	cmp	r3, #128	; 0x80
 80072bc:	d009      	beq.n	80072d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f003 fb6e 	bl	800a9a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072c8:	2180      	movs	r1, #128	; 0x80
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f003 fb6a 	bl	800a9a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072d0:	e01c      	b.n	800730c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fbe4 	bl	8007aa2 <USBD_CtlError>
              break;
 80072da:	e017      	b.n	800730c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	885b      	ldrh	r3, [r3, #2]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d112      	bne.n	800730a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f003 fb75 	bl	800a9e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fc9a 	bl	8007c32 <USBD_CtlSendStatus>
              }
              break;
 80072fe:	e004      	b.n	800730a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fbcd 	bl	8007aa2 <USBD_CtlError>
              break;
 8007308:	e000      	b.n	800730c <USBD_StdEPReq+0x158>
              break;
 800730a:	bf00      	nop
          }
          break;
 800730c:	e0aa      	b.n	8007464 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007314:	2b02      	cmp	r3, #2
 8007316:	d002      	beq.n	800731e <USBD_StdEPReq+0x16a>
 8007318:	2b03      	cmp	r3, #3
 800731a:	d032      	beq.n	8007382 <USBD_StdEPReq+0x1ce>
 800731c:	e097      	b.n	800744e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <USBD_StdEPReq+0x180>
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	2b80      	cmp	r3, #128	; 0x80
 8007328:	d004      	beq.n	8007334 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbb8 	bl	8007aa2 <USBD_CtlError>
                break;
 8007332:	e091      	b.n	8007458 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007338:	2b00      	cmp	r3, #0
 800733a:	da0b      	bge.n	8007354 <USBD_StdEPReq+0x1a0>
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	3310      	adds	r3, #16
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	4413      	add	r3, r2
 8007350:	3304      	adds	r3, #4
 8007352:	e00b      	b.n	800736c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4413      	add	r3, r2
 800736a:	3304      	adds	r3, #4
 800736c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2202      	movs	r2, #2
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fbfb 	bl	8007b76 <USBD_CtlSendData>
              break;
 8007380:	e06a      	b.n	8007458 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007382:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007386:	2b00      	cmp	r3, #0
 8007388:	da11      	bge.n	80073ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	f003 020f 	and.w	r2, r3, #15
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	3318      	adds	r3, #24
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d117      	bne.n	80073d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fb7b 	bl	8007aa2 <USBD_CtlError>
                  break;
 80073ac:	e054      	b.n	8007458 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	f003 020f 	and.w	r2, r3, #15
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fb68 	bl	8007aa2 <USBD_CtlError>
                  break;
 80073d2:	e041      	b.n	8007458 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da0b      	bge.n	80073f4 <USBD_StdEPReq+0x240>
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	3310      	adds	r3, #16
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	4413      	add	r3, r2
 80073f0:	3304      	adds	r3, #4
 80073f2:	e00b      	b.n	800740c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	3304      	adds	r3, #4
 800740c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <USBD_StdEPReq+0x266>
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d103      	bne.n	8007422 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e00e      	b.n	8007440 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f003 fafa 	bl	800aa20 <USBD_LL_IsStallEP>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	e002      	b.n	8007440 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2202      	movs	r2, #2
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fb95 	bl	8007b76 <USBD_CtlSendData>
              break;
 800744c:	e004      	b.n	8007458 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fb26 	bl	8007aa2 <USBD_CtlError>
              break;
 8007456:	bf00      	nop
          }
          break;
 8007458:	e004      	b.n	8007464 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fb20 	bl	8007aa2 <USBD_CtlError>
          break;
 8007462:	bf00      	nop
      }
      break;
 8007464:	e004      	b.n	8007470 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb1a 	bl	8007aa2 <USBD_CtlError>
      break;
 800746e:	bf00      	nop
  }

  return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	885b      	ldrh	r3, [r3, #2]
 8007496:	0a1b      	lsrs	r3, r3, #8
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	2b06      	cmp	r3, #6
 800749e:	f200 8128 	bhi.w	80076f2 <USBD_GetDescriptor+0x276>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <USBD_GetDescriptor+0x2c>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	080074dd 	.word	0x080074dd
 80074b0:	0800751d 	.word	0x0800751d
 80074b4:	080076f3 	.word	0x080076f3
 80074b8:	080076f3 	.word	0x080076f3
 80074bc:	08007693 	.word	0x08007693
 80074c0:	080076bf 	.word	0x080076bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	7c12      	ldrb	r2, [r2, #16]
 80074d0:	f107 0108 	add.w	r1, r7, #8
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
 80074d8:	60f8      	str	r0, [r7, #12]
      break;
 80074da:	e112      	b.n	8007702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7c1b      	ldrb	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10d      	bne.n	8007500 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f107 0208 	add.w	r2, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	2202      	movs	r2, #2
 80074fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074fe:	e100      	b.n	8007702 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	f107 0208 	add.w	r2, r7, #8
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	2202      	movs	r2, #2
 8007518:	701a      	strb	r2, [r3, #0]
      break;
 800751a:	e0f2      	b.n	8007702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	885b      	ldrh	r3, [r3, #2]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b05      	cmp	r3, #5
 8007524:	f200 80ac 	bhi.w	8007680 <USBD_GetDescriptor+0x204>
 8007528:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <USBD_GetDescriptor+0xb4>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007549 	.word	0x08007549
 8007534:	0800757d 	.word	0x0800757d
 8007538:	080075b1 	.word	0x080075b1
 800753c:	080075e5 	.word	0x080075e5
 8007540:	08007619 	.word	0x08007619
 8007544:	0800764d 	.word	0x0800764d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	7c12      	ldrb	r2, [r2, #16]
 8007560:	f107 0108 	add.w	r1, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756a:	e091      	b.n	8007690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa97 	bl	8007aa2 <USBD_CtlError>
            err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
          break;
 800757a:	e089      	b.n	8007690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7c12      	ldrb	r2, [r2, #16]
 8007594:	f107 0108 	add.w	r1, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759e:	e077      	b.n	8007690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa7d 	bl	8007aa2 <USBD_CtlError>
            err++;
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	3301      	adds	r3, #1
 80075ac:	72fb      	strb	r3, [r7, #11]
          break;
 80075ae:	e06f      	b.n	8007690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7c12      	ldrb	r2, [r2, #16]
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d2:	e05d      	b.n	8007690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa63 	bl	8007aa2 <USBD_CtlError>
            err++;
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	3301      	adds	r3, #1
 80075e0:	72fb      	strb	r3, [r7, #11]
          break;
 80075e2:	e055      	b.n	8007690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	7c12      	ldrb	r2, [r2, #16]
 80075fc:	f107 0108 	add.w	r1, r7, #8
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007606:	e043      	b.n	8007690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fa49 	bl	8007aa2 <USBD_CtlError>
            err++;
 8007610:	7afb      	ldrb	r3, [r7, #11]
 8007612:	3301      	adds	r3, #1
 8007614:	72fb      	strb	r3, [r7, #11]
          break;
 8007616:	e03b      	b.n	8007690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	7c12      	ldrb	r2, [r2, #16]
 8007630:	f107 0108 	add.w	r1, r7, #8
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763a:	e029      	b.n	8007690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa2f 	bl	8007aa2 <USBD_CtlError>
            err++;
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	3301      	adds	r3, #1
 8007648:	72fb      	strb	r3, [r7, #11]
          break;
 800764a:	e021      	b.n	8007690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7c12      	ldrb	r2, [r2, #16]
 8007664:	f107 0108 	add.w	r1, r7, #8
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
 800766c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766e:	e00f      	b.n	8007690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa15 	bl	8007aa2 <USBD_CtlError>
            err++;
 8007678:	7afb      	ldrb	r3, [r7, #11]
 800767a:	3301      	adds	r3, #1
 800767c:	72fb      	strb	r3, [r7, #11]
          break;
 800767e:	e007      	b.n	8007690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fa0d 	bl	8007aa2 <USBD_CtlError>
          err++;
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	3301      	adds	r3, #1
 800768c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800768e:	e038      	b.n	8007702 <USBD_GetDescriptor+0x286>
 8007690:	e037      	b.n	8007702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7c1b      	ldrb	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a2:	f107 0208 	add.w	r2, r7, #8
 80076a6:	4610      	mov	r0, r2
 80076a8:	4798      	blx	r3
 80076aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076ac:	e029      	b.n	8007702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f9f6 	bl	8007aa2 <USBD_CtlError>
        err++;
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	3301      	adds	r3, #1
 80076ba:	72fb      	strb	r3, [r7, #11]
      break;
 80076bc:	e021      	b.n	8007702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7c1b      	ldrb	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10d      	bne.n	80076e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	f107 0208 	add.w	r2, r7, #8
 80076d2:	4610      	mov	r0, r2
 80076d4:	4798      	blx	r3
 80076d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	2207      	movs	r2, #7
 80076de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e0:	e00f      	b.n	8007702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f9dc 	bl	8007aa2 <USBD_CtlError>
        err++;
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	3301      	adds	r3, #1
 80076ee:	72fb      	strb	r3, [r7, #11]
      break;
 80076f0:	e007      	b.n	8007702 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f9d4 	bl	8007aa2 <USBD_CtlError>
      err++;
 80076fa:	7afb      	ldrb	r3, [r7, #11]
 80076fc:	3301      	adds	r3, #1
 80076fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007700:	bf00      	nop
  }

  if (err != 0U)
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11c      	bne.n	8007742 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007708:	893b      	ldrh	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d011      	beq.n	8007732 <USBD_GetDescriptor+0x2b6>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	88da      	ldrh	r2, [r3, #6]
 800771a:	893b      	ldrh	r3, [r7, #8]
 800771c:	4293      	cmp	r3, r2
 800771e:	bf28      	it	cs
 8007720:	4613      	movcs	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007726:	893b      	ldrh	r3, [r7, #8]
 8007728:	461a      	mov	r2, r3
 800772a:	68f9      	ldr	r1, [r7, #12]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa22 	bl	8007b76 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	88db      	ldrh	r3, [r3, #6]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa79 	bl	8007c32 <USBD_CtlSendStatus>
 8007740:	e000      	b.n	8007744 <USBD_GetDescriptor+0x2c8>
    return;
 8007742:	bf00      	nop
    }
  }
}
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop

0800774c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	889b      	ldrh	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d130      	bne.n	80077c0 <USBD_SetAddress+0x74>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d12c      	bne.n	80077c0 <USBD_SetAddress+0x74>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	885b      	ldrh	r3, [r3, #2]
 800776a:	2b7f      	cmp	r3, #127	; 0x7f
 800776c:	d828      	bhi.n	80077c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	885b      	ldrh	r3, [r3, #2]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007778:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007780:	2b03      	cmp	r3, #3
 8007782:	d104      	bne.n	800778e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f98b 	bl	8007aa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778c:	e01d      	b.n	80077ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7bfa      	ldrb	r2, [r7, #15]
 8007792:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f003 f96c 	bl	800aa78 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa46 	bl	8007c32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b4:	e009      	b.n	80077ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077be:	e004      	b.n	80077ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f96d 	bl	8007aa2 <USBD_CtlError>
  }
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	885b      	ldrh	r3, [r3, #2]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	4b41      	ldr	r3, [pc, #260]	; (80078ec <USBD_SetConfig+0x118>)
 80077e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077e8:	4b40      	ldr	r3, [pc, #256]	; (80078ec <USBD_SetConfig+0x118>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d904      	bls.n	80077fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f955 	bl	8007aa2 <USBD_CtlError>
 80077f8:	e075      	b.n	80078e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007800:	2b02      	cmp	r3, #2
 8007802:	d002      	beq.n	800780a <USBD_SetConfig+0x36>
 8007804:	2b03      	cmp	r3, #3
 8007806:	d023      	beq.n	8007850 <USBD_SetConfig+0x7c>
 8007808:	e062      	b.n	80078d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800780a:	4b38      	ldr	r3, [pc, #224]	; (80078ec <USBD_SetConfig+0x118>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01a      	beq.n	8007848 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007812:	4b36      	ldr	r3, [pc, #216]	; (80078ec <USBD_SetConfig+0x118>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2203      	movs	r2, #3
 8007820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007824:	4b31      	ldr	r3, [pc, #196]	; (80078ec <USBD_SetConfig+0x118>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff f9e7 	bl	8006bfe <USBD_SetClassConfig>
 8007830:	4603      	mov	r3, r0
 8007832:	2b02      	cmp	r3, #2
 8007834:	d104      	bne.n	8007840 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f932 	bl	8007aa2 <USBD_CtlError>
            return;
 800783e:	e052      	b.n	80078e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9f6 	bl	8007c32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007846:	e04e      	b.n	80078e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f9f2 	bl	8007c32 <USBD_CtlSendStatus>
        break;
 800784e:	e04a      	b.n	80078e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007850:	4b26      	ldr	r3, [pc, #152]	; (80078ec <USBD_SetConfig+0x118>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d112      	bne.n	800787e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007860:	4b22      	ldr	r3, [pc, #136]	; (80078ec <USBD_SetConfig+0x118>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800786a:	4b20      	ldr	r3, [pc, #128]	; (80078ec <USBD_SetConfig+0x118>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff f9e3 	bl	8006c3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f9db 	bl	8007c32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800787c:	e033      	b.n	80078e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800787e:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <USBD_SetConfig+0x118>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	429a      	cmp	r2, r3
 800788a:	d01d      	beq.n	80078c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff f9d1 	bl	8006c3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <USBD_SetConfig+0x118>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <USBD_SetConfig+0x118>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff f9a7 	bl	8006bfe <USBD_SetClassConfig>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d104      	bne.n	80078c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f8f2 	bl	8007aa2 <USBD_CtlError>
            return;
 80078be:	e012      	b.n	80078e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9b6 	bl	8007c32 <USBD_CtlSendStatus>
        break;
 80078c6:	e00e      	b.n	80078e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f9b2 	bl	8007c32 <USBD_CtlSendStatus>
        break;
 80078ce:	e00a      	b.n	80078e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8e5 	bl	8007aa2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <USBD_SetConfig+0x118>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff f9ac 	bl	8006c3c <USBD_ClrClassConfig>
        break;
 80078e4:	bf00      	nop
    }
  }
}
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	2000045c 	.word	0x2000045c

080078f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d004      	beq.n	800790c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f8cc 	bl	8007aa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800790a:	e022      	b.n	8007952 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007912:	2b02      	cmp	r3, #2
 8007914:	dc02      	bgt.n	800791c <USBD_GetConfig+0x2c>
 8007916:	2b00      	cmp	r3, #0
 8007918:	dc03      	bgt.n	8007922 <USBD_GetConfig+0x32>
 800791a:	e015      	b.n	8007948 <USBD_GetConfig+0x58>
 800791c:	2b03      	cmp	r3, #3
 800791e:	d00b      	beq.n	8007938 <USBD_GetConfig+0x48>
 8007920:	e012      	b.n	8007948 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3308      	adds	r3, #8
 800792c:	2201      	movs	r2, #1
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f920 	bl	8007b76 <USBD_CtlSendData>
        break;
 8007936:	e00c      	b.n	8007952 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	2201      	movs	r2, #1
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f918 	bl	8007b76 <USBD_CtlSendData>
        break;
 8007946:	e004      	b.n	8007952 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8a9 	bl	8007aa2 <USBD_CtlError>
        break;
 8007950:	bf00      	nop
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796a:	3b01      	subs	r3, #1
 800796c:	2b02      	cmp	r3, #2
 800796e:	d81e      	bhi.n	80079ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	88db      	ldrh	r3, [r3, #6]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d004      	beq.n	8007982 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f891 	bl	8007aa2 <USBD_CtlError>
        break;
 8007980:	e01a      	b.n	80079b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f043 0202 	orr.w	r2, r3, #2
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	330c      	adds	r3, #12
 80079a2:	2202      	movs	r2, #2
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8e5 	bl	8007b76 <USBD_CtlSendData>
      break;
 80079ac:	e004      	b.n	80079b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f876 	bl	8007aa2 <USBD_CtlError>
      break;
 80079b6:	bf00      	nop
  }
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d106      	bne.n	80079e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f929 	bl	8007c32 <USBD_CtlSendStatus>
  }
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	3b01      	subs	r3, #1
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d80b      	bhi.n	8007a16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	885b      	ldrh	r3, [r3, #2]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d10c      	bne.n	8007a20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f90f 	bl	8007c32 <USBD_CtlSendStatus>
      }
      break;
 8007a14:	e004      	b.n	8007a20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f842 	bl	8007aa2 <USBD_CtlError>
      break;
 8007a1e:	e000      	b.n	8007a22 <USBD_ClrFeature+0x3a>
      break;
 8007a20:	bf00      	nop
  }
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	785a      	ldrb	r2, [r3, #1]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	3302      	adds	r3, #2
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	3303      	adds	r3, #3
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	3304      	adds	r3, #4
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	3305      	adds	r3, #5
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4413      	add	r3, r2
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	3306      	adds	r3, #6
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	3307      	adds	r3, #7
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4413      	add	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	80da      	strh	r2, [r3, #6]

}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007aac:	2180      	movs	r1, #128	; 0x80
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f002 ff78 	bl	800a9a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f002 ff74 	bl	800a9a4 <USBD_LL_StallEP>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d032      	beq.n	8007b40 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 f834 	bl	8007b48 <USBD_GetLen>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	75fa      	strb	r2, [r7, #23]
 8007af4:	461a      	mov	r2, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	4413      	add	r3, r2
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	7812      	ldrb	r2, [r2, #0]
 8007afe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	75fa      	strb	r2, [r7, #23]
 8007b06:	461a      	mov	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b10:	e012      	b.n	8007b38 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	60fa      	str	r2, [r7, #12]
 8007b18:	7dfa      	ldrb	r2, [r7, #23]
 8007b1a:	1c51      	adds	r1, r2, #1
 8007b1c:	75f9      	strb	r1, [r7, #23]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	440a      	add	r2, r1
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	75fa      	strb	r2, [r7, #23]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4413      	add	r3, r2
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e8      	bne.n	8007b12 <USBD_GetString+0x4e>
    }
  }
}
 8007b40:	bf00      	nop
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b54:	e005      	b.n	8007b62 <USBD_GetLen+0x1a>
  {
    len++;
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f5      	bne.n	8007b56 <USBD_GetLen+0xe>
  }

  return len;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	4613      	mov	r3, r2
 8007b82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b8c:	88fa      	ldrh	r2, [r7, #6]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f002 ff89 	bl	800aab6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bbc:	88fb      	ldrh	r3, [r7, #6]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f002 ff77 	bl	800aab6 <USBD_LL_Transmit>

  return USBD_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2203      	movs	r2, #3
 8007be4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007bf0:	88fa      	ldrh	r2, [r7, #6]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f002 ff7c 	bl	800aafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	2100      	movs	r1, #0
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f002 ff6a 	bl	800aafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c42:	2300      	movs	r3, #0
 8007c44:	2200      	movs	r2, #0
 8007c46:	2100      	movs	r1, #0
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f002 ff34 	bl	800aab6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2205      	movs	r2, #5
 8007c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f002 ff44 	bl	800aafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	4603      	mov	r3, r0
 8007c86:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c90:	2b84      	cmp	r3, #132	; 0x84
 8007c92:	d005      	beq.n	8007ca0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3303      	adds	r3, #3
 8007c9e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007cb0:	f000 fed4 	bl	8008a5c <vTaskStartScheduler>
  
  return osOK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cbc:	b089      	sub	sp, #36	; 0x24
 8007cbe:	af04      	add	r7, sp, #16
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d020      	beq.n	8007d0e <osThreadCreate+0x54>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01c      	beq.n	8007d0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685c      	ldr	r4, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681d      	ldr	r5, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691e      	ldr	r6, [r3, #16]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff ffc9 	bl	8007c7e <makeFreeRtosPriority>
 8007cec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cf6:	9202      	str	r2, [sp, #8]
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	9100      	str	r1, [sp, #0]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	4632      	mov	r2, r6
 8007d00:	4629      	mov	r1, r5
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fceb 	bl	80086de <xTaskCreateStatic>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e01c      	b.n	8007d48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685c      	ldr	r4, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d1a:	b29e      	uxth	r6, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff ffab 	bl	8007c7e <makeFreeRtosPriority>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f107 030c 	add.w	r3, r7, #12
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	9200      	str	r2, [sp, #0]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	4632      	mov	r2, r6
 8007d36:	4629      	mov	r1, r5
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fd2c 	bl	8008796 <xTaskCreate>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d001      	beq.n	8007d48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <osDelay+0x16>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	e000      	b.n	8007d6a <osDelay+0x18>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fe42 	bl	80089f4 <vTaskDelay>
  
  return osOK;
 8007d70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f103 0208 	add.w	r2, r3, #8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f103 0208 	add.w	r2, r3, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f103 0208 	add.w	r2, r3, #8
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr

08007db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr

08007e16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d103      	bne.n	8007e36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e00c      	b.n	8007e50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e002      	b.n	8007e44 <vListInsert+0x2e>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d2f6      	bcs.n	8007e3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
}
 8007e7c:	bf00      	nop
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6892      	ldr	r2, [r2, #8]
 8007e9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6852      	ldr	r2, [r2, #4]
 8007ea6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d103      	bne.n	8007eba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	1e5a      	subs	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr

08007ed8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f02:	f001 fce3 	bl	80098cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	441a      	add	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	3b01      	subs	r3, #1
 8007f34:	68f9      	ldr	r1, [r7, #12]
 8007f36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	22ff      	movs	r2, #255	; 0xff
 8007f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d114      	bne.n	8007f82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01a      	beq.n	8007f96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3310      	adds	r3, #16
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 ffbf 	bl	8008ee8 <xTaskRemoveFromEventList>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d012      	beq.n	8007f96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <xQueueGenericReset+0xcc>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	e009      	b.n	8007f96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3310      	adds	r3, #16
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fef7 	bl	8007d7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3324      	adds	r3, #36	; 0x24
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff fef2 	bl	8007d7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f96:	f001 fcc9 	bl	800992c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f9a:	2301      	movs	r3, #1
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	613b      	str	r3, [r7, #16]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	e004      	b.n	8007fe8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	fb02 f303 	mul.w	r3, r2, r3
 8007fe6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	3348      	adds	r3, #72	; 0x48
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 fd2f 	bl	8009a50 <pvPortMalloc>
 8007ff2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00f      	beq.n	800801a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	3348      	adds	r3, #72	; 0x48
 8007ffe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008008:	79fa      	ldrb	r2, [r7, #7]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f805 	bl	8008024 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800801a:	69bb      	ldr	r3, [r7, #24]
	}
 800801c:	4618      	mov	r0, r3
 800801e:	3720      	adds	r7, #32
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d103      	bne.n	8008040 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e002      	b.n	8008046 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008052:	2101      	movs	r1, #1
 8008054:	69b8      	ldr	r0, [r7, #24]
 8008056:	f7ff ff3f 	bl	8007ed8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800805a:	bf00      	nop
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00e      	beq.n	800808e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008082:	2300      	movs	r3, #0
 8008084:	2200      	movs	r2, #0
 8008086:	2100      	movs	r1, #0
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f81d 	bl	80080c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008096:	b580      	push	{r7, lr}
 8008098:	b086      	sub	sp, #24
 800809a:	af00      	add	r7, sp, #0
 800809c:	4603      	mov	r3, r0
 800809e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080a0:	2301      	movs	r3, #1
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	2300      	movs	r3, #0
 80080a6:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6939      	ldr	r1, [r7, #16]
 80080ae:	6978      	ldr	r0, [r7, #20]
 80080b0:	f7ff ff7a 	bl	8007fa8 <xQueueGenericCreate>
 80080b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f7ff ffd3 	bl	8008062 <prvInitialiseMutex>

		return pxNewQueue;
 80080bc:	68fb      	ldr	r3, [r7, #12]
	}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08e      	sub	sp, #56	; 0x38
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080d6:	2300      	movs	r3, #0
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <xQueueGenericSend+0x32>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d103      	bne.n	8008108 <xQueueGenericSend+0x40>
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <xQueueGenericSend+0x44>
 8008108:	2301      	movs	r3, #1
 800810a:	e000      	b.n	800810e <xQueueGenericSend+0x46>
 800810c:	2300      	movs	r3, #0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <xQueueGenericSend+0x60>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d103      	bne.n	8008136 <xQueueGenericSend+0x6e>
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <xQueueGenericSend+0x72>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <xQueueGenericSend+0x74>
 800813a:	2300      	movs	r3, #0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xQueueGenericSend+0x8e>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	623b      	str	r3, [r7, #32]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008156:	f001 f887 	bl	8009268 <xTaskGetSchedulerState>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <xQueueGenericSend+0x9e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <xQueueGenericSend+0xa2>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <xQueueGenericSend+0xa4>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <xQueueGenericSend+0xbe>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	61fb      	str	r3, [r7, #28]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008186:	f001 fba1 	bl	80098cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008192:	429a      	cmp	r2, r3
 8008194:	d302      	bcc.n	800819c <xQueueGenericSend+0xd4>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b02      	cmp	r3, #2
 800819a:	d129      	bne.n	80081f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081a2:	f000 f9b2 	bl	800850a <prvCopyDataToQueue>
 80081a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d010      	beq.n	80081d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fe97 	bl	8008ee8 <xTaskRemoveFromEventList>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d013      	beq.n	80081e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081c0:	4b3f      	ldr	r3, [pc, #252]	; (80082c0 <xQueueGenericSend+0x1f8>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	e00a      	b.n	80081e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081d8:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <xQueueGenericSend+0x1f8>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081e8:	f001 fba0 	bl	800992c <vPortExitCritical>
				return pdPASS;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e063      	b.n	80082b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081f6:	f001 fb99 	bl	800992c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e05c      	b.n	80082b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008204:	f107 0314 	add.w	r3, r7, #20
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fecf 	bl	8008fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800820e:	2301      	movs	r3, #1
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008212:	f001 fb8b 	bl	800992c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008216:	f000 fc81 	bl	8008b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800821a:	f001 fb57 	bl	80098cc <vPortEnterCritical>
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008224:	b25b      	sxtb	r3, r3
 8008226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822a:	d103      	bne.n	8008234 <xQueueGenericSend+0x16c>
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800823a:	b25b      	sxtb	r3, r3
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d103      	bne.n	800824a <xQueueGenericSend+0x182>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800824a:	f001 fb6f 	bl	800992c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800824e:	1d3a      	adds	r2, r7, #4
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f000 febe 	bl	8008fd8 <xTaskCheckForTimeOut>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d124      	bne.n	80082ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008264:	f000 fa23 	bl	80086ae <prvIsQueueFull>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d018      	beq.n	80082a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	3310      	adds	r3, #16
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fe12 	bl	8008ea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800827c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800827e:	f000 f9ae 	bl	80085de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008282:	f000 fc59 	bl	8008b38 <xTaskResumeAll>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	f47f af7c 	bne.w	8008186 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <xQueueGenericSend+0x1f8>)
 8008290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	e772      	b.n	8008186 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a2:	f000 f99c 	bl	80085de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082a6:	f000 fc47 	bl	8008b38 <xTaskResumeAll>
 80082aa:	e76c      	b.n	8008186 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ae:	f000 f996 	bl	80085de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082b2:	f000 fc41 	bl	8008b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082b6:	2300      	movs	r3, #0
		}
	}
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3738      	adds	r7, #56	; 0x38
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08e      	sub	sp, #56	; 0x38
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	623b      	str	r3, [r7, #32]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	61fb      	str	r3, [r7, #28]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008314:	f000 ffa8 	bl	8009268 <xTaskGetSchedulerState>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d102      	bne.n	8008324 <xQueueSemaphoreTake+0x60>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <xQueueSemaphoreTake+0x64>
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <xQueueSemaphoreTake+0x66>
 8008328:	2300      	movs	r3, #0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	61bb      	str	r3, [r7, #24]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008344:	f001 fac2 	bl	80098cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	2b00      	cmp	r3, #0
 8008352:	d024      	beq.n	800839e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	1e5a      	subs	r2, r3, #1
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008364:	f001 f94a 	bl	80095fc <pvTaskIncrementMutexHeldCount>
 8008368:	4602      	mov	r2, r0
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00f      	beq.n	8008396 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	3310      	adds	r3, #16
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fdb4 	bl	8008ee8 <xTaskRemoveFromEventList>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008386:	4b54      	ldr	r3, [pc, #336]	; (80084d8 <xQueueSemaphoreTake+0x214>)
 8008388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008396:	f001 fac9 	bl	800992c <vPortExitCritical>
				return pdPASS;
 800839a:	2301      	movs	r3, #1
 800839c:	e097      	b.n	80084ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d111      	bne.n	80083c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	617b      	str	r3, [r7, #20]
}
 80083bc:	bf00      	nop
 80083be:	e7fe      	b.n	80083be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083c0:	f001 fab4 	bl	800992c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083c4:	2300      	movs	r3, #0
 80083c6:	e082      	b.n	80084ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d106      	bne.n	80083dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083ce:	f107 030c 	add.w	r3, r7, #12
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fdea 	bl	8008fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083dc:	f001 faa6 	bl	800992c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083e0:	f000 fb9c 	bl	8008b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083e4:	f001 fa72 	bl	80098cc <vPortEnterCritical>
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ee:	b25b      	sxtb	r3, r3
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d103      	bne.n	80083fe <xQueueSemaphoreTake+0x13a>
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008404:	b25b      	sxtb	r3, r3
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840a:	d103      	bne.n	8008414 <xQueueSemaphoreTake+0x150>
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008414:	f001 fa8a 	bl	800992c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008418:	463a      	mov	r2, r7
 800841a:	f107 030c 	add.w	r3, r7, #12
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fdd9 	bl	8008fd8 <xTaskCheckForTimeOut>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d132      	bne.n	8008492 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800842c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800842e:	f000 f928 	bl	8008682 <prvIsQueueEmpty>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d026      	beq.n	8008486 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008440:	f001 fa44 	bl	80098cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	4618      	mov	r0, r3
 800844a:	f000 ff2b 	bl	80092a4 <xTaskPriorityInherit>
 800844e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008450:	f001 fa6c 	bl	800992c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	4611      	mov	r1, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fd1f 	bl	8008ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008464:	f000 f8bb 	bl	80085de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008468:	f000 fb66 	bl	8008b38 <xTaskResumeAll>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	f47f af68 	bne.w	8008344 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008474:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <xQueueSemaphoreTake+0x214>)
 8008476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	e75e      	b.n	8008344 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008488:	f000 f8a9 	bl	80085de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800848c:	f000 fb54 	bl	8008b38 <xTaskResumeAll>
 8008490:	e758      	b.n	8008344 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008494:	f000 f8a3 	bl	80085de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008498:	f000 fb4e 	bl	8008b38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800849c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800849e:	f000 f8f0 	bl	8008682 <prvIsQueueEmpty>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f43f af4d 	beq.w	8008344 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80084b0:	f001 fa0c 	bl	80098cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084b6:	f000 f811 	bl	80084dc <prvGetDisinheritPriorityAfterTimeout>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fffa 	bl	80094bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084c8:	f001 fa30 	bl	800992c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3738      	adds	r7, #56	; 0x38
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	e000ed04 	.word	0xe000ed04

080084dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d006      	beq.n	80084fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f1c3 0307 	rsb	r3, r3, #7
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e001      	b.n	80084fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80084fe:	68fb      	ldr	r3, [r7, #12]
	}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10d      	bne.n	8008544 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d14d      	bne.n	80085cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 ff3b 	bl	80093b0 <xTaskPriorityDisinherit>
 800853a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	e043      	b.n	80085cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d119      	bne.n	800857e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6898      	ldr	r0, [r3, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	461a      	mov	r2, r3
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	f002 fb7d 	bl	800ac54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	441a      	add	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d32b      	bcc.n	80085cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	609a      	str	r2, [r3, #8]
 800857c:	e026      	b.n	80085cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	68d8      	ldr	r0, [r3, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	461a      	mov	r2, r3
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	f002 fb63 	bl	800ac54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	425b      	negs	r3, r3
 8008598:	441a      	add	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d207      	bcs.n	80085ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	425b      	negs	r3, r3
 80085b4:	441a      	add	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d105      	bne.n	80085cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085d4:	697b      	ldr	r3, [r7, #20]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085e6:	f001 f971 	bl	80098cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085f2:	e011      	b.n	8008618 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d012      	beq.n	8008622 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3324      	adds	r3, #36	; 0x24
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fc71 	bl	8008ee8 <xTaskRemoveFromEventList>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800860c:	f000 fd46 	bl	800909c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	3b01      	subs	r3, #1
 8008614:	b2db      	uxtb	r3, r3
 8008616:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dce9      	bgt.n	80085f4 <prvUnlockQueue+0x16>
 8008620:	e000      	b.n	8008624 <prvUnlockQueue+0x46>
					break;
 8008622:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	22ff      	movs	r2, #255	; 0xff
 8008628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800862c:	f001 f97e 	bl	800992c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008630:	f001 f94c 	bl	80098cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800863a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800863c:	e011      	b.n	8008662 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d012      	beq.n	800866c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3310      	adds	r3, #16
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fc4c 	bl	8008ee8 <xTaskRemoveFromEventList>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008656:	f000 fd21 	bl	800909c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	3b01      	subs	r3, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dce9      	bgt.n	800863e <prvUnlockQueue+0x60>
 800866a:	e000      	b.n	800866e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800866c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	22ff      	movs	r2, #255	; 0xff
 8008672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008676:	f001 f959 	bl	800992c <vPortExitCritical>
}
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800868a:	f001 f91f 	bl	80098cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	e001      	b.n	80086a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086a0:	f001 f944 	bl	800992c <vPortExitCritical>

	return xReturn;
 80086a4:	68fb      	ldr	r3, [r7, #12]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086b6:	f001 f909 	bl	80098cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d102      	bne.n	80086cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086c6:	2301      	movs	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	e001      	b.n	80086d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086d0:	f001 f92c 	bl	800992c <vPortExitCritical>

	return xReturn;
 80086d4:	68fb      	ldr	r3, [r7, #12]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b08e      	sub	sp, #56	; 0x38
 80086e2:	af04      	add	r7, sp, #16
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
 80086ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <xTaskCreateStatic+0x2a>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	623b      	str	r3, [r7, #32]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <xTaskCreateStatic+0x46>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	61fb      	str	r3, [r7, #28]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008724:	2354      	movs	r3, #84	; 0x54
 8008726:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b54      	cmp	r3, #84	; 0x54
 800872c:	d00a      	beq.n	8008744 <xTaskCreateStatic+0x66>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	61bb      	str	r3, [r7, #24]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01e      	beq.n	8008788 <xTaskCreateStatic+0xaa>
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01b      	beq.n	8008788 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008758:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	2202      	movs	r2, #2
 800875e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008762:	2300      	movs	r3, #0
 8008764:	9303      	str	r3, [sp, #12]
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	9302      	str	r3, [sp, #8]
 800876a:	f107 0314 	add.w	r3, r7, #20
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 f850 	bl	8008820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008782:	f000 f8cd 	bl	8008920 <prvAddNewTaskToReadyList>
 8008786:	e001      	b.n	800878c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800878c:	697b      	ldr	r3, [r7, #20]
	}
 800878e:	4618      	mov	r0, r3
 8008790:	3728      	adds	r7, #40	; 0x28
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008796:	b580      	push	{r7, lr}
 8008798:	b08c      	sub	sp, #48	; 0x30
 800879a:	af04      	add	r7, sp, #16
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	4613      	mov	r3, r2
 80087a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 f950 	bl	8009a50 <pvPortMalloc>
 80087b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00e      	beq.n	80087d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80087b8:	2054      	movs	r0, #84	; 0x54
 80087ba:	f001 f949 	bl	8009a50 <pvPortMalloc>
 80087be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	631a      	str	r2, [r3, #48]	; 0x30
 80087cc:	e005      	b.n	80087da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087ce:	6978      	ldr	r0, [r7, #20]
 80087d0:	f001 fa02 	bl	8009bd8 <vPortFree>
 80087d4:	e001      	b.n	80087da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d017      	beq.n	8008810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087e8:	88fa      	ldrh	r2, [r7, #6]
 80087ea:	2300      	movs	r3, #0
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 f80e 	bl	8008820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008804:	69f8      	ldr	r0, [r7, #28]
 8008806:	f000 f88b 	bl	8008920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800880a:	2301      	movs	r3, #1
 800880c:	61bb      	str	r3, [r7, #24]
 800880e:	e002      	b.n	8008816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008810:	f04f 33ff 	mov.w	r3, #4294967295
 8008814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008816:	69bb      	ldr	r3, [r7, #24]
	}
 8008818:	4618      	mov	r0, r3
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008838:	3b01      	subs	r3, #1
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	f023 0307 	bic.w	r3, r3, #7
 8008846:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	617b      	str	r3, [r7, #20]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	e012      	b.n	8008894 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	7819      	ldrb	r1, [r3, #0]
 8008876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	3334      	adds	r3, #52	; 0x34
 800887e:	460a      	mov	r2, r1
 8008880:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	3301      	adds	r3, #1
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d9e9      	bls.n	800886e <prvInitialiseNewTask+0x4e>
 800889a:	e000      	b.n	800889e <prvInitialiseNewTask+0x7e>
		{
			break;
 800889c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	2b06      	cmp	r3, #6
 80088aa:	d901      	bls.n	80088b0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088ac:	2306      	movs	r3, #6
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	2200      	movs	r2, #0
 80088c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	3304      	adds	r3, #4
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fa76 	bl	8007db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	3318      	adds	r3, #24
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff fa71 	bl	8007db8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	f1c3 0207 	rsb	r2, r3, #7
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	2200      	movs	r2, #0
 80088f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	68f9      	ldr	r1, [r7, #12]
 80088fe:	69b8      	ldr	r0, [r7, #24]
 8008900:	f000 fef6 	bl	80096f0 <pxPortInitialiseStack>
 8008904:	4602      	mov	r2, r0
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008916:	bf00      	nop
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008928:	f000 ffd0 	bl	80098cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800892c:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <prvAddNewTaskToReadyList+0xb8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a29      	ldr	r2, [pc, #164]	; (80089d8 <prvAddNewTaskToReadyList+0xb8>)
 8008934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008936:	4b29      	ldr	r3, [pc, #164]	; (80089dc <prvAddNewTaskToReadyList+0xbc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800893e:	4a27      	ldr	r2, [pc, #156]	; (80089dc <prvAddNewTaskToReadyList+0xbc>)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008944:	4b24      	ldr	r3, [pc, #144]	; (80089d8 <prvAddNewTaskToReadyList+0xb8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d110      	bne.n	800896e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800894c:	f000 fbca 	bl	80090e4 <prvInitialiseTaskLists>
 8008950:	e00d      	b.n	800896e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008952:	4b23      	ldr	r3, [pc, #140]	; (80089e0 <prvAddNewTaskToReadyList+0xc0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800895a:	4b20      	ldr	r3, [pc, #128]	; (80089dc <prvAddNewTaskToReadyList+0xbc>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	429a      	cmp	r2, r3
 8008966:	d802      	bhi.n	800896e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008968:	4a1c      	ldr	r2, [pc, #112]	; (80089dc <prvAddNewTaskToReadyList+0xbc>)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800896e:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 8008976:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	2201      	movs	r2, #1
 800897e:	409a      	lsls	r2, r3
 8008980:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4313      	orrs	r3, r2
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4a15      	ldr	r2, [pc, #84]	; (80089ec <prvAddNewTaskToReadyList+0xcc>)
 8008998:	441a      	add	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3304      	adds	r3, #4
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f7ff fa15 	bl	8007dd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089a6:	f000 ffc1 	bl	800992c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089aa:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <prvAddNewTaskToReadyList+0xc0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00e      	beq.n	80089d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <prvAddNewTaskToReadyList+0xbc>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	429a      	cmp	r2, r3
 80089be:	d207      	bcs.n	80089d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089c0:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <prvAddNewTaskToReadyList+0xd0>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000560 	.word	0x20000560
 80089dc:	20000460 	.word	0x20000460
 80089e0:	2000056c 	.word	0x2000056c
 80089e4:	2000057c 	.word	0x2000057c
 80089e8:	20000568 	.word	0x20000568
 80089ec:	20000464 	.word	0x20000464
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d017      	beq.n	8008a36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a06:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <vTaskDelay+0x60>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <vTaskDelay+0x30>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	60bb      	str	r3, [r7, #8]
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a24:	f000 f87a 	bl	8008b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fdfa 	bl	8009624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a30:	f000 f882 	bl	8008b38 <xTaskResumeAll>
 8008a34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d107      	bne.n	8008a4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <vTaskDelay+0x64>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a4c:	bf00      	nop
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	20000588 	.word	0x20000588
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	1d39      	adds	r1, r7, #4
 8008a6e:	f107 0308 	add.w	r3, r7, #8
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f7 fb74 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	9202      	str	r2, [sp, #8]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	2300      	movs	r3, #0
 8008a88:	460a      	mov	r2, r1
 8008a8a:	491e      	ldr	r1, [pc, #120]	; (8008b04 <vTaskStartScheduler+0xa8>)
 8008a8c:	481e      	ldr	r0, [pc, #120]	; (8008b08 <vTaskStartScheduler+0xac>)
 8008a8e:	f7ff fe26 	bl	80086de <xTaskCreateStatic>
 8008a92:	4603      	mov	r3, r0
 8008a94:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <vTaskStartScheduler+0xb0>)
 8008a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a98:	4b1c      	ldr	r3, [pc, #112]	; (8008b0c <vTaskStartScheduler+0xb0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e001      	b.n	8008aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d116      	bne.n	8008ade <vTaskStartScheduler+0x82>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac4:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <vTaskStartScheduler+0xb4>)
 8008ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008acc:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <vTaskStartScheduler+0xb8>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008ad2:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <vTaskStartScheduler+0xbc>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ad8:	f000 fe86 	bl	80097e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008adc:	e00e      	b.n	8008afc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae4:	d10a      	bne.n	8008afc <vTaskStartScheduler+0xa0>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60fb      	str	r3, [r7, #12]
}
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <vTaskStartScheduler+0x9e>
}
 8008afc:	bf00      	nop
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	0800b574 	.word	0x0800b574
 8008b08:	080090b5 	.word	0x080090b5
 8008b0c:	20000584 	.word	0x20000584
 8008b10:	20000580 	.word	0x20000580
 8008b14:	2000056c 	.word	0x2000056c
 8008b18:	20000564 	.word	0x20000564

08008b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <vTaskSuspendAll+0x18>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	4a03      	ldr	r2, [pc, #12]	; (8008b34 <vTaskSuspendAll+0x18>)
 8008b28:	6013      	str	r3, [r2, #0]
}
 8008b2a:	bf00      	nop
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20000588 	.word	0x20000588

08008b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b46:	4b41      	ldr	r3, [pc, #260]	; (8008c4c <xTaskResumeAll+0x114>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	603b      	str	r3, [r7, #0]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b64:	f000 feb2 	bl	80098cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b68:	4b38      	ldr	r3, [pc, #224]	; (8008c4c <xTaskResumeAll+0x114>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a37      	ldr	r2, [pc, #220]	; (8008c4c <xTaskResumeAll+0x114>)
 8008b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b72:	4b36      	ldr	r3, [pc, #216]	; (8008c4c <xTaskResumeAll+0x114>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d161      	bne.n	8008c3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b7a:	4b35      	ldr	r3, [pc, #212]	; (8008c50 <xTaskResumeAll+0x118>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d05d      	beq.n	8008c3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b82:	e02e      	b.n	8008be2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008b84:	4b33      	ldr	r3, [pc, #204]	; (8008c54 <xTaskResumeAll+0x11c>)
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3318      	adds	r3, #24
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff f978 	bl	8007e86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff f973 	bl	8007e86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	409a      	lsls	r2, r3
 8008ba8:	4b2b      	ldr	r3, [pc, #172]	; (8008c58 <xTaskResumeAll+0x120>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	4a2a      	ldr	r2, [pc, #168]	; (8008c58 <xTaskResumeAll+0x120>)
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4a27      	ldr	r2, [pc, #156]	; (8008c5c <xTaskResumeAll+0x124>)
 8008bc0:	441a      	add	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4610      	mov	r0, r2
 8008bca:	f7ff f901 	bl	8007dd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	4b23      	ldr	r3, [pc, #140]	; (8008c60 <xTaskResumeAll+0x128>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d302      	bcc.n	8008be2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008bdc:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <xTaskResumeAll+0x12c>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008be2:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <xTaskResumeAll+0x11c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1cc      	bne.n	8008b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bf0:	f000 fb16 	bl	8009220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	; (8008c68 <xTaskResumeAll+0x130>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d010      	beq.n	8008c22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c00:	f000 f836 	bl	8008c70 <xTaskIncrementTick>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008c0a:	4b16      	ldr	r3, [pc, #88]	; (8008c64 <xTaskResumeAll+0x12c>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1f1      	bne.n	8008c00 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008c1c:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <xTaskResumeAll+0x130>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <xTaskResumeAll+0x12c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <xTaskResumeAll+0x134>)
 8008c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c3e:	f000 fe75 	bl	800992c <vPortExitCritical>

	return xAlreadyYielded;
 8008c42:	68bb      	ldr	r3, [r7, #8]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20000588 	.word	0x20000588
 8008c50:	20000560 	.word	0x20000560
 8008c54:	20000520 	.word	0x20000520
 8008c58:	20000568 	.word	0x20000568
 8008c5c:	20000464 	.word	0x20000464
 8008c60:	20000460 	.word	0x20000460
 8008c64:	20000574 	.word	0x20000574
 8008c68:	20000570 	.word	0x20000570
 8008c6c:	e000ed04 	.word	0xe000ed04

08008c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c7a:	4b51      	ldr	r3, [pc, #324]	; (8008dc0 <xTaskIncrementTick+0x150>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f040 808d 	bne.w	8008d9e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c84:	4b4f      	ldr	r3, [pc, #316]	; (8008dc4 <xTaskIncrementTick+0x154>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c8c:	4a4d      	ldr	r2, [pc, #308]	; (8008dc4 <xTaskIncrementTick+0x154>)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d120      	bne.n	8008cda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c98:	4b4b      	ldr	r3, [pc, #300]	; (8008dc8 <xTaskIncrementTick+0x158>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	603b      	str	r3, [r7, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	e7fe      	b.n	8008cb6 <xTaskIncrementTick+0x46>
 8008cb8:	4b43      	ldr	r3, [pc, #268]	; (8008dc8 <xTaskIncrementTick+0x158>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	4b43      	ldr	r3, [pc, #268]	; (8008dcc <xTaskIncrementTick+0x15c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a41      	ldr	r2, [pc, #260]	; (8008dc8 <xTaskIncrementTick+0x158>)
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	4a41      	ldr	r2, [pc, #260]	; (8008dcc <xTaskIncrementTick+0x15c>)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	4b40      	ldr	r3, [pc, #256]	; (8008dd0 <xTaskIncrementTick+0x160>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	4a3f      	ldr	r2, [pc, #252]	; (8008dd0 <xTaskIncrementTick+0x160>)
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	f000 faa3 	bl	8009220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cda:	4b3e      	ldr	r3, [pc, #248]	; (8008dd4 <xTaskIncrementTick+0x164>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d34d      	bcc.n	8008d80 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ce4:	4b38      	ldr	r3, [pc, #224]	; (8008dc8 <xTaskIncrementTick+0x158>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <xTaskIncrementTick+0x82>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e000      	b.n	8008cf4 <xTaskIncrementTick+0x84>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf8:	4b36      	ldr	r3, [pc, #216]	; (8008dd4 <xTaskIncrementTick+0x164>)
 8008cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfe:	601a      	str	r2, [r3, #0]
					break;
 8008d00:	e03e      	b.n	8008d80 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d02:	4b31      	ldr	r3, [pc, #196]	; (8008dc8 <xTaskIncrementTick+0x158>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d203      	bcs.n	8008d22 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d1a:	4a2e      	ldr	r2, [pc, #184]	; (8008dd4 <xTaskIncrementTick+0x164>)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6013      	str	r3, [r2, #0]
						break;
 8008d20:	e02e      	b.n	8008d80 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff f8ad 	bl	8007e86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3318      	adds	r3, #24
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff f8a4 	bl	8007e86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	2201      	movs	r2, #1
 8008d44:	409a      	lsls	r2, r3
 8008d46:	4b24      	ldr	r3, [pc, #144]	; (8008dd8 <xTaskIncrementTick+0x168>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	4a22      	ldr	r2, [pc, #136]	; (8008dd8 <xTaskIncrementTick+0x168>)
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4a1f      	ldr	r2, [pc, #124]	; (8008ddc <xTaskIncrementTick+0x16c>)
 8008d5e:	441a      	add	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f7ff f832 	bl	8007dd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <xTaskIncrementTick+0x170>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d3b4      	bcc.n	8008ce4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d7e:	e7b1      	b.n	8008ce4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d80:	4b17      	ldr	r3, [pc, #92]	; (8008de0 <xTaskIncrementTick+0x170>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d86:	4915      	ldr	r1, [pc, #84]	; (8008ddc <xTaskIncrementTick+0x16c>)
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d907      	bls.n	8008da8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	e004      	b.n	8008da8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d9e:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <xTaskIncrementTick+0x174>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	4a0f      	ldr	r2, [pc, #60]	; (8008de4 <xTaskIncrementTick+0x174>)
 8008da6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <xTaskIncrementTick+0x178>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008db4:	697b      	ldr	r3, [r7, #20]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000588 	.word	0x20000588
 8008dc4:	20000564 	.word	0x20000564
 8008dc8:	20000518 	.word	0x20000518
 8008dcc:	2000051c 	.word	0x2000051c
 8008dd0:	20000578 	.word	0x20000578
 8008dd4:	20000580 	.word	0x20000580
 8008dd8:	20000568 	.word	0x20000568
 8008ddc:	20000464 	.word	0x20000464
 8008de0:	20000460 	.word	0x20000460
 8008de4:	20000570 	.word	0x20000570
 8008de8:	20000574 	.word	0x20000574

08008dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008df2:	4b26      	ldr	r3, [pc, #152]	; (8008e8c <vTaskSwitchContext+0xa0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dfa:	4b25      	ldr	r3, [pc, #148]	; (8008e90 <vTaskSwitchContext+0xa4>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e00:	e03f      	b.n	8008e82 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008e02:	4b23      	ldr	r3, [pc, #140]	; (8008e90 <vTaskSwitchContext+0xa4>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e08:	4b22      	ldr	r3, [pc, #136]	; (8008e94 <vTaskSwitchContext+0xa8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	fab3 f383 	clz	r3, r3
 8008e14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e16:	7afb      	ldrb	r3, [r7, #11]
 8008e18:	f1c3 031f 	rsb	r3, r3, #31
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	491e      	ldr	r1, [pc, #120]	; (8008e98 <vTaskSwitchContext+0xac>)
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	607b      	str	r3, [r7, #4]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <vTaskSwitchContext+0x5a>
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4a11      	ldr	r2, [pc, #68]	; (8008e98 <vTaskSwitchContext+0xac>)
 8008e54:	4413      	add	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	605a      	str	r2, [r3, #4]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d104      	bne.n	8008e78 <vTaskSwitchContext+0x8c>
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	605a      	str	r2, [r3, #4]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	4a07      	ldr	r2, [pc, #28]	; (8008e9c <vTaskSwitchContext+0xb0>)
 8008e80:	6013      	str	r3, [r2, #0]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bc80      	pop	{r7}
 8008e8a:	4770      	bx	lr
 8008e8c:	20000588 	.word	0x20000588
 8008e90:	20000574 	.word	0x20000574
 8008e94:	20000568 	.word	0x20000568
 8008e98:	20000464 	.word	0x20000464
 8008e9c:	20000460 	.word	0x20000460

08008ea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	60fb      	str	r3, [r7, #12]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ec6:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <vTaskPlaceOnEventList+0x44>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3318      	adds	r3, #24
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7fe ffa1 	bl	8007e16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	6838      	ldr	r0, [r7, #0]
 8008ed8:	f000 fba4 	bl	8009624 <prvAddCurrentTaskToDelayedList>
}
 8008edc:	bf00      	nop
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000460 	.word	0x20000460

08008ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60fb      	str	r3, [r7, #12]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	3318      	adds	r3, #24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe ffb4 	bl	8007e86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1e:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <xTaskRemoveFromEventList+0xac>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d11c      	bne.n	8008f60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe ffab 	bl	8007e86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	2201      	movs	r2, #1
 8008f36:	409a      	lsls	r2, r3
 8008f38:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <xTaskRemoveFromEventList+0xb0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <xTaskRemoveFromEventList+0xb0>)
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4a13      	ldr	r2, [pc, #76]	; (8008f9c <xTaskRemoveFromEventList+0xb4>)
 8008f50:	441a      	add	r2, r3
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	3304      	adds	r3, #4
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f7fe ff39 	bl	8007dd0 <vListInsertEnd>
 8008f5e:	e005      	b.n	8008f6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3318      	adds	r3, #24
 8008f64:	4619      	mov	r1, r3
 8008f66:	480e      	ldr	r0, [pc, #56]	; (8008fa0 <xTaskRemoveFromEventList+0xb8>)
 8008f68:	f7fe ff32 	bl	8007dd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f70:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <xTaskRemoveFromEventList+0xbc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d905      	bls.n	8008f86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <xTaskRemoveFromEventList+0xc0>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e001      	b.n	8008f8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008f8a:	697b      	ldr	r3, [r7, #20]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20000588 	.word	0x20000588
 8008f98:	20000568 	.word	0x20000568
 8008f9c:	20000464 	.word	0x20000464
 8008fa0:	20000520 	.word	0x20000520
 8008fa4:	20000460 	.word	0x20000460
 8008fa8:	20000574 	.word	0x20000574

08008fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fb4:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <vTaskInternalSetTimeOutState+0x24>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <vTaskInternalSetTimeOutState+0x28>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	605a      	str	r2, [r3, #4]
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20000578 	.word	0x20000578
 8008fd4:	20000564 	.word	0x20000564

08008fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	613b      	str	r3, [r7, #16]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60fb      	str	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800901a:	f000 fc57 	bl	80098cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800901e:	4b1d      	ldr	r3, [pc, #116]	; (8009094 <xTaskCheckForTimeOut+0xbc>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d102      	bne.n	800903e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009038:	2300      	movs	r3, #0
 800903a:	61fb      	str	r3, [r7, #28]
 800903c:	e023      	b.n	8009086 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b15      	ldr	r3, [pc, #84]	; (8009098 <xTaskCheckForTimeOut+0xc0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d007      	beq.n	800905a <xTaskCheckForTimeOut+0x82>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	429a      	cmp	r2, r3
 8009052:	d302      	bcc.n	800905a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	e015      	b.n	8009086 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	429a      	cmp	r2, r3
 8009062:	d20b      	bcs.n	800907c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	1ad2      	subs	r2, r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff9b 	bl	8008fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	e004      	b.n	8009086 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009082:	2301      	movs	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009086:	f000 fc51 	bl	800992c <vPortExitCritical>

	return xReturn;
 800908a:	69fb      	ldr	r3, [r7, #28]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3720      	adds	r7, #32
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000564 	.word	0x20000564
 8009098:	20000578 	.word	0x20000578

0800909c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090a0:	4b03      	ldr	r3, [pc, #12]	; (80090b0 <vTaskMissedYield+0x14>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
}
 80090a6:	bf00      	nop
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20000574 	.word	0x20000574

080090b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090bc:	f000 f852 	bl	8009164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090c0:	4b06      	ldr	r3, [pc, #24]	; (80090dc <prvIdleTask+0x28>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d9f9      	bls.n	80090bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80090c8:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <prvIdleTask+0x2c>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090d8:	e7f0      	b.n	80090bc <prvIdleTask+0x8>
 80090da:	bf00      	nop
 80090dc:	20000464 	.word	0x20000464
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ea:	2300      	movs	r3, #0
 80090ec:	607b      	str	r3, [r7, #4]
 80090ee:	e00c      	b.n	800910a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4a12      	ldr	r2, [pc, #72]	; (8009144 <prvInitialiseTaskLists+0x60>)
 80090fc:	4413      	add	r3, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fe3b 	bl	8007d7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3301      	adds	r3, #1
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b06      	cmp	r3, #6
 800910e:	d9ef      	bls.n	80090f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009110:	480d      	ldr	r0, [pc, #52]	; (8009148 <prvInitialiseTaskLists+0x64>)
 8009112:	f7fe fe32 	bl	8007d7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009116:	480d      	ldr	r0, [pc, #52]	; (800914c <prvInitialiseTaskLists+0x68>)
 8009118:	f7fe fe2f 	bl	8007d7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800911c:	480c      	ldr	r0, [pc, #48]	; (8009150 <prvInitialiseTaskLists+0x6c>)
 800911e:	f7fe fe2c 	bl	8007d7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009122:	480c      	ldr	r0, [pc, #48]	; (8009154 <prvInitialiseTaskLists+0x70>)
 8009124:	f7fe fe29 	bl	8007d7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009128:	480b      	ldr	r0, [pc, #44]	; (8009158 <prvInitialiseTaskLists+0x74>)
 800912a:	f7fe fe26 	bl	8007d7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800912e:	4b0b      	ldr	r3, [pc, #44]	; (800915c <prvInitialiseTaskLists+0x78>)
 8009130:	4a05      	ldr	r2, [pc, #20]	; (8009148 <prvInitialiseTaskLists+0x64>)
 8009132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <prvInitialiseTaskLists+0x7c>)
 8009136:	4a05      	ldr	r2, [pc, #20]	; (800914c <prvInitialiseTaskLists+0x68>)
 8009138:	601a      	str	r2, [r3, #0]
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20000464 	.word	0x20000464
 8009148:	200004f0 	.word	0x200004f0
 800914c:	20000504 	.word	0x20000504
 8009150:	20000520 	.word	0x20000520
 8009154:	20000534 	.word	0x20000534
 8009158:	2000054c 	.word	0x2000054c
 800915c:	20000518 	.word	0x20000518
 8009160:	2000051c 	.word	0x2000051c

08009164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800916a:	e019      	b.n	80091a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800916c:	f000 fbae 	bl	80098cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009170:	4b10      	ldr	r3, [pc, #64]	; (80091b4 <prvCheckTasksWaitingTermination+0x50>)
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fe82 	bl	8007e86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <prvCheckTasksWaitingTermination+0x54>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3b01      	subs	r3, #1
 8009188:	4a0b      	ldr	r2, [pc, #44]	; (80091b8 <prvCheckTasksWaitingTermination+0x54>)
 800918a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800918c:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <prvCheckTasksWaitingTermination+0x58>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3b01      	subs	r3, #1
 8009192:	4a0a      	ldr	r2, [pc, #40]	; (80091bc <prvCheckTasksWaitingTermination+0x58>)
 8009194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009196:	f000 fbc9 	bl	800992c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f810 	bl	80091c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091a0:	4b06      	ldr	r3, [pc, #24]	; (80091bc <prvCheckTasksWaitingTermination+0x58>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e1      	bne.n	800916c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000534 	.word	0x20000534
 80091b8:	20000560 	.word	0x20000560
 80091bc:	20000548 	.word	0x20000548

080091c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d108      	bne.n	80091e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fcfe 	bl	8009bd8 <vPortFree>
				vPortFree( pxTCB );
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fcfb 	bl	8009bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091e2:	e018      	b.n	8009216 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d103      	bne.n	80091f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fcf2 	bl	8009bd8 <vPortFree>
	}
 80091f4:	e00f      	b.n	8009216 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d00a      	beq.n	8009216 <prvDeleteTCB+0x56>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <prvDeleteTCB+0x54>
	}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009226:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <prvResetNextTaskUnblockTime+0x40>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <prvResetNextTaskUnblockTime+0x14>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <prvResetNextTaskUnblockTime+0x16>
 8009234:	2300      	movs	r3, #0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d004      	beq.n	8009244 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <prvResetNextTaskUnblockTime+0x44>)
 800923c:	f04f 32ff 	mov.w	r2, #4294967295
 8009240:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009242:	e008      	b.n	8009256 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009244:	4b06      	ldr	r3, [pc, #24]	; (8009260 <prvResetNextTaskUnblockTime+0x40>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4a04      	ldr	r2, [pc, #16]	; (8009264 <prvResetNextTaskUnblockTime+0x44>)
 8009254:	6013      	str	r3, [r2, #0]
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr
 8009260:	20000518 	.word	0x20000518
 8009264:	20000580 	.word	0x20000580

08009268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800926e:	4b0b      	ldr	r3, [pc, #44]	; (800929c <xTaskGetSchedulerState+0x34>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009276:	2301      	movs	r3, #1
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	e008      	b.n	800928e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800927c:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <xTaskGetSchedulerState+0x38>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009284:	2302      	movs	r3, #2
 8009286:	607b      	str	r3, [r7, #4]
 8009288:	e001      	b.n	800928e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800928a:	2300      	movs	r3, #0
 800928c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800928e:	687b      	ldr	r3, [r7, #4]
	}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	2000056c 	.word	0x2000056c
 80092a0:	20000588 	.word	0x20000588

080092a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d06e      	beq.n	8009398 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	4b39      	ldr	r3, [pc, #228]	; (80093a4 <xTaskPriorityInherit+0x100>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d25e      	bcs.n	8009386 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	db06      	blt.n	80092de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d0:	4b34      	ldr	r3, [pc, #208]	; (80093a4 <xTaskPriorityInherit+0x100>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	f1c3 0207 	rsb	r2, r3, #7
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6959      	ldr	r1, [r3, #20]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4a2e      	ldr	r2, [pc, #184]	; (80093a8 <xTaskPriorityInherit+0x104>)
 80092f0:	4413      	add	r3, r2
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d101      	bne.n	80092fa <xTaskPriorityInherit+0x56>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e000      	b.n	80092fc <xTaskPriorityInherit+0x58>
 80092fa:	2300      	movs	r3, #0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d03a      	beq.n	8009376 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	3304      	adds	r3, #4
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fdbe 	bl	8007e86 <uxListRemove>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d115      	bne.n	800933c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4924      	ldr	r1, [pc, #144]	; (80093a8 <xTaskPriorityInherit+0x104>)
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <xTaskPriorityInherit+0x98>
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	2201      	movs	r2, #1
 800932c:	fa02 f303 	lsl.w	r3, r2, r3
 8009330:	43da      	mvns	r2, r3
 8009332:	4b1e      	ldr	r3, [pc, #120]	; (80093ac <xTaskPriorityInherit+0x108>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4013      	ands	r3, r2
 8009338:	4a1c      	ldr	r2, [pc, #112]	; (80093ac <xTaskPriorityInherit+0x108>)
 800933a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800933c:	4b19      	ldr	r3, [pc, #100]	; (80093a4 <xTaskPriorityInherit+0x100>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	2201      	movs	r2, #1
 800934c:	409a      	lsls	r2, r3
 800934e:	4b17      	ldr	r3, [pc, #92]	; (80093ac <xTaskPriorityInherit+0x108>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4313      	orrs	r3, r2
 8009354:	4a15      	ldr	r2, [pc, #84]	; (80093ac <xTaskPriorityInherit+0x108>)
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4a10      	ldr	r2, [pc, #64]	; (80093a8 <xTaskPriorityInherit+0x104>)
 8009366:	441a      	add	r2, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	3304      	adds	r3, #4
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fe fd2e 	bl	8007dd0 <vListInsertEnd>
 8009374:	e004      	b.n	8009380 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <xTaskPriorityInherit+0x100>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009380:	2301      	movs	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	e008      	b.n	8009398 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938a:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <xTaskPriorityInherit+0x100>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	429a      	cmp	r2, r3
 8009392:	d201      	bcs.n	8009398 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009398:	68fb      	ldr	r3, [r7, #12]
	}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000460 	.word	0x20000460
 80093a8:	20000464 	.word	0x20000464
 80093ac:	20000568 	.word	0x20000568

080093b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d06e      	beq.n	80094a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093c6:	4b3a      	ldr	r3, [pc, #232]	; (80094b0 <xTaskPriorityDisinherit+0x100>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d00a      	beq.n	80093e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60bb      	str	r3, [r7, #8]
}
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009408:	1e5a      	subs	r2, r3, #1
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009416:	429a      	cmp	r2, r3
 8009418:	d044      	beq.n	80094a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800941e:	2b00      	cmp	r3, #0
 8009420:	d140      	bne.n	80094a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	3304      	adds	r3, #4
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fd2d 	bl	8007e86 <uxListRemove>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d115      	bne.n	800945e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009436:	491f      	ldr	r1, [pc, #124]	; (80094b4 <xTaskPriorityDisinherit+0x104>)
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xTaskPriorityDisinherit+0xae>
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	2201      	movs	r2, #1
 800944e:	fa02 f303 	lsl.w	r3, r2, r3
 8009452:	43da      	mvns	r2, r3
 8009454:	4b18      	ldr	r3, [pc, #96]	; (80094b8 <xTaskPriorityDisinherit+0x108>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4013      	ands	r3, r2
 800945a:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <xTaskPriorityDisinherit+0x108>)
 800945c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	f1c3 0207 	rsb	r2, r3, #7
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	2201      	movs	r2, #1
 8009478:	409a      	lsls	r2, r3
 800947a:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <xTaskPriorityDisinherit+0x108>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4313      	orrs	r3, r2
 8009480:	4a0d      	ldr	r2, [pc, #52]	; (80094b8 <xTaskPriorityDisinherit+0x108>)
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4a08      	ldr	r2, [pc, #32]	; (80094b4 <xTaskPriorityDisinherit+0x104>)
 8009492:	441a      	add	r2, r3
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	3304      	adds	r3, #4
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7fe fc98 	bl	8007dd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094a4:	697b      	ldr	r3, [r7, #20]
	}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000460 	.word	0x20000460
 80094b4:	20000464 	.word	0x20000464
 80094b8:	20000568 	.word	0x20000568

080094bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80094ca:	2301      	movs	r3, #1
 80094cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8088 	beq.w	80095e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60fb      	str	r3, [r7, #12]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d902      	bls.n	8009504 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	e002      	b.n	800950a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009508:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	429a      	cmp	r2, r3
 8009512:	d068      	beq.n	80095e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	429a      	cmp	r2, r3
 800951c:	d163      	bne.n	80095e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800951e:	4b34      	ldr	r3, [pc, #208]	; (80095f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	429a      	cmp	r2, r3
 8009526:	d10a      	bne.n	800953e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	60bb      	str	r3, [r7, #8]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	2b00      	cmp	r3, #0
 8009550:	db04      	blt.n	800955c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	f1c3 0207 	rsb	r2, r3, #7
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	6959      	ldr	r1, [r3, #20]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4a22      	ldr	r2, [pc, #136]	; (80095f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800956c:	4413      	add	r3, r2
 800956e:	4299      	cmp	r1, r3
 8009570:	d101      	bne.n	8009576 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d034      	beq.n	80095e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	3304      	adds	r3, #4
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe fc80 	bl	8007e86 <uxListRemove>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d115      	bne.n	80095b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009590:	4918      	ldr	r1, [pc, #96]	; (80095f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10a      	bne.n	80095b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	2201      	movs	r2, #1
 80095a8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ac:	43da      	mvns	r2, r3
 80095ae:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4013      	ands	r3, r2
 80095b4:	4a10      	ldr	r2, [pc, #64]	; (80095f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095b6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	2201      	movs	r2, #1
 80095be:	409a      	lsls	r2, r3
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4a07      	ldr	r2, [pc, #28]	; (80095f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80095d8:	441a      	add	r2, r3
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	3304      	adds	r3, #4
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f7fe fbf5 	bl	8007dd0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095e6:	bf00      	nop
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000460 	.word	0x20000460
 80095f4:	20000464 	.word	0x20000464
 80095f8:	20000568 	.word	0x20000568

080095fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <pvTaskIncrementMutexHeldCount+0x24>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009608:	4b05      	ldr	r3, [pc, #20]	; (8009620 <pvTaskIncrementMutexHeldCount+0x24>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800960e:	3201      	adds	r2, #1
 8009610:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009612:	4b03      	ldr	r3, [pc, #12]	; (8009620 <pvTaskIncrementMutexHeldCount+0x24>)
 8009614:	681b      	ldr	r3, [r3, #0]
	}
 8009616:	4618      	mov	r0, r3
 8009618:	46bd      	mov	sp, r7
 800961a:	bc80      	pop	{r7}
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000460 	.word	0x20000460

08009624 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800962e:	4b29      	ldr	r3, [pc, #164]	; (80096d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009634:	4b28      	ldr	r3, [pc, #160]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3304      	adds	r3, #4
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fc23 	bl	8007e86 <uxListRemove>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10b      	bne.n	800965e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009646:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	2201      	movs	r2, #1
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	43da      	mvns	r2, r3
 8009654:	4b21      	ldr	r3, [pc, #132]	; (80096dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4013      	ands	r3, r2
 800965a:	4a20      	ldr	r2, [pc, #128]	; (80096dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800965c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009664:	d10a      	bne.n	800967c <prvAddCurrentTaskToDelayedList+0x58>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800966c:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3304      	adds	r3, #4
 8009672:	4619      	mov	r1, r3
 8009674:	481a      	ldr	r0, [pc, #104]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009676:	f7fe fbab 	bl	8007dd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800967a:	e026      	b.n	80096ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009684:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	429a      	cmp	r2, r3
 8009692:	d209      	bcs.n	80096a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009694:	4b13      	ldr	r3, [pc, #76]	; (80096e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3304      	adds	r3, #4
 800969e:	4619      	mov	r1, r3
 80096a0:	4610      	mov	r0, r2
 80096a2:	f7fe fbb8 	bl	8007e16 <vListInsert>
}
 80096a6:	e010      	b.n	80096ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3304      	adds	r3, #4
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7fe fbae 	bl	8007e16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d202      	bcs.n	80096ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096c4:	4a09      	ldr	r2, [pc, #36]	; (80096ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6013      	str	r3, [r2, #0]
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000564 	.word	0x20000564
 80096d8:	20000460 	.word	0x20000460
 80096dc:	20000568 	.word	0x20000568
 80096e0:	2000054c 	.word	0x2000054c
 80096e4:	2000051c 	.word	0x2000051c
 80096e8:	20000518 	.word	0x20000518
 80096ec:	20000580 	.word	0x20000580

080096f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3b04      	subs	r3, #4
 8009700:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3b04      	subs	r3, #4
 800970e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f023 0201 	bic.w	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b04      	subs	r3, #4
 800971e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009720:	4a08      	ldr	r2, [pc, #32]	; (8009744 <pxPortInitialiseStack+0x54>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3b14      	subs	r3, #20
 800972a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b20      	subs	r3, #32
 8009736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009738:	68fb      	ldr	r3, [r7, #12]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr
 8009744:	08009749 	.word	0x08009749

08009748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800974e:	2300      	movs	r3, #0
 8009750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009752:	4b12      	ldr	r3, [pc, #72]	; (800979c <prvTaskExitError+0x54>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d00a      	beq.n	8009772 <prvTaskExitError+0x2a>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <prvTaskExitError+0x28>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60bb      	str	r3, [r7, #8]
}
 8009784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009786:	bf00      	nop
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0fc      	beq.n	8009788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800978e:	bf00      	nop
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	2000011c 	.word	0x2000011c

080097a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <pxCurrentTCBConst2>)
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	6808      	ldr	r0, [r1, #0]
 80097a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097aa:	f380 8809 	msr	PSP, r0
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8811 	msr	BASEPRI, r0
 80097ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80097be:	4770      	bx	lr

080097c0 <pxCurrentTCBConst2>:
 80097c0:	20000460 	.word	0x20000460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop

080097c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80097c8:	4806      	ldr	r0, [pc, #24]	; (80097e4 <prvPortStartFirstTask+0x1c>)
 80097ca:	6800      	ldr	r0, [r0, #0]
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f380 8808 	msr	MSP, r0
 80097d2:	b662      	cpsie	i
 80097d4:	b661      	cpsie	f
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	df00      	svc	0
 80097e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097e2:	bf00      	nop
 80097e4:	e000ed08 	.word	0xe000ed08

080097e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097ee:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <xPortStartScheduler+0xd0>)
 80097f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	22ff      	movs	r2, #255	; 0xff
 80097fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009810:	b2da      	uxtb	r2, r3
 8009812:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <xPortStartScheduler+0xd4>)
 8009814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009816:	4b2a      	ldr	r3, [pc, #168]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009818:	2207      	movs	r2, #7
 800981a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800981c:	e009      	b.n	8009832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800981e:	4b28      	ldr	r3, [pc, #160]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3b01      	subs	r3, #1
 8009824:	4a26      	ldr	r2, [pc, #152]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	b2db      	uxtb	r3, r3
 8009830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983a:	2b80      	cmp	r3, #128	; 0x80
 800983c:	d0ef      	beq.n	800981e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800983e:	4b20      	ldr	r3, [pc, #128]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f1c3 0307 	rsb	r3, r3, #7
 8009846:	2b04      	cmp	r3, #4
 8009848:	d00a      	beq.n	8009860 <xPortStartScheduler+0x78>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	60bb      	str	r3, [r7, #8]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009860:	4b17      	ldr	r3, [pc, #92]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	021b      	lsls	r3, r3, #8
 8009866:	4a16      	ldr	r2, [pc, #88]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009868:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800986a:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <xPortStartScheduler+0xd8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009872:	4a13      	ldr	r2, [pc, #76]	; (80098c0 <xPortStartScheduler+0xd8>)
 8009874:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	b2da      	uxtb	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800987e:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <xPortStartScheduler+0xdc>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a10      	ldr	r2, [pc, #64]	; (80098c4 <xPortStartScheduler+0xdc>)
 8009884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <xPortStartScheduler+0xdc>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <xPortStartScheduler+0xdc>)
 8009890:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009894:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009896:	f000 f8b9 	bl	8009a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800989a:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <xPortStartScheduler+0xe0>)
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098a0:	f7ff ff92 	bl	80097c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098a4:	f7ff faa2 	bl	8008dec <vTaskSwitchContext>
	prvTaskExitError();
 80098a8:	f7ff ff4e 	bl	8009748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	e000e400 	.word	0xe000e400
 80098bc:	2000058c 	.word	0x2000058c
 80098c0:	20000590 	.word	0x20000590
 80098c4:	e000ed20 	.word	0xe000ed20
 80098c8:	2000011c 	.word	0x2000011c

080098cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	607b      	str	r3, [r7, #4]
}
 80098e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <vPortEnterCritical+0x58>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3301      	adds	r3, #1
 80098ec:	4a0d      	ldr	r2, [pc, #52]	; (8009924 <vPortEnterCritical+0x58>)
 80098ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098f0:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <vPortEnterCritical+0x58>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d10f      	bne.n	8009918 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098f8:	4b0b      	ldr	r3, [pc, #44]	; (8009928 <vPortEnterCritical+0x5c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <vPortEnterCritical+0x4c>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	603b      	str	r3, [r7, #0]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <vPortEnterCritical+0x4a>
	}
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	2000011c 	.word	0x2000011c
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009932:	4b11      	ldr	r3, [pc, #68]	; (8009978 <vPortExitCritical+0x4c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <vPortExitCritical+0x24>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	607b      	str	r3, [r7, #4]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <vPortExitCritical+0x4c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3b01      	subs	r3, #1
 8009956:	4a08      	ldr	r2, [pc, #32]	; (8009978 <vPortExitCritical+0x4c>)
 8009958:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <vPortExitCritical+0x4c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d105      	bne.n	800996e <vPortExitCritical+0x42>
 8009962:	2300      	movs	r3, #0
 8009964:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800996c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	bc80      	pop	{r7}
 8009976:	4770      	bx	lr
 8009978:	2000011c 	.word	0x2000011c
 800997c:	00000000 	.word	0x00000000

08009980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009980:	f3ef 8009 	mrs	r0, PSP
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	4b0d      	ldr	r3, [pc, #52]	; (80099c0 <pxCurrentTCBConst>)
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009990:	6010      	str	r0, [r2, #0]
 8009992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009996:	f04f 0050 	mov.w	r0, #80	; 0x50
 800999a:	f380 8811 	msr	BASEPRI, r0
 800999e:	f7ff fa25 	bl	8008dec <vTaskSwitchContext>
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	f380 8811 	msr	BASEPRI, r0
 80099aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	6808      	ldr	r0, [r1, #0]
 80099b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099b6:	f380 8809 	msr	PSP, r0
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	4770      	bx	lr

080099c0 <pxCurrentTCBConst>:
 80099c0:	20000460 	.word	0x20000460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
}
 80099e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099e2:	f7ff f945 	bl	8008c70 <xTaskIncrementTick>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <SysTick_Handler+0x40>)
 80099ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	2300      	movs	r3, #0
 80099f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f383 8811 	msr	BASEPRI, r3
}
 80099fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <vPortSetupTimerInterrupt+0x30>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a16:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <vPortSetupTimerInterrupt+0x34>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <vPortSetupTimerInterrupt+0x38>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <vPortSetupTimerInterrupt+0x3c>)
 8009a22:	fba2 2303 	umull	r2, r3, r2, r3
 8009a26:	099b      	lsrs	r3, r3, #6
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <vPortSetupTimerInterrupt+0x40>)
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a2e:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <vPortSetupTimerInterrupt+0x30>)
 8009a30:	2207      	movs	r2, #7
 8009a32:	601a      	str	r2, [r3, #0]
}
 8009a34:	bf00      	nop
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr
 8009a3c:	e000e010 	.word	0xe000e010
 8009a40:	e000e018 	.word	0xe000e018
 8009a44:	20000000 	.word	0x20000000
 8009a48:	10624dd3 	.word	0x10624dd3
 8009a4c:	e000e014 	.word	0xe000e014

08009a50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a5c:	f7ff f85e 	bl	8008b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a60:	4b58      	ldr	r3, [pc, #352]	; (8009bc4 <pvPortMalloc+0x174>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a68:	f000 f910 	bl	8009c8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a6c:	4b56      	ldr	r3, [pc, #344]	; (8009bc8 <pvPortMalloc+0x178>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4013      	ands	r3, r2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 808e 	bne.w	8009b96 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01d      	beq.n	8009abc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a80:	2208      	movs	r2, #8
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d014      	beq.n	8009abc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	3308      	adds	r3, #8
 8009a9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <pvPortMalloc+0x6c>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	617b      	str	r3, [r7, #20]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d069      	beq.n	8009b96 <pvPortMalloc+0x146>
 8009ac2:	4b42      	ldr	r3, [pc, #264]	; (8009bcc <pvPortMalloc+0x17c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d864      	bhi.n	8009b96 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009acc:	4b40      	ldr	r3, [pc, #256]	; (8009bd0 <pvPortMalloc+0x180>)
 8009ace:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ad0:	4b3f      	ldr	r3, [pc, #252]	; (8009bd0 <pvPortMalloc+0x180>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ad6:	e004      	b.n	8009ae2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d903      	bls.n	8009af4 <pvPortMalloc+0xa4>
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f1      	bne.n	8009ad8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009af4:	4b33      	ldr	r3, [pc, #204]	; (8009bc4 <pvPortMalloc+0x174>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d04b      	beq.n	8009b96 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2208      	movs	r2, #8
 8009b04:	4413      	add	r3, r2
 8009b06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	1ad2      	subs	r2, r2, r3
 8009b18:	2308      	movs	r3, #8
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d91f      	bls.n	8009b60 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <pvPortMalloc+0xf8>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	613b      	str	r3, [r7, #16]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b5a:	69b8      	ldr	r0, [r7, #24]
 8009b5c:	f000 f8f8 	bl	8009d50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b60:	4b1a      	ldr	r3, [pc, #104]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	4a18      	ldr	r2, [pc, #96]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b6e:	4b17      	ldr	r3, [pc, #92]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b18      	ldr	r3, [pc, #96]	; (8009bd4 <pvPortMalloc+0x184>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d203      	bcs.n	8009b82 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b7a:	4b14      	ldr	r3, [pc, #80]	; (8009bcc <pvPortMalloc+0x17c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <pvPortMalloc+0x184>)
 8009b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <pvPortMalloc+0x178>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b96:	f7fe ffcf 	bl	8008b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <pvPortMalloc+0x16a>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	60fb      	str	r3, [r7, #12]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <pvPortMalloc+0x168>
	return pvReturn;
 8009bba:	69fb      	ldr	r3, [r7, #28]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3728      	adds	r7, #40	; 0x28
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	2000196c 	.word	0x2000196c
 8009bc8:	20001978 	.word	0x20001978
 8009bcc:	20001970 	.word	0x20001970
 8009bd0:	20001964 	.word	0x20001964
 8009bd4:	20001974 	.word	0x20001974

08009bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d048      	beq.n	8009c7c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bea:	2308      	movs	r3, #8
 8009bec:	425b      	negs	r3, r3
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	4b21      	ldr	r3, [pc, #132]	; (8009c84 <vPortFree+0xac>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4013      	ands	r3, r2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <vPortFree+0x44>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60fb      	str	r3, [r7, #12]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <vPortFree+0x62>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60bb      	str	r3, [r7, #8]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <vPortFree+0xac>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d019      	beq.n	8009c7c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d115      	bne.n	8009c7c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <vPortFree+0xac>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	401a      	ands	r2, r3
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c60:	f7fe ff5c 	bl	8008b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <vPortFree+0xb0>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	4a06      	ldr	r2, [pc, #24]	; (8009c88 <vPortFree+0xb0>)
 8009c70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c72:	6938      	ldr	r0, [r7, #16]
 8009c74:	f000 f86c 	bl	8009d50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c78:	f7fe ff5e 	bl	8008b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c7c:	bf00      	nop
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20001978 	.word	0x20001978
 8009c88:	20001970 	.word	0x20001970

08009c8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c92:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009c96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c98:	4b27      	ldr	r3, [pc, #156]	; (8009d38 <prvHeapInit+0xac>)
 8009c9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00c      	beq.n	8009cc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3307      	adds	r3, #7
 8009caa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0307 	bic.w	r3, r3, #7
 8009cb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	4a1f      	ldr	r2, [pc, #124]	; (8009d38 <prvHeapInit+0xac>)
 8009cbc:	4413      	add	r3, r2
 8009cbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cc4:	4a1d      	ldr	r2, [pc, #116]	; (8009d3c <prvHeapInit+0xb0>)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cca:	4b1c      	ldr	r3, [pc, #112]	; (8009d3c <prvHeapInit+0xb0>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cd8:	2208      	movs	r2, #8
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 0307 	bic.w	r3, r3, #7
 8009ce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4a15      	ldr	r2, [pc, #84]	; (8009d40 <prvHeapInit+0xb4>)
 8009cec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cee:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <prvHeapInit+0xb4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cf6:	4b12      	ldr	r3, [pc, #72]	; (8009d40 <prvHeapInit+0xb4>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	1ad2      	subs	r2, r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d0c:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <prvHeapInit+0xb4>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <prvHeapInit+0xb8>)
 8009d1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <prvHeapInit+0xbc>)
 8009d22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <prvHeapInit+0xc0>)
 8009d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d2a:	601a      	str	r2, [r3, #0]
}
 8009d2c:	bf00      	nop
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bc80      	pop	{r7}
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	20000594 	.word	0x20000594
 8009d3c:	20001964 	.word	0x20001964
 8009d40:	2000196c 	.word	0x2000196c
 8009d44:	20001974 	.word	0x20001974
 8009d48:	20001970 	.word	0x20001970
 8009d4c:	20001978 	.word	0x20001978

08009d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d58:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <prvInsertBlockIntoFreeList+0xa8>)
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e002      	b.n	8009d64 <prvInsertBlockIntoFreeList+0x14>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d8f7      	bhi.n	8009d5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	4413      	add	r3, r2
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d108      	bne.n	8009d92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	441a      	add	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	441a      	add	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d118      	bne.n	8009dd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <prvInsertBlockIntoFreeList+0xac>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d00d      	beq.n	8009dce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	441a      	add	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	e008      	b.n	8009de0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dce:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <prvInsertBlockIntoFreeList+0xac>)
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	e003      	b.n	8009de0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d002      	beq.n	8009dee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bc80      	pop	{r7}
 8009df6:	4770      	bx	lr
 8009df8:	20001964 	.word	0x20001964
 8009dfc:	2000196c 	.word	0x2000196c

08009e00 <Servo_Init>:
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Init(Servo_Handle_t* servo,TIM_HandleTypeDef* ptim)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
	servo->ptim = ptim;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	601a      	str	r2, [r3, #0]
	servo->curr_pos = 0;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	711a      	strb	r2, [r3, #4]
	servo->Status = OFF;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	715a      	strb	r2, [r3, #5]
	Servo_Goto(servo, 0);
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f804 	bl	8009e2c <Servo_Goto>


}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <Servo_Goto>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Goto(Servo_Handle_t* servo,uint8_t angle){
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
		uint16_t Period = servo->ptim->Init.Period;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	81fb      	strh	r3, [r7, #14]
		uint16_t duty = angle *( ( (Period / 10) - OFFSET) / MAX_ANGLE )+ OFFSET;
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	89fb      	ldrh	r3, [r7, #14]
 8009e46:	4911      	ldr	r1, [pc, #68]	; (8009e8c <Servo_Goto+0x60>)
 8009e48:	fba1 1303 	umull	r1, r3, r1, r3
 8009e4c:	08db      	lsrs	r3, r3, #3
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	3bfa      	subs	r3, #250	; 0xfa
 8009e52:	490f      	ldr	r1, [pc, #60]	; (8009e90 <Servo_Goto+0x64>)
 8009e54:	fb81 0103 	smull	r0, r1, r1, r3
 8009e58:	4419      	add	r1, r3
 8009e5a:	11c9      	asrs	r1, r1, #7
 8009e5c:	17db      	asrs	r3, r3, #31
 8009e5e:	1acb      	subs	r3, r1, r3
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	fb03 f302 	mul.w	r3, r3, r2
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	33fa      	adds	r3, #250	; 0xfa
 8009e6a:	81bb      	strh	r3, [r7, #12]
		servo->curr_pos = angle;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	78fa      	ldrb	r2, [r7, #3]
 8009e70:	711a      	strb	r2, [r3, #4]
		Servo_Start(servo);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f80e 	bl	8009e94 <Servo_Start>
		__HAL_TIM_SET_COMPARE(servo->ptim,TIM_CHANNEL_1,duty);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	89ba      	ldrh	r2, [r7, #12]
 8009e80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	cccccccd 	.word	0xcccccccd
 8009e90:	b60b60b7 	.word	0xb60b60b7

08009e94 <Servo_Start>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Start(Servo_Handle_t* servo){
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
	if(servo->Status == OFF ){
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	795b      	ldrb	r3, [r3, #5]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d108      	bne.n	8009eb6 <Servo_Start+0x22>
		HAL_TIM_PWM_Start(servo->ptim, TIM_CHANNEL_1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f9 fbd6 	bl	800365c <HAL_TIM_PWM_Start>
		servo->Status = ON;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	715a      	strb	r2, [r3, #5]
	}
}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <Com_Init>:
 * @fn					- Com_Init
 *
 * @Note				- Init the Com Stack
 *
 **************************************************************************/
void Com_Init(){
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
	Buf_Init(&Com_TXstorage) ;
 8009ec4:	4807      	ldr	r0, [pc, #28]	; (8009ee4 <Com_Init+0x24>)
 8009ec6:	f000 f8bf 	bl	800a048 <Buf_Init>
	Buf_Init(&Com_RXstorage) ;
 8009eca:	4807      	ldr	r0, [pc, #28]	; (8009ee8 <Com_Init+0x28>)
 8009ecc:	f000 f8bc 	bl	800a048 <Buf_Init>
	memset(buffer,'\0',64);
 8009ed0:	2240      	movs	r2, #64	; 0x40
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4805      	ldr	r0, [pc, #20]	; (8009eec <Com_Init+0x2c>)
 8009ed6:	f000 fecb 	bl	800ac70 <memset>
	MX_USB_DEVICE_Init();
 8009eda:	f000 f9d9 	bl	800a290 <MX_USB_DEVICE_Init>
}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20001c3c 	.word	0x20001c3c
 8009ee8:	20001ed8 	.word	0x20001ed8
 8009eec:	2000274c 	.word	0x2000274c

08009ef0 <Com_Transmit>:
 * @fn					- Com_Transmit
 *
 * @Note				- Transmit Message
 *
 **************************************************************************/
void Com_Transmit(){
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	607b      	str	r3, [r7, #4]

	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 8009efa:	e014      	b.n	8009f26 <Com_Transmit+0x36>
		ptr = Buf_Dequeue(&Com_TXstorage);
 8009efc:	480f      	ldr	r0, [pc, #60]	; (8009f3c <Com_Transmit+0x4c>)
 8009efe:	f000 f92f 	bl	800a160 <Buf_Dequeue>
 8009f02:	6078      	str	r0, [r7, #4]
		while(CDC_Transmit_FS((uint8_t*) ptr->data, strlen(ptr->data)+1) == USBD_BUSY);
 8009f04:	bf00      	nop
 8009f06:	687c      	ldr	r4, [r7, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f6 f920 	bl	8000150 <strlen>
 8009f10:	4603      	mov	r3, r0
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3301      	adds	r3, #1
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 fa92 	bl	800a444 <CDC_Transmit_FS>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d0ef      	beq.n	8009f06 <Com_Transmit+0x16>
	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 8009f26:	4805      	ldr	r0, [pc, #20]	; (8009f3c <Com_Transmit+0x4c>)
 8009f28:	f000 f9a0 	bl	800a26c <Buf_IsEmpty>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1e4      	bne.n	8009efc <Com_Transmit+0xc>
	}
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd90      	pop	{r4, r7, pc}
 8009f3c:	20001c3c 	.word	0x20001c3c

08009f40 <Com_Queue_msg>:
 * @fn					- Com_Queue_msg
 *
 * @Note				- store the message to the TX buffer
 *
 **************************************************************************/
HAL_StatusTypeDef Com_Queue_msg(Data_t * msg){
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

	if (HAL_OK == Buf_Queue(&Com_TXstorage, msg))
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	4806      	ldr	r0, [pc, #24]	; (8009f64 <Com_Queue_msg+0x24>)
 8009f4c:	f000 f8ac 	bl	800a0a8 <Buf_Queue>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <Com_Queue_msg+0x1a>
		return HAL_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	e000      	b.n	8009f5c <Com_Queue_msg+0x1c>
	else
		return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20001c3c 	.word	0x20001c3c

08009f68 <Com_Receive>:
 * @fn					- Com_Receive
 *
 * @Note				- Store message received in the RXbuffer
 *
 **************************************************************************/
void Com_Receive(){
 8009f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f6a:	b093      	sub	sp, #76	; 0x4c
 8009f6c:	af00      	add	r7, sp, #0
	Data_t ptr;

	if (Buf_IsFull(&Com_RXstorage) != BUF_FULL && flag_data_received == 1 ){
 8009f6e:	4818      	ldr	r0, [pc, #96]	; (8009fd0 <Com_Receive+0x68>)
 8009f70:	f000 f95a 	bl	800a228 <Buf_IsFull>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d026      	beq.n	8009fc8 <Com_Receive+0x60>
 8009f7a:	4b16      	ldr	r3, [pc, #88]	; (8009fd4 <Com_Receive+0x6c>)
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d122      	bne.n	8009fc8 <Com_Receive+0x60>
		memcpy(ptr.data,buffer,MAX_SIZE_MESSAGE);
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <Com_Receive+0x70>)
 8009f84:	461c      	mov	r4, r3
 8009f86:	1d3e      	adds	r6, r7, #4
 8009f88:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8009f8c:	4635      	mov	r5, r6
 8009f8e:	4623      	mov	r3, r4
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	6859      	ldr	r1, [r3, #4]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f9a:	3410      	adds	r4, #16
 8009f9c:	3610      	adds	r6, #16
 8009f9e:	4564      	cmp	r4, ip
 8009fa0:	d1f4      	bne.n	8009f8c <Com_Receive+0x24>
		flag_data_received = 0;
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <Com_Receive+0x6c>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
		if (HAL_ERROR == Buf_Queue(&Com_RXstorage,&ptr))
 8009fa8:	1d3b      	adds	r3, r7, #4
 8009faa:	4619      	mov	r1, r3
 8009fac:	4808      	ldr	r0, [pc, #32]	; (8009fd0 <Com_Receive+0x68>)
 8009fae:	f000 f87b 	bl	800a0a8 <Buf_Queue>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d107      	bne.n	8009fc8 <Com_Receive+0x60>
			while(CDC_Transmit_FS((uint8_t*) "nok\n", 4) == USBD_BUSY);
 8009fb8:	bf00      	nop
 8009fba:	2104      	movs	r1, #4
 8009fbc:	4807      	ldr	r0, [pc, #28]	; (8009fdc <Com_Receive+0x74>)
 8009fbe:	f000 fa41 	bl	800a444 <CDC_Transmit_FS>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d0f8      	beq.n	8009fba <Com_Receive+0x52>
	}

}
 8009fc8:	bf00      	nop
 8009fca:	374c      	adds	r7, #76	; 0x4c
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd0:	20001ed8 	.word	0x20001ed8
 8009fd4:	2000197c 	.word	0x2000197c
 8009fd8:	2000274c 	.word	0x2000274c
 8009fdc:	0800b57c 	.word	0x0800b57c

08009fe0 <Com_Assign>:
 * @fn					- Com_Assign
 *
 * @Note				- assign the message to the right buffer Job_stack/G_code_stack
 *
 **************************************************************************/
void Com_Assign(){
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	607b      	str	r3, [r7, #4]
	while(Buf_IsEmpty(&Com_RXstorage) != BUF_EMPTY && Buf_IsFull(&Job_Stack) != BUF_FULL){
 8009fea:	e00b      	b.n	800a004 <Com_Assign+0x24>
			ptr = Buf_Dequeue(&Com_RXstorage);
 8009fec:	480d      	ldr	r0, [pc, #52]	; (800a024 <Com_Assign+0x44>)
 8009fee:	f000 f8b7 	bl	800a160 <Buf_Dequeue>
 8009ff2:	6078      	str	r0, [r7, #4]
			ptr->state = BUF_PENDING;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			Queue_Job(ptr);
 8009ffc:	6879      	ldr	r1, [r7, #4]
 8009ffe:	480a      	ldr	r0, [pc, #40]	; (800a028 <Com_Assign+0x48>)
 800a000:	f000 f852 	bl	800a0a8 <Buf_Queue>
	while(Buf_IsEmpty(&Com_RXstorage) != BUF_EMPTY && Buf_IsFull(&Job_Stack) != BUF_FULL){
 800a004:	4807      	ldr	r0, [pc, #28]	; (800a024 <Com_Assign+0x44>)
 800a006:	f000 f931 	bl	800a26c <Buf_IsEmpty>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <Com_Assign+0x3c>
 800a010:	4805      	ldr	r0, [pc, #20]	; (800a028 <Com_Assign+0x48>)
 800a012:	f000 f909 	bl	800a228 <Buf_IsFull>
 800a016:	4603      	mov	r3, r0
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d1e7      	bne.n	8009fec <Com_Assign+0xc>
		}
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20001ed8 	.word	0x20001ed8
 800a028:	20002464 	.word	0x20002464

0800a02c <G_Code_Init>:
 *      Author: soufiane
 */

#include "G_code.h"

void G_Code_Init(){
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
	Buf_Init(&Job_Stack);
 800a030:	4803      	ldr	r0, [pc, #12]	; (800a040 <G_Code_Init+0x14>)
 800a032:	f000 f809 	bl	800a048 <Buf_Init>
	Buf_Init(&Gcode_Stack);
 800a036:	4803      	ldr	r0, [pc, #12]	; (800a044 <G_Code_Init+0x18>)
 800a038:	f000 f806 	bl	800a048 <Buf_Init>
}
 800a03c:	bf00      	nop
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20002464 	.word	0x20002464
 800a044:	20002174 	.word	0x20002174

0800a048 <Buf_Init>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Buf_Init(Buf_Handler_t* buf){
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	for (int index = 0;index<BUF_SIZE;index++)
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e011      	b.n	800a07a <Buf_Init+0x32>
		memset(buf->data[buf->rear].data,'\0',MESSAGE_SIZE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a05c:	461a      	mov	r2, r3
 800a05e:	4613      	mov	r3, r2
 800a060:	015b      	lsls	r3, r3, #5
 800a062:	4413      	add	r3, r2
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4413      	add	r3, r2
 800a06a:	2240      	movs	r2, #64	; 0x40
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fdfe 	bl	800ac70 <memset>
	for (int index = 0;index<BUF_SIZE;index++)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b09      	cmp	r3, #9
 800a07e:	ddea      	ble.n	800a056 <Buf_Init+0xe>
	buf->front = -1;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	22ff      	movs	r2, #255	; 0xff
 800a084:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	buf->rear = -1;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	22ff      	movs	r2, #255	; 0xff
 800a08c:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	buf->mutex = xSemaphoreCreateMutex();
 800a090:	2001      	movs	r0, #1
 800a092:	f7fe f800 	bl	8008096 <xQueueCreateMutex>
 800a096:	4602      	mov	r2, r0
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	if (buf->mutex == NULL){

	}
}
 800a09e:	bf00      	nop
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <Buf_Queue>:
 * @return				- HAL_StatusTypeDef
 *
 * @Note				- None
 *
 **************************************************************************/
HAL_StatusTypeDef Buf_Queue(Buf_Handler_t* buf,Data_t* ptr){
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]

	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe f902 	bl	80082c4 <xQueueSemaphoreTake>
	if (Buf_IsFull(buf) == BUF_FULL ){
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f8b1 	bl	800a228 <Buf_IsFull>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d109      	bne.n	800a0e0 <Buf_Queue+0x38>
		xSemaphoreGive(buf->mutex);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	f7fd fff6 	bl	80080c8 <xQueueGenericSend>
		return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e039      	b.n	800a154 <Buf_Queue+0xac>
	}
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f8c3 	bl	800a26c <Buf_IsEmpty>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d108      	bne.n	800a0fe <Buf_Queue+0x56>
		buf->front = 0;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		buf->rear = 0;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a0fc:	e012      	b.n	800a124 <Buf_Queue+0x7c>
	}else{
		buf->front = (buf->front+1) % BUF_SIZE ;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	4b15      	ldr	r3, [pc, #84]	; (800a15c <Buf_Queue+0xb4>)
 800a108:	fb83 1302 	smull	r1, r3, r3, r2
 800a10c:	1099      	asrs	r1, r3, #2
 800a10e:	17d3      	asrs	r3, r2, #31
 800a110:	1ac9      	subs	r1, r1, r3
 800a112:	460b      	mov	r3, r1
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	440b      	add	r3, r1
 800a118:	005b      	lsls	r3, r3, #1
 800a11a:	1ad1      	subs	r1, r2, r3
 800a11c:	b24a      	sxtb	r2, r1
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	}
	memcpy(&buf->data[buf->front],ptr,sizeof(Data_t));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a12a:	461a      	mov	r2, r3
 800a12c:	4613      	mov	r3, r2
 800a12e:	015b      	lsls	r3, r3, #5
 800a130:	4413      	add	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	4413      	add	r3, r2
 800a138:	2242      	movs	r2, #66	; 0x42
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fd89 	bl	800ac54 <memcpy>
	xSemaphoreGive(buf->mutex);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a148:	2300      	movs	r3, #0
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	f7fd ffbb 	bl	80080c8 <xQueueGenericSend>
	return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	66666667 	.word	0x66666667

0800a160 <Buf_Dequeue>:
 * @fn					- Buf_Dequeue
 *
 * @Note				- None
 *
 **************************************************************************/
Data_t* Buf_Dequeue(Buf_Handler_t* buf){
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a16e:	2101      	movs	r1, #1
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe f8a7 	bl	80082c4 <xQueueSemaphoreTake>
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f878 	bl	800a26c <Buf_IsEmpty>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <Buf_Dequeue+0x36>
		xSemaphoreGive(buf->mutex);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a188:	2300      	movs	r3, #0
 800a18a:	2200      	movs	r2, #0
 800a18c:	2100      	movs	r1, #0
 800a18e:	f7fd ff9b 	bl	80080c8 <xQueueGenericSend>
		return NULL;
 800a192:	2300      	movs	r3, #0
 800a194:	e03f      	b.n	800a216 <Buf_Dequeue+0xb6>
	}
	static Data_t rt;
	memcpy(&rt,&(buf->data[buf->rear]),sizeof(Data_t));
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a19c:	461a      	mov	r2, r3
 800a19e:	4613      	mov	r3, r2
 800a1a0:	015b      	lsls	r3, r3, #5
 800a1a2:	4413      	add	r3, r2
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	4a1d      	ldr	r2, [pc, #116]	; (800a220 <Buf_Dequeue+0xc0>)
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	2342      	movs	r3, #66	; 0x42
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f000 fd4e 	bl	800ac54 <memcpy>
	if (buf->front == buf->rear){
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f993 2298 	ldrsb.w	r2, [r3, #664]	; 0x298
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d10a      	bne.n	800a1de <Buf_Dequeue+0x7e>
		buf->front = buf->rear = -1;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	22ff      	movs	r2, #255	; 0xff
 800a1cc:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f993 2299 	ldrsb.w	r2, [r3, #665]	; 0x299
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800a1dc:	e012      	b.n	800a204 <Buf_Dequeue+0xa4>
	}else {
		buf->rear = (buf->rear + 1) % BUF_SIZE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <Buf_Dequeue+0xc4>)
 800a1e8:	fb83 1302 	smull	r1, r3, r3, r2
 800a1ec:	1099      	asrs	r1, r3, #2
 800a1ee:	17d3      	asrs	r3, r2, #31
 800a1f0:	1ac9      	subs	r1, r1, r3
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	440b      	add	r3, r1
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	1ad1      	subs	r1, r2, r3
 800a1fc:	b24a      	sxtb	r2, r1
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	}
	xSemaphoreGive(buf->mutex);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a20a:	2300      	movs	r3, #0
 800a20c:	2200      	movs	r2, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	f7fd ff5a 	bl	80080c8 <xQueueGenericSend>
	return &rt ;
 800a214:	4b02      	ldr	r3, [pc, #8]	; (800a220 <Buf_Dequeue+0xc0>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20001980 	.word	0x20001980
 800a224:	66666667 	.word	0x66666667

0800a228 <Buf_IsFull>:
 * @fn					- Buf_IsFull
 *
 * @Note				- func to check if the Buf is full
 *
 **************************************************************************/
Buf_Status_t Buf_IsFull(Buf_Handler_t* buf){
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
	return ((buf->front+1) % BUF_SIZE) == buf->rear;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a236:	1c59      	adds	r1, r3, #1
 800a238:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <Buf_IsFull+0x40>)
 800a23a:	fb83 2301 	smull	r2, r3, r3, r1
 800a23e:	109a      	asrs	r2, r3, #2
 800a240:	17cb      	asrs	r3, r1, #31
 800a242:	1ad2      	subs	r2, r2, r3
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	1aca      	subs	r2, r1, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a254:	429a      	cmp	r2, r3
 800a256:	bf0c      	ite	eq
 800a258:	2301      	moveq	r3, #1
 800a25a:	2300      	movne	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
}
 800a25e:	4618      	mov	r0, r3
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr
 800a268:	66666667 	.word	0x66666667

0800a26c <Buf_IsEmpty>:
 * @fn					- Buf_IsEmpty
 *
 * @Note				- func to check if the Buf is empty
 *
 **************************************************************************/
Buf_Status_t Buf_IsEmpty(Buf_Handler_t* buf){
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
	return !(buf->front == -1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	bf14      	ite	ne
 800a280:	2301      	movne	r3, #1
 800a282:	2300      	moveq	r3, #0
 800a284:	b2db      	uxtb	r3, r3
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bc80      	pop	{r7}
 800a28e:	4770      	bx	lr

0800a290 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a294:	2200      	movs	r2, #0
 800a296:	4912      	ldr	r1, [pc, #72]	; (800a2e0 <MX_USB_DEVICE_Init+0x50>)
 800a298:	4812      	ldr	r0, [pc, #72]	; (800a2e4 <MX_USB_DEVICE_Init+0x54>)
 800a29a:	f7fc fc56 	bl	8006b4a <USBD_Init>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2a4:	f7f6 f9f0 	bl	8000688 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2a8:	490f      	ldr	r1, [pc, #60]	; (800a2e8 <MX_USB_DEVICE_Init+0x58>)
 800a2aa:	480e      	ldr	r0, [pc, #56]	; (800a2e4 <MX_USB_DEVICE_Init+0x54>)
 800a2ac:	f7fc fc78 	bl	8006ba0 <USBD_RegisterClass>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2b6:	f7f6 f9e7 	bl	8000688 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2ba:	490c      	ldr	r1, [pc, #48]	; (800a2ec <MX_USB_DEVICE_Init+0x5c>)
 800a2bc:	4809      	ldr	r0, [pc, #36]	; (800a2e4 <MX_USB_DEVICE_Init+0x54>)
 800a2be:	f7fc fba9 	bl	8006a14 <USBD_CDC_RegisterInterface>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2c8:	f7f6 f9de 	bl	8000688 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2cc:	4805      	ldr	r0, [pc, #20]	; (800a2e4 <MX_USB_DEVICE_Init+0x54>)
 800a2ce:	f7fc fc80 	bl	8006bd2 <USBD_Start>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2d8:	f7f6 f9d6 	bl	8000688 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2dc:	bf00      	nop
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20000130 	.word	0x20000130
 800a2e4:	2000278c 	.word	0x2000278c
 800a2e8:	20000018 	.word	0x20000018
 800a2ec:	20000120 	.word	0x20000120

0800a2f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4905      	ldr	r1, [pc, #20]	; (800a30c <CDC_Init_FS+0x1c>)
 800a2f8:	4805      	ldr	r0, [pc, #20]	; (800a310 <CDC_Init_FS+0x20>)
 800a2fa:	f7fc fba1 	bl	8006a40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2fe:	4905      	ldr	r1, [pc, #20]	; (800a314 <CDC_Init_FS+0x24>)
 800a300:	4803      	ldr	r0, [pc, #12]	; (800a310 <CDC_Init_FS+0x20>)
 800a302:	f7fc fbb6 	bl	8006a72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a306:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a308:	4618      	mov	r0, r3
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20002c44 	.word	0x20002c44
 800a310:	2000278c 	.word	0x2000278c
 800a314:	20002a50 	.word	0x20002a50

0800a318 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a31c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a31e:	4618      	mov	r0, r3
 800a320:	46bd      	mov	sp, r7
 800a322:	bc80      	pop	{r7}
 800a324:	4770      	bx	lr
	...

0800a328 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	6039      	str	r1, [r7, #0]
 800a332:	71fb      	strb	r3, [r7, #7]
 800a334:	4613      	mov	r3, r2
 800a336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	2b23      	cmp	r3, #35	; 0x23
 800a33c:	d84a      	bhi.n	800a3d4 <CDC_Control_FS+0xac>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <CDC_Control_FS+0x1c>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a3d5 	.word	0x0800a3d5
 800a348:	0800a3d5 	.word	0x0800a3d5
 800a34c:	0800a3d5 	.word	0x0800a3d5
 800a350:	0800a3d5 	.word	0x0800a3d5
 800a354:	0800a3d5 	.word	0x0800a3d5
 800a358:	0800a3d5 	.word	0x0800a3d5
 800a35c:	0800a3d5 	.word	0x0800a3d5
 800a360:	0800a3d5 	.word	0x0800a3d5
 800a364:	0800a3d5 	.word	0x0800a3d5
 800a368:	0800a3d5 	.word	0x0800a3d5
 800a36c:	0800a3d5 	.word	0x0800a3d5
 800a370:	0800a3d5 	.word	0x0800a3d5
 800a374:	0800a3d5 	.word	0x0800a3d5
 800a378:	0800a3d5 	.word	0x0800a3d5
 800a37c:	0800a3d5 	.word	0x0800a3d5
 800a380:	0800a3d5 	.word	0x0800a3d5
 800a384:	0800a3d5 	.word	0x0800a3d5
 800a388:	0800a3d5 	.word	0x0800a3d5
 800a38c:	0800a3d5 	.word	0x0800a3d5
 800a390:	0800a3d5 	.word	0x0800a3d5
 800a394:	0800a3d5 	.word	0x0800a3d5
 800a398:	0800a3d5 	.word	0x0800a3d5
 800a39c:	0800a3d5 	.word	0x0800a3d5
 800a3a0:	0800a3d5 	.word	0x0800a3d5
 800a3a4:	0800a3d5 	.word	0x0800a3d5
 800a3a8:	0800a3d5 	.word	0x0800a3d5
 800a3ac:	0800a3d5 	.word	0x0800a3d5
 800a3b0:	0800a3d5 	.word	0x0800a3d5
 800a3b4:	0800a3d5 	.word	0x0800a3d5
 800a3b8:	0800a3d5 	.word	0x0800a3d5
 800a3bc:	0800a3d5 	.word	0x0800a3d5
 800a3c0:	0800a3d5 	.word	0x0800a3d5
 800a3c4:	0800a3d5 	.word	0x0800a3d5
 800a3c8:	0800a3d5 	.word	0x0800a3d5
 800a3cc:	0800a3d5 	.word	0x0800a3d5
 800a3d0:	0800a3d5 	.word	0x0800a3d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3d4:	bf00      	nop
  }

  return (USBD_OK);
 800a3d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop

0800a3e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	4811      	ldr	r0, [pc, #68]	; (800a438 <CDC_Receive_FS+0x54>)
 800a3f2:	f7fc fb3e 	bl	8006a72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3f6:	4810      	ldr	r0, [pc, #64]	; (800a438 <CDC_Receive_FS+0x54>)
 800a3f8:	f7fc fb7d 	bl	8006af6 <USBD_CDC_ReceivePacket>

  uint32_t len = *Len;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	60fb      	str	r3, [r7, #12]
  if (flag_data_received == 0){
 800a402:	4b0e      	ldr	r3, [pc, #56]	; (800a43c <CDC_Receive_FS+0x58>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d111      	bne.n	800a42e <CDC_Receive_FS+0x4a>
		flag_data_received = 1 ;
 800a40a:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <CDC_Receive_FS+0x58>)
 800a40c:	2201      	movs	r2, #1
 800a40e:	701a      	strb	r2, [r3, #0]
		memset(buffer,'\0',64);
 800a410:	2240      	movs	r2, #64	; 0x40
 800a412:	2100      	movs	r1, #0
 800a414:	480a      	ldr	r0, [pc, #40]	; (800a440 <CDC_Receive_FS+0x5c>)
 800a416:	f000 fc2b 	bl	800ac70 <memset>
		memcpy(buffer,Buf,len);
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	4808      	ldr	r0, [pc, #32]	; (800a440 <CDC_Receive_FS+0x5c>)
 800a420:	f000 fc18 	bl	800ac54 <memcpy>
		memset(Buf,'\0',len);
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	2100      	movs	r1, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fc21 	bl	800ac70 <memset>
  }


  return (USBD_OK);
 800a42e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	2000278c 	.word	0x2000278c
 800a43c:	2000197c 	.word	0x2000197c
 800a440:	2000274c 	.word	0x2000274c

0800a444 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a454:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <CDC_Transmit_FS+0x48>)
 800a456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a466:	2301      	movs	r3, #1
 800a468:	e00b      	b.n	800a482 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a46a:	887b      	ldrh	r3, [r7, #2]
 800a46c:	461a      	mov	r2, r3
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	4806      	ldr	r0, [pc, #24]	; (800a48c <CDC_Transmit_FS+0x48>)
 800a472:	f7fc fae5 	bl	8006a40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a476:	4805      	ldr	r0, [pc, #20]	; (800a48c <CDC_Transmit_FS+0x48>)
 800a478:	f7fc fb0e 	bl	8006a98 <USBD_CDC_TransmitPacket>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a480:	7bfb      	ldrb	r3, [r7, #15]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	2000278c 	.word	0x2000278c

0800a490 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	6039      	str	r1, [r7, #0]
 800a49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2212      	movs	r2, #18
 800a4a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4a2:	4b03      	ldr	r3, [pc, #12]	; (800a4b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000014c 	.word	0x2000014c

0800a4b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2204      	movs	r2, #4
 800a4c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4c6:	4b03      	ldr	r3, [pc, #12]	; (800a4d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	20000160 	.word	0x20000160

0800a4d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	6039      	str	r1, [r7, #0]
 800a4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d105      	bne.n	800a4f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4907      	ldr	r1, [pc, #28]	; (800a50c <USBD_FS_ProductStrDescriptor+0x34>)
 800a4ee:	4808      	ldr	r0, [pc, #32]	; (800a510 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4f0:	f7fd fae8 	bl	8007ac4 <USBD_GetString>
 800a4f4:	e004      	b.n	800a500 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	4904      	ldr	r1, [pc, #16]	; (800a50c <USBD_FS_ProductStrDescriptor+0x34>)
 800a4fa:	4805      	ldr	r0, [pc, #20]	; (800a510 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4fc:	f7fd fae2 	bl	8007ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a500:	4b02      	ldr	r3, [pc, #8]	; (800a50c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20002e38 	.word	0x20002e38
 800a510:	0800b584 	.word	0x0800b584

0800a514 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	4904      	ldr	r1, [pc, #16]	; (800a534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a524:	4804      	ldr	r0, [pc, #16]	; (800a538 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a526:	f7fd facd 	bl	8007ac4 <USBD_GetString>
  return USBD_StrDesc;
 800a52a:	4b02      	ldr	r3, [pc, #8]	; (800a534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	20002e38 	.word	0x20002e38
 800a538:	0800b59c 	.word	0x0800b59c

0800a53c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	221a      	movs	r2, #26
 800a54c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a54e:	f000 f843 	bl	800a5d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a552:	4b02      	ldr	r3, [pc, #8]	; (800a55c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20000164 	.word	0x20000164

0800a560 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	6039      	str	r1, [r7, #0]
 800a56a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	4907      	ldr	r1, [pc, #28]	; (800a594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a576:	4808      	ldr	r0, [pc, #32]	; (800a598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a578:	f7fd faa4 	bl	8007ac4 <USBD_GetString>
 800a57c:	e004      	b.n	800a588 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4904      	ldr	r1, [pc, #16]	; (800a594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a582:	4805      	ldr	r0, [pc, #20]	; (800a598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a584:	f7fd fa9e 	bl	8007ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a588:	4b02      	ldr	r3, [pc, #8]	; (800a594 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20002e38 	.word	0x20002e38
 800a598:	0800b5b0 	.word	0x0800b5b0

0800a59c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d105      	bne.n	800a5ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	4907      	ldr	r1, [pc, #28]	; (800a5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5b2:	4808      	ldr	r0, [pc, #32]	; (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5b4:	f7fd fa86 	bl	8007ac4 <USBD_GetString>
 800a5b8:	e004      	b.n	800a5c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	4904      	ldr	r1, [pc, #16]	; (800a5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5be:	4805      	ldr	r0, [pc, #20]	; (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5c0:	f7fd fa80 	bl	8007ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5c4:	4b02      	ldr	r3, [pc, #8]	; (800a5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20002e38 	.word	0x20002e38
 800a5d4:	0800b5bc 	.word	0x0800b5bc

0800a5d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5de:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <Get_SerialNum+0x44>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5e4:	4b0e      	ldr	r3, [pc, #56]	; (800a620 <Get_SerialNum+0x48>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5ea:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <Get_SerialNum+0x4c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d009      	beq.n	800a612 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5fe:	2208      	movs	r2, #8
 800a600:	4909      	ldr	r1, [pc, #36]	; (800a628 <Get_SerialNum+0x50>)
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f814 	bl	800a630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a608:	2204      	movs	r2, #4
 800a60a:	4908      	ldr	r1, [pc, #32]	; (800a62c <Get_SerialNum+0x54>)
 800a60c:	68b8      	ldr	r0, [r7, #8]
 800a60e:	f000 f80f 	bl	800a630 <IntToUnicode>
  }
}
 800a612:	bf00      	nop
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	1ffff7e8 	.word	0x1ffff7e8
 800a620:	1ffff7ec 	.word	0x1ffff7ec
 800a624:	1ffff7f0 	.word	0x1ffff7f0
 800a628:	20000166 	.word	0x20000166
 800a62c:	20000176 	.word	0x20000176

0800a630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a642:	2300      	movs	r3, #0
 800a644:	75fb      	strb	r3, [r7, #23]
 800a646:	e027      	b.n	800a698 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	0f1b      	lsrs	r3, r3, #28
 800a64c:	2b09      	cmp	r3, #9
 800a64e:	d80b      	bhi.n	800a668 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	0f1b      	lsrs	r3, r3, #28
 800a654:	b2da      	uxtb	r2, r3
 800a656:	7dfb      	ldrb	r3, [r7, #23]
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	4619      	mov	r1, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	440b      	add	r3, r1
 800a660:	3230      	adds	r2, #48	; 0x30
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	e00a      	b.n	800a67e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0f1b      	lsrs	r3, r3, #28
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	4619      	mov	r1, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	440b      	add	r3, r1
 800a678:	3237      	adds	r2, #55	; 0x37
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	011b      	lsls	r3, r3, #4
 800a682:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	3301      	adds	r3, #1
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a692:	7dfb      	ldrb	r3, [r7, #23]
 800a694:	3301      	adds	r3, #1
 800a696:	75fb      	strb	r3, [r7, #23]
 800a698:	7dfa      	ldrb	r2, [r7, #23]
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d3d3      	bcc.n	800a648 <IntToUnicode+0x18>
  }
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bc80      	pop	{r7}
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a0d      	ldr	r2, [pc, #52]	; (800a6f0 <HAL_PCD_MspInit+0x44>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d113      	bne.n	800a6e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a6be:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <HAL_PCD_MspInit+0x48>)
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	4a0c      	ldr	r2, [pc, #48]	; (800a6f4 <HAL_PCD_MspInit+0x48>)
 800a6c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6c8:	61d3      	str	r3, [r2, #28]
 800a6ca:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <HAL_PCD_MspInit+0x48>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2105      	movs	r1, #5
 800a6da:	2014      	movs	r0, #20
 800a6dc:	f7f6 fa57 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a6e0:	2014      	movs	r0, #20
 800a6e2:	f7f6 fa70 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40005c00 	.word	0x40005c00
 800a6f4:	40021000 	.word	0x40021000

0800a6f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fc faa7 	bl	8006c62 <USBD_LL_SetupStage>
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	440b      	add	r3, r1
 800a73c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	4619      	mov	r1, r3
 800a746:	f7fc fad9 	bl	8006cfc <USBD_LL_DataOutStage>
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	440b      	add	r3, r1
 800a772:	333c      	adds	r3, #60	; 0x3c
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	4619      	mov	r1, r3
 800a77a:	f7fc fb30 	bl	8006dde <USBD_LL_DataInStage>
}
 800a77e:	bf00      	nop
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a794:	4618      	mov	r0, r3
 800a796:	f7fc fc40 	bl	800701a <USBD_LL_SOF>
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d001      	beq.n	800a7ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7b6:	f7f5 ff67 	bl	8000688 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a7c0:	7bfa      	ldrb	r2, [r7, #15]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fc fbf0 	bl	8006faa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fc fba9 	bl	8006f28 <USBD_LL_Reset>
}
 800a7d6:	bf00      	nop
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fc fbea 	bl	8006fc8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d005      	beq.n	800a808 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7fc:	4b04      	ldr	r3, [pc, #16]	; (800a810 <HAL_PCD_SuspendCallback+0x30>)
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	4a03      	ldr	r2, [pc, #12]	; (800a810 <HAL_PCD_SuspendCallback+0x30>)
 800a802:	f043 0306 	orr.w	r3, r3, #6
 800a806:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	e000ed00 	.word	0xe000ed00

0800a814 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a822:	4618      	mov	r0, r3
 800a824:	f7fc fbe4 	bl	8006ff0 <USBD_LL_Resume>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a838:	4a28      	ldr	r2, [pc, #160]	; (800a8dc <USBD_LL_Init+0xac>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a26      	ldr	r2, [pc, #152]	; (800a8dc <USBD_LL_Init+0xac>)
 800a844:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a848:	4b24      	ldr	r3, [pc, #144]	; (800a8dc <USBD_LL_Init+0xac>)
 800a84a:	4a25      	ldr	r2, [pc, #148]	; (800a8e0 <USBD_LL_Init+0xb0>)
 800a84c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a84e:	4b23      	ldr	r3, [pc, #140]	; (800a8dc <USBD_LL_Init+0xac>)
 800a850:	2208      	movs	r2, #8
 800a852:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a854:	4b21      	ldr	r3, [pc, #132]	; (800a8dc <USBD_LL_Init+0xac>)
 800a856:	2202      	movs	r2, #2
 800a858:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a85a:	4b20      	ldr	r3, [pc, #128]	; (800a8dc <USBD_LL_Init+0xac>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a860:	4b1e      	ldr	r3, [pc, #120]	; (800a8dc <USBD_LL_Init+0xac>)
 800a862:	2200      	movs	r2, #0
 800a864:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a866:	4b1d      	ldr	r3, [pc, #116]	; (800a8dc <USBD_LL_Init+0xac>)
 800a868:	2200      	movs	r2, #0
 800a86a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a86c:	481b      	ldr	r0, [pc, #108]	; (800a8dc <USBD_LL_Init+0xac>)
 800a86e:	f7f6 fb85 	bl	8000f7c <HAL_PCD_Init>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a878:	f7f5 ff06 	bl	8000688 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a882:	2318      	movs	r3, #24
 800a884:	2200      	movs	r2, #0
 800a886:	2100      	movs	r1, #0
 800a888:	f7f8 f8a6 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a892:	2358      	movs	r3, #88	; 0x58
 800a894:	2200      	movs	r2, #0
 800a896:	2180      	movs	r1, #128	; 0x80
 800a898:	f7f8 f89e 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8a2:	23c0      	movs	r3, #192	; 0xc0
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2181      	movs	r1, #129	; 0x81
 800a8a8:	f7f8 f896 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	f7f8 f88d 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2182      	movs	r1, #130	; 0x82
 800a8cc:	f7f8 f884 	bl	80029d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20003038 	.word	0x20003038
 800a8e0:	40005c00 	.word	0x40005c00

0800a8e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f6 fc3d 	bl	800117a <HAL_PCD_Start>
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	4618      	mov	r0, r3
 800a908:	f000 f94e 	bl	800aba8 <USBD_Get_USB_Status>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a910:	7bbb      	ldrb	r3, [r7, #14]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	461a      	mov	r2, r3
 800a928:	4603      	mov	r3, r0
 800a92a:	70fb      	strb	r3, [r7, #3]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70bb      	strb	r3, [r7, #2]
 800a930:	4613      	mov	r3, r2
 800a932:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a942:	78bb      	ldrb	r3, [r7, #2]
 800a944:	883a      	ldrh	r2, [r7, #0]
 800a946:	78f9      	ldrb	r1, [r7, #3]
 800a948:	f7f6 fd94 	bl	8001474 <HAL_PCD_EP_Open>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f928 	bl	800aba8 <USBD_Get_USB_Status>
 800a958:	4603      	mov	r3, r0
 800a95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a980:	78fa      	ldrb	r2, [r7, #3]
 800a982:	4611      	mov	r1, r2
 800a984:	4618      	mov	r0, r3
 800a986:	f7f6 fdd2 	bl	800152e <HAL_PCD_EP_Close>
 800a98a:	4603      	mov	r3, r0
 800a98c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	4618      	mov	r0, r3
 800a992:	f000 f909 	bl	800aba8 <USBD_Get_USB_Status>
 800a996:	4603      	mov	r3, r0
 800a998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9be:	78fa      	ldrb	r2, [r7, #3]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f6 fe7a 	bl	80016bc <HAL_PCD_EP_SetStall>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f8ea 	bl	800aba8 <USBD_Get_USB_Status>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f6 febb 	bl	800177c <HAL_PCD_EP_ClrStall>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f8cb 	bl	800aba8 <USBD_Get_USB_Status>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	da0c      	bge.n	800aa56 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa3c:	78fb      	ldrb	r3, [r7, #3]
 800aa3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa42:	68f9      	ldr	r1, [r7, #12]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	440b      	add	r3, r1
 800aa50:	3302      	adds	r3, #2
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	e00b      	b.n	800aa6e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa5c:	68f9      	ldr	r1, [r7, #12]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	440b      	add	r3, r1
 800aa68:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aa6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bc80      	pop	{r7}
 800aa76:	4770      	bx	lr

0800aa78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa92:	78fa      	ldrb	r2, [r7, #3]
 800aa94:	4611      	mov	r1, r2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7f6 fcc7 	bl	800142a <HAL_PCD_SetAddress>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 f880 	bl	800aba8 <USBD_Get_USB_Status>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b086      	sub	sp, #24
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	461a      	mov	r2, r3
 800aac2:	460b      	mov	r3, r1
 800aac4:	72fb      	strb	r3, [r7, #11]
 800aac6:	4613      	mov	r3, r2
 800aac8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aad8:	893b      	ldrh	r3, [r7, #8]
 800aada:	7af9      	ldrb	r1, [r7, #11]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	f7f6 fdb6 	bl	800164e <HAL_PCD_EP_Transmit>
 800aae2:	4603      	mov	r3, r0
 800aae4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 f85d 	bl	800aba8 <USBD_Get_USB_Status>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	607a      	str	r2, [r7, #4]
 800ab06:	461a      	mov	r2, r3
 800ab08:	460b      	mov	r3, r1
 800ab0a:	72fb      	strb	r3, [r7, #11]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab1e:	893b      	ldrh	r3, [r7, #8]
 800ab20:	7af9      	ldrb	r1, [r7, #11]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	f7f6 fd4b 	bl	80015be <HAL_PCD_EP_Receive>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f83a 	bl	800aba8 <USBD_Get_USB_Status>
 800ab34:	4603      	mov	r3, r0
 800ab36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab38:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab54:	78fa      	ldrb	r2, [r7, #3]
 800ab56:	4611      	mov	r1, r2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7f6 fd61 	bl	8001620 <HAL_PCD_EP_GetRxCount>
 800ab5e:	4603      	mov	r3, r0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab70:	4b02      	ldr	r3, [pc, #8]	; (800ab7c <USBD_static_malloc+0x14>)
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr
 800ab7c:	200019c4 	.word	0x200019c4

0800ab80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]

}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bc80      	pop	{r7}
 800ab90:	4770      	bx	lr

0800ab92 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ab9e:	bf00      	nop
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bc80      	pop	{r7}
 800aba6:	4770      	bx	lr

0800aba8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d817      	bhi.n	800abec <USBD_Get_USB_Status+0x44>
 800abbc:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <USBD_Get_USB_Status+0x1c>)
 800abbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc2:	bf00      	nop
 800abc4:	0800abd5 	.word	0x0800abd5
 800abc8:	0800abdb 	.word	0x0800abdb
 800abcc:	0800abe1 	.word	0x0800abe1
 800abd0:	0800abe7 	.word	0x0800abe7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
    break;
 800abd8:	e00b      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abda:	2302      	movs	r3, #2
 800abdc:	73fb      	strb	r3, [r7, #15]
    break;
 800abde:	e008      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abe0:	2301      	movs	r3, #1
 800abe2:	73fb      	strb	r3, [r7, #15]
    break;
 800abe4:	e005      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abe6:	2302      	movs	r3, #2
 800abe8:	73fb      	strb	r3, [r7, #15]
    break;
 800abea:	e002      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abec:	2302      	movs	r3, #2
 800abee:	73fb      	strb	r3, [r7, #15]
    break;
 800abf0:	bf00      	nop
  }
  return usb_status;
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bc80      	pop	{r7}
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop

0800ac00 <__errno>:
 800ac00:	4b01      	ldr	r3, [pc, #4]	; (800ac08 <__errno+0x8>)
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	20000180 	.word	0x20000180

0800ac0c <__libc_init_array>:
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	2600      	movs	r6, #0
 800ac10:	4d0c      	ldr	r5, [pc, #48]	; (800ac44 <__libc_init_array+0x38>)
 800ac12:	4c0d      	ldr	r4, [pc, #52]	; (800ac48 <__libc_init_array+0x3c>)
 800ac14:	1b64      	subs	r4, r4, r5
 800ac16:	10a4      	asrs	r4, r4, #2
 800ac18:	42a6      	cmp	r6, r4
 800ac1a:	d109      	bne.n	800ac30 <__libc_init_array+0x24>
 800ac1c:	f000 fc70 	bl	800b500 <_init>
 800ac20:	2600      	movs	r6, #0
 800ac22:	4d0a      	ldr	r5, [pc, #40]	; (800ac4c <__libc_init_array+0x40>)
 800ac24:	4c0a      	ldr	r4, [pc, #40]	; (800ac50 <__libc_init_array+0x44>)
 800ac26:	1b64      	subs	r4, r4, r5
 800ac28:	10a4      	asrs	r4, r4, #2
 800ac2a:	42a6      	cmp	r6, r4
 800ac2c:	d105      	bne.n	800ac3a <__libc_init_array+0x2e>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac34:	4798      	blx	r3
 800ac36:	3601      	adds	r6, #1
 800ac38:	e7ee      	b.n	800ac18 <__libc_init_array+0xc>
 800ac3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3e:	4798      	blx	r3
 800ac40:	3601      	adds	r6, #1
 800ac42:	e7f2      	b.n	800ac2a <__libc_init_array+0x1e>
 800ac44:	0800b62c 	.word	0x0800b62c
 800ac48:	0800b62c 	.word	0x0800b62c
 800ac4c:	0800b62c 	.word	0x0800b62c
 800ac50:	0800b630 	.word	0x0800b630

0800ac54 <memcpy>:
 800ac54:	440a      	add	r2, r1
 800ac56:	4291      	cmp	r1, r2
 800ac58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac5c:	d100      	bne.n	800ac60 <memcpy+0xc>
 800ac5e:	4770      	bx	lr
 800ac60:	b510      	push	{r4, lr}
 800ac62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac66:	4291      	cmp	r1, r2
 800ac68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6c:	d1f9      	bne.n	800ac62 <memcpy+0xe>
 800ac6e:	bd10      	pop	{r4, pc}

0800ac70 <memset>:
 800ac70:	4603      	mov	r3, r0
 800ac72:	4402      	add	r2, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <sniprintf>:
 800ac80:	b40c      	push	{r2, r3}
 800ac82:	b530      	push	{r4, r5, lr}
 800ac84:	4b17      	ldr	r3, [pc, #92]	; (800ace4 <sniprintf+0x64>)
 800ac86:	1e0c      	subs	r4, r1, #0
 800ac88:	681d      	ldr	r5, [r3, #0]
 800ac8a:	b09d      	sub	sp, #116	; 0x74
 800ac8c:	da08      	bge.n	800aca0 <sniprintf+0x20>
 800ac8e:	238b      	movs	r3, #139	; 0x8b
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	602b      	str	r3, [r5, #0]
 800ac96:	b01d      	add	sp, #116	; 0x74
 800ac98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac9c:	b002      	add	sp, #8
 800ac9e:	4770      	bx	lr
 800aca0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aca4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aca8:	bf0c      	ite	eq
 800acaa:	4623      	moveq	r3, r4
 800acac:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	9307      	str	r3, [sp, #28]
 800acb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acb8:	9002      	str	r0, [sp, #8]
 800acba:	9006      	str	r0, [sp, #24]
 800acbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800acc0:	4628      	mov	r0, r5
 800acc2:	ab21      	add	r3, sp, #132	; 0x84
 800acc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800acc6:	a902      	add	r1, sp, #8
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	f000 f869 	bl	800ada0 <_svfiprintf_r>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	bfbc      	itt	lt
 800acd2:	238b      	movlt	r3, #139	; 0x8b
 800acd4:	602b      	strlt	r3, [r5, #0]
 800acd6:	2c00      	cmp	r4, #0
 800acd8:	d0dd      	beq.n	800ac96 <sniprintf+0x16>
 800acda:	2200      	movs	r2, #0
 800acdc:	9b02      	ldr	r3, [sp, #8]
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	e7d9      	b.n	800ac96 <sniprintf+0x16>
 800ace2:	bf00      	nop
 800ace4:	20000180 	.word	0x20000180

0800ace8 <__ssputs_r>:
 800ace8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	688e      	ldr	r6, [r1, #8]
 800acee:	4682      	mov	sl, r0
 800acf0:	429e      	cmp	r6, r3
 800acf2:	460c      	mov	r4, r1
 800acf4:	4690      	mov	r8, r2
 800acf6:	461f      	mov	r7, r3
 800acf8:	d838      	bhi.n	800ad6c <__ssputs_r+0x84>
 800acfa:	898a      	ldrh	r2, [r1, #12]
 800acfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad00:	d032      	beq.n	800ad68 <__ssputs_r+0x80>
 800ad02:	6825      	ldr	r5, [r4, #0]
 800ad04:	6909      	ldr	r1, [r1, #16]
 800ad06:	3301      	adds	r3, #1
 800ad08:	eba5 0901 	sub.w	r9, r5, r1
 800ad0c:	6965      	ldr	r5, [r4, #20]
 800ad0e:	444b      	add	r3, r9
 800ad10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad18:	106d      	asrs	r5, r5, #1
 800ad1a:	429d      	cmp	r5, r3
 800ad1c:	bf38      	it	cc
 800ad1e:	461d      	movcc	r5, r3
 800ad20:	0553      	lsls	r3, r2, #21
 800ad22:	d531      	bpl.n	800ad88 <__ssputs_r+0xa0>
 800ad24:	4629      	mov	r1, r5
 800ad26:	f000 fb45 	bl	800b3b4 <_malloc_r>
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	b950      	cbnz	r0, 800ad44 <__ssputs_r+0x5c>
 800ad2e:	230c      	movs	r3, #12
 800ad30:	f04f 30ff 	mov.w	r0, #4294967295
 800ad34:	f8ca 3000 	str.w	r3, [sl]
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad44:	464a      	mov	r2, r9
 800ad46:	6921      	ldr	r1, [r4, #16]
 800ad48:	f7ff ff84 	bl	800ac54 <memcpy>
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad56:	81a3      	strh	r3, [r4, #12]
 800ad58:	6126      	str	r6, [r4, #16]
 800ad5a:	444e      	add	r6, r9
 800ad5c:	6026      	str	r6, [r4, #0]
 800ad5e:	463e      	mov	r6, r7
 800ad60:	6165      	str	r5, [r4, #20]
 800ad62:	eba5 0509 	sub.w	r5, r5, r9
 800ad66:	60a5      	str	r5, [r4, #8]
 800ad68:	42be      	cmp	r6, r7
 800ad6a:	d900      	bls.n	800ad6e <__ssputs_r+0x86>
 800ad6c:	463e      	mov	r6, r7
 800ad6e:	4632      	mov	r2, r6
 800ad70:	4641      	mov	r1, r8
 800ad72:	6820      	ldr	r0, [r4, #0]
 800ad74:	f000 fab8 	bl	800b2e8 <memmove>
 800ad78:	68a3      	ldr	r3, [r4, #8]
 800ad7a:	6822      	ldr	r2, [r4, #0]
 800ad7c:	1b9b      	subs	r3, r3, r6
 800ad7e:	4432      	add	r2, r6
 800ad80:	2000      	movs	r0, #0
 800ad82:	60a3      	str	r3, [r4, #8]
 800ad84:	6022      	str	r2, [r4, #0]
 800ad86:	e7db      	b.n	800ad40 <__ssputs_r+0x58>
 800ad88:	462a      	mov	r2, r5
 800ad8a:	f000 fb6d 	bl	800b468 <_realloc_r>
 800ad8e:	4606      	mov	r6, r0
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d1e1      	bne.n	800ad58 <__ssputs_r+0x70>
 800ad94:	4650      	mov	r0, sl
 800ad96:	6921      	ldr	r1, [r4, #16]
 800ad98:	f000 fac0 	bl	800b31c <_free_r>
 800ad9c:	e7c7      	b.n	800ad2e <__ssputs_r+0x46>
	...

0800ada0 <_svfiprintf_r>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	4698      	mov	r8, r3
 800ada6:	898b      	ldrh	r3, [r1, #12]
 800ada8:	4607      	mov	r7, r0
 800adaa:	061b      	lsls	r3, r3, #24
 800adac:	460d      	mov	r5, r1
 800adae:	4614      	mov	r4, r2
 800adb0:	b09d      	sub	sp, #116	; 0x74
 800adb2:	d50e      	bpl.n	800add2 <_svfiprintf_r+0x32>
 800adb4:	690b      	ldr	r3, [r1, #16]
 800adb6:	b963      	cbnz	r3, 800add2 <_svfiprintf_r+0x32>
 800adb8:	2140      	movs	r1, #64	; 0x40
 800adba:	f000 fafb 	bl	800b3b4 <_malloc_r>
 800adbe:	6028      	str	r0, [r5, #0]
 800adc0:	6128      	str	r0, [r5, #16]
 800adc2:	b920      	cbnz	r0, 800adce <_svfiprintf_r+0x2e>
 800adc4:	230c      	movs	r3, #12
 800adc6:	603b      	str	r3, [r7, #0]
 800adc8:	f04f 30ff 	mov.w	r0, #4294967295
 800adcc:	e0d1      	b.n	800af72 <_svfiprintf_r+0x1d2>
 800adce:	2340      	movs	r3, #64	; 0x40
 800add0:	616b      	str	r3, [r5, #20]
 800add2:	2300      	movs	r3, #0
 800add4:	9309      	str	r3, [sp, #36]	; 0x24
 800add6:	2320      	movs	r3, #32
 800add8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800addc:	2330      	movs	r3, #48	; 0x30
 800adde:	f04f 0901 	mov.w	r9, #1
 800ade2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ade6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af8c <_svfiprintf_r+0x1ec>
 800adea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adee:	4623      	mov	r3, r4
 800adf0:	469a      	mov	sl, r3
 800adf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adf6:	b10a      	cbz	r2, 800adfc <_svfiprintf_r+0x5c>
 800adf8:	2a25      	cmp	r2, #37	; 0x25
 800adfa:	d1f9      	bne.n	800adf0 <_svfiprintf_r+0x50>
 800adfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ae00:	d00b      	beq.n	800ae1a <_svfiprintf_r+0x7a>
 800ae02:	465b      	mov	r3, fp
 800ae04:	4622      	mov	r2, r4
 800ae06:	4629      	mov	r1, r5
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f7ff ff6d 	bl	800ace8 <__ssputs_r>
 800ae0e:	3001      	adds	r0, #1
 800ae10:	f000 80aa 	beq.w	800af68 <_svfiprintf_r+0x1c8>
 800ae14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae16:	445a      	add	r2, fp
 800ae18:	9209      	str	r2, [sp, #36]	; 0x24
 800ae1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 80a2 	beq.w	800af68 <_svfiprintf_r+0x1c8>
 800ae24:	2300      	movs	r3, #0
 800ae26:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae2e:	f10a 0a01 	add.w	sl, sl, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	9307      	str	r3, [sp, #28]
 800ae36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae3c:	4654      	mov	r4, sl
 800ae3e:	2205      	movs	r2, #5
 800ae40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae44:	4851      	ldr	r0, [pc, #324]	; (800af8c <_svfiprintf_r+0x1ec>)
 800ae46:	f000 fa41 	bl	800b2cc <memchr>
 800ae4a:	9a04      	ldr	r2, [sp, #16]
 800ae4c:	b9d8      	cbnz	r0, 800ae86 <_svfiprintf_r+0xe6>
 800ae4e:	06d0      	lsls	r0, r2, #27
 800ae50:	bf44      	itt	mi
 800ae52:	2320      	movmi	r3, #32
 800ae54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae58:	0711      	lsls	r1, r2, #28
 800ae5a:	bf44      	itt	mi
 800ae5c:	232b      	movmi	r3, #43	; 0x2b
 800ae5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae62:	f89a 3000 	ldrb.w	r3, [sl]
 800ae66:	2b2a      	cmp	r3, #42	; 0x2a
 800ae68:	d015      	beq.n	800ae96 <_svfiprintf_r+0xf6>
 800ae6a:	4654      	mov	r4, sl
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	f04f 0c0a 	mov.w	ip, #10
 800ae72:	9a07      	ldr	r2, [sp, #28]
 800ae74:	4621      	mov	r1, r4
 800ae76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae7a:	3b30      	subs	r3, #48	; 0x30
 800ae7c:	2b09      	cmp	r3, #9
 800ae7e:	d94e      	bls.n	800af1e <_svfiprintf_r+0x17e>
 800ae80:	b1b0      	cbz	r0, 800aeb0 <_svfiprintf_r+0x110>
 800ae82:	9207      	str	r2, [sp, #28]
 800ae84:	e014      	b.n	800aeb0 <_svfiprintf_r+0x110>
 800ae86:	eba0 0308 	sub.w	r3, r0, r8
 800ae8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	46a2      	mov	sl, r4
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	e7d2      	b.n	800ae3c <_svfiprintf_r+0x9c>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	1d19      	adds	r1, r3, #4
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	9103      	str	r1, [sp, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	bfbb      	ittet	lt
 800aea2:	425b      	neglt	r3, r3
 800aea4:	f042 0202 	orrlt.w	r2, r2, #2
 800aea8:	9307      	strge	r3, [sp, #28]
 800aeaa:	9307      	strlt	r3, [sp, #28]
 800aeac:	bfb8      	it	lt
 800aeae:	9204      	strlt	r2, [sp, #16]
 800aeb0:	7823      	ldrb	r3, [r4, #0]
 800aeb2:	2b2e      	cmp	r3, #46	; 0x2e
 800aeb4:	d10c      	bne.n	800aed0 <_svfiprintf_r+0x130>
 800aeb6:	7863      	ldrb	r3, [r4, #1]
 800aeb8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeba:	d135      	bne.n	800af28 <_svfiprintf_r+0x188>
 800aebc:	9b03      	ldr	r3, [sp, #12]
 800aebe:	3402      	adds	r4, #2
 800aec0:	1d1a      	adds	r2, r3, #4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	9203      	str	r2, [sp, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	bfb8      	it	lt
 800aeca:	f04f 33ff 	movlt.w	r3, #4294967295
 800aece:	9305      	str	r3, [sp, #20]
 800aed0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af9c <_svfiprintf_r+0x1fc>
 800aed4:	2203      	movs	r2, #3
 800aed6:	4650      	mov	r0, sl
 800aed8:	7821      	ldrb	r1, [r4, #0]
 800aeda:	f000 f9f7 	bl	800b2cc <memchr>
 800aede:	b140      	cbz	r0, 800aef2 <_svfiprintf_r+0x152>
 800aee0:	2340      	movs	r3, #64	; 0x40
 800aee2:	eba0 000a 	sub.w	r0, r0, sl
 800aee6:	fa03 f000 	lsl.w	r0, r3, r0
 800aeea:	9b04      	ldr	r3, [sp, #16]
 800aeec:	3401      	adds	r4, #1
 800aeee:	4303      	orrs	r3, r0
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef6:	2206      	movs	r2, #6
 800aef8:	4825      	ldr	r0, [pc, #148]	; (800af90 <_svfiprintf_r+0x1f0>)
 800aefa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aefe:	f000 f9e5 	bl	800b2cc <memchr>
 800af02:	2800      	cmp	r0, #0
 800af04:	d038      	beq.n	800af78 <_svfiprintf_r+0x1d8>
 800af06:	4b23      	ldr	r3, [pc, #140]	; (800af94 <_svfiprintf_r+0x1f4>)
 800af08:	bb1b      	cbnz	r3, 800af52 <_svfiprintf_r+0x1b2>
 800af0a:	9b03      	ldr	r3, [sp, #12]
 800af0c:	3307      	adds	r3, #7
 800af0e:	f023 0307 	bic.w	r3, r3, #7
 800af12:	3308      	adds	r3, #8
 800af14:	9303      	str	r3, [sp, #12]
 800af16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af18:	4433      	add	r3, r6
 800af1a:	9309      	str	r3, [sp, #36]	; 0x24
 800af1c:	e767      	b.n	800adee <_svfiprintf_r+0x4e>
 800af1e:	460c      	mov	r4, r1
 800af20:	2001      	movs	r0, #1
 800af22:	fb0c 3202 	mla	r2, ip, r2, r3
 800af26:	e7a5      	b.n	800ae74 <_svfiprintf_r+0xd4>
 800af28:	2300      	movs	r3, #0
 800af2a:	f04f 0c0a 	mov.w	ip, #10
 800af2e:	4619      	mov	r1, r3
 800af30:	3401      	adds	r4, #1
 800af32:	9305      	str	r3, [sp, #20]
 800af34:	4620      	mov	r0, r4
 800af36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af3a:	3a30      	subs	r2, #48	; 0x30
 800af3c:	2a09      	cmp	r2, #9
 800af3e:	d903      	bls.n	800af48 <_svfiprintf_r+0x1a8>
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0c5      	beq.n	800aed0 <_svfiprintf_r+0x130>
 800af44:	9105      	str	r1, [sp, #20]
 800af46:	e7c3      	b.n	800aed0 <_svfiprintf_r+0x130>
 800af48:	4604      	mov	r4, r0
 800af4a:	2301      	movs	r3, #1
 800af4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af50:	e7f0      	b.n	800af34 <_svfiprintf_r+0x194>
 800af52:	ab03      	add	r3, sp, #12
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	462a      	mov	r2, r5
 800af58:	4638      	mov	r0, r7
 800af5a:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <_svfiprintf_r+0x1f8>)
 800af5c:	a904      	add	r1, sp, #16
 800af5e:	f3af 8000 	nop.w
 800af62:	1c42      	adds	r2, r0, #1
 800af64:	4606      	mov	r6, r0
 800af66:	d1d6      	bne.n	800af16 <_svfiprintf_r+0x176>
 800af68:	89ab      	ldrh	r3, [r5, #12]
 800af6a:	065b      	lsls	r3, r3, #25
 800af6c:	f53f af2c 	bmi.w	800adc8 <_svfiprintf_r+0x28>
 800af70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af72:	b01d      	add	sp, #116	; 0x74
 800af74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af78:	ab03      	add	r3, sp, #12
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	462a      	mov	r2, r5
 800af7e:	4638      	mov	r0, r7
 800af80:	4b05      	ldr	r3, [pc, #20]	; (800af98 <_svfiprintf_r+0x1f8>)
 800af82:	a904      	add	r1, sp, #16
 800af84:	f000 f87c 	bl	800b080 <_printf_i>
 800af88:	e7eb      	b.n	800af62 <_svfiprintf_r+0x1c2>
 800af8a:	bf00      	nop
 800af8c:	0800b5f6 	.word	0x0800b5f6
 800af90:	0800b600 	.word	0x0800b600
 800af94:	00000000 	.word	0x00000000
 800af98:	0800ace9 	.word	0x0800ace9
 800af9c:	0800b5fc 	.word	0x0800b5fc

0800afa0 <_printf_common>:
 800afa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa4:	4616      	mov	r6, r2
 800afa6:	4699      	mov	r9, r3
 800afa8:	688a      	ldr	r2, [r1, #8]
 800afaa:	690b      	ldr	r3, [r1, #16]
 800afac:	4607      	mov	r7, r0
 800afae:	4293      	cmp	r3, r2
 800afb0:	bfb8      	it	lt
 800afb2:	4613      	movlt	r3, r2
 800afb4:	6033      	str	r3, [r6, #0]
 800afb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afba:	460c      	mov	r4, r1
 800afbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afc0:	b10a      	cbz	r2, 800afc6 <_printf_common+0x26>
 800afc2:	3301      	adds	r3, #1
 800afc4:	6033      	str	r3, [r6, #0]
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	0699      	lsls	r1, r3, #26
 800afca:	bf42      	ittt	mi
 800afcc:	6833      	ldrmi	r3, [r6, #0]
 800afce:	3302      	addmi	r3, #2
 800afd0:	6033      	strmi	r3, [r6, #0]
 800afd2:	6825      	ldr	r5, [r4, #0]
 800afd4:	f015 0506 	ands.w	r5, r5, #6
 800afd8:	d106      	bne.n	800afe8 <_printf_common+0x48>
 800afda:	f104 0a19 	add.w	sl, r4, #25
 800afde:	68e3      	ldr	r3, [r4, #12]
 800afe0:	6832      	ldr	r2, [r6, #0]
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	42ab      	cmp	r3, r5
 800afe6:	dc28      	bgt.n	800b03a <_printf_common+0x9a>
 800afe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afec:	1e13      	subs	r3, r2, #0
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	bf18      	it	ne
 800aff2:	2301      	movne	r3, #1
 800aff4:	0692      	lsls	r2, r2, #26
 800aff6:	d42d      	bmi.n	800b054 <_printf_common+0xb4>
 800aff8:	4649      	mov	r1, r9
 800affa:	4638      	mov	r0, r7
 800affc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b000:	47c0      	blx	r8
 800b002:	3001      	adds	r0, #1
 800b004:	d020      	beq.n	800b048 <_printf_common+0xa8>
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	68e5      	ldr	r5, [r4, #12]
 800b00a:	f003 0306 	and.w	r3, r3, #6
 800b00e:	2b04      	cmp	r3, #4
 800b010:	bf18      	it	ne
 800b012:	2500      	movne	r5, #0
 800b014:	6832      	ldr	r2, [r6, #0]
 800b016:	f04f 0600 	mov.w	r6, #0
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	bf08      	it	eq
 800b01e:	1aad      	subeq	r5, r5, r2
 800b020:	6922      	ldr	r2, [r4, #16]
 800b022:	bf08      	it	eq
 800b024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b028:	4293      	cmp	r3, r2
 800b02a:	bfc4      	itt	gt
 800b02c:	1a9b      	subgt	r3, r3, r2
 800b02e:	18ed      	addgt	r5, r5, r3
 800b030:	341a      	adds	r4, #26
 800b032:	42b5      	cmp	r5, r6
 800b034:	d11a      	bne.n	800b06c <_printf_common+0xcc>
 800b036:	2000      	movs	r0, #0
 800b038:	e008      	b.n	800b04c <_printf_common+0xac>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4652      	mov	r2, sl
 800b03e:	4649      	mov	r1, r9
 800b040:	4638      	mov	r0, r7
 800b042:	47c0      	blx	r8
 800b044:	3001      	adds	r0, #1
 800b046:	d103      	bne.n	800b050 <_printf_common+0xb0>
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b050:	3501      	adds	r5, #1
 800b052:	e7c4      	b.n	800afde <_printf_common+0x3e>
 800b054:	2030      	movs	r0, #48	; 0x30
 800b056:	18e1      	adds	r1, r4, r3
 800b058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b062:	4422      	add	r2, r4
 800b064:	3302      	adds	r3, #2
 800b066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b06a:	e7c5      	b.n	800aff8 <_printf_common+0x58>
 800b06c:	2301      	movs	r3, #1
 800b06e:	4622      	mov	r2, r4
 800b070:	4649      	mov	r1, r9
 800b072:	4638      	mov	r0, r7
 800b074:	47c0      	blx	r8
 800b076:	3001      	adds	r0, #1
 800b078:	d0e6      	beq.n	800b048 <_printf_common+0xa8>
 800b07a:	3601      	adds	r6, #1
 800b07c:	e7d9      	b.n	800b032 <_printf_common+0x92>
	...

0800b080 <_printf_i>:
 800b080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b084:	460c      	mov	r4, r1
 800b086:	7e27      	ldrb	r7, [r4, #24]
 800b088:	4691      	mov	r9, r2
 800b08a:	2f78      	cmp	r7, #120	; 0x78
 800b08c:	4680      	mov	r8, r0
 800b08e:	469a      	mov	sl, r3
 800b090:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b096:	d807      	bhi.n	800b0a8 <_printf_i+0x28>
 800b098:	2f62      	cmp	r7, #98	; 0x62
 800b09a:	d80a      	bhi.n	800b0b2 <_printf_i+0x32>
 800b09c:	2f00      	cmp	r7, #0
 800b09e:	f000 80d9 	beq.w	800b254 <_printf_i+0x1d4>
 800b0a2:	2f58      	cmp	r7, #88	; 0x58
 800b0a4:	f000 80a4 	beq.w	800b1f0 <_printf_i+0x170>
 800b0a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0b0:	e03a      	b.n	800b128 <_printf_i+0xa8>
 800b0b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0b6:	2b15      	cmp	r3, #21
 800b0b8:	d8f6      	bhi.n	800b0a8 <_printf_i+0x28>
 800b0ba:	a001      	add	r0, pc, #4	; (adr r0, 800b0c0 <_printf_i+0x40>)
 800b0bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b0c0:	0800b119 	.word	0x0800b119
 800b0c4:	0800b12d 	.word	0x0800b12d
 800b0c8:	0800b0a9 	.word	0x0800b0a9
 800b0cc:	0800b0a9 	.word	0x0800b0a9
 800b0d0:	0800b0a9 	.word	0x0800b0a9
 800b0d4:	0800b0a9 	.word	0x0800b0a9
 800b0d8:	0800b12d 	.word	0x0800b12d
 800b0dc:	0800b0a9 	.word	0x0800b0a9
 800b0e0:	0800b0a9 	.word	0x0800b0a9
 800b0e4:	0800b0a9 	.word	0x0800b0a9
 800b0e8:	0800b0a9 	.word	0x0800b0a9
 800b0ec:	0800b23b 	.word	0x0800b23b
 800b0f0:	0800b15d 	.word	0x0800b15d
 800b0f4:	0800b21d 	.word	0x0800b21d
 800b0f8:	0800b0a9 	.word	0x0800b0a9
 800b0fc:	0800b0a9 	.word	0x0800b0a9
 800b100:	0800b25d 	.word	0x0800b25d
 800b104:	0800b0a9 	.word	0x0800b0a9
 800b108:	0800b15d 	.word	0x0800b15d
 800b10c:	0800b0a9 	.word	0x0800b0a9
 800b110:	0800b0a9 	.word	0x0800b0a9
 800b114:	0800b225 	.word	0x0800b225
 800b118:	680b      	ldr	r3, [r1, #0]
 800b11a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b11e:	1d1a      	adds	r2, r3, #4
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	600a      	str	r2, [r1, #0]
 800b124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b128:	2301      	movs	r3, #1
 800b12a:	e0a4      	b.n	800b276 <_printf_i+0x1f6>
 800b12c:	6825      	ldr	r5, [r4, #0]
 800b12e:	6808      	ldr	r0, [r1, #0]
 800b130:	062e      	lsls	r6, r5, #24
 800b132:	f100 0304 	add.w	r3, r0, #4
 800b136:	d50a      	bpl.n	800b14e <_printf_i+0xce>
 800b138:	6805      	ldr	r5, [r0, #0]
 800b13a:	600b      	str	r3, [r1, #0]
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	da03      	bge.n	800b148 <_printf_i+0xc8>
 800b140:	232d      	movs	r3, #45	; 0x2d
 800b142:	426d      	negs	r5, r5
 800b144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b148:	230a      	movs	r3, #10
 800b14a:	485e      	ldr	r0, [pc, #376]	; (800b2c4 <_printf_i+0x244>)
 800b14c:	e019      	b.n	800b182 <_printf_i+0x102>
 800b14e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b152:	6805      	ldr	r5, [r0, #0]
 800b154:	600b      	str	r3, [r1, #0]
 800b156:	bf18      	it	ne
 800b158:	b22d      	sxthne	r5, r5
 800b15a:	e7ef      	b.n	800b13c <_printf_i+0xbc>
 800b15c:	680b      	ldr	r3, [r1, #0]
 800b15e:	6825      	ldr	r5, [r4, #0]
 800b160:	1d18      	adds	r0, r3, #4
 800b162:	6008      	str	r0, [r1, #0]
 800b164:	0628      	lsls	r0, r5, #24
 800b166:	d501      	bpl.n	800b16c <_printf_i+0xec>
 800b168:	681d      	ldr	r5, [r3, #0]
 800b16a:	e002      	b.n	800b172 <_printf_i+0xf2>
 800b16c:	0669      	lsls	r1, r5, #25
 800b16e:	d5fb      	bpl.n	800b168 <_printf_i+0xe8>
 800b170:	881d      	ldrh	r5, [r3, #0]
 800b172:	2f6f      	cmp	r7, #111	; 0x6f
 800b174:	bf0c      	ite	eq
 800b176:	2308      	moveq	r3, #8
 800b178:	230a      	movne	r3, #10
 800b17a:	4852      	ldr	r0, [pc, #328]	; (800b2c4 <_printf_i+0x244>)
 800b17c:	2100      	movs	r1, #0
 800b17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b182:	6866      	ldr	r6, [r4, #4]
 800b184:	2e00      	cmp	r6, #0
 800b186:	bfa8      	it	ge
 800b188:	6821      	ldrge	r1, [r4, #0]
 800b18a:	60a6      	str	r6, [r4, #8]
 800b18c:	bfa4      	itt	ge
 800b18e:	f021 0104 	bicge.w	r1, r1, #4
 800b192:	6021      	strge	r1, [r4, #0]
 800b194:	b90d      	cbnz	r5, 800b19a <_printf_i+0x11a>
 800b196:	2e00      	cmp	r6, #0
 800b198:	d04d      	beq.n	800b236 <_printf_i+0x1b6>
 800b19a:	4616      	mov	r6, r2
 800b19c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1a0:	fb03 5711 	mls	r7, r3, r1, r5
 800b1a4:	5dc7      	ldrb	r7, [r0, r7]
 800b1a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1aa:	462f      	mov	r7, r5
 800b1ac:	42bb      	cmp	r3, r7
 800b1ae:	460d      	mov	r5, r1
 800b1b0:	d9f4      	bls.n	800b19c <_printf_i+0x11c>
 800b1b2:	2b08      	cmp	r3, #8
 800b1b4:	d10b      	bne.n	800b1ce <_printf_i+0x14e>
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	07df      	lsls	r7, r3, #31
 800b1ba:	d508      	bpl.n	800b1ce <_printf_i+0x14e>
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	6861      	ldr	r1, [r4, #4]
 800b1c0:	4299      	cmp	r1, r3
 800b1c2:	bfde      	ittt	le
 800b1c4:	2330      	movle	r3, #48	; 0x30
 800b1c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1ce:	1b92      	subs	r2, r2, r6
 800b1d0:	6122      	str	r2, [r4, #16]
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	4640      	mov	r0, r8
 800b1d8:	f8cd a000 	str.w	sl, [sp]
 800b1dc:	aa03      	add	r2, sp, #12
 800b1de:	f7ff fedf 	bl	800afa0 <_printf_common>
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	d14c      	bne.n	800b280 <_printf_i+0x200>
 800b1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ea:	b004      	add	sp, #16
 800b1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f0:	4834      	ldr	r0, [pc, #208]	; (800b2c4 <_printf_i+0x244>)
 800b1f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1f6:	680e      	ldr	r6, [r1, #0]
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b1fe:	061f      	lsls	r7, r3, #24
 800b200:	600e      	str	r6, [r1, #0]
 800b202:	d514      	bpl.n	800b22e <_printf_i+0x1ae>
 800b204:	07d9      	lsls	r1, r3, #31
 800b206:	bf44      	itt	mi
 800b208:	f043 0320 	orrmi.w	r3, r3, #32
 800b20c:	6023      	strmi	r3, [r4, #0]
 800b20e:	b91d      	cbnz	r5, 800b218 <_printf_i+0x198>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	f023 0320 	bic.w	r3, r3, #32
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	2310      	movs	r3, #16
 800b21a:	e7af      	b.n	800b17c <_printf_i+0xfc>
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	f043 0320 	orr.w	r3, r3, #32
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	2378      	movs	r3, #120	; 0x78
 800b226:	4828      	ldr	r0, [pc, #160]	; (800b2c8 <_printf_i+0x248>)
 800b228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b22c:	e7e3      	b.n	800b1f6 <_printf_i+0x176>
 800b22e:	065e      	lsls	r6, r3, #25
 800b230:	bf48      	it	mi
 800b232:	b2ad      	uxthmi	r5, r5
 800b234:	e7e6      	b.n	800b204 <_printf_i+0x184>
 800b236:	4616      	mov	r6, r2
 800b238:	e7bb      	b.n	800b1b2 <_printf_i+0x132>
 800b23a:	680b      	ldr	r3, [r1, #0]
 800b23c:	6826      	ldr	r6, [r4, #0]
 800b23e:	1d1d      	adds	r5, r3, #4
 800b240:	6960      	ldr	r0, [r4, #20]
 800b242:	600d      	str	r5, [r1, #0]
 800b244:	0635      	lsls	r5, r6, #24
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	d501      	bpl.n	800b24e <_printf_i+0x1ce>
 800b24a:	6018      	str	r0, [r3, #0]
 800b24c:	e002      	b.n	800b254 <_printf_i+0x1d4>
 800b24e:	0671      	lsls	r1, r6, #25
 800b250:	d5fb      	bpl.n	800b24a <_printf_i+0x1ca>
 800b252:	8018      	strh	r0, [r3, #0]
 800b254:	2300      	movs	r3, #0
 800b256:	4616      	mov	r6, r2
 800b258:	6123      	str	r3, [r4, #16]
 800b25a:	e7ba      	b.n	800b1d2 <_printf_i+0x152>
 800b25c:	680b      	ldr	r3, [r1, #0]
 800b25e:	1d1a      	adds	r2, r3, #4
 800b260:	600a      	str	r2, [r1, #0]
 800b262:	681e      	ldr	r6, [r3, #0]
 800b264:	2100      	movs	r1, #0
 800b266:	4630      	mov	r0, r6
 800b268:	6862      	ldr	r2, [r4, #4]
 800b26a:	f000 f82f 	bl	800b2cc <memchr>
 800b26e:	b108      	cbz	r0, 800b274 <_printf_i+0x1f4>
 800b270:	1b80      	subs	r0, r0, r6
 800b272:	6060      	str	r0, [r4, #4]
 800b274:	6863      	ldr	r3, [r4, #4]
 800b276:	6123      	str	r3, [r4, #16]
 800b278:	2300      	movs	r3, #0
 800b27a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b27e:	e7a8      	b.n	800b1d2 <_printf_i+0x152>
 800b280:	4632      	mov	r2, r6
 800b282:	4649      	mov	r1, r9
 800b284:	4640      	mov	r0, r8
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	47d0      	blx	sl
 800b28a:	3001      	adds	r0, #1
 800b28c:	d0ab      	beq.n	800b1e6 <_printf_i+0x166>
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	079b      	lsls	r3, r3, #30
 800b292:	d413      	bmi.n	800b2bc <_printf_i+0x23c>
 800b294:	68e0      	ldr	r0, [r4, #12]
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	4298      	cmp	r0, r3
 800b29a:	bfb8      	it	lt
 800b29c:	4618      	movlt	r0, r3
 800b29e:	e7a4      	b.n	800b1ea <_printf_i+0x16a>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4632      	mov	r2, r6
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	47d0      	blx	sl
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d09b      	beq.n	800b1e6 <_printf_i+0x166>
 800b2ae:	3501      	adds	r5, #1
 800b2b0:	68e3      	ldr	r3, [r4, #12]
 800b2b2:	9903      	ldr	r1, [sp, #12]
 800b2b4:	1a5b      	subs	r3, r3, r1
 800b2b6:	42ab      	cmp	r3, r5
 800b2b8:	dcf2      	bgt.n	800b2a0 <_printf_i+0x220>
 800b2ba:	e7eb      	b.n	800b294 <_printf_i+0x214>
 800b2bc:	2500      	movs	r5, #0
 800b2be:	f104 0619 	add.w	r6, r4, #25
 800b2c2:	e7f5      	b.n	800b2b0 <_printf_i+0x230>
 800b2c4:	0800b607 	.word	0x0800b607
 800b2c8:	0800b618 	.word	0x0800b618

0800b2cc <memchr>:
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	b2c9      	uxtb	r1, r1
 800b2d2:	4402      	add	r2, r0
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	d101      	bne.n	800b2de <memchr+0x12>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e003      	b.n	800b2e6 <memchr+0x1a>
 800b2de:	7804      	ldrb	r4, [r0, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	428c      	cmp	r4, r1
 800b2e4:	d1f6      	bne.n	800b2d4 <memchr+0x8>
 800b2e6:	bd10      	pop	{r4, pc}

0800b2e8 <memmove>:
 800b2e8:	4288      	cmp	r0, r1
 800b2ea:	b510      	push	{r4, lr}
 800b2ec:	eb01 0402 	add.w	r4, r1, r2
 800b2f0:	d902      	bls.n	800b2f8 <memmove+0x10>
 800b2f2:	4284      	cmp	r4, r0
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	d807      	bhi.n	800b308 <memmove+0x20>
 800b2f8:	1e43      	subs	r3, r0, #1
 800b2fa:	42a1      	cmp	r1, r4
 800b2fc:	d008      	beq.n	800b310 <memmove+0x28>
 800b2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b302:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b306:	e7f8      	b.n	800b2fa <memmove+0x12>
 800b308:	4601      	mov	r1, r0
 800b30a:	4402      	add	r2, r0
 800b30c:	428a      	cmp	r2, r1
 800b30e:	d100      	bne.n	800b312 <memmove+0x2a>
 800b310:	bd10      	pop	{r4, pc}
 800b312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b31a:	e7f7      	b.n	800b30c <memmove+0x24>

0800b31c <_free_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4605      	mov	r5, r0
 800b320:	2900      	cmp	r1, #0
 800b322:	d043      	beq.n	800b3ac <_free_r+0x90>
 800b324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b328:	1f0c      	subs	r4, r1, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfb8      	it	lt
 800b32e:	18e4      	addlt	r4, r4, r3
 800b330:	f000 f8d0 	bl	800b4d4 <__malloc_lock>
 800b334:	4a1e      	ldr	r2, [pc, #120]	; (800b3b0 <_free_r+0x94>)
 800b336:	6813      	ldr	r3, [r2, #0]
 800b338:	4610      	mov	r0, r2
 800b33a:	b933      	cbnz	r3, 800b34a <_free_r+0x2e>
 800b33c:	6063      	str	r3, [r4, #4]
 800b33e:	6014      	str	r4, [r2, #0]
 800b340:	4628      	mov	r0, r5
 800b342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b346:	f000 b8cb 	b.w	800b4e0 <__malloc_unlock>
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	d90a      	bls.n	800b364 <_free_r+0x48>
 800b34e:	6821      	ldr	r1, [r4, #0]
 800b350:	1862      	adds	r2, r4, r1
 800b352:	4293      	cmp	r3, r2
 800b354:	bf01      	itttt	eq
 800b356:	681a      	ldreq	r2, [r3, #0]
 800b358:	685b      	ldreq	r3, [r3, #4]
 800b35a:	1852      	addeq	r2, r2, r1
 800b35c:	6022      	streq	r2, [r4, #0]
 800b35e:	6063      	str	r3, [r4, #4]
 800b360:	6004      	str	r4, [r0, #0]
 800b362:	e7ed      	b.n	800b340 <_free_r+0x24>
 800b364:	461a      	mov	r2, r3
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	b10b      	cbz	r3, 800b36e <_free_r+0x52>
 800b36a:	42a3      	cmp	r3, r4
 800b36c:	d9fa      	bls.n	800b364 <_free_r+0x48>
 800b36e:	6811      	ldr	r1, [r2, #0]
 800b370:	1850      	adds	r0, r2, r1
 800b372:	42a0      	cmp	r0, r4
 800b374:	d10b      	bne.n	800b38e <_free_r+0x72>
 800b376:	6820      	ldr	r0, [r4, #0]
 800b378:	4401      	add	r1, r0
 800b37a:	1850      	adds	r0, r2, r1
 800b37c:	4283      	cmp	r3, r0
 800b37e:	6011      	str	r1, [r2, #0]
 800b380:	d1de      	bne.n	800b340 <_free_r+0x24>
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4401      	add	r1, r0
 800b388:	6011      	str	r1, [r2, #0]
 800b38a:	6053      	str	r3, [r2, #4]
 800b38c:	e7d8      	b.n	800b340 <_free_r+0x24>
 800b38e:	d902      	bls.n	800b396 <_free_r+0x7a>
 800b390:	230c      	movs	r3, #12
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	e7d4      	b.n	800b340 <_free_r+0x24>
 800b396:	6820      	ldr	r0, [r4, #0]
 800b398:	1821      	adds	r1, r4, r0
 800b39a:	428b      	cmp	r3, r1
 800b39c:	bf01      	itttt	eq
 800b39e:	6819      	ldreq	r1, [r3, #0]
 800b3a0:	685b      	ldreq	r3, [r3, #4]
 800b3a2:	1809      	addeq	r1, r1, r0
 800b3a4:	6021      	streq	r1, [r4, #0]
 800b3a6:	6063      	str	r3, [r4, #4]
 800b3a8:	6054      	str	r4, [r2, #4]
 800b3aa:	e7c9      	b.n	800b340 <_free_r+0x24>
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20001be4 	.word	0x20001be4

0800b3b4 <_malloc_r>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	1ccd      	adds	r5, r1, #3
 800b3b8:	f025 0503 	bic.w	r5, r5, #3
 800b3bc:	3508      	adds	r5, #8
 800b3be:	2d0c      	cmp	r5, #12
 800b3c0:	bf38      	it	cc
 800b3c2:	250c      	movcc	r5, #12
 800b3c4:	2d00      	cmp	r5, #0
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	db01      	blt.n	800b3ce <_malloc_r+0x1a>
 800b3ca:	42a9      	cmp	r1, r5
 800b3cc:	d903      	bls.n	800b3d6 <_malloc_r+0x22>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	6033      	str	r3, [r6, #0]
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d6:	f000 f87d 	bl	800b4d4 <__malloc_lock>
 800b3da:	4921      	ldr	r1, [pc, #132]	; (800b460 <_malloc_r+0xac>)
 800b3dc:	680a      	ldr	r2, [r1, #0]
 800b3de:	4614      	mov	r4, r2
 800b3e0:	b99c      	cbnz	r4, 800b40a <_malloc_r+0x56>
 800b3e2:	4f20      	ldr	r7, [pc, #128]	; (800b464 <_malloc_r+0xb0>)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	b923      	cbnz	r3, 800b3f2 <_malloc_r+0x3e>
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f000 f862 	bl	800b4b4 <_sbrk_r>
 800b3f0:	6038      	str	r0, [r7, #0]
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f000 f85d 	bl	800b4b4 <_sbrk_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d123      	bne.n	800b446 <_malloc_r+0x92>
 800b3fe:	230c      	movs	r3, #12
 800b400:	4630      	mov	r0, r6
 800b402:	6033      	str	r3, [r6, #0]
 800b404:	f000 f86c 	bl	800b4e0 <__malloc_unlock>
 800b408:	e7e3      	b.n	800b3d2 <_malloc_r+0x1e>
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	1b5b      	subs	r3, r3, r5
 800b40e:	d417      	bmi.n	800b440 <_malloc_r+0x8c>
 800b410:	2b0b      	cmp	r3, #11
 800b412:	d903      	bls.n	800b41c <_malloc_r+0x68>
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	441c      	add	r4, r3
 800b418:	6025      	str	r5, [r4, #0]
 800b41a:	e004      	b.n	800b426 <_malloc_r+0x72>
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	42a2      	cmp	r2, r4
 800b420:	bf0c      	ite	eq
 800b422:	600b      	streq	r3, [r1, #0]
 800b424:	6053      	strne	r3, [r2, #4]
 800b426:	4630      	mov	r0, r6
 800b428:	f000 f85a 	bl	800b4e0 <__malloc_unlock>
 800b42c:	f104 000b 	add.w	r0, r4, #11
 800b430:	1d23      	adds	r3, r4, #4
 800b432:	f020 0007 	bic.w	r0, r0, #7
 800b436:	1ac2      	subs	r2, r0, r3
 800b438:	d0cc      	beq.n	800b3d4 <_malloc_r+0x20>
 800b43a:	1a1b      	subs	r3, r3, r0
 800b43c:	50a3      	str	r3, [r4, r2]
 800b43e:	e7c9      	b.n	800b3d4 <_malloc_r+0x20>
 800b440:	4622      	mov	r2, r4
 800b442:	6864      	ldr	r4, [r4, #4]
 800b444:	e7cc      	b.n	800b3e0 <_malloc_r+0x2c>
 800b446:	1cc4      	adds	r4, r0, #3
 800b448:	f024 0403 	bic.w	r4, r4, #3
 800b44c:	42a0      	cmp	r0, r4
 800b44e:	d0e3      	beq.n	800b418 <_malloc_r+0x64>
 800b450:	1a21      	subs	r1, r4, r0
 800b452:	4630      	mov	r0, r6
 800b454:	f000 f82e 	bl	800b4b4 <_sbrk_r>
 800b458:	3001      	adds	r0, #1
 800b45a:	d1dd      	bne.n	800b418 <_malloc_r+0x64>
 800b45c:	e7cf      	b.n	800b3fe <_malloc_r+0x4a>
 800b45e:	bf00      	nop
 800b460:	20001be4 	.word	0x20001be4
 800b464:	20001be8 	.word	0x20001be8

0800b468 <_realloc_r>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	4607      	mov	r7, r0
 800b46c:	4614      	mov	r4, r2
 800b46e:	460e      	mov	r6, r1
 800b470:	b921      	cbnz	r1, 800b47c <_realloc_r+0x14>
 800b472:	4611      	mov	r1, r2
 800b474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b478:	f7ff bf9c 	b.w	800b3b4 <_malloc_r>
 800b47c:	b922      	cbnz	r2, 800b488 <_realloc_r+0x20>
 800b47e:	f7ff ff4d 	bl	800b31c <_free_r>
 800b482:	4625      	mov	r5, r4
 800b484:	4628      	mov	r0, r5
 800b486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b488:	f000 f830 	bl	800b4ec <_malloc_usable_size_r>
 800b48c:	42a0      	cmp	r0, r4
 800b48e:	d20f      	bcs.n	800b4b0 <_realloc_r+0x48>
 800b490:	4621      	mov	r1, r4
 800b492:	4638      	mov	r0, r7
 800b494:	f7ff ff8e 	bl	800b3b4 <_malloc_r>
 800b498:	4605      	mov	r5, r0
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d0f2      	beq.n	800b484 <_realloc_r+0x1c>
 800b49e:	4631      	mov	r1, r6
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	f7ff fbd7 	bl	800ac54 <memcpy>
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ff37 	bl	800b31c <_free_r>
 800b4ae:	e7e9      	b.n	800b484 <_realloc_r+0x1c>
 800b4b0:	4635      	mov	r5, r6
 800b4b2:	e7e7      	b.n	800b484 <_realloc_r+0x1c>

0800b4b4 <_sbrk_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4d05      	ldr	r5, [pc, #20]	; (800b4d0 <_sbrk_r+0x1c>)
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4608      	mov	r0, r1
 800b4be:	602b      	str	r3, [r5, #0]
 800b4c0:	f7f5 f9f8 	bl	80008b4 <_sbrk>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d102      	bne.n	800b4ce <_sbrk_r+0x1a>
 800b4c8:	682b      	ldr	r3, [r5, #0]
 800b4ca:	b103      	cbz	r3, 800b4ce <_sbrk_r+0x1a>
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	bd38      	pop	{r3, r4, r5, pc}
 800b4d0:	20003328 	.word	0x20003328

0800b4d4 <__malloc_lock>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	; (800b4dc <__malloc_lock+0x8>)
 800b4d6:	f000 b811 	b.w	800b4fc <__retarget_lock_acquire_recursive>
 800b4da:	bf00      	nop
 800b4dc:	20003330 	.word	0x20003330

0800b4e0 <__malloc_unlock>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__malloc_unlock+0x8>)
 800b4e2:	f000 b80c 	b.w	800b4fe <__retarget_lock_release_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	20003330 	.word	0x20003330

0800b4ec <_malloc_usable_size_r>:
 800b4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f0:	1f18      	subs	r0, r3, #4
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	bfbc      	itt	lt
 800b4f6:	580b      	ldrlt	r3, [r1, r0]
 800b4f8:	18c0      	addlt	r0, r0, r3
 800b4fa:	4770      	bx	lr

0800b4fc <__retarget_lock_acquire_recursive>:
 800b4fc:	4770      	bx	lr

0800b4fe <__retarget_lock_release_recursive>:
 800b4fe:	4770      	bx	lr

0800b500 <_init>:
 800b500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b502:	bf00      	nop
 800b504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b506:	bc08      	pop	{r3}
 800b508:	469e      	mov	lr, r3
 800b50a:	4770      	bx	lr

0800b50c <_fini>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr
