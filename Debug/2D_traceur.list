
2D_traceur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af20  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b104  0800b104  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800b104  0800b104  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b104  0800b104  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031bc  20000180  0800b28c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000333c  0800b28c  0002333c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026184  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005498  00000000  00000000  0004632d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0004b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0004cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014b38  00000000  00000000  0004e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006de0  00000000  00000000  00062f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00069cf8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d20  00000000  00000000  00069d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b018 	.word	0x0800b018

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800b018 	.word	0x0800b018

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000019c 	.word	0x2000019c
 800018c:	200001f0 	.word	0x200001f0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08e      	sub	sp, #56	; 0x38
 8000194:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fc9d 	bl	8000ad4 <HAL_Init>
  SystemClock_Config();
 800019a:	f000 f845 	bl	8000228 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f961 	bl	8000464 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f89b 	bl	80002dc <MX_TIM2_Init>
  MX_TIM4_Init();
 80001a6:	f000 f90f 	bl	80003c8 <MX_TIM4_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  Com_Init();
 80001aa:	f00a f889 	bl	800a2c0 <Com_Init>
  Servo_Init(&servo, &htim2);
 80001ae:	4918      	ldr	r1, [pc, #96]	; (8000210 <main+0x80>)
 80001b0:	4818      	ldr	r0, [pc, #96]	; (8000214 <main+0x84>)
 80001b2:	f009 ff50 	bl	800a056 <Servo_Init>
  G_Code_Init();
 80001b6:	f00a f90b 	bl	800a3d0 <G_Code_Init>
  /* USER CODE END RTOS_QUEUES */
  HAL_Delay(10);
 80001ba:	200a      	movs	r0, #10
 80001bc:	f000 fcbc 	bl	8000b38 <HAL_Delay>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x88>)
 80001c2:	f107 041c 	add.w	r4, r7, #28
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(ComTask, StartComTask, osPriorityNormal, 0, 256);
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <main+0x8c>)
 80001d6:	463c      	mov	r4, r7
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 fe1a 	bl	8007e26 <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <main+0x90>)
 80001f6:	6013      	str	r3, [r2, #0]
  ComTaskHandle = osThreadCreate(osThread(ComTask), NULL); // every 20ms
 80001f8:	463b      	mov	r3, r7
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f007 fe12 	bl	8007e26 <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0x94>)
 8000206:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 8000208:	f007 fe06 	bl	8007e18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x7c>
 800020e:	bf00      	nop
 8000210:	200023ec 	.word	0x200023ec
 8000214:	200023e0 	.word	0x200023e0
 8000218:	0800b044 	.word	0x0800b044
 800021c:	0800b060 	.word	0x0800b060
 8000220:	20001b78 	.word	0x20001b78
 8000224:	200023e8 	.word	0x200023e8

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f00a fee6 	bl	800b008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fc9a 	bl	8002bb8 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 fac5 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 ff04 	bl	80030b8 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 faaf 	bl	8000818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ba:	2310      	movs	r3, #16
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 f8a1 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d0:	f000 faa2 	bl	8000818 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0320 	add.w	r3, r7, #32
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000314:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000316:	228f      	movs	r2, #143	; 0x8f
 8000318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000322:	f242 7210 	movw	r2, #10000	; 0x2710
 8000326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000334:	4823      	ldr	r0, [pc, #140]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000336:	f003 f91f 	bl	8003578 <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000340:	f000 fa6a 	bl	8000818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4619      	mov	r1, r3
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000352:	f003 fca5 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800035c:	f000 fa5c 	bl	8000818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000362:	f003 f9d9 	bl	8003718 <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800036c:	f000 fa54 	bl	8000818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000380:	f004 f81e 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800038a:	f000 fa45 	bl	8000818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000392:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000396:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	4619      	mov	r1, r3
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003a8:	f003 fbb8 	bl	8003b1c <HAL_TIM_PWM_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003b2:	f000 fa31 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003b8:	f000 faa4 	bl	8000904 <HAL_TIM_MspPostInit>

}
 80003bc:	bf00      	nop
 80003be:	3738      	adds	r7, #56	; 0x38
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	200023ec 	.word	0x200023ec

080003c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM4_Init+0x94>)
 80003e6:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <MX_TIM4_Init+0x98>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;//64-1;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM4_Init+0x94>)
 80003ec:	2207      	movs	r2, #7
 80003ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM4_Init+0x94>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;//11250;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_TIM4_Init+0x94>)
 80003f8:	f242 3228 	movw	r2, #9000	; 0x2328
 80003fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_TIM4_Init+0x94>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_TIM4_Init+0x94>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_TIM4_Init+0x94>)
 800040c:	f003 f8b4 	bl	8003578 <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000416:	f000 f9ff 	bl	8000818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	; (800045c <MX_TIM4_Init+0x94>)
 8000428:	f003 fc3a 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f9f1 	bl	8000818 <Error_Handler>
  }
  //if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 // {
    //Error_Handler();
  //}
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_TIM4_Init+0x94>)
 8000444:	f003 ffbc 	bl	80043c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800044e:	f000 f9e3 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20001b80 	.word	0x20001b80
 8000460:	40000800 	.word	0x40000800

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b40      	ldr	r3, [pc, #256]	; (800057c <MX_GPIO_Init+0x118>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a3f      	ldr	r2, [pc, #252]	; (800057c <MX_GPIO_Init+0x118>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b3d      	ldr	r3, [pc, #244]	; (800057c <MX_GPIO_Init+0x118>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b3a      	ldr	r3, [pc, #232]	; (800057c <MX_GPIO_Init+0x118>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <MX_GPIO_Init+0x118>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <MX_GPIO_Init+0x118>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_GPIO_Init+0x118>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a33      	ldr	r2, [pc, #204]	; (800057c <MX_GPIO_Init+0x118>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <MX_GPIO_Init+0x118>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b2e      	ldr	r3, [pc, #184]	; (800057c <MX_GPIO_Init+0x118>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a2d      	ldr	r2, [pc, #180]	; (800057c <MX_GPIO_Init+0x118>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b2b      	ldr	r3, [pc, #172]	; (800057c <MX_GPIO_Init+0x118>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_13, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80004de:	4828      	ldr	r0, [pc, #160]	; (8000580 <MX_GPIO_Init+0x11c>)
 80004e0:	f000 fdc9 	bl	8001076 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004e4:	2200      	movs	r2, #0
 80004e6:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <MX_GPIO_Init+0x120>)
 80004ec:	f000 fdc3 	bl	8001076 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004f0:	2200      	movs	r2, #0
 80004f2:	f248 31f8 	movw	r1, #33784	; 0x83f8
 80004f6:	4824      	ldr	r0, [pc, #144]	; (8000588 <MX_GPIO_Init+0x124>)
 80004f8:	f000 fdbd 	bl	8001076 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80004fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <MX_GPIO_Init+0x11c>)
 8000516:	f000 fc13 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 PB15 */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11;
 800051a:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2302      	movs	r3, #2
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <MX_GPIO_Init+0x124>)
 8000534:	f000 fc04 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000538:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800053c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <MX_GPIO_Init+0x120>)
 8000552:	f000 fbf5 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000556:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800055a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_GPIO_Init+0x124>)
 8000570:	f000 fbe6 	bl	8000d40 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	40011000 	.word	0x40011000
 8000584:	40010800 	.word	0x40010800
 8000588:	40010c00 	.word	0x40010c00

0800058c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint8_t timflag = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  uint8_t test = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	73bb      	strb	r3, [r7, #14]
  uint8_t steptoggle = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	737b      	strb	r3, [r7, #13]
  cnc_init();
 80005a0:	f009 fce6 	bl	8009f70 <cnc_init>

  for(;;)
  {

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET && timflag == 0){
 80005a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a8:	4877      	ldr	r0, [pc, #476]	; (8000788 <StartDefaultTask+0x1fc>)
 80005aa:	f000 fd4d 	bl	8001048 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d109      	bne.n	80005c8 <StartDefaultTask+0x3c>
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d106      	bne.n	80005c8 <StartDefaultTask+0x3c>

		  timflag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
		  steptoggle = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	737b      	strb	r3, [r7, #13]
		  test++ ;
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	3301      	adds	r3, #1
 80005c6:	73bb      	strb	r3, [r7, #14]
		  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_SET && timflag == 1){
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	486e      	ldr	r0, [pc, #440]	; (8000788 <StartDefaultTask+0x1fc>)
 80005ce:	f000 fd3b 	bl	8001048 <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d104      	bne.n	80005e2 <StartDefaultTask+0x56>
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d101      	bne.n	80005e2 <StartDefaultTask+0x56>
	  		  timflag = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
	  		  }

	  if (test == 1 && steptoggle == 0 && Motor1.Status == ST_OFF && Motor2.Status == ST_OFF){
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d12f      	bne.n	8000648 <StartDefaultTask+0xbc>
 80005e8:	7b7b      	ldrb	r3, [r7, #13]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d12c      	bne.n	8000648 <StartDefaultTask+0xbc>
 80005ee:	4b67      	ldr	r3, [pc, #412]	; (800078c <StartDefaultTask+0x200>)
 80005f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d127      	bne.n	8000648 <StartDefaultTask+0xbc>
 80005f8:	4b65      	ldr	r3, [pc, #404]	; (8000790 <StartDefaultTask+0x204>)
 80005fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d122      	bne.n	8000648 <StartDefaultTask+0xbc>
		  Motor1.Conf.DIR = 1;
 8000602:	4b62      	ldr	r3, [pc, #392]	; (800078c <StartDefaultTask+0x200>)
 8000604:	2201      	movs	r2, #1
 8000606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  Motor2.Conf.DIR = 0;
 800060a:	4b61      	ldr	r3, [pc, #388]	; (8000790 <StartDefaultTask+0x204>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  StM_Conf_Init(&Motor1);
 8000612:	485e      	ldr	r0, [pc, #376]	; (800078c <StartDefaultTask+0x200>)
 8000614:	f009 fdd8 	bl	800a1c8 <StM_Conf_Init>
		  StM_Conf_Init(&Motor2);
 8000618:	485d      	ldr	r0, [pc, #372]	; (8000790 <StartDefaultTask+0x204>)
 800061a:	f009 fdd5 	bl	800a1c8 <StM_Conf_Init>

		  GoToStep(&Motor1,100,10);
 800061e:	220a      	movs	r2, #10
 8000620:	2164      	movs	r1, #100	; 0x64
 8000622:	485a      	ldr	r0, [pc, #360]	; (800078c <StartDefaultTask+0x200>)
 8000624:	f009 fe12 	bl	800a24c <GoToStep>
		  GoToStep(&Motor2,100,10);
 8000628:	220a      	movs	r2, #10
 800062a:	2164      	movs	r1, #100	; 0x64
 800062c:	4858      	ldr	r0, [pc, #352]	; (8000790 <StartDefaultTask+0x204>)
 800062e:	f009 fe0d 	bl	800a24c <GoToStep>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	4857      	ldr	r0, [pc, #348]	; (8000794 <StartDefaultTask+0x208>)
 8000638:	f000 fd35 	bl	80010a6 <HAL_GPIO_TogglePin>
		  HAL_TIM_Base_Start_IT(&htim4);
 800063c:	4856      	ldr	r0, [pc, #344]	; (8000798 <StartDefaultTask+0x20c>)
 800063e:	f002 ffeb 	bl	8003618 <HAL_TIM_Base_Start_IT>
		  steptoggle = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	737b      	strb	r3, [r7, #13]
 8000646:	e09e      	b.n	8000786 <StartDefaultTask+0x1fa>
	  }else if (test == 2 && steptoggle == 0 && Motor1.Status == ST_OFF && Motor2.Status == ST_OFF){
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	2b02      	cmp	r3, #2
 800064c:	d12f      	bne.n	80006ae <StartDefaultTask+0x122>
 800064e:	7b7b      	ldrb	r3, [r7, #13]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d12c      	bne.n	80006ae <StartDefaultTask+0x122>
 8000654:	4b4d      	ldr	r3, [pc, #308]	; (800078c <StartDefaultTask+0x200>)
 8000656:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800065a:	2b00      	cmp	r3, #0
 800065c:	d127      	bne.n	80006ae <StartDefaultTask+0x122>
 800065e:	4b4c      	ldr	r3, [pc, #304]	; (8000790 <StartDefaultTask+0x204>)
 8000660:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000664:	2b00      	cmp	r3, #0
 8000666:	d122      	bne.n	80006ae <StartDefaultTask+0x122>
		  Motor1.Conf.DIR = 0;
 8000668:	4b48      	ldr	r3, [pc, #288]	; (800078c <StartDefaultTask+0x200>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  Motor2.Conf.DIR = 1;
 8000670:	4b47      	ldr	r3, [pc, #284]	; (8000790 <StartDefaultTask+0x204>)
 8000672:	2201      	movs	r2, #1
 8000674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  StM_Conf_Init(&Motor1);
 8000678:	4844      	ldr	r0, [pc, #272]	; (800078c <StartDefaultTask+0x200>)
 800067a:	f009 fda5 	bl	800a1c8 <StM_Conf_Init>
		  StM_Conf_Init(&Motor2);
 800067e:	4844      	ldr	r0, [pc, #272]	; (8000790 <StartDefaultTask+0x204>)
 8000680:	f009 fda2 	bl	800a1c8 <StM_Conf_Init>

		  GoToStep(&Motor1,100,10);
 8000684:	220a      	movs	r2, #10
 8000686:	2164      	movs	r1, #100	; 0x64
 8000688:	4840      	ldr	r0, [pc, #256]	; (800078c <StartDefaultTask+0x200>)
 800068a:	f009 fddf 	bl	800a24c <GoToStep>
		  GoToStep(&Motor2,100,10);
 800068e:	220a      	movs	r2, #10
 8000690:	2164      	movs	r1, #100	; 0x64
 8000692:	483f      	ldr	r0, [pc, #252]	; (8000790 <StartDefaultTask+0x204>)
 8000694:	f009 fdda 	bl	800a24c <GoToStep>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	483d      	ldr	r0, [pc, #244]	; (8000794 <StartDefaultTask+0x208>)
 800069e:	f000 fd02 	bl	80010a6 <HAL_GPIO_TogglePin>
		  HAL_TIM_Base_Start_IT(&htim4);
 80006a2:	483d      	ldr	r0, [pc, #244]	; (8000798 <StartDefaultTask+0x20c>)
 80006a4:	f002 ffb8 	bl	8003618 <HAL_TIM_Base_Start_IT>
		  steptoggle = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	737b      	strb	r3, [r7, #13]
 80006ac:	e06b      	b.n	8000786 <StartDefaultTask+0x1fa>
	  }else if (test == 3 && steptoggle == 0 && Motor1.Status == ST_OFF && Motor2.Status == ST_OFF){
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d12f      	bne.n	8000714 <StartDefaultTask+0x188>
 80006b4:	7b7b      	ldrb	r3, [r7, #13]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d12c      	bne.n	8000714 <StartDefaultTask+0x188>
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <StartDefaultTask+0x200>)
 80006bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d127      	bne.n	8000714 <StartDefaultTask+0x188>
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <StartDefaultTask+0x204>)
 80006c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d122      	bne.n	8000714 <StartDefaultTask+0x188>
		  Motor1.Conf.DIR = 0;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <StartDefaultTask+0x200>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  Motor2.Conf.DIR = 0;
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <StartDefaultTask+0x204>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  StM_Conf_Init(&Motor1);
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <StartDefaultTask+0x200>)
 80006e0:	f009 fd72 	bl	800a1c8 <StM_Conf_Init>
		  StM_Conf_Init(&Motor2);
 80006e4:	482a      	ldr	r0, [pc, #168]	; (8000790 <StartDefaultTask+0x204>)
 80006e6:	f009 fd6f 	bl	800a1c8 <StM_Conf_Init>

		  GoToStep(&Motor1,100,10);
 80006ea:	220a      	movs	r2, #10
 80006ec:	2164      	movs	r1, #100	; 0x64
 80006ee:	4827      	ldr	r0, [pc, #156]	; (800078c <StartDefaultTask+0x200>)
 80006f0:	f009 fdac 	bl	800a24c <GoToStep>
		  GoToStep(&Motor2,100,10);
 80006f4:	220a      	movs	r2, #10
 80006f6:	2164      	movs	r1, #100	; 0x64
 80006f8:	4825      	ldr	r0, [pc, #148]	; (8000790 <StartDefaultTask+0x204>)
 80006fa:	f009 fda7 	bl	800a24c <GoToStep>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000702:	4824      	ldr	r0, [pc, #144]	; (8000794 <StartDefaultTask+0x208>)
 8000704:	f000 fccf 	bl	80010a6 <HAL_GPIO_TogglePin>
		  HAL_TIM_Base_Start_IT(&htim4);
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <StartDefaultTask+0x20c>)
 800070a:	f002 ff85 	bl	8003618 <HAL_TIM_Base_Start_IT>
		  steptoggle = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	737b      	strb	r3, [r7, #13]
 8000712:	e038      	b.n	8000786 <StartDefaultTask+0x1fa>
	  }else if (test == 4 && steptoggle == 0 && Motor1.Status == ST_OFF && Motor2.Status == ST_OFF){
 8000714:	7bbb      	ldrb	r3, [r7, #14]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d12f      	bne.n	800077a <StartDefaultTask+0x1ee>
 800071a:	7b7b      	ldrb	r3, [r7, #13]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d12c      	bne.n	800077a <StartDefaultTask+0x1ee>
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <StartDefaultTask+0x200>)
 8000722:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000726:	2b00      	cmp	r3, #0
 8000728:	d127      	bne.n	800077a <StartDefaultTask+0x1ee>
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <StartDefaultTask+0x204>)
 800072c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000730:	2b00      	cmp	r3, #0
 8000732:	d122      	bne.n	800077a <StartDefaultTask+0x1ee>

		  Motor1.Conf.DIR = 1;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <StartDefaultTask+0x200>)
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  Motor2.Conf.DIR = 1;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <StartDefaultTask+0x204>)
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		  StM_Conf_Init(&Motor1);
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <StartDefaultTask+0x200>)
 8000746:	f009 fd3f 	bl	800a1c8 <StM_Conf_Init>
		  StM_Conf_Init(&Motor2);
 800074a:	4811      	ldr	r0, [pc, #68]	; (8000790 <StartDefaultTask+0x204>)
 800074c:	f009 fd3c 	bl	800a1c8 <StM_Conf_Init>

		  GoToStep(&Motor1,100,10);
 8000750:	220a      	movs	r2, #10
 8000752:	2164      	movs	r1, #100	; 0x64
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <StartDefaultTask+0x200>)
 8000756:	f009 fd79 	bl	800a24c <GoToStep>
		  GoToStep(&Motor2,100,10);
 800075a:	220a      	movs	r2, #10
 800075c:	2164      	movs	r1, #100	; 0x64
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <StartDefaultTask+0x204>)
 8000760:	f009 fd74 	bl	800a24c <GoToStep>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <StartDefaultTask+0x208>)
 800076a:	f000 fc9c 	bl	80010a6 <HAL_GPIO_TogglePin>
		  HAL_TIM_Base_Start_IT(&htim4);
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <StartDefaultTask+0x20c>)
 8000770:	f002 ff52 	bl	8003618 <HAL_TIM_Base_Start_IT>
		  steptoggle = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	737b      	strb	r3, [r7, #13]
 8000778:	e005      	b.n	8000786 <StartDefaultTask+0x1fa>
	  }else if (test == 5) {
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	2b05      	cmp	r3, #5
 800077e:	f47f af11 	bne.w	80005a4 <StartDefaultTask+0x18>
		  test = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	73bb      	strb	r3, [r7, #14]
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET && timflag == 0){
 8000786:	e70d      	b.n	80005a4 <StartDefaultTask+0x18>
 8000788:	40010c00 	.word	0x40010c00
 800078c:	200026d0 	.word	0x200026d0
 8000790:	20002100 	.word	0x20002100
 8000794:	40011000 	.word	0x40011000
 8000798:	20001b80 	.word	0x20001b80

0800079c <StartComTask>:
  * @brief  Function implementing the ComTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Header_StartComTask */
void StartComTask(void const * argument){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

	for(;;)
	  {

			osDelay(20);
 80007a4:	2014      	movs	r0, #20
 80007a6:	f007 fb8a 	bl	8007ebe <osDelay>
			Com_Transmit();
 80007aa:	f009 fda1 	bl	800a2f0 <Com_Transmit>
			Com_Receive();
 80007ae:	f009 fdc7 	bl	800a340 <Com_Receive>
			osDelay(20);
 80007b2:	e7f7      	b.n	80007a4 <StartComTask+0x8>

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c6:	f000 f99b 	bl	8000b00 <HAL_IncTick>
  }
  if (htim->Instance == TIM4) {
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d112      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x46>
	  cnc_DriveM(&Motor1);
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007d6:	f009 fc19 	bl	800a00c <cnc_DriveM>
	  cnc_DriveM(&Motor2);
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007dc:	f009 fc16 	bl	800a00c <cnc_DriveM>
	  if (Motor1.Status == ST_OFF && Motor2.Status == ST_OFF)
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d107      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x46>
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x46>
		  HAL_TIM_Base_Stop_IT(&htim4);
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007f6:	f002 ff61 	bl	80036bc <HAL_TIM_Base_Stop_IT>
	  }

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40000400 	.word	0x40000400
 8000808:	40000800 	.word	0x40000800
 800080c:	200026d0 	.word	0x200026d0
 8000810:	20002100 	.word	0x20002100
 8000814:	20001b80 	.word	0x20001b80

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_MspInit+0x68>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_MspInit+0x68>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_MspInit+0x68>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x68>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <HAL_MspInit+0x68>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x68>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fa42 	bl	8000cea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_MspInit+0x6c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_MspInit+0x6c>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000

08000894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008a4:	d10c      	bne.n	80008c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
    }

}
 80008be:	e018      	b.n	80008f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_TIM_Base_MspInit+0x6c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d113      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x5e>
      __HAL_RCC_TIM4_CLK_ENABLE();
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_TIM_Base_MspInit+0x68>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2105      	movs	r1, #5
 80008e6:	201e      	movs	r0, #30
 80008e8:	f000 f9ff 	bl	8000cea <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008ec:	201e      	movs	r0, #30
 80008ee:	f000 fa18 	bl	8000d22 <HAL_NVIC_EnableIRQ>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	40000800 	.word	0x40000800

08000904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000922:	d117      	bne.n	8000954 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_TIM_MspPostInit+0x58>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <HAL_TIM_MspPostInit+0x58>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_MspPostInit+0x58>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093c:	2301      	movs	r3, #1
 800093e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <HAL_TIM_MspPostInit+0x5c>)
 8000950:	f000 f9f6 	bl	8000d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	201d      	movs	r0, #29
 800097a:	f000 f9b6 	bl	8000cea <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800097e:	201d      	movs	r0, #29
 8000980:	f000 f9cf 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <HAL_InitTick+0xa0>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <HAL_InitTick+0xa0>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_InitTick+0xa0>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800099c:	f107 0210 	add.w	r2, r7, #16
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 fce2 	bl	8003370 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009ac:	f002 fccc 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 80009b0:	4603      	mov	r3, r0
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <HAL_InitTick+0xa4>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0c9b      	lsrs	r3, r3, #18
 80009c0:	3b01      	subs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_InitTick+0xa8>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <HAL_InitTick+0xac>)
 80009c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_InitTick+0xa8>)
 80009cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_InitTick+0xa8>)
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_InitTick+0xa8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_InitTick+0xa8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <HAL_InitTick+0xa8>)
 80009e6:	f002 fdc7 	bl	8003578 <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d104      	bne.n	80009fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <HAL_InitTick+0xa8>)
 80009f2:	f002 fe11 	bl	8003618 <HAL_TIM_Base_Start_IT>
 80009f6:	4603      	mov	r3, r0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	20002714 	.word	0x20002714
 8000a10:	40000400 	.word	0x40000400

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
	...

08000a40 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a46:	f000 fc6c 	bl	8001322 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000304c 	.word	0x2000304c

08000a54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <TIM3_IRQHandler+0x10>)
 8000a5a:	f002 ff57 	bl	800390c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20002714 	.word	0x20002714

08000a68 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim4);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM4_IRQHandler+0x10>)
 8000a6e:	f002 ff4d 	bl	800390c <HAL_TIM_IRQHandler>

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20001b80 	.word	0x20001b80

08000a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff fff8 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a8e:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000aa4:	4c09      	ldr	r4, [pc, #36]	; (8000acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f00a fa77 	bl	800afa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab6:	f7ff fb6b 	bl	8000190 <main>
  bx lr
 8000aba:	4770      	bx	lr
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ac4:	0800b10c 	.word	0x0800b10c
  ldr r2, =_sbss
 8000ac8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000acc:	2000333c 	.word	0x2000333c

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x28>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f8f5 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff ff3a 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe98 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40022000 	.word	0x40022000

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	2000275c 	.word	0x2000275c

08000b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	2000275c 	.word	0x2000275c

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff fff0 	bl	8000b24 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffe0 	bl	8000b24 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4906      	ldr	r1, [pc, #24]	; (8000c18 <__NVIC_EnableIRQ+0x34>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff4f 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff64 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ffb2 	bl	8000c70 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff81 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff57 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e169      	b.n	8001028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d54:	2201      	movs	r2, #1
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f040 8158 	bne.w	8001022 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	4a9a      	ldr	r2, [pc, #616]	; (8000fe0 <HAL_GPIO_Init+0x2a0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d05e      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000d7c:	4a98      	ldr	r2, [pc, #608]	; (8000fe0 <HAL_GPIO_Init+0x2a0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d875      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000d82:	4a98      	ldr	r2, [pc, #608]	; (8000fe4 <HAL_GPIO_Init+0x2a4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d058      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000d88:	4a96      	ldr	r2, [pc, #600]	; (8000fe4 <HAL_GPIO_Init+0x2a4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d86f      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000d8e:	4a96      	ldr	r2, [pc, #600]	; (8000fe8 <HAL_GPIO_Init+0x2a8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d052      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000d94:	4a94      	ldr	r2, [pc, #592]	; (8000fe8 <HAL_GPIO_Init+0x2a8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d869      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000d9a:	4a94      	ldr	r2, [pc, #592]	; (8000fec <HAL_GPIO_Init+0x2ac>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d04c      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000da0:	4a92      	ldr	r2, [pc, #584]	; (8000fec <HAL_GPIO_Init+0x2ac>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d863      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000da6:	4a92      	ldr	r2, [pc, #584]	; (8000ff0 <HAL_GPIO_Init+0x2b0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d046      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
 8000dac:	4a90      	ldr	r2, [pc, #576]	; (8000ff0 <HAL_GPIO_Init+0x2b0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d85d      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d82a      	bhi.n	8000e0c <HAL_GPIO_Init+0xcc>
 8000db6:	2b12      	cmp	r3, #18
 8000db8:	d859      	bhi.n	8000e6e <HAL_GPIO_Init+0x12e>
 8000dba:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <HAL_GPIO_Init+0x80>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000e3b 	.word	0x08000e3b
 8000dc4:	08000e15 	.word	0x08000e15
 8000dc8:	08000e27 	.word	0x08000e27
 8000dcc:	08000e69 	.word	0x08000e69
 8000dd0:	08000e6f 	.word	0x08000e6f
 8000dd4:	08000e6f 	.word	0x08000e6f
 8000dd8:	08000e6f 	.word	0x08000e6f
 8000ddc:	08000e6f 	.word	0x08000e6f
 8000de0:	08000e6f 	.word	0x08000e6f
 8000de4:	08000e6f 	.word	0x08000e6f
 8000de8:	08000e6f 	.word	0x08000e6f
 8000dec:	08000e6f 	.word	0x08000e6f
 8000df0:	08000e6f 	.word	0x08000e6f
 8000df4:	08000e6f 	.word	0x08000e6f
 8000df8:	08000e6f 	.word	0x08000e6f
 8000dfc:	08000e6f 	.word	0x08000e6f
 8000e00:	08000e6f 	.word	0x08000e6f
 8000e04:	08000e1d 	.word	0x08000e1d
 8000e08:	08000e31 	.word	0x08000e31
 8000e0c:	4a79      	ldr	r2, [pc, #484]	; (8000ff4 <HAL_GPIO_Init+0x2b4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e12:	e02c      	b.n	8000e6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e029      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	3304      	adds	r3, #4
 8000e22:	623b      	str	r3, [r7, #32]
          break;
 8000e24:	e024      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	623b      	str	r3, [r7, #32]
          break;
 8000e2e:	e01f      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	330c      	adds	r3, #12
 8000e36:	623b      	str	r3, [r7, #32]
          break;
 8000e38:	e01a      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e42:	2304      	movs	r3, #4
 8000e44:	623b      	str	r3, [r7, #32]
          break;
 8000e46:	e013      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d105      	bne.n	8000e5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e50:	2308      	movs	r3, #8
 8000e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	611a      	str	r2, [r3, #16]
          break;
 8000e5a:	e009      	b.n	8000e70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	615a      	str	r2, [r3, #20]
          break;
 8000e66:	e003      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
          break;
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x130>
          break;
 8000e6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2bff      	cmp	r3, #255	; 0xff
 8000e74:	d801      	bhi.n	8000e7a <HAL_GPIO_Init+0x13a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	e001      	b.n	8000e7e <HAL_GPIO_Init+0x13e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d802      	bhi.n	8000e8c <HAL_GPIO_Init+0x14c>
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x152>
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	3b08      	subs	r3, #8
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	210f      	movs	r1, #15
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	6a39      	ldr	r1, [r7, #32]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	431a      	orrs	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 80b1 	beq.w	8001022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec0:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x2bc>)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a40      	ldr	r2, [pc, #256]	; (8001000 <HAL_GPIO_Init+0x2c0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d013      	beq.n	8000f2c <HAL_GPIO_Init+0x1ec>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3f      	ldr	r2, [pc, #252]	; (8001004 <HAL_GPIO_Init+0x2c4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00d      	beq.n	8000f28 <HAL_GPIO_Init+0x1e8>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <HAL_GPIO_Init+0x2c8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x1e4>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a3d      	ldr	r2, [pc, #244]	; (800100c <HAL_GPIO_Init+0x2cc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d101      	bne.n	8000f20 <HAL_GPIO_Init+0x1e0>
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x1ee>
 8000f20:	2304      	movs	r3, #4
 8000f22:	e004      	b.n	8000f2e <HAL_GPIO_Init+0x1ee>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x1ee>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_GPIO_Init+0x1ee>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f3e:	492f      	ldr	r1, [pc, #188]	; (8000ffc <HAL_GPIO_Init+0x2bc>)
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	492c      	ldr	r1, [pc, #176]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4928      	ldr	r1, [pc, #160]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	4922      	ldr	r1, [pc, #136]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60cb      	str	r3, [r1, #12]
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	491e      	ldr	r1, [pc, #120]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4918      	ldr	r1, [pc, #96]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4914      	ldr	r1, [pc, #80]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d021      	beq.n	8001014 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	490e      	ldr	r1, [pc, #56]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
 8000fdc:	e021      	b.n	8001022 <HAL_GPIO_Init+0x2e2>
 8000fde:	bf00      	nop
 8000fe0:	10320000 	.word	0x10320000
 8000fe4:	10310000 	.word	0x10310000
 8000fe8:	10220000 	.word	0x10220000
 8000fec:	10210000 	.word	0x10210000
 8000ff0:	10120000 	.word	0x10120000
 8000ff4:	10110000 	.word	0x10110000
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40010800 	.word	0x40010800
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40011000 	.word	0x40011000
 800100c:	40011400 	.word	0x40011400
 8001010:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_GPIO_Init+0x304>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	43db      	mvns	r3, r3
 800101c:	4909      	ldr	r1, [pc, #36]	; (8001044 <HAL_GPIO_Init+0x304>)
 800101e:	4013      	ands	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	3301      	adds	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	fa22 f303 	lsr.w	r3, r2, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	f47f ae8e 	bne.w	8000d54 <HAL_GPIO_Init+0x14>
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	372c      	adds	r7, #44	; 0x2c
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e001      	b.n	800106a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	807b      	strh	r3, [r7, #2]
 8001082:	4613      	mov	r3, r2
 8001084:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001086:	787b      	ldrb	r3, [r7, #1]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108c:	887a      	ldrh	r2, [r7, #2]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001092:	e003      	b.n	800109c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	041a      	lsls	r2, r3, #16
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	400b      	ands	r3, r1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	611a      	str	r2, [r3, #16]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af06      	add	r7, sp, #24
 80010de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e0f1      	b.n	80012ce <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f009 fca6 	bl	800aa50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f003 f9eb 	bl	80044ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	687e      	ldr	r6, [r7, #4]
 800111e:	466d      	mov	r5, sp
 8001120:	f106 0410 	add.w	r4, r6, #16
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	602b      	str	r3, [r5, #0]
 800112c:	1d33      	adds	r3, r6, #4
 800112e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f003 f9b5 	bl	80044a0 <USB_CoreInit>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0c2      	b.n	80012ce <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f9e6 	bl	8004520 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e040      	b.n	80011dc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	3301      	adds	r3, #1
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	3303      	adds	r3, #3
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	3338      	adds	r3, #56	; 0x38
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	333c      	adds	r3, #60	; 0x3c
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	3340      	adds	r3, #64	; 0x40
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	3301      	adds	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3b9      	bcc.n	800115a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e044      	b.n	8001276 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	440b      	add	r3, r1
 8001268:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	3301      	adds	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3b5      	bcc.n	80011ec <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	687e      	ldr	r6, [r7, #4]
 8001288:	466d      	mov	r5, sp
 800128a:	f106 0410 	add.w	r4, r6, #16
 800128e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	602b      	str	r3, [r5, #0]
 8001296:	1d33      	adds	r3, r6, #4
 8001298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f003 f94c 	bl	8004538 <USB_DevInit>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2202      	movs	r2, #2
 80012aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00d      	b.n	80012ce <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 f968 	bl	800659c <USB_DevDisconnect>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_PCD_Start+0x16>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e016      	b.n	800131a <HAL_PCD_Start+0x44>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 f8e1 	bl	80044c0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80012fe:	2101      	movs	r1, #1
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f009 fe18 	bl	800af36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f005 f93c 	bl	8006588 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b088      	sub	sp, #32
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f005 f93e 	bl	80065b0 <USB_ReadInterrupts>
 8001334:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fb1d 	bl	8001980 <PCD_EP_ISR_Handler>

    return;
 8001346:	e11b      	b.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134e:	2b00      	cmp	r3, #0
 8001350:	d013      	beq.n	800137a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135a:	b29a      	uxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001364:	b292      	uxth	r2, r2
 8001366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f009 fbeb 	bl	800ab46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001370:	2100      	movs	r1, #0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f907 	bl	8001586 <HAL_PCD_SetAddress>

    return;
 8001378:	e102      	b.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001396:	b292      	uxth	r2, r2
 8001398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800139c:	e0f0      	b.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00c      	beq.n	80013c2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ba:	b292      	uxth	r2, r2
 80013bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013c0:	e0de      	b.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d027      	beq.n	800141c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0204 	bic.w	r2, r2, #4
 80013de:	b292      	uxth	r2, r2
 80013e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0208 	bic.w	r2, r2, #8
 80013f6:	b292      	uxth	r2, r2
 80013f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f009 fbdb 	bl	800abb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800140a:	b29a      	uxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001414:	b292      	uxth	r2, r2
 8001416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800141a:	e0b1      	b.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8085 	beq.w	8001532 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	77fb      	strb	r3, [r7, #31]
 800142c:	e011      	b.n	8001452 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	7ffb      	ldrb	r3, [r7, #31]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	441a      	add	r2, r3
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	8812      	ldrh	r2, [r2, #0]
 800143e:	b292      	uxth	r2, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	f107 0120 	add.w	r1, r7, #32
 8001446:	440b      	add	r3, r1
 8001448:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800144c:	7ffb      	ldrb	r3, [r7, #31]
 800144e:	3301      	adds	r3, #1
 8001450:	77fb      	strb	r3, [r7, #31]
 8001452:	7ffb      	ldrb	r3, [r7, #31]
 8001454:	2b07      	cmp	r3, #7
 8001456:	d9ea      	bls.n	800142e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	b292      	uxth	r2, r2
 800146c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	b292      	uxth	r2, r2
 8001484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001488:	bf00      	nop
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001492:	b29b      	uxth	r3, r3
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f6      	beq.n	800148a <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ae:	b292      	uxth	r2, r2
 80014b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	77fb      	strb	r3, [r7, #31]
 80014b8:	e010      	b.n	80014dc <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	4611      	mov	r1, r2
 80014c2:	7ffa      	ldrb	r2, [r7, #31]
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	440a      	add	r2, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	f107 0120 	add.w	r1, r7, #32
 80014ce:	440b      	add	r3, r1
 80014d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80014d4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	3301      	adds	r3, #1
 80014da:	77fb      	strb	r3, [r7, #31]
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d9eb      	bls.n	80014ba <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0208 	orr.w	r2, r2, #8
 80014f4:	b292      	uxth	r2, r2
 80014f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150c:	b292      	uxth	r2, r2
 800150e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0204 	orr.w	r2, r2, #4
 8001524:	b292      	uxth	r2, r2
 8001526:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f009 fb2a 	bl	800ab84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001530:	e026      	b.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00f      	beq.n	800155c <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800154e:	b292      	uxth	r2, r2
 8001550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f009 fae8 	bl	800ab2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800155a:	e011      	b.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800157e:	bf00      	nop
  }
}
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_PCD_SetAddress+0x1a>
 800159c:	2302      	movs	r3, #2
 800159e:	e013      	b.n	80015c8 <HAL_PCD_SetAddress+0x42>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 ffd2 	bl	8006562 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	803b      	strh	r3, [r7, #0]
 80015e6:	4613      	mov	r3, r2
 80015e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da0e      	bge.n	8001614 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	705a      	strb	r2, [r3, #1]
 8001612:	e00e      	b.n	8001632 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 0207 	and.w	r2, r3, #7
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	b2da      	uxtb	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800163e:	883a      	ldrh	r2, [r7, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	78ba      	ldrb	r2, [r7, #2]
 8001648:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800164a:	78bb      	ldrb	r3, [r7, #2]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d102      	bne.n	8001656 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_PCD_EP_Open+0x94>
 8001660:	2302      	movs	r3, #2
 8001662:	e00e      	b.n	8001682 <HAL_PCD_EP_Open+0xb2>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68f9      	ldr	r1, [r7, #12]
 8001672:	4618      	mov	r0, r3
 8001674:	f002 ff80 	bl	8004578 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001680:	7afb      	ldrb	r3, [r7, #11]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800169a:	2b00      	cmp	r3, #0
 800169c:	da0e      	bge.n	80016bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	705a      	strb	r2, [r3, #1]
 80016ba:	e00e      	b.n	80016da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	f003 0207 	and.w	r2, r3, #7
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_PCD_EP_Close+0x6a>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e00e      	b.n	8001712 <HAL_PCD_EP_Close+0x88>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68f9      	ldr	r1, [r7, #12]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 faf8 	bl	8004cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	460b      	mov	r3, r1
 8001728:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800172a:	7afb      	ldrb	r3, [r7, #11]
 800172c:	f003 0207 	and.w	r2, r3, #7
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2200      	movs	r2, #0
 8001758:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6979      	ldr	r1, [r7, #20]
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fcaf 	bl	80050d0 <USB_EPStartXfer>

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	f003 0207 	and.w	r2, r3, #7
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	460b      	mov	r3, r1
 80017b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2201      	movs	r2, #1
 80017f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6979      	ldr	r1, [r7, #20]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fc61 	bl	80050d0 <USB_EPStartXfer>

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	f003 0207 	and.w	r2, r3, #7
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	d901      	bls.n	8001836 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e04c      	b.n	80018d0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da0e      	bge.n	800185c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	705a      	strb	r2, [r3, #1]
 800185a:	e00c      	b.n	8001876 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	b2da      	uxtb	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_PCD_EP_SetStall+0x7e>
 8001892:	2302      	movs	r3, #2
 8001894:	e01c      	b.n	80018d0 <HAL_PCD_EP_SetStall+0xb8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fd5f 	bl	8006368 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d108      	bne.n	80018c6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f004 fe84 	bl	80065ce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 020f 	and.w	r2, r3, #15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d901      	bls.n	80018f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e040      	b.n	8001978 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da0e      	bge.n	800191c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	705a      	strb	r2, [r3, #1]
 800191a:	e00e      	b.n	800193a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	f003 0207 	and.w	r2, r3, #7
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	b2da      	uxtb	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_PCD_EP_ClrStall+0x82>
 8001956:	2302      	movs	r3, #2
 8001958:	e00e      	b.n	8001978 <HAL_PCD_EP_ClrStall+0xa0>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68f9      	ldr	r1, [r7, #12]
 8001968:	4618      	mov	r0, r3
 800196a:	f004 fd4d 	bl	8006408 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001988:	e3bf      	b.n	800210a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001992:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001996:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80019a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 8179 	bne.w	8001ca0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d152      	bne.n	8001a60 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	81fb      	strh	r3, [r7, #14]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019da:	b29b      	uxth	r3, r3
 80019dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3328      	adds	r3, #40	; 0x28
 80019e2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	3302      	adds	r3, #2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	441a      	add	r2, r3
 8001a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f009 f868 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 836b 	beq.w	800210a <PCD_EP_ISR_Handler+0x78a>
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 8366 	bne.w	800210a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b292      	uxth	r2, r2
 8001a52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a5e:	e354      	b.n	800210a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a66:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d034      	beq.n	8001ae8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	3306      	adds	r3, #6
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f004 fdd6 	bl	800666e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ace:	4013      	ands	r3, r2
 8001ad0:	823b      	strh	r3, [r7, #16]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	8a3a      	ldrh	r2, [r7, #16]
 8001ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001adc:	b292      	uxth	r2, r2
 8001ade:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f008 ffdb 	bl	800aa9c <HAL_PCD_SetupStageCallback>
 8001ae6:	e310      	b.n	800210a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f280 830c 	bge.w	800210a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001afe:	4013      	ands	r3, r2
 8001b00:	83fb      	strh	r3, [r7, #30]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	8bfa      	ldrh	r2, [r7, #30]
 8001b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	3306      	adds	r3, #6
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d019      	beq.n	8001b78 <PCD_EP_ISR_Handler+0x1f8>
 8001b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d015      	beq.n	8001b78 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b52:	6959      	ldr	r1, [r3, #20]
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	f004 fd86 	bl	800666e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	441a      	add	r2, r3
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b70:	2100      	movs	r1, #0
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f008 ffa4 	bl	800aac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 82bd 	bne.w	800210a <PCD_EP_ISR_Handler+0x78a>
 8001b90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b94:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001b9c:	f000 82b5 	beq.w	800210a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	801a      	strh	r2, [r3, #0]
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd6:	d91d      	bls.n	8001c14 <PCD_EP_ISR_Handler+0x294>
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
 8001be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <PCD_EP_ISR_Handler+0x272>
 8001bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	e026      	b.n	8001c62 <PCD_EP_ISR_Handler+0x2e2>
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10a      	bne.n	8001c32 <PCD_EP_ISR_Handler+0x2b2>
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	e017      	b.n	8001c62 <PCD_EP_ISR_Handler+0x2e2>
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <PCD_EP_ISR_Handler+0x2cc>
 8001c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c48:	3301      	adds	r3, #1
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c72:	827b      	strh	r3, [r7, #18]
 8001c74:	8a7b      	ldrh	r3, [r7, #18]
 8001c76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c7a:	827b      	strh	r3, [r7, #18]
 8001c7c:	8a7b      	ldrh	r3, [r7, #18]
 8001c7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c82:	827b      	strh	r3, [r7, #18]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	8a7b      	ldrh	r3, [r7, #18]
 8001c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	8013      	strh	r3, [r2, #0]
 8001c9e:	e234      	b.n	800210a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cb4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f280 80fc 	bge.w	8001eb6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001cec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cf4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	7b1b      	ldrb	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d125      	bne.n	8001d5e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	3306      	adds	r3, #6
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001d3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8092 	beq.w	8001e6c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4e:	6959      	ldr	r1, [r3, #20]
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	88da      	ldrh	r2, [r3, #6]
 8001d54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d58:	f004 fc89 	bl	800666e <USB_ReadPMA>
 8001d5c:	e086      	b.n	8001e6c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d60:	78db      	ldrb	r3, [r3, #3]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d10a      	bne.n	8001d7c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f9d9 	bl	8002126 <HAL_PCD_EP_DB_Receive>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001d7a:	e077      	b.n	8001e6c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	441a      	add	r2, r3
 8001da8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d024      	beq.n	8001e24 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	3302      	adds	r3, #2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d02e      	beq.n	8001e6c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e14:	6959      	ldr	r1, [r3, #20]
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	891a      	ldrh	r2, [r3, #8]
 8001e1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e1e:	f004 fc26 	bl	800666e <USB_ReadPMA>
 8001e22:	e023      	b.n	8001e6c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	3306      	adds	r3, #6
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5e:	6959      	ldr	r1, [r3, #20]
 8001e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e62:	895a      	ldrh	r2, [r3, #10]
 8001e64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e68:	f004 fc01 	bl	800666e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e74:	441a      	add	r2, r3
 8001e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e82:	441a      	add	r2, r3
 8001e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e86:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <PCD_EP_ISR_Handler+0x51c>
 8001e90:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d206      	bcs.n	8001eaa <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f008 fe0c 	bl	800aac0 <HAL_PCD_DataOutStageCallback>
 8001ea8:	e005      	b.n	8001eb6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 f90d 	bl	80050d0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001eb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8123 	beq.w	800210a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ec4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	441a      	add	r2, r3
 8001f04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f16:	78db      	ldrb	r3, [r3, #3]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f040 80a2 	bne.w	8002062 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	7b1b      	ldrb	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8093 	beq.w	8002054 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d046      	beq.n	8001fc8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d126      	bne.n	8001f90 <PCD_EP_ISR_Handler+0x610>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	4413      	add	r3, r2
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	011a      	lsls	r2, r3, #4
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	4413      	add	r3, r2
 8001f64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	801a      	strh	r2, [r3, #0]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	801a      	strh	r2, [r3, #0]
 8001f8e:	e061      	b.n	8002054 <PCD_EP_ISR_Handler+0x6d4>
 8001f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d15d      	bne.n	8002054 <PCD_EP_ISR_Handler+0x6d4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fac:	4413      	add	r3, r2
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	011a      	lsls	r2, r3, #4
 8001fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb8:	4413      	add	r3, r2
 8001fba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	e045      	b.n	8002054 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d126      	bne.n	8002024 <PCD_EP_ISR_Handler+0x6a4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fea:	4413      	add	r3, r2
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
 8001fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	011a      	lsls	r2, r3, #4
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002008:	b29a      	uxth	r2, r3
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201c:	b29a      	uxth	r2, r3
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	e017      	b.n	8002054 <PCD_EP_ISR_Handler+0x6d4>
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d113      	bne.n	8002054 <PCD_EP_ISR_Handler+0x6d4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203a:	4413      	add	r3, r2
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	011a      	lsls	r2, r3, #4
 8002044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002046:	4413      	add	r3, r2
 8002048:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
 800204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002050:	2200      	movs	r2, #0
 8002052:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f008 fd4b 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
 8002060:	e053      	b.n	800210a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002062:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d146      	bne.n	80020fc <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	3302      	adds	r3, #2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	4413      	add	r3, r2
 800208c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d907      	bls.n	80020b6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	619a      	str	r2, [r3, #24]
 80020b4:	e002      	b.n	80020bc <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80020b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f008 fd13 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
 80020d0:	e01b      	b.n	800210a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80020d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020da:	441a      	add	r2, r3
 80020dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020de:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80020e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020e8:	441a      	add	r2, r3
 80020ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 ffeb 	bl	80050d0 <USB_EPStartXfer>
 80020fa:	e006      	b.n	800210a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002100:	461a      	mov	r2, r3
 8002102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f91b 	bl	8002340 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21b      	sxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f6ff ac37 	blt.w	800198a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3758      	adds	r7, #88	; 0x58
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d07e      	beq.n	800223c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	3302      	adds	r3, #2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002166:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	8b7b      	ldrh	r3, [r7, #26]
 800216e:	429a      	cmp	r2, r3
 8002170:	d306      	bcc.n	8002180 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	8b7b      	ldrh	r3, [r7, #26]
 8002178:	1ad2      	subs	r2, r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	619a      	str	r2, [r3, #24]
 800217e:	e002      	b.n	8002186 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d123      	bne.n	80021d6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	833b      	strh	r3, [r7, #24]
 80021aa:	8b3b      	ldrh	r3, [r7, #24]
 80021ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021b0:	833b      	strh	r3, [r7, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	441a      	add	r2, r3
 80021c0:	8b3b      	ldrh	r3, [r7, #24]
 80021c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01f      	beq.n	8002220 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	82fb      	strh	r3, [r7, #22]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	8afb      	ldrh	r3, [r7, #22]
 800220c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002218:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800221c:	b29b      	uxth	r3, r3
 800221e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002220:	8b7b      	ldrh	r3, [r7, #26]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8087 	beq.w	8002336 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6959      	ldr	r1, [r3, #20]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	891a      	ldrh	r2, [r3, #8]
 8002234:	8b7b      	ldrh	r3, [r7, #26]
 8002236:	f004 fa1a 	bl	800666e <USB_ReadPMA>
 800223a:	e07c      	b.n	8002336 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002244:	b29b      	uxth	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	3306      	adds	r3, #6
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002264:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	8b7b      	ldrh	r3, [r7, #26]
 800226c:	429a      	cmp	r2, r3
 800226e:	d306      	bcc.n	800227e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	8b7b      	ldrh	r3, [r7, #26]
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	619a      	str	r2, [r3, #24]
 800227c:	e002      	b.n	8002284 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d123      	bne.n	80022d4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	83fb      	strh	r3, [r7, #30]
 80022a8:	8bfb      	ldrh	r3, [r7, #30]
 80022aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022ae:	83fb      	strh	r3, [r7, #30]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	8bfb      	ldrh	r3, [r7, #30]
 80022c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11f      	bne.n	800231e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f8:	83bb      	strh	r3, [r7, #28]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	441a      	add	r2, r3
 8002308:	8bbb      	ldrh	r3, [r7, #28]
 800230a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002316:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800231a:	b29b      	uxth	r3, r3
 800231c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800231e:	8b7b      	ldrh	r3, [r7, #26]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	6959      	ldr	r1, [r3, #20]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	895a      	ldrh	r2, [r3, #10]
 8002330:	8b7b      	ldrh	r3, [r7, #26]
 8002332:	f004 f99c 	bl	800666e <USB_ReadPMA>
    }
  }

  return count;
 8002336:	8b7b      	ldrh	r3, [r7, #26]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0a4      	sub	sp, #144	; 0x90
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 81dd 	beq.w	8002714 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	3302      	adds	r3, #2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002382:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800238e:	429a      	cmp	r2, r3
 8002390:	d907      	bls.n	80023a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	619a      	str	r2, [r3, #24]
 80023a0:	e002      	b.n	80023a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 80b9 	bne.w	8002524 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	785b      	ldrb	r3, [r3, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d126      	bne.n	8002408 <HAL_PCD_EP_DB_Transmit+0xc8>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	4413      	add	r3, r2
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	011a      	lsls	r2, r3, #4
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	4413      	add	r3, r2
 80023dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002400:	b29a      	uxth	r2, r3
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	e01a      	b.n	800243e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	785b      	ldrb	r3, [r3, #1]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d116      	bne.n	800243e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	4413      	add	r3, r2
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	011a      	lsls	r2, r3, #4
 800242e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002430:	4413      	add	r3, r2
 8002432:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d126      	bne.n	800249a <HAL_PCD_EP_DB_Transmit+0x15a>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	011a      	lsls	r2, r3, #4
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247e:	b29a      	uxth	r2, r3
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	801a      	strh	r2, [r3, #0]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002492:	b29a      	uxth	r2, r3
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	801a      	strh	r2, [r3, #0]
 8002498:	e017      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x18a>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d113      	bne.n	80024ca <HAL_PCD_EP_DB_Transmit+0x18a>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	4413      	add	r3, r2
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	011a      	lsls	r2, r3, #4
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	4413      	add	r3, r2
 80024be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	2200      	movs	r2, #0
 80024c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f008 fb10 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 82fc 	beq.w	8002ada <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fc:	82fb      	strh	r3, [r7, #22]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	441a      	add	r2, r3
 800250c:	8afb      	ldrh	r3, [r7, #22]
 800250e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251e:	b29b      	uxth	r3, r3
 8002520:	8013      	strh	r3, [r2, #0]
 8002522:	e2da      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d021      	beq.n	8002572 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002548:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002578:	2b01      	cmp	r3, #1
 800257a:	f040 82ae 	bne.w	8002ada <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002586:	441a      	add	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002594:	441a      	add	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d30b      	bcc.n	80025be <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6a1a      	ldr	r2, [r3, #32]
 80025b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	621a      	str	r2, [r3, #32]
 80025bc:	e017      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80025c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025d6:	e00a      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d165      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x382>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	4413      	add	r3, r2
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	011a      	lsls	r2, r3, #4
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	4413      	add	r3, r2
 8002618:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002628:	b29a      	uxth	r2, r3
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	801a      	strh	r2, [r3, #0]
 800262e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002632:	2b3e      	cmp	r3, #62	; 0x3e
 8002634:	d91d      	bls.n	8002672 <HAL_PCD_EP_DB_Transmit+0x332>
 8002636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
 800263e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_PCD_EP_DB_Transmit+0x310>
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264c:	3b01      	subs	r3, #1
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002658:	b29b      	uxth	r3, r3
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	b29b      	uxth	r3, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800266a:	b29a      	uxth	r2, r3
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	801a      	strh	r2, [r3, #0]
 8002670:	e044      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_PCD_EP_DB_Transmit+0x350>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002688:	b29a      	uxth	r2, r3
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	e035      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
 8002698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_PCD_EP_DB_Transmit+0x36a>
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	3301      	adds	r3, #1
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	e01c      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d118      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	4413      	add	r3, r2
 80026e0:	647b      	str	r3, [r7, #68]	; 0x44
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	011a      	lsls	r2, r3, #4
 80026e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ea:	4413      	add	r3, r2
 80026ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
 80026f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6959      	ldr	r1, [r3, #20]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	891a      	ldrh	r2, [r3, #8]
 8002708:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800270c:	b29b      	uxth	r3, r3
 800270e:	f003 ff69 	bl	80065e4 <USB_WritePMA>
 8002712:	e1e2      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	3306      	adds	r3, #6
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002748:	429a      	cmp	r2, r3
 800274a:	d307      	bcc.n	800275c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002754:	1ad2      	subs	r2, r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	e002      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80c0 	bne.w	80028ec <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d126      	bne.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	67fb      	str	r3, [r7, #124]	; 0x7c
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002788:	4413      	add	r3, r2
 800278a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	011a      	lsls	r2, r3, #4
 8002792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002794:	4413      	add	r3, r2
 8002796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800279a:	67bb      	str	r3, [r7, #120]	; 0x78
 800279c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	e01a      	b.n	80027f8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d116      	bne.n	80027f8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	667b      	str	r3, [r7, #100]	; 0x64
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027de:	4413      	add	r3, r2
 80027e0:	667b      	str	r3, [r7, #100]	; 0x64
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	011a      	lsls	r2, r3, #4
 80027e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ea:	4413      	add	r3, r2
 80027ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f0:	663b      	str	r3, [r7, #96]	; 0x60
 80027f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	677b      	str	r3, [r7, #116]	; 0x74
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d12b      	bne.n	800285e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	4413      	add	r3, r2
 800281c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	011a      	lsls	r2, r3, #4
 8002824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002826:	4413      	add	r3, r2
 8002828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800282c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283c:	b29a      	uxth	r2, r3
 800283e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002854:	b29a      	uxth	r2, r3
 8002856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285a:	801a      	strh	r2, [r3, #0]
 800285c:	e017      	b.n	800288e <HAL_PCD_EP_DB_Transmit+0x54e>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d113      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002874:	4413      	add	r3, r2
 8002876:	677b      	str	r3, [r7, #116]	; 0x74
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	011a      	lsls	r2, r3, #4
 800287e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002880:	4413      	add	r3, r2
 8002882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002886:	673b      	str	r3, [r7, #112]	; 0x70
 8002888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800288a:	2200      	movs	r2, #0
 800288c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f008 f92e 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 811a 	bne.w	8002ada <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	441a      	add	r2, r3
 80028d2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80028d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8013      	strh	r3, [r2, #0]
 80028ea:	e0f6      	b.n	8002ada <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d121      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002910:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	b29b      	uxth	r3, r3
 8002938:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 80ca 	bne.w	8002ada <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800294e:	441a      	add	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800295c:	441a      	add	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	d30b      	bcc.n	8002986 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800297e:	1ad2      	subs	r2, r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	621a      	str	r2, [r3, #32]
 8002984:	e017      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d108      	bne.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800298e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800299e:	e00a      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2200      	movs	r2, #0
 80029ac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	657b      	str	r3, [r7, #84]	; 0x54
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d165      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x750>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d8:	4413      	add	r3, r2
 80029da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	011a      	lsls	r2, r3, #4
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80029ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a00:	2b3e      	cmp	r3, #62	; 0x3e
 8002a02:	d91d      	bls.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x700>
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	029b      	lsls	r3, r3, #10
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	e041      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	e032      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x738>
 8002a72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a74:	3301      	adds	r3, #1
 8002a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4313      	orrs	r3, r2
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8c:	801a      	strh	r2, [r3, #0]
 8002a8e:	e019      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d115      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa6:	4413      	add	r3, r2
 8002aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	011a      	lsls	r2, r3, #4
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8002aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6959      	ldr	r1, [r3, #20]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	895a      	ldrh	r2, [r3, #10]
 8002ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f003 fd85 	bl	80065e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af4:	82bb      	strh	r3, [r7, #20]
 8002af6:	8abb      	ldrh	r3, [r7, #20]
 8002af8:	f083 0310 	eor.w	r3, r3, #16
 8002afc:	82bb      	strh	r3, [r7, #20]
 8002afe:	8abb      	ldrh	r3, [r7, #20]
 8002b00:	f083 0320 	eor.w	r3, r3, #32
 8002b04:	82bb      	strh	r3, [r7, #20]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	8abb      	ldrh	r3, [r7, #20]
 8002b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3790      	adds	r7, #144	; 0x90
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	817b      	strh	r3, [r7, #10]
 8002b42:	4613      	mov	r3, r2
 8002b44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e009      	b.n	8002b7e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b6a:	897a      	ldrh	r2, [r7, #10]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b7e:	893b      	ldrh	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2200      	movs	r2, #0
 8002b88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	80da      	strh	r2, [r3, #6]
 8002b92:	e00b      	b.n	8002bac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e26c      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8087 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd8:	4b92      	ldr	r3, [pc, #584]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d00c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be4:	4b8f      	ldr	r3, [pc, #572]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d112      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
 8002bf0:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d06c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d168      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e246      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x76>
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a7f      	ldr	r2, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e02e      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x98>
 8002c36:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7a      	ldr	r2, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a77      	ldr	r2, [pc, #476]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0xbc>
 8002c5a:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a71      	ldr	r2, [pc, #452]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xd4>
 8002c74:	4b6b      	ldr	r3, [pc, #428]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6a      	ldr	r2, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a67      	ldr	r2, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fd ff46 	bl	8000b24 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fd ff42 	bl	8000b24 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e1fa      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe4>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fd ff32 	bl	8000b24 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fd ff2e 	bl	8000b24 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1e6      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x10c>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1ba      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4939      	ldr	r1, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	e03a      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fd fee7 	bl	8000b24 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7fd fee3 	bl	8000b24 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e19b      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4927      	ldr	r1, [pc, #156]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCC_OscConfig+0x270>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fd fec6 	bl	8000b24 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fd fec2 	bl	8000b24 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e17a      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03a      	beq.n	8002e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fd fea6 	bl	8000b24 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fd fea2 	bl	8000b24 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e15a      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 fae8 	bl	80033d0 <RCC_Delay>
 8002e00:	e01c      	b.n	8002e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fd fe8c 	bl	8000b24 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fd fe88 	bl	8000b24 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d908      	bls.n	8002e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e140      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	42420000 	.word	0x42420000
 8002e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b9e      	ldr	r3, [pc, #632]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e9      	bne.n	8002e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a6 	beq.w	8002f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b97      	ldr	r3, [pc, #604]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b94      	ldr	r3, [pc, #592]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a93      	ldr	r2, [pc, #588]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]
 8002e66:	4b91      	ldr	r3, [pc, #580]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b8e      	ldr	r3, [pc, #568]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b8b      	ldr	r3, [pc, #556]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a8a      	ldr	r2, [pc, #552]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fd fe49 	bl	8000b24 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fd fe45 	bl	8000b24 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	; 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0fd      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x312>
 8002ebc:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a7a      	ldr	r2, [pc, #488]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e02d      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x334>
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a75      	ldr	r2, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	4b73      	ldr	r3, [pc, #460]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a72      	ldr	r2, [pc, #456]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	e01c      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x356>
 8002ef4:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a69      	ldr	r2, [pc, #420]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0x36e>
 8002f0e:	4b67      	ldr	r3, [pc, #412]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a66      	ldr	r2, [pc, #408]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	4b64      	ldr	r3, [pc, #400]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a63      	ldr	r2, [pc, #396]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d015      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd fdf9 	bl	8000b24 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fdf5 	bl	8000b24 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0ab      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ee      	beq.n	8002f36 <HAL_RCC_OscConfig+0x37e>
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fd fde3 	bl	8000b24 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd fddf 	bl	8000b24 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e095      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b48      	ldr	r3, [pc, #288]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8081 	beq.w	80030a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	4b42      	ldr	r3, [pc, #264]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d061      	beq.n	8003070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d146      	bne.n	8003042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_OscConfig+0x4fc>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fd fdb3 	bl	8000b24 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fd fdaf 	bl	8000b24 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e067      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d108      	bne.n	8002ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fea:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	492d      	ldr	r1, [pc, #180]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a19      	ldr	r1, [r3, #32]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	430b      	orrs	r3, r1
 800300e:	4927      	ldr	r1, [pc, #156]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x4fc>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fd fd83 	bl	8000b24 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fd fd7f 	bl	8000b24 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e037      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x46a>
 8003040:	e02f      	b.n	80030a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_RCC_OscConfig+0x4fc>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fd fd6c 	bl	8000b24 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7fd fd68 	bl	8000b24 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e020      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x498>
 800306e:	e018      	b.n	80030a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e013      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x4f4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42420060 	.word	0x42420060

080030b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4965      	ldr	r1, [pc, #404]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800311e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d040      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e073      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4936      	ldr	r1, [pc, #216]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd fcbc 	bl	8000b24 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fd fcb8 	bl	8000b24 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e053      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d210      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	4922      	ldr	r1, [pc, #136]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1cc>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fb7c 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40021000 	.word	0x40021000
 8003280:	0800b0d8 	.word	0x0800b0d8
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x30>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x36>
 80032ba:	e027      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032be:	613b      	str	r3, [r7, #16]
      break;
 80032c0:	e027      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0c5b      	lsrs	r3, r3, #17
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_RCC_GetSysClockFreq+0xa0>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e004      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	613b      	str	r3, [r7, #16]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 800330e:	613b      	str	r3, [r7, #16]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	693b      	ldr	r3, [r7, #16]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	007a1200 	.word	0x007a1200
 8003328:	0800b0f0 	.word	0x0800b0f0
 800332c:	0800b100 	.word	0x0800b100
 8003330:	003d0900 	.word	0x003d0900

08003334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b02      	ldr	r3, [pc, #8]	; (8003344 <HAL_RCC_GetHCLKFreq+0x10>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	20000000 	.word	0x20000000

08003348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800334c:	f7ff fff2 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK1Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	0800b0e8 	.word	0x0800b0e8

08003370 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	220f      	movs	r2, #15
 800337e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_GetClockConfig+0x5c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0207 	and.w	r2, r3, #7
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40022000 	.word	0x40022000

080033d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <RCC_Delay+0x34>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <RCC_Delay+0x38>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a5b      	lsrs	r3, r3, #9
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033ec:	bf00      	nop
  }
  while (Delay --);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	60fa      	str	r2, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f9      	bne.n	80033ec <RCC_Delay+0x1c>
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	20000000 	.word	0x20000000
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d07d      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342c:	4b4f      	ldr	r3, [pc, #316]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b4c      	ldr	r3, [pc, #304]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4a4b      	ldr	r2, [pc, #300]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	61d3      	str	r3, [r2, #28]
 8003444:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d118      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a42      	ldr	r2, [pc, #264]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346c:	f7fd fb5a 	bl	8000b24 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	e008      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fd fb56 	bl	8000b24 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e06d      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003492:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d027      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b0:	4b2e      	ldr	r3, [pc, #184]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	4b2e      	ldr	r3, [pc, #184]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fd fb25 	bl	8000b24 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd fb21 	bl	8000b24 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e036      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ee      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4917      	ldr	r1, [pc, #92]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	4313      	orrs	r3, r2
 8003510:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003522:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	490b      	ldr	r1, [pc, #44]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
 8003574:	42420440 	.word	0x42420440

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd f978 	bl	8000894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fc5e 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e03a      	b.n	80036a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_TIM_Base_Start_IT+0x98>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d009      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b06      	cmp	r3, #6
 8003680:	d010      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	e007      	b.n	80036a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800

080036bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	f241 1311 	movw	r3, #4369	; 0x1111
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <HAL_TIM_Base_Stop_IT+0x48>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	f240 4344 	movw	r3, #1092	; 0x444
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_Base_Stop_IT+0x48>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e041      	b.n	80037ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f839 	bl	80037b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fb8e 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_TIM_PWM_Start+0x24>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e022      	b.n	8003832 <HAL_TIM_PWM_Start+0x6a>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d109      	bne.n	8003806 <HAL_TIM_PWM_Start+0x3e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	e015      	b.n	8003832 <HAL_TIM_PWM_Start+0x6a>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d109      	bne.n	8003820 <HAL_TIM_PWM_Start+0x58>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e008      	b.n	8003832 <HAL_TIM_PWM_Start+0x6a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e05e      	b.n	80038f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <HAL_TIM_PWM_Start+0x82>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003848:	e013      	b.n	8003872 <HAL_TIM_PWM_Start+0xaa>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start+0x92>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003858:	e00b      	b.n	8003872 <HAL_TIM_PWM_Start+0xaa>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d104      	bne.n	800386a <HAL_TIM_PWM_Start+0xa2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003868:	e003      	b.n	8003872 <HAL_TIM_PWM_Start+0xaa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fd7c 	bl	8004378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_TIM_PWM_Start+0x138>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d107      	bne.n	800389a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_TIM_PWM_Start+0x138>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_TIM_PWM_Start+0xfa>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_PWM_Start+0xfa>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_TIM_PWM_Start+0x13c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_PWM_Start+0xfa>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a12      	ldr	r2, [pc, #72]	; (8003908 <HAL_TIM_PWM_Start+0x140>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d111      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d010      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	e007      	b.n	80038f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800

0800390c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d122      	bne.n	8003968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d11b      	bne.n	8003968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0202 	mvn.w	r2, #2
 8003938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa76 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa69 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fa78 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b04      	cmp	r3, #4
 8003974:	d122      	bne.n	80039bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d11b      	bne.n	80039bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0204 	mvn.w	r2, #4
 800398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa4c 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa3f 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fa4e 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0208 	mvn.w	r2, #8
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2204      	movs	r2, #4
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa22 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa15 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa24 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0210 	mvn.w	r2, #16
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9f8 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9eb 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f9fa 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d107      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0201 	mvn.w	r2, #1
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fc fe92 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fce9 	bl	800448e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9be 	bl	8003e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d10e      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d107      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0220 	mvn.w	r2, #32
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fcb4 	bl	800447c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e0ae      	b.n	8003c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	f200 809f 	bhi.w	8003c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003c89 	.word	0x08003c89
 8003b58:	08003c89 	.word	0x08003c89
 8003b5c:	08003c89 	.word	0x08003c89
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003c89 	.word	0x08003c89
 8003b68:	08003c89 	.word	0x08003c89
 8003b6c:	08003c89 	.word	0x08003c89
 8003b70:	08003c07 	.word	0x08003c07
 8003b74:	08003c89 	.word	0x08003c89
 8003b78:	08003c89 	.word	0x08003c89
 8003b7c:	08003c89 	.word	0x08003c89
 8003b80:	08003c47 	.word	0x08003c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f9d6 	bl	8003f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0208 	orr.w	r2, r2, #8
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	619a      	str	r2, [r3, #24]
      break;
 8003bc2:	e064      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fa1c 	bl	8004008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6999      	ldr	r1, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	619a      	str	r2, [r3, #24]
      break;
 8003c04:	e043      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fa65 	bl	80040dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0208 	orr.w	r2, r2, #8
 8003c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0204 	bic.w	r2, r2, #4
 8003c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]
      break;
 8003c44:	e023      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 faaf 	bl	80041b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69d9      	ldr	r1, [r3, #28]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	61da      	str	r2, [r3, #28]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x1c>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0b4      	b.n	8003e26 <HAL_TIM_ConfigClockSource+0x186>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf4:	d03e      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	f200 8087 	bhi.w	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	f000 8086 	beq.w	8003e12 <HAL_TIM_ConfigClockSource+0x172>
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0a:	d87f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b70      	cmp	r3, #112	; 0x70
 8003d0e:	d01a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xa6>
 8003d10:	2b70      	cmp	r3, #112	; 0x70
 8003d12:	d87b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b60      	cmp	r3, #96	; 0x60
 8003d16:	d050      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x11a>
 8003d18:	2b60      	cmp	r3, #96	; 0x60
 8003d1a:	d877      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b50      	cmp	r3, #80	; 0x50
 8003d1e:	d03c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xfa>
 8003d20:	2b50      	cmp	r3, #80	; 0x50
 8003d22:	d873      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d058      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x13a>
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d86f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b30      	cmp	r3, #48	; 0x30
 8003d2e:	d064      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b30      	cmp	r3, #48	; 0x30
 8003d32:	d86b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d060      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d867      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d05a      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d44:	e062      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f000 faf0 	bl	800433a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	609a      	str	r2, [r3, #8]
      break;
 8003d72:	e04f      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6899      	ldr	r1, [r3, #8]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f000 fad9 	bl	800433a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d96:	609a      	str	r2, [r3, #8]
      break;
 8003d98:	e03c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fa50 	bl	800424c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2150      	movs	r1, #80	; 0x50
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 faa7 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e02c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fa6e 	bl	80042a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2160      	movs	r1, #96	; 0x60
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fa97 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e01c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f000 fa30 	bl	800424c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2140      	movs	r1, #64	; 0x40
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fa87 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8003df8:	e00c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fa7e 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8003e0a:	e003      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e000      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
	...

08003e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d007      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <TIM_Base_SetConfig+0xbc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <TIM_Base_SetConfig+0xc0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <TIM_Base_SetConfig+0xbc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <TIM_Base_SetConfig+0xc0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d103      	bne.n	8003f20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	615a      	str	r2, [r3, #20]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800

08003f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f023 0201 	bic.w	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f023 0302 	bic.w	r3, r3, #2
 8003f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <TIM_OC1_SetConfig+0xc8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10c      	bne.n	8003fb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0308 	bic.w	r3, r3, #8
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a13      	ldr	r2, [pc, #76]	; (8004004 <TIM_OC1_SetConfig+0xc8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d111      	bne.n	8003fde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00

08004008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f023 0210 	bic.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0320 	bic.w	r3, r3, #32
 8004052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <TIM_OC2_SetConfig+0xd0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10d      	bne.n	8004084 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <TIM_OC2_SetConfig+0xd0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d113      	bne.n	80040b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	40012c00 	.word	0x40012c00

080040dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <TIM_OC3_SetConfig+0xd0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10d      	bne.n	8004156 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a14      	ldr	r2, [pc, #80]	; (80041ac <TIM_OC3_SetConfig+0xd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40012c00 	.word	0x40012c00

080041b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <TIM_OC4_SetConfig+0x98>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d109      	bne.n	8004224 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00

0800424c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0210 	bic.w	r2, r3, #16
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	031b      	lsls	r3, r3, #12
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004354:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	021a      	lsls	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	431a      	orrs	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	609a      	str	r2, [r3, #8]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2201      	movs	r2, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1a      	ldr	r2, [r3, #32]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e046      	b.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00e      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d009      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a10      	ldr	r2, [pc, #64]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10c      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800

0800447c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044a0:	b084      	sub	sp, #16
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	f107 0014 	add.w	r0, r7, #20
 80044ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr

080044c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	b29b      	uxth	r3, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	b29b      	uxth	r3, r3
 800450a:	4013      	ands	r3, r2
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004538:	b084      	sub	sp, #16
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	f107 0014 	add.w	r0, r7, #20
 8004546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	b004      	add	sp, #16
 8004576:	4770      	bx	lr

08004578 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004578:	b480      	push	{r7}
 800457a:	b09d      	sub	sp, #116	; 0x74
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	78db      	ldrb	r3, [r3, #3]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d81f      	bhi.n	80045ea <USB_ActivateEndpoint+0x72>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <USB_ActivateEndpoint+0x38>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045f3 	.word	0x080045f3
 80045bc:	080045cf 	.word	0x080045cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045cc:	e012      	b.n	80045f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045d6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045da:	e00b      	b.n	80045f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045e8:	e004      	b.n	80045f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045f0:	e000      	b.n	80045f4 <USB_ActivateEndpoint+0x7c>
      break;
 80045f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462c:	b29a      	uxth	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	4313      	orrs	r3, r2
 8004636:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004658:	b29b      	uxth	r3, r3
 800465a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	7b1b      	ldrb	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 8178 	bne.w	8004956 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8084 	beq.w	8004778 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467a:	b29b      	uxth	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	4413      	add	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	011a      	lsls	r2, r3, #4
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	88db      	ldrh	r3, [r3, #6]
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	827b      	strh	r3, [r7, #18]
 80046b2:	8a7b      	ldrh	r3, [r7, #18]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01b      	beq.n	80046f4 <USB_ActivateEndpoint+0x17c>
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	823b      	strh	r3, [r7, #16]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	8a3b      	ldrh	r3, [r7, #16]
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d020      	beq.n	800473e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004712:	81bb      	strh	r3, [r7, #12]
 8004714:	89bb      	ldrh	r3, [r7, #12]
 8004716:	f083 0320 	eor.w	r3, r3, #32
 800471a:	81bb      	strh	r3, [r7, #12]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	441a      	add	r2, r3
 8004726:	89bb      	ldrh	r3, [r7, #12]
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]
 800473c:	e2d5      	b.n	8004cea <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004754:	81fb      	strh	r3, [r7, #14]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	89fb      	ldrh	r3, [r7, #14]
 8004762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004772:	b29b      	uxth	r3, r3
 8004774:	8013      	strh	r3, [r2, #0]
 8004776:	e2b8      	b.n	8004cea <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004782:	b29b      	uxth	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	4413      	add	r3, r2
 800478a:	633b      	str	r3, [r7, #48]	; 0x30
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	4413      	add	r3, r2
 8004796:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	88db      	ldrh	r3, [r3, #6]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	4413      	add	r3, r2
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b3e      	cmp	r3, #62	; 0x3e
 80047e6:	d91d      	bls.n	8004824 <USB_ActivateEndpoint+0x2ac>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <USB_ActivateEndpoint+0x28a>
 80047fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fe:	3b01      	subs	r3, #1
 8004800:	66bb      	str	r3, [r7, #104]	; 0x68
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29a      	uxth	r2, r3
 8004808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800480a:	b29b      	uxth	r3, r3
 800480c:	029b      	lsls	r3, r3, #10
 800480e:	b29b      	uxth	r3, r3
 8004810:	4313      	orrs	r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481c:	b29a      	uxth	r2, r3
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	e026      	b.n	8004872 <USB_ActivateEndpoint+0x2fa>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <USB_ActivateEndpoint+0x2ca>
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483a:	b29a      	uxth	r2, r3
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	e017      	b.n	8004872 <USB_ActivateEndpoint+0x2fa>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	66bb      	str	r3, [r7, #104]	; 0x68
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <USB_ActivateEndpoint+0x2e4>
 8004856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004858:	3301      	adds	r3, #1
 800485a:	66bb      	str	r3, [r7, #104]	; 0x68
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29a      	uxth	r2, r3
 8004862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004864:	b29b      	uxth	r3, r3
 8004866:	029b      	lsls	r3, r3, #10
 8004868:	b29b      	uxth	r3, r3
 800486a:	4313      	orrs	r3, r2
 800486c:	b29a      	uxth	r2, r3
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01b      	beq.n	80048c2 <USB_ActivateEndpoint+0x34a>
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a0:	843b      	strh	r3, [r7, #32]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	8c3b      	ldrh	r3, [r7, #32]
 80048ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d124      	bne.n	8004914 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e0:	83bb      	strh	r3, [r7, #28]
 80048e2:	8bbb      	ldrh	r3, [r7, #28]
 80048e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048e8:	83bb      	strh	r3, [r7, #28]
 80048ea:	8bbb      	ldrh	r3, [r7, #28]
 80048ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048f0:	83bb      	strh	r3, [r7, #28]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	8bbb      	ldrh	r3, [r7, #28]
 80048fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]
 8004912:	e1ea      	b.n	8004cea <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	83fb      	strh	r3, [r7, #30]
 800492c:	8bfb      	ldrh	r3, [r7, #30]
 800492e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004932:	83fb      	strh	r3, [r7, #30]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	8bfb      	ldrh	r3, [r7, #30]
 8004940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004950:	b29b      	uxth	r3, r3
 8004952:	8013      	strh	r3, [r2, #0]
 8004954:	e1c9      	b.n	8004cea <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	78db      	ldrb	r3, [r3, #3]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d11e      	bne.n	800499c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004974:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
 800499a:	e01d      	b.n	80049d8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e8:	4413      	add	r3, r2
 80049ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	011a      	lsls	r2, r3, #4
 80049f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	891b      	ldrh	r3, [r3, #8]
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1c:	4413      	add	r3, r2
 8004a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	011a      	lsls	r2, r3, #4
 8004a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	895b      	ldrh	r3, [r3, #10]
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 8093 	bne.w	8004b70 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01b      	beq.n	8004a9e <USB_ActivateEndpoint+0x526>
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004aac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01b      	beq.n	8004aee <USB_ActivateEndpoint+0x576>
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b0c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b14:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
 8004b6e:	e0bc      	b.n	8004cea <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01d      	beq.n	8004bc8 <USB_ActivateEndpoint+0x650>
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01d      	beq.n	8004c20 <USB_ActivateEndpoint+0x6a8>
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	78db      	ldrb	r3, [r3, #3]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d024      	beq.n	8004c72 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c46:	f083 0320 	eor.w	r3, r3, #32
 8004c4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
 8004c70:	e01d      	b.n	8004cae <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3774      	adds	r7, #116	; 0x74
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b08d      	sub	sp, #52	; 0x34
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	7b1b      	ldrb	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 808e 	bne.w	8004e28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d044      	beq.n	8004d9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	81bb      	strh	r3, [r7, #12]
 8004d22:	89bb      	ldrh	r3, [r7, #12]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01b      	beq.n	8004d64 <USB_DeactivateEndpoint+0x6c>
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	817b      	strh	r3, [r7, #10]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7a:	813b      	strh	r3, [r7, #8]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	893b      	ldrh	r3, [r7, #8]
 8004d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8013      	strh	r3, [r2, #0]
 8004d9c:	e192      	b.n	80050c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	827b      	strh	r3, [r7, #18]
 8004dac:	8a7b      	ldrh	r3, [r7, #18]
 8004dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01b      	beq.n	8004dee <USB_DeactivateEndpoint+0xf6>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	823b      	strh	r3, [r7, #16]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	8a3b      	ldrh	r3, [r7, #16]
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	81fb      	strh	r3, [r7, #14]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	89fb      	ldrh	r3, [r7, #14]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
 8004e26:	e14d      	b.n	80050c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 80a5 	bne.w	8004f7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	843b      	strh	r3, [r7, #32]
 8004e40:	8c3b      	ldrh	r3, [r7, #32]
 8004e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01b      	beq.n	8004e82 <USB_DeactivateEndpoint+0x18a>
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	83fb      	strh	r3, [r7, #30]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	8bfb      	ldrh	r3, [r7, #30]
 8004e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	83bb      	strh	r3, [r7, #28]
 8004e90:	8bbb      	ldrh	r3, [r7, #28]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01b      	beq.n	8004ed2 <USB_DeactivateEndpoint+0x1da>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	837b      	strh	r3, [r7, #26]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8b7b      	ldrh	r3, [r7, #26]
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	833b      	strh	r3, [r7, #24]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	8b3b      	ldrh	r3, [r7, #24]
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	82fb      	strh	r3, [r7, #22]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8afb      	ldrh	r3, [r7, #22]
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f58:	82bb      	strh	r3, [r7, #20]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8abb      	ldrh	r3, [r7, #20]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
 8004f7a:	e0a3      	b.n	80050c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01b      	beq.n	8004fcc <USB_DeactivateEndpoint+0x2d4>
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004fda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <USB_DeactivateEndpoint+0x324>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005018:	b29b      	uxth	r3, r3
 800501a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	b29b      	uxth	r3, r3
 8005052:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3734      	adds	r7, #52	; 0x34
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b0c2      	sub	sp, #264	; 0x108
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	6018      	str	r0, [r3, #0]
 80050da:	463b      	mov	r3, r7
 80050dc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	f040 8545 	bne.w	8005b74 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d905      	bls.n	8005106 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005104:	e004      	b.n	8005110 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	7b1b      	ldrb	r3, [r3, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d128      	bne.n	800516c <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800511a:	463b      	mov	r3, r7
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6959      	ldr	r1, [r3, #20]
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	88da      	ldrh	r2, [r3, #6]
 8005126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512a:	b29b      	uxth	r3, r3
 800512c:	1d38      	adds	r0, r7, #4
 800512e:	6800      	ldr	r0, [r0, #0]
 8005130:	f001 fa58 	bl	80065e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005142:	b29b      	uxth	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	463b      	mov	r3, r7
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	011a      	lsls	r2, r3, #4
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	f000 bcdb 	b.w	8005b22 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800516c:	463b      	mov	r3, r7
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	78db      	ldrb	r3, [r3, #3]
 8005172:	2b02      	cmp	r3, #2
 8005174:	f040 836f 	bne.w	8005856 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	f240 8313 	bls.w	80057b0 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800518a:	1d3b      	adds	r3, r7, #4
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	463b      	mov	r3, r7
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 816d 	beq.w	80054d6 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 8005202:	463b      	mov	r3, r7
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d16e      	bne.n	80052ea <USB_EPStartXfer+0x21a>
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800521a:	b29b      	uxth	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	4413      	add	r3, r2
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
 8005224:	463b      	mov	r3, r7
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	011a      	lsls	r2, r3, #4
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	4413      	add	r3, r2
 8005230:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005240:	b29a      	uxth	r2, r3
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524a:	2b3e      	cmp	r3, #62	; 0x3e
 800524c:	d921      	bls.n	8005292 <USB_EPStartXfer+0x1c2>
 800524e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <USB_EPStartXfer+0x19e>
 8005264:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005268:	3b01      	subs	r3, #1
 800526a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29a      	uxth	r2, r3
 8005274:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005278:	b29b      	uxth	r3, r3
 800527a:	029b      	lsls	r3, r3, #10
 800527c:	b29b      	uxth	r3, r3
 800527e:	4313      	orrs	r3, r2
 8005280:	b29b      	uxth	r3, r3
 8005282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528a:	b29a      	uxth	r2, r3
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	e047      	b.n	8005322 <USB_EPStartXfer+0x252>
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <USB_EPStartXfer+0x1e0>
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e038      	b.n	8005322 <USB_EPStartXfer+0x252>
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <USB_EPStartXfer+0x200>
 80052c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052ca:	3301      	adds	r3, #1
 80052cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052da:	b29b      	uxth	r3, r3
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4313      	orrs	r3, r2
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	e01b      	b.n	8005322 <USB_EPStartXfer+0x252>
 80052ea:	463b      	mov	r3, r7
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d116      	bne.n	8005322 <USB_EPStartXfer+0x252>
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	4413      	add	r3, r2
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	011a      	lsls	r2, r3, #4
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	4413      	add	r3, r2
 8005312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531c:	b29a      	uxth	r2, r3
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	895b      	ldrh	r3, [r3, #10]
 8005328:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6959      	ldr	r1, [r3, #20]
 8005332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005336:	b29b      	uxth	r3, r3
 8005338:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800533c:	1d38      	adds	r0, r7, #4
 800533e:	6800      	ldr	r0, [r0, #0]
 8005340:	f001 f950 	bl	80065e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005344:	463b      	mov	r3, r7
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534e:	441a      	add	r2, r3
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d909      	bls.n	800537a <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8005366:	463b      	mov	r3, r7
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005370:	1ad2      	subs	r2, r2, r3
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	621a      	str	r2, [r3, #32]
 8005378:	e008      	b.n	800538c <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800537a:	463b      	mov	r3, r7
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005384:	463b      	mov	r3, r7
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2200      	movs	r2, #0
 800538a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800538c:	463b      	mov	r3, r7
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d16e      	bne.n	8005474 <USB_EPStartXfer+0x3a4>
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	1d3b      	adds	r3, r7, #4
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	4413      	add	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	011a      	lsls	r2, r3, #4
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d4:	2b3e      	cmp	r3, #62	; 0x3e
 80053d6:	d921      	bls.n	800541c <USB_EPStartXfer+0x34c>
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <USB_EPStartXfer+0x328>
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005402:	b29b      	uxth	r3, r3
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	b29b      	uxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29a      	uxth	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e04a      	b.n	80054b2 <USB_EPStartXfer+0x3e2>
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <USB_EPStartXfer+0x36a>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e03b      	b.n	80054b2 <USB_EPStartXfer+0x3e2>
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d004      	beq.n	800545a <USB_EPStartXfer+0x38a>
 8005450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005454:	3301      	adds	r3, #1
 8005456:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29a      	uxth	r2, r3
 8005460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005464:	b29b      	uxth	r3, r3
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	b29b      	uxth	r3, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	b29a      	uxth	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e01e      	b.n	80054b2 <USB_EPStartXfer+0x3e2>
 8005474:	463b      	mov	r3, r7
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d119      	bne.n	80054b2 <USB_EPStartXfer+0x3e2>
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548c:	b29b      	uxth	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	4413      	add	r3, r2
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	463b      	mov	r3, r7
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	011a      	lsls	r2, r3, #4
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	4413      	add	r3, r2
 80054a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054b2:	463b      	mov	r3, r7
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	891b      	ldrh	r3, [r3, #8]
 80054b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6959      	ldr	r1, [r3, #20]
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054cc:	1d38      	adds	r0, r7, #4
 80054ce:	6800      	ldr	r0, [r0, #0]
 80054d0:	f001 f888 	bl	80065e4 <USB_WritePMA>
 80054d4:	e325      	b.n	8005b22 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054d6:	463b      	mov	r3, r7
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d16e      	bne.n	80055be <USB_EPStartXfer+0x4ee>
 80054e0:	1d3b      	adds	r3, r7, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f4:	4413      	add	r3, r2
 80054f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f8:	463b      	mov	r3, r7
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	011a      	lsls	r2, r3, #4
 8005500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005502:	4413      	add	r3, r2
 8005504:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005508:	647b      	str	r3, [r7, #68]	; 0x44
 800550a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005514:	b29a      	uxth	r2, r3
 8005516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551e:	2b3e      	cmp	r3, #62	; 0x3e
 8005520:	d921      	bls.n	8005566 <USB_EPStartXfer+0x496>
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <USB_EPStartXfer+0x472>
 8005538:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800553c:	3b01      	subs	r3, #1
 800553e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29a      	uxth	r2, r3
 8005548:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800554c:	b29b      	uxth	r3, r3
 800554e:	029b      	lsls	r3, r3, #10
 8005550:	b29b      	uxth	r3, r3
 8005552:	4313      	orrs	r3, r2
 8005554:	b29b      	uxth	r3, r3
 8005556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555e:	b29a      	uxth	r2, r3
 8005560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	e04a      	b.n	80055fc <USB_EPStartXfer+0x52c>
 8005566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <USB_EPStartXfer+0x4b4>
 800556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800557c:	b29a      	uxth	r2, r3
 800557e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	e03b      	b.n	80055fc <USB_EPStartXfer+0x52c>
 8005584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <USB_EPStartXfer+0x4d4>
 800559a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800559e:	3301      	adds	r3, #1
 80055a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e01e      	b.n	80055fc <USB_EPStartXfer+0x52c>
 80055be:	463b      	mov	r3, r7
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d119      	bne.n	80055fc <USB_EPStartXfer+0x52c>
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	653b      	str	r3, [r7, #80]	; 0x50
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	4413      	add	r3, r2
 80055de:	653b      	str	r3, [r7, #80]	; 0x50
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	011a      	lsls	r2, r3, #4
 80055e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ea:	4413      	add	r3, r2
 80055ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	891b      	ldrh	r3, [r3, #8]
 8005602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005606:	463b      	mov	r3, r7
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6959      	ldr	r1, [r3, #20]
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005610:	b29b      	uxth	r3, r3
 8005612:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005616:	1d38      	adds	r0, r7, #4
 8005618:	6800      	ldr	r0, [r0, #0]
 800561a:	f000 ffe3 	bl	80065e4 <USB_WritePMA>
            ep->xfer_buff += len;
 800561e:	463b      	mov	r3, r7
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005628:	441a      	add	r2, r3
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005630:	463b      	mov	r3, r7
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	429a      	cmp	r2, r3
 800563e:	d909      	bls.n	8005654 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8005640:	463b      	mov	r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	463b      	mov	r3, r7
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	621a      	str	r2, [r3, #32]
 8005652:	e008      	b.n	8005666 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8005654:	463b      	mov	r3, r7
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2200      	movs	r2, #0
 8005664:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005666:	1d3b      	adds	r3, r7, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	643b      	str	r3, [r7, #64]	; 0x40
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d16e      	bne.n	8005754 <USB_EPStartXfer+0x684>
 8005676:	1d3b      	adds	r3, r7, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	63bb      	str	r3, [r7, #56]	; 0x38
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	4413      	add	r3, r2
 800568c:	63bb      	str	r3, [r7, #56]	; 0x38
 800568e:	463b      	mov	r3, r7
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	011a      	lsls	r2, r3, #4
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	4413      	add	r3, r2
 800569a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b4:	2b3e      	cmp	r3, #62	; 0x3e
 80056b6:	d921      	bls.n	80056fc <USB_EPStartXfer+0x62c>
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <USB_EPStartXfer+0x608>
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	3b01      	subs	r3, #1
 80056d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29a      	uxth	r2, r3
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	029b      	lsls	r3, r3, #10
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4313      	orrs	r3, r2
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	801a      	strh	r2, [r3, #0]
 80056fa:	e047      	b.n	800578c <USB_EPStartXfer+0x6bc>
 80056fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <USB_EPStartXfer+0x64a>
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005712:	b29a      	uxth	r2, r3
 8005714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e038      	b.n	800578c <USB_EPStartXfer+0x6bc>
 800571a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <USB_EPStartXfer+0x66a>
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	3301      	adds	r3, #1
 8005736:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29a      	uxth	r2, r3
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	b29b      	uxth	r3, r3
 8005746:	029b      	lsls	r3, r3, #10
 8005748:	b29b      	uxth	r3, r3
 800574a:	4313      	orrs	r3, r2
 800574c:	b29a      	uxth	r2, r3
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e01b      	b.n	800578c <USB_EPStartXfer+0x6bc>
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d116      	bne.n	800578c <USB_EPStartXfer+0x6bc>
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576c:	4413      	add	r3, r2
 800576e:	643b      	str	r3, [r7, #64]	; 0x40
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	011a      	lsls	r2, r3, #4
 8005778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577a:	4413      	add	r3, r2
 800577c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005786:	b29a      	uxth	r2, r3
 8005788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	895b      	ldrh	r3, [r3, #10]
 8005792:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005796:	463b      	mov	r3, r7
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6959      	ldr	r1, [r3, #20]
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057a6:	1d38      	adds	r0, r7, #4
 80057a8:	6800      	ldr	r0, [r0, #0]
 80057aa:	f000 ff1b 	bl	80065e4 <USB_WritePMA>
 80057ae:	e1b8      	b.n	8005b22 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	463b      	mov	r3, r7
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005812:	4413      	add	r3, r2
 8005814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	011a      	lsls	r2, r3, #4
 800581e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005820:	4413      	add	r3, r2
 8005822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005826:	65bb      	str	r3, [r7, #88]	; 0x58
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582c:	b29a      	uxth	r2, r3
 800582e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005830:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005832:	463b      	mov	r3, r7
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	891b      	ldrh	r3, [r3, #8]
 8005838:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6959      	ldr	r1, [r3, #20]
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005846:	b29b      	uxth	r3, r3
 8005848:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800584c:	1d38      	adds	r0, r7, #4
 800584e:	6800      	ldr	r0, [r0, #0]
 8005850:	f000 fec8 	bl	80065e4 <USB_WritePMA>
 8005854:	e165      	b.n	8005b22 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80a5 	beq.w	80059ce <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005884:	1d3b      	adds	r3, r7, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	673b      	str	r3, [r7, #112]	; 0x70
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d16e      	bne.n	8005972 <USB_EPStartXfer+0x8a2>
 8005894:	1d3b      	adds	r3, r7, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	66bb      	str	r3, [r7, #104]	; 0x68
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a8:	4413      	add	r3, r2
 80058aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ac:	463b      	mov	r3, r7
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058b6:	4413      	add	r3, r2
 80058b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058bc:	667b      	str	r3, [r7, #100]	; 0x64
 80058be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d2:	2b3e      	cmp	r3, #62	; 0x3e
 80058d4:	d921      	bls.n	800591a <USB_EPStartXfer+0x84a>
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <USB_EPStartXfer+0x826>
 80058ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058f0:	3b01      	subs	r3, #1
 80058f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005900:	b29b      	uxth	r3, r3
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	b29b      	uxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005912:	b29a      	uxth	r2, r3
 8005914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	e047      	b.n	80059aa <USB_EPStartXfer+0x8da>
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <USB_EPStartXfer+0x868>
 8005922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005930:	b29a      	uxth	r2, r3
 8005932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	e038      	b.n	80059aa <USB_EPStartXfer+0x8da>
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <USB_EPStartXfer+0x888>
 800594e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005952:	3301      	adds	r3, #1
 8005954:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29a      	uxth	r2, r3
 800595e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005962:	b29b      	uxth	r3, r3
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	b29b      	uxth	r3, r3
 8005968:	4313      	orrs	r3, r2
 800596a:	b29a      	uxth	r2, r3
 800596c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e01b      	b.n	80059aa <USB_EPStartXfer+0x8da>
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d116      	bne.n	80059aa <USB_EPStartXfer+0x8da>
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005984:	b29b      	uxth	r3, r3
 8005986:	461a      	mov	r2, r3
 8005988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800598a:	4413      	add	r3, r2
 800598c:	673b      	str	r3, [r7, #112]	; 0x70
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	011a      	lsls	r2, r3, #4
 8005996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005998:	4413      	add	r3, r2
 800599a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800599e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	895b      	ldrh	r3, [r3, #10]
 80059b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6959      	ldr	r1, [r3, #20]
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059c4:	1d38      	adds	r0, r7, #4
 80059c6:	6800      	ldr	r0, [r0, #0]
 80059c8:	f000 fe0c 	bl	80065e4 <USB_WritePMA>
 80059cc:	e0a9      	b.n	8005b22 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d16e      	bne.n	8005ab6 <USB_EPStartXfer+0x9e6>
 80059d8:	1d3b      	adds	r3, r7, #4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059ec:	4413      	add	r3, r2
 80059ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059f0:	463b      	mov	r3, r7
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	011a      	lsls	r2, r3, #4
 80059f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059fa:	4413      	add	r3, r2
 80059fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a16:	2b3e      	cmp	r3, #62	; 0x3e
 8005a18:	d921      	bls.n	8005a5e <USB_EPStartXfer+0x98e>
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <USB_EPStartXfer+0x96a>
 8005a30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a34:	3b01      	subs	r3, #1
 8005a36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e050      	b.n	8005b00 <USB_EPStartXfer+0xa30>
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <USB_EPStartXfer+0x9ac>
 8005a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e041      	b.n	8005b00 <USB_EPStartXfer+0xa30>
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <USB_EPStartXfer+0x9cc>
 8005a92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a96:	3301      	adds	r3, #1
 8005a98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e024      	b.n	8005b00 <USB_EPStartXfer+0xa30>
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d11f      	bne.n	8005b00 <USB_EPStartXfer+0xa30>
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad8:	4413      	add	r3, r2
 8005ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ade:	463b      	mov	r3, r7
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aea:	4413      	add	r3, r2
 8005aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005afe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	891b      	ldrh	r3, [r3, #8]
 8005b06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6959      	ldr	r1, [r3, #20]
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b1a:	1d38      	adds	r0, r7, #4
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f000 fd61 	bl	80065e4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3c:	817b      	strh	r3, [r7, #10]
 8005b3e:	897b      	ldrh	r3, [r7, #10]
 8005b40:	f083 0310 	eor.w	r3, r3, #16
 8005b44:	817b      	strh	r3, [r7, #10]
 8005b46:	897b      	ldrh	r3, [r7, #10]
 8005b48:	f083 0320 	eor.w	r3, r3, #32
 8005b4c:	817b      	strh	r3, [r7, #10]
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	897b      	ldrh	r3, [r7, #10]
 8005b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]
 8005b72:	e3f3      	b.n	800635c <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	7b1b      	ldrb	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 809c 	bne.w	8005cb8 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b80:	463b      	mov	r3, r7
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d90e      	bls.n	8005bae <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba4:	1ad2      	subs	r2, r2, r3
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	619a      	str	r2, [r3, #24]
 8005bac:	e008      	b.n	8005bc0 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005bc0:	1d3b      	adds	r3, r7, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bd8:	4413      	add	r3, r2
 8005bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bde:	463b      	mov	r3, r7
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bea:	4413      	add	r3, r2
 8005bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c0e:	d923      	bls.n	8005c58 <USB_EPStartXfer+0xb88>
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <USB_EPStartXfer+0xb60>
 8005c26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4313      	orrs	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e353      	b.n	8006300 <USB_EPStartXfer+0x1230>
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10c      	bne.n	8005c7a <USB_EPStartXfer+0xbaa>
 8005c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	e342      	b.n	8006300 <USB_EPStartXfer+0x1230>
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <USB_EPStartXfer+0xbca>
 8005c90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c94:	3301      	adds	r3, #1
 8005c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4313      	orrs	r3, r2
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e323      	b.n	8006300 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	78db      	ldrb	r3, [r3, #3]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	f040 81a9 	bne.w	8006016 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 8082 	bne.w	8005dd4 <USB_EPStartXfer+0xd04>
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ce8:	4413      	add	r3, r2
 8005cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	011a      	lsls	r2, r3, #4
 8005cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d20:	d925      	bls.n	8005d6e <USB_EPStartXfer+0xc9e>
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <USB_EPStartXfer+0xc76>
 8005d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d40:	3b01      	subs	r3, #1
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	029b      	lsls	r3, r3, #10
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	e058      	b.n	8005e20 <USB_EPStartXfer+0xd50>
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10c      	bne.n	8005d92 <USB_EPStartXfer+0xcc2>
 8005d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	e046      	b.n	8005e20 <USB_EPStartXfer+0xd50>
 8005d92:	463b      	mov	r3, r7
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d9e:	463b      	mov	r3, r7
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <USB_EPStartXfer+0xce6>
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db0:	3301      	adds	r3, #1
 8005db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e025      	b.n	8005e20 <USB_EPStartXfer+0xd50>
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d120      	bne.n	8005e20 <USB_EPStartXfer+0xd50>
 8005dde:	1d3b      	adds	r3, r7, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005df6:	4413      	add	r3, r2
 8005df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	011a      	lsls	r2, r3, #4
 8005e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e08:	4413      	add	r3, r2
 8005e0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e12:	463b      	mov	r3, r7
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e28:	463b      	mov	r3, r7
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 8082 	bne.w	8005f38 <USB_EPStartXfer+0xe68>
 8005e34:	1d3b      	adds	r3, r7, #4
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e52:	463b      	mov	r3, r7
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	011a      	lsls	r2, r3, #4
 8005e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e5e:	4413      	add	r3, r2
 8005e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b3e      	cmp	r3, #62	; 0x3e
 8005e84:	d925      	bls.n	8005ed2 <USB_EPStartXfer+0xe02>
 8005e86:	463b      	mov	r3, r7
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e92:	463b      	mov	r3, r7
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <USB_EPStartXfer+0xdda>
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e054      	b.n	8005f7c <USB_EPStartXfer+0xeac>
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <USB_EPStartXfer+0xe26>
 8005edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e042      	b.n	8005f7c <USB_EPStartXfer+0xeac>
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <USB_EPStartXfer+0xe4a>
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f14:	3301      	adds	r3, #1
 8005f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	029b      	lsls	r3, r3, #10
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e021      	b.n	8005f7c <USB_EPStartXfer+0xeac>
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	785b      	ldrb	r3, [r3, #1]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d11c      	bne.n	8005f7c <USB_EPStartXfer+0xeac>
 8005f42:	1d3b      	adds	r3, r7, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f52:	4413      	add	r3, r2
 8005f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f58:	463b      	mov	r3, r7
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	011a      	lsls	r2, r3, #4
 8005f60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f64:	4413      	add	r3, r2
 8005f66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f7a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 81bc 	beq.w	8006300 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <USB_EPStartXfer+0xee4>
 8005fa8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10d      	bne.n	8005fd0 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 819f 	bne.w	8006300 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fc2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 8198 	bne.w	8006300 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
 8006014:	e174      	b.n	8006300 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006016:	463b      	mov	r3, r7
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	78db      	ldrb	r3, [r3, #3]
 800601c:	2b01      	cmp	r3, #1
 800601e:	f040 816d 	bne.w	80062fc <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	463b      	mov	r3, r7
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d90e      	bls.n	8006050 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8006032:	463b      	mov	r3, r7
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	1ad2      	subs	r2, r2, r3
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	619a      	str	r2, [r3, #24]
 800604e:	e008      	b.n	8006062 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2200      	movs	r2, #0
 8006060:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006062:	463b      	mov	r3, r7
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d17b      	bne.n	8006164 <USB_EPStartXfer+0x1094>
 800606c:	1d3b      	adds	r3, r7, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800607c:	b29b      	uxth	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006084:	4413      	add	r3, r2
 8006086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800608a:	463b      	mov	r3, r7
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	011a      	lsls	r2, r3, #4
 8006092:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006096:	4413      	add	r3, r2
 8006098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800609c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ba:	d923      	bls.n	8006104 <USB_EPStartXfer+0x1034>
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <USB_EPStartXfer+0x100c>
 80060d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d6:	3b01      	subs	r3, #1
 80060d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e054      	b.n	80061ae <USB_EPStartXfer+0x10de>
 8006104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10c      	bne.n	8006126 <USB_EPStartXfer+0x1056>
 800610c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e043      	b.n	80061ae <USB_EPStartXfer+0x10de>
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <USB_EPStartXfer+0x1076>
 800613c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006140:	3301      	adds	r3, #1
 8006142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29a      	uxth	r2, r3
 800614e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006152:	b29b      	uxth	r3, r3
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	b29b      	uxth	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e024      	b.n	80061ae <USB_EPStartXfer+0x10de>
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d11f      	bne.n	80061ae <USB_EPStartXfer+0x10de>
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006186:	4413      	add	r3, r2
 8006188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800618c:	463b      	mov	r3, r7
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	011a      	lsls	r2, r3, #4
 8006194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006198:	4413      	add	r3, r2
 800619a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800619e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d17b      	bne.n	80062b8 <USB_EPStartXfer+0x11e8>
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061c8:	1d3b      	adds	r3, r7, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061d8:	4413      	add	r3, r2
 80061da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061de:	463b      	mov	r3, r7
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	011a      	lsls	r2, r3, #4
 80061e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061ea:	4413      	add	r3, r2
 80061ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006200:	b29a      	uxth	r2, r3
 8006202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620c:	2b3e      	cmp	r3, #62	; 0x3e
 800620e:	d923      	bls.n	8006258 <USB_EPStartXfer+0x1188>
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <USB_EPStartXfer+0x1160>
 8006226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800622a:	3b01      	subs	r3, #1
 800622c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29b      	uxth	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e053      	b.n	8006300 <USB_EPStartXfer+0x1230>
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10c      	bne.n	800627a <USB_EPStartXfer+0x11aa>
 8006260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006270:	b29a      	uxth	r2, r3
 8006272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	e042      	b.n	8006300 <USB_EPStartXfer+0x1230>
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <USB_EPStartXfer+0x11ca>
 8006290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006294:	3301      	adds	r3, #1
 8006296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800629a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4313      	orrs	r3, r2
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	e023      	b.n	8006300 <USB_EPStartXfer+0x1230>
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d11e      	bne.n	8006300 <USB_EPStartXfer+0x1230>
 80062c2:	1d3b      	adds	r3, r7, #4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062d2:	4413      	add	r3, r2
 80062d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062d8:	463b      	mov	r3, r7
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	011a      	lsls	r2, r3, #4
 80062e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e001      	b.n	8006300 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e02e      	b.n	800635e <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006300:	1d3b      	adds	r3, r7, #4
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	463b      	mov	r3, r7
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800631e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006326:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800632a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800632e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006332:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006336:	1d3b      	adds	r3, r7, #4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d020      	beq.n	80063bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006390:	81bb      	strh	r3, [r7, #12]
 8006392:	89bb      	ldrh	r3, [r7, #12]
 8006394:	f083 0310 	eor.w	r3, r3, #16
 8006398:	81bb      	strh	r3, [r7, #12]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	89bb      	ldrh	r3, [r7, #12]
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
 80063ba:	e01f      	b.n	80063fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	81fb      	strh	r3, [r7, #14]
 80063d4:	89fb      	ldrh	r3, [r7, #14]
 80063d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063da:	81fb      	strh	r3, [r7, #14]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	89fb      	ldrh	r3, [r7, #14]
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	7b1b      	ldrb	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 809d 	bne.w	8006556 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d04c      	beq.n	80064be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	823b      	strh	r3, [r7, #16]
 8006432:	8a3b      	ldrh	r3, [r7, #16]
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01b      	beq.n	8006474 <USB_EPClearStall+0x6c>
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	81fb      	strh	r3, [r7, #14]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	441a      	add	r2, r3
 800645e:	89fb      	ldrh	r3, [r7, #14]
 8006460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006470:	b29b      	uxth	r3, r3
 8006472:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	78db      	ldrb	r3, [r3, #3]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d06c      	beq.n	8006556 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006492:	81bb      	strh	r3, [r7, #12]
 8006494:	89bb      	ldrh	r3, [r7, #12]
 8006496:	f083 0320 	eor.w	r3, r3, #32
 800649a:	81bb      	strh	r3, [r7, #12]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	441a      	add	r2, r3
 80064a6:	89bb      	ldrh	r3, [r7, #12]
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]
 80064bc:	e04b      	b.n	8006556 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	82fb      	strh	r3, [r7, #22]
 80064cc:	8afb      	ldrh	r3, [r7, #22]
 80064ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01b      	beq.n	800650e <USB_EPClearStall+0x106>
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ec:	82bb      	strh	r3, [r7, #20]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	441a      	add	r2, r3
 80064f8:	8abb      	ldrh	r3, [r7, #20]
 80064fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650a:	b29b      	uxth	r3, r3
 800650c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006524:	827b      	strh	r3, [r7, #18]
 8006526:	8a7b      	ldrh	r3, [r7, #18]
 8006528:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800652c:	827b      	strh	r3, [r7, #18]
 800652e:	8a7b      	ldrh	r3, [r7, #18]
 8006530:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006534:	827b      	strh	r3, [r7, #18]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	441a      	add	r2, r3
 8006540:	8a7b      	ldrh	r3, [r7, #18]
 8006542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006552:	b29b      	uxth	r3, r3
 8006554:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr

08006562 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2280      	movs	r2, #128	; 0x80
 8006578:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065be:	b29b      	uxth	r3, r3
 80065c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065c2:	68fb      	ldr	r3, [r7, #12]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b08b      	sub	sp, #44	; 0x2c
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4611      	mov	r1, r2
 80065f0:	461a      	mov	r2, r3
 80065f2:	460b      	mov	r3, r1
 80065f4:	80fb      	strh	r3, [r7, #6]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065fa:	88bb      	ldrh	r3, [r7, #4]
 80065fc:	3301      	adds	r3, #1
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	005a      	lsls	r2, r3, #1
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006616:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
 800661c:	e01e      	b.n	800665c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	3301      	adds	r3, #1
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	b21a      	sxth	r2, r3
 800662e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006632:	4313      	orrs	r3, r2
 8006634:	b21b      	sxth	r3, r3
 8006636:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	8a7a      	ldrh	r2, [r7, #18]
 800663c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	3302      	adds	r3, #2
 8006642:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	3302      	adds	r3, #2
 8006648:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3301      	adds	r3, #1
 800664e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	3301      	adds	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	3b01      	subs	r3, #1
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1dd      	bne.n	800661e <USB_WritePMA+0x3a>
  }
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	372c      	adds	r7, #44	; 0x2c
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr

0800666e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800666e:	b480      	push	{r7}
 8006670:	b08b      	sub	sp, #44	; 0x2c
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	4611      	mov	r1, r2
 800667a:	461a      	mov	r2, r3
 800667c:	460b      	mov	r3, r1
 800667e:	80fb      	strh	r3, [r7, #6]
 8006680:	4613      	mov	r3, r2
 8006682:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006684:	88bb      	ldrh	r3, [r7, #4]
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006694:	88fb      	ldrh	r3, [r7, #6]
 8006696:	005a      	lsls	r2, r3, #1
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
 80066a6:	e01b      	b.n	80066e0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	3302      	adds	r3, #2
 80066b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3301      	adds	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	3301      	adds	r3, #1
 80066d2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	3302      	adds	r3, #2
 80066d8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	3b01      	subs	r3, #1
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e0      	bne.n	80066a8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80066e6:	88bb      	ldrh	r3, [r7, #4]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	701a      	strb	r2, [r3, #0]
  }
}
 8006702:	bf00      	nop
 8006704:	372c      	adds	r7, #44	; 0x2c
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7c1b      	ldrb	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d115      	bne.n	8006750 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006728:	2202      	movs	r2, #2
 800672a:	2181      	movs	r1, #129	; 0x81
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f004 fac6 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800673c:	2202      	movs	r2, #2
 800673e:	2101      	movs	r1, #1
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f004 fabc 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800674e:	e012      	b.n	8006776 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	2202      	movs	r2, #2
 8006754:	2181      	movs	r1, #129	; 0x81
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f004 fab1 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006762:	2340      	movs	r3, #64	; 0x40
 8006764:	2202      	movs	r2, #2
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f004 faa8 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006776:	2308      	movs	r3, #8
 8006778:	2203      	movs	r2, #3
 800677a:	2182      	movs	r1, #130	; 0x82
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f004 fa9e 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006788:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800678c:	f004 fbbe 	bl	800af0c <USBD_static_malloc>
 8006790:	4602      	mov	r2, r0
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80067a2:	2301      	movs	r3, #1
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	e026      	b.n	80067f6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	7c1b      	ldrb	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067dc:	2101      	movs	r1, #1
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f004 fb5e 	bl	800aea0 <USBD_LL_PrepareReceive>
 80067e4:	e007      	b.n	80067f6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	2101      	movs	r1, #1
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f004 fb55 	bl	800aea0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006810:	2181      	movs	r1, #129	; 0x81
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f004 fa79 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800681e:	2101      	movs	r1, #1
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f004 fa72 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800682e:	2182      	movs	r1, #130	; 0x82
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f004 fa6a 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00e      	beq.n	8006864 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	4618      	mov	r0, r3
 8006858:	f004 fb64 	bl	800af24 <USBD_static_free>
    pdev->pClassData = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006894:	2b00      	cmp	r3, #0
 8006896:	d039      	beq.n	800690c <USBD_CDC_Setup+0x9e>
 8006898:	2b20      	cmp	r3, #32
 800689a:	d17f      	bne.n	800699c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	88db      	ldrh	r3, [r3, #6]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d029      	beq.n	80068f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da11      	bge.n	80068d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	88d2      	ldrh	r2, [r2, #6]
 80068c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068c2:	6939      	ldr	r1, [r7, #16]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fa09 	bl	8007ce2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068d0:	e06b      	b.n	80069aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	785a      	ldrb	r2, [r3, #1]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	88db      	ldrh	r3, [r3, #6]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068e8:	6939      	ldr	r1, [r7, #16]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	88db      	ldrh	r3, [r3, #6]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fa24 	bl	8007d3e <USBD_CtlPrepareRx>
      break;
 80068f6:	e058      	b.n	80069aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	7850      	ldrb	r0, [r2, #1]
 8006904:	2200      	movs	r2, #0
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	4798      	blx	r3
      break;
 800690a:	e04e      	b.n	80069aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b0b      	cmp	r3, #11
 8006912:	d02e      	beq.n	8006972 <USBD_CDC_Setup+0x104>
 8006914:	2b0b      	cmp	r3, #11
 8006916:	dc38      	bgt.n	800698a <USBD_CDC_Setup+0x11c>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <USBD_CDC_Setup+0xb4>
 800691c:	2b0a      	cmp	r3, #10
 800691e:	d014      	beq.n	800694a <USBD_CDC_Setup+0xdc>
 8006920:	e033      	b.n	800698a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006928:	2b03      	cmp	r3, #3
 800692a:	d107      	bne.n	800693c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800692c:	f107 030c 	add.w	r3, r7, #12
 8006930:	2202      	movs	r2, #2
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 f9d4 	bl	8007ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800693a:	e02e      	b.n	800699a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 f965 	bl	8007c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8006944:	2302      	movs	r3, #2
 8006946:	75fb      	strb	r3, [r7, #23]
          break;
 8006948:	e027      	b.n	800699a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006950:	2b03      	cmp	r3, #3
 8006952:	d107      	bne.n	8006964 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006954:	f107 030f 	add.w	r3, r7, #15
 8006958:	2201      	movs	r2, #1
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f9c0 	bl	8007ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006962:	e01a      	b.n	800699a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f951 	bl	8007c0e <USBD_CtlError>
            ret = USBD_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	75fb      	strb	r3, [r7, #23]
          break;
 8006970:	e013      	b.n	800699a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006978:	2b03      	cmp	r3, #3
 800697a:	d00d      	beq.n	8006998 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 f945 	bl	8007c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006988:	e006      	b.n	8006998 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 f93e 	bl	8007c0e <USBD_CtlError>
          ret = USBD_FAIL;
 8006992:	2302      	movs	r3, #2
 8006994:	75fb      	strb	r3, [r7, #23]
          break;
 8006996:	e000      	b.n	800699a <USBD_CDC_Setup+0x12c>
          break;
 8006998:	bf00      	nop
      }
      break;
 800699a:	e006      	b.n	80069aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 f935 	bl	8007c0e <USBD_CtlError>
      ret = USBD_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	75fb      	strb	r3, [r7, #23]
      break;
 80069a8:	bf00      	nop
  }

  return ret;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d03a      	beq.n	8006a50 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069da:	78fa      	ldrb	r2, [r7, #3]
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	331c      	adds	r3, #28
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d029      	beq.n	8006a44 <USBD_CDC_DataIn+0x90>
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	331c      	adds	r3, #28
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	78f9      	ldrb	r1, [r7, #3]
 8006a04:	68b8      	ldr	r0, [r7, #8]
 8006a06:	460b      	mov	r3, r1
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	4403      	add	r3, r0
 8006a10:	3338      	adds	r3, #56	; 0x38
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a18:	fb03 f301 	mul.w	r3, r3, r1
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d110      	bne.n	8006a44 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a22:	78fa      	ldrb	r2, [r7, #3]
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	331c      	adds	r3, #28
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a36:	78f9      	ldrb	r1, [r7, #3]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f004 fa0c 	bl	800ae5a <USBD_LL_Transmit>
 8006a42:	e003      	b.n	8006a4c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e000      	b.n	8006a52 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f004 fa37 	bl	800aee6 <USBD_LL_GetRxDataSize>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4798      	blx	r3

    return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e000      	b.n	8006aa8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006aa6:	2302      	movs	r3, #2
  }
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d015      	beq.n	8006af6 <USBD_CDC_EP0_RxReady+0x46>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ad0:	2bff      	cmp	r3, #255	; 0xff
 8006ad2:	d010      	beq.n	8006af6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ae2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006aea:	b292      	uxth	r2, r2
 8006aec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	22ff      	movs	r2, #255	; 0xff
 8006af2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2243      	movs	r2, #67	; 0x43
 8006b0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b0e:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000094 	.word	0x20000094

08006b20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2243      	movs	r2, #67	; 0x43
 8006b2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b2e:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	20000050 	.word	0x20000050

08006b40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2243      	movs	r2, #67	; 0x43
 8006b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	200000d8 	.word	0x200000d8

08006b60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	220a      	movs	r2, #10
 8006b6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b6e:	4b03      	ldr	r3, [pc, #12]	; (8006b7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	2000000c 	.word	0x2000000c

08006b80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bca:	88fa      	ldrh	r2, [r7, #6]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01c      	beq.n	8006c58 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d115      	bne.n	8006c54 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2181      	movs	r1, #129	; 0x81
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f004 f905 	bl	800ae5a <USBD_LL_Transmit>

      return USBD_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e002      	b.n	8006c5a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c58:	2302      	movs	r3, #2
  }
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d017      	beq.n	8006cac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	7c1b      	ldrb	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c8e:	2101      	movs	r1, #1
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f004 f905 	bl	800aea0 <USBD_LL_PrepareReceive>
 8006c96:	e007      	b.n	8006ca8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c9e:	2340      	movs	r3, #64	; 0x40
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f004 f8fc 	bl	800aea0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e000      	b.n	8006cae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006cac:	2302      	movs	r3, #2
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e01a      	b.n	8006d04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	79fa      	ldrb	r2, [r7, #7]
 8006cfa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f003 ff69 	bl	800abd4 <USBD_LL_Init>

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d006      	beq.n	8006d2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e001      	b.n	8006d32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr

08006d3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f003 ff9e 	bl	800ac88 <USBD_LL_Start>

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d76:	2302      	movs	r3, #2
 8006d78:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00c      	beq.n	8006d9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fed8 	bl	8007b96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006df4:	461a      	mov	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d016      	beq.n	8006e38 <USBD_LL_SetupStage+0x6a>
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d81c      	bhi.n	8006e48 <USBD_LL_SetupStage+0x7a>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <USBD_LL_SetupStage+0x4a>
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d008      	beq.n	8006e28 <USBD_LL_SetupStage+0x5a>
 8006e16:	e017      	b.n	8006e48 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9cb 	bl	80071bc <USBD_StdDevReq>
      break;
 8006e26:	e01a      	b.n	8006e5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fa2d 	bl	8007290 <USBD_StdItfReq>
      break;
 8006e36:	e012      	b.n	8006e5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa6d 	bl	8007320 <USBD_StdEPReq>
      break;
 8006e46:	e00a      	b.n	8006e5e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f003 ff76 	bl	800ad48 <USBD_LL_StallEP>
      break;
 8006e5c:	bf00      	nop
  }

  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	460b      	mov	r3, r1
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d14b      	bne.n	8006f14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d134      	bne.n	8006ef8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d919      	bls.n	8006ece <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	1ad2      	subs	r2, r2, r3
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d203      	bcs.n	8006ebc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	e002      	b.n	8006ec2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 ff57 	bl	8007d7a <USBD_CtlContinueRx>
 8006ecc:	e038      	b.n	8006f40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d105      	bne.n	8006ef0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 ff54 	bl	8007d9e <USBD_CtlSendStatus>
 8006ef6:	e023      	b.n	8006f40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d11e      	bne.n	8006f40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f003 ff1b 	bl	800ad48 <USBD_LL_StallEP>
 8006f12:	e015      	b.n	8006f40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00d      	beq.n	8006f3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d108      	bne.n	8006f3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	7afa      	ldrb	r2, [r7, #11]
 8006f34:	4611      	mov	r1, r2
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	4798      	blx	r3
 8006f3a:	e001      	b.n	8006f40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e000      	b.n	8006f42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	460b      	mov	r3, r1
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d17f      	bne.n	800705e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3314      	adds	r3, #20
 8006f62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d15c      	bne.n	8007028 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d915      	bls.n	8006fa6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fec1 	bl	8007d1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f003 ff7e 	bl	800aea0 <USBD_LL_PrepareReceive>
 8006fa4:	e04e      	b.n	8007044 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	6912      	ldr	r2, [r2, #16]
 8006fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fb2:	fb02 f201 	mul.w	r2, r2, r1
 8006fb6:	1a9b      	subs	r3, r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d11c      	bne.n	8006ff6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d316      	bcc.n	8006ff6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d20f      	bcs.n	8006ff6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fe9d 	bl	8007d1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2200      	movs	r2, #0
 8006fec:	2100      	movs	r1, #0
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f003 ff56 	bl	800aea0 <USBD_LL_PrepareReceive>
 8006ff4:	e026      	b.n	8007044 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007008:	2b03      	cmp	r3, #3
 800700a:	d105      	bne.n	8007018 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007018:	2180      	movs	r1, #128	; 0x80
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f003 fe94 	bl	800ad48 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fecf 	bl	8007dc4 <USBD_CtlReceiveStatus>
 8007026:	e00d      	b.n	8007044 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800702e:	2b04      	cmp	r3, #4
 8007030:	d004      	beq.n	800703c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f003 fe82 	bl	800ad48 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d11d      	bne.n	800708a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fe81 	bl	8006d56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800705c:	e015      	b.n	800708a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007070:	2b03      	cmp	r3, #3
 8007072:	d108      	bne.n	8007086 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	7afa      	ldrb	r2, [r7, #11]
 800707e:	4611      	mov	r1, r2
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	4798      	blx	r3
 8007084:	e001      	b.n	800708a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007086:	2302      	movs	r3, #2
 8007088:	e000      	b.n	800708c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800709c:	2340      	movs	r3, #64	; 0x40
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f003 fe0b 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2240      	movs	r2, #64	; 0x40
 80070b4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	2200      	movs	r2, #0
 80070bc:	2180      	movs	r1, #128	; 0x80
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f003 fdfd 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2240      	movs	r2, #64	; 0x40
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6852      	ldr	r2, [r2, #4]
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	4611      	mov	r1, r2
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
  }

  return USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr

08007134 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2204      	movs	r2, #4
 800714c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	2b04      	cmp	r3, #4
 800716c:	d105      	bne.n	800717a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr

08007186 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007194:	2b03      	cmp	r3, #3
 8007196:	d10b      	bne.n	80071b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d005      	beq.n	80071b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d005      	beq.n	80071e2 <USBD_StdDevReq+0x26>
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d84f      	bhi.n	800727a <USBD_StdDevReq+0xbe>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <USBD_StdDevReq+0x36>
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d14b      	bne.n	800727a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
      break;
 80071f0:	e048      	b.n	8007284 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	785b      	ldrb	r3, [r3, #1]
 80071f6:	2b09      	cmp	r3, #9
 80071f8:	d839      	bhi.n	800726e <USBD_StdDevReq+0xb2>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <USBD_StdDevReq+0x44>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007251 	.word	0x08007251
 8007204:	08007265 	.word	0x08007265
 8007208:	0800726f 	.word	0x0800726f
 800720c:	0800725b 	.word	0x0800725b
 8007210:	0800726f 	.word	0x0800726f
 8007214:	08007233 	.word	0x08007233
 8007218:	08007229 	.word	0x08007229
 800721c:	0800726f 	.word	0x0800726f
 8007220:	08007247 	.word	0x08007247
 8007224:	0800723d 	.word	0x0800723d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f9dc 	bl	80075e8 <USBD_GetDescriptor>
          break;
 8007230:	e022      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fb3f 	bl	80078b8 <USBD_SetAddress>
          break;
 800723a:	e01d      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fb7e 	bl	8007940 <USBD_SetConfig>
          break;
 8007244:	e018      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc07 	bl	8007a5c <USBD_GetConfig>
          break;
 800724e:	e013      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fc37 	bl	8007ac6 <USBD_GetStatus>
          break;
 8007258:	e00e      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fc65 	bl	8007b2c <USBD_SetFeature>
          break;
 8007262:	e009      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc74 	bl	8007b54 <USBD_ClrFeature>
          break;
 800726c:	e004      	b.n	8007278 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fccc 	bl	8007c0e <USBD_CtlError>
          break;
 8007276:	bf00      	nop
      }
      break;
 8007278:	e004      	b.n	8007284 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fcc6 	bl	8007c0e <USBD_CtlError>
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d005      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d82e      	bhi.n	800730c <USBD_StdItfReq+0x7c>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d12a      	bne.n	800730c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	3b01      	subs	r3, #1
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d81d      	bhi.n	80072fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	889b      	ldrh	r3, [r3, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d813      	bhi.n	80072f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	88db      	ldrh	r3, [r3, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d110      	bne.n	8007308 <USBD_StdItfReq+0x78>
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10d      	bne.n	8007308 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fd56 	bl	8007d9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072f2:	e009      	b.n	8007308 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fc89 	bl	8007c0e <USBD_CtlError>
          break;
 80072fc:	e004      	b.n	8007308 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc84 	bl	8007c0e <USBD_CtlError>
          break;
 8007306:	e000      	b.n	800730a <USBD_StdItfReq+0x7a>
          break;
 8007308:	bf00      	nop
      }
      break;
 800730a:	e004      	b.n	8007316 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc7d 	bl	8007c0e <USBD_CtlError>
      break;
 8007314:	bf00      	nop
  }

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	889b      	ldrh	r3, [r3, #4]
 8007332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d007      	beq.n	8007350 <USBD_StdEPReq+0x30>
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	f200 8146 	bhi.w	80075d2 <USBD_StdEPReq+0x2b2>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <USBD_StdEPReq+0x40>
 800734a:	2b20      	cmp	r3, #32
 800734c:	f040 8141 	bne.w	80075d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
      break;
 800735e:	e13d      	b.n	80075dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007368:	2b20      	cmp	r3, #32
 800736a:	d10a      	bne.n	8007382 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	e12d      	b.n	80075de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d007      	beq.n	800739a <USBD_StdEPReq+0x7a>
 800738a:	2b03      	cmp	r3, #3
 800738c:	f300 811b 	bgt.w	80075c6 <USBD_StdEPReq+0x2a6>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d072      	beq.n	800747a <USBD_StdEPReq+0x15a>
 8007394:	2b01      	cmp	r3, #1
 8007396:	d03a      	beq.n	800740e <USBD_StdEPReq+0xee>
 8007398:	e115      	b.n	80075c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d002      	beq.n	80073aa <USBD_StdEPReq+0x8a>
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d015      	beq.n	80073d4 <USBD_StdEPReq+0xb4>
 80073a8:	e02b      	b.n	8007402 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00c      	beq.n	80073ca <USBD_StdEPReq+0xaa>
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b80      	cmp	r3, #128	; 0x80
 80073b4:	d009      	beq.n	80073ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f003 fcc4 	bl	800ad48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f003 fcc0 	bl	800ad48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073c8:	e020      	b.n	800740c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc1e 	bl	8007c0e <USBD_CtlError>
              break;
 80073d2:	e01b      	b.n	800740c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	885b      	ldrh	r3, [r3, #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10e      	bne.n	80073fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <USBD_StdEPReq+0xda>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d008      	beq.n	80073fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	88db      	ldrh	r3, [r3, #6]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f003 fca7 	bl	800ad48 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fccf 	bl	8007d9e <USBD_CtlSendStatus>

              break;
 8007400:	e004      	b.n	800740c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fc02 	bl	8007c0e <USBD_CtlError>
              break;
 800740a:	bf00      	nop
          }
          break;
 800740c:	e0e0      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	2b02      	cmp	r3, #2
 8007416:	d002      	beq.n	800741e <USBD_StdEPReq+0xfe>
 8007418:	2b03      	cmp	r3, #3
 800741a:	d015      	beq.n	8007448 <USBD_StdEPReq+0x128>
 800741c:	e026      	b.n	800746c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <USBD_StdEPReq+0x11e>
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b80      	cmp	r3, #128	; 0x80
 8007428:	d009      	beq.n	800743e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f003 fc8a 	bl	800ad48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007434:	2180      	movs	r1, #128	; 0x80
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f003 fc86 	bl	800ad48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800743c:	e01c      	b.n	8007478 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fbe4 	bl	8007c0e <USBD_CtlError>
              break;
 8007446:	e017      	b.n	8007478 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d112      	bne.n	8007476 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f003 fc91 	bl	800ad86 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc9a 	bl	8007d9e <USBD_CtlSendStatus>
              }
              break;
 800746a:	e004      	b.n	8007476 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fbcd 	bl	8007c0e <USBD_CtlError>
              break;
 8007474:	e000      	b.n	8007478 <USBD_StdEPReq+0x158>
              break;
 8007476:	bf00      	nop
          }
          break;
 8007478:	e0aa      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	2b02      	cmp	r3, #2
 8007482:	d002      	beq.n	800748a <USBD_StdEPReq+0x16a>
 8007484:	2b03      	cmp	r3, #3
 8007486:	d032      	beq.n	80074ee <USBD_StdEPReq+0x1ce>
 8007488:	e097      	b.n	80075ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <USBD_StdEPReq+0x180>
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d004      	beq.n	80074a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fbb8 	bl	8007c0e <USBD_CtlError>
                break;
 800749e:	e091      	b.n	80075c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da0b      	bge.n	80074c0 <USBD_StdEPReq+0x1a0>
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	3310      	adds	r3, #16
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	3304      	adds	r3, #4
 80074be:	e00b      	b.n	80074d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	3304      	adds	r3, #4
 80074d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2202      	movs	r2, #2
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fbfb 	bl	8007ce2 <USBD_CtlSendData>
              break;
 80074ec:	e06a      	b.n	80075c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da11      	bge.n	800751a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	f003 020f 	and.w	r2, r3, #15
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	3318      	adds	r3, #24
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d117      	bne.n	8007540 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fb7b 	bl	8007c0e <USBD_CtlError>
                  break;
 8007518:	e054      	b.n	80075c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	f003 020f 	and.w	r2, r3, #15
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d104      	bne.n	8007540 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb68 	bl	8007c0e <USBD_CtlError>
                  break;
 800753e:	e041      	b.n	80075c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	da0b      	bge.n	8007560 <USBD_StdEPReq+0x240>
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	3310      	adds	r3, #16
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	3304      	adds	r3, #4
 800755e:	e00b      	b.n	8007578 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <USBD_StdEPReq+0x266>
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d103      	bne.n	800758e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e00e      	b.n	80075ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f003 fc16 	bl	800adc4 <USBD_LL_IsStallEP>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2201      	movs	r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e002      	b.n	80075ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2202      	movs	r2, #2
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb95 	bl	8007ce2 <USBD_CtlSendData>
              break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb26 	bl	8007c0e <USBD_CtlError>
              break;
 80075c2:	bf00      	nop
          }
          break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fb20 	bl	8007c0e <USBD_CtlError>
          break;
 80075ce:	bf00      	nop
      }
      break;
 80075d0:	e004      	b.n	80075dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fb1a 	bl	8007c0e <USBD_CtlError>
      break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	885b      	ldrh	r3, [r3, #2]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	2b06      	cmp	r3, #6
 800760a:	f200 8128 	bhi.w	800785e <USBD_GetDescriptor+0x276>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <USBD_GetDescriptor+0x2c>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007631 	.word	0x08007631
 8007618:	08007649 	.word	0x08007649
 800761c:	08007689 	.word	0x08007689
 8007620:	0800785f 	.word	0x0800785f
 8007624:	0800785f 	.word	0x0800785f
 8007628:	080077ff 	.word	0x080077ff
 800762c:	0800782b 	.word	0x0800782b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7c12      	ldrb	r2, [r2, #16]
 800763c:	f107 0108 	add.w	r1, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
      break;
 8007646:	e112      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7c1b      	ldrb	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f107 0208 	add.w	r2, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3301      	adds	r3, #1
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800766a:	e100      	b.n	800786e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	f107 0208 	add.w	r2, r7, #8
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
 800767c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	2202      	movs	r2, #2
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e0f2      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	885b      	ldrh	r3, [r3, #2]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b05      	cmp	r3, #5
 8007690:	f200 80ac 	bhi.w	80077ec <USBD_GetDescriptor+0x204>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <USBD_GetDescriptor+0xb4>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076b5 	.word	0x080076b5
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	08007751 	.word	0x08007751
 80076ac:	08007785 	.word	0x08007785
 80076b0:	080077b9 	.word	0x080077b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	7c12      	ldrb	r2, [r2, #16]
 80076cc:	f107 0108 	add.w	r1, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d6:	e091      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa97 	bl	8007c0e <USBD_CtlError>
            err++;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	3301      	adds	r3, #1
 80076e4:	72fb      	strb	r3, [r7, #11]
          break;
 80076e6:	e089      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7c12      	ldrb	r2, [r2, #16]
 8007700:	f107 0108 	add.w	r1, r7, #8
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770a:	e077      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa7d 	bl	8007c0e <USBD_CtlError>
            err++;
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	3301      	adds	r3, #1
 8007718:	72fb      	strb	r3, [r7, #11]
          break;
 800771a:	e06f      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7c12      	ldrb	r2, [r2, #16]
 8007734:	f107 0108 	add.w	r1, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773e:	e05d      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa63 	bl	8007c0e <USBD_CtlError>
            err++;
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	3301      	adds	r3, #1
 800774c:	72fb      	strb	r3, [r7, #11]
          break;
 800774e:	e055      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7c12      	ldrb	r2, [r2, #16]
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007772:	e043      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa49 	bl	8007c0e <USBD_CtlError>
            err++;
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	3301      	adds	r3, #1
 8007780:	72fb      	strb	r3, [r7, #11]
          break;
 8007782:	e03b      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	7c12      	ldrb	r2, [r2, #16]
 800779c:	f107 0108 	add.w	r1, r7, #8
 80077a0:	4610      	mov	r0, r2
 80077a2:	4798      	blx	r3
 80077a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a6:	e029      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa2f 	bl	8007c0e <USBD_CtlError>
            err++;
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	3301      	adds	r3, #1
 80077b4:	72fb      	strb	r3, [r7, #11]
          break;
 80077b6:	e021      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7c12      	ldrb	r2, [r2, #16]
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077da:	e00f      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa15 	bl	8007c0e <USBD_CtlError>
            err++;
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	3301      	adds	r3, #1
 80077e8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ea:	e007      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa0d 	bl	8007c0e <USBD_CtlError>
          err++;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3301      	adds	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077fa:	e038      	b.n	800786e <USBD_GetDescriptor+0x286>
 80077fc:	e037      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7c1b      	ldrb	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780e:	f107 0208 	add.w	r2, r7, #8
 8007812:	4610      	mov	r0, r2
 8007814:	4798      	blx	r3
 8007816:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007818:	e029      	b.n	800786e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9f6 	bl	8007c0e <USBD_CtlError>
        err++;
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	3301      	adds	r3, #1
 8007826:	72fb      	strb	r3, [r7, #11]
      break;
 8007828:	e021      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7c1b      	ldrb	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10d      	bne.n	800784e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	f107 0208 	add.w	r2, r7, #8
 800783e:	4610      	mov	r0, r2
 8007840:	4798      	blx	r3
 8007842:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	2207      	movs	r2, #7
 800784a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800784c:	e00f      	b.n	800786e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f9dc 	bl	8007c0e <USBD_CtlError>
        err++;
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	3301      	adds	r3, #1
 800785a:	72fb      	strb	r3, [r7, #11]
      break;
 800785c:	e007      	b.n	800786e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9d4 	bl	8007c0e <USBD_CtlError>
      err++;
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	3301      	adds	r3, #1
 800786a:	72fb      	strb	r3, [r7, #11]
      break;
 800786c:	bf00      	nop
  }

  if (err != 0U)
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11c      	bne.n	80078ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007874:	893b      	ldrh	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <USBD_GetDescriptor+0x2b6>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00d      	beq.n	800789e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88da      	ldrh	r2, [r3, #6]
 8007886:	893b      	ldrh	r3, [r7, #8]
 8007888:	4293      	cmp	r3, r2
 800788a:	bf28      	it	cs
 800788c:	4613      	movcs	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	461a      	mov	r2, r3
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa22 	bl	8007ce2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	88db      	ldrh	r3, [r3, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa79 	bl	8007d9e <USBD_CtlSendStatus>
 80078ac:	e000      	b.n	80078b0 <USBD_GetDescriptor+0x2c8>
    return;
 80078ae:	bf00      	nop
    }
  }
}
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop

080078b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	889b      	ldrh	r3, [r3, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d130      	bne.n	800792c <USBD_SetAddress+0x74>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	88db      	ldrh	r3, [r3, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d12c      	bne.n	800792c <USBD_SetAddress+0x74>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	885b      	ldrh	r3, [r3, #2]
 80078d6:	2b7f      	cmp	r3, #127	; 0x7f
 80078d8:	d828      	bhi.n	800792c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	885b      	ldrh	r3, [r3, #2]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d104      	bne.n	80078fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f98b 	bl	8007c0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f8:	e01d      	b.n	8007936 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	7bfa      	ldrb	r2, [r7, #15]
 80078fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f003 fa88 	bl	800ae1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa46 	bl	8007d9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d004      	beq.n	8007922 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007920:	e009      	b.n	8007936 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792a:	e004      	b.n	8007936 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f96d 	bl	8007c0e <USBD_CtlError>
  }
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	b2da      	uxtb	r2, r3
 8007950:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <USBD_SetConfig+0x118>)
 8007952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007954:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <USBD_SetConfig+0x118>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d904      	bls.n	8007966 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f955 	bl	8007c0e <USBD_CtlError>
 8007964:	e075      	b.n	8007a52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	2b02      	cmp	r3, #2
 800796e:	d002      	beq.n	8007976 <USBD_SetConfig+0x36>
 8007970:	2b03      	cmp	r3, #3
 8007972:	d023      	beq.n	80079bc <USBD_SetConfig+0x7c>
 8007974:	e062      	b.n	8007a3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007976:	4b38      	ldr	r3, [pc, #224]	; (8007a58 <USBD_SetConfig+0x118>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01a      	beq.n	80079b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800797e:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <USBD_SetConfig+0x118>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2203      	movs	r2, #3
 800798c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007990:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <USBD_SetConfig+0x118>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff f9e7 	bl	8006d6a <USBD_SetClassConfig>
 800799c:	4603      	mov	r3, r0
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d104      	bne.n	80079ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f932 	bl	8007c0e <USBD_CtlError>
            return;
 80079aa:	e052      	b.n	8007a52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f9f6 	bl	8007d9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079b2:	e04e      	b.n	8007a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9f2 	bl	8007d9e <USBD_CtlSendStatus>
        break;
 80079ba:	e04a      	b.n	8007a52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079bc:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <USBD_SetConfig+0x118>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d112      	bne.n	80079ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079cc:	4b22      	ldr	r3, [pc, #136]	; (8007a58 <USBD_SetConfig+0x118>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079d6:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <USBD_SetConfig+0x118>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff f9e3 	bl	8006da8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9db 	bl	8007d9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079e8:	e033      	b.n	8007a52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079ea:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <USBD_SetConfig+0x118>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d01d      	beq.n	8007a34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff f9d1 	bl	8006da8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <USBD_SetConfig+0x118>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a10:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <USBD_SetConfig+0x118>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff f9a7 	bl	8006d6a <USBD_SetClassConfig>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d104      	bne.n	8007a2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f8f2 	bl	8007c0e <USBD_CtlError>
            return;
 8007a2a:	e012      	b.n	8007a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f9b6 	bl	8007d9e <USBD_CtlSendStatus>
        break;
 8007a32:	e00e      	b.n	8007a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9b2 	bl	8007d9e <USBD_CtlSendStatus>
        break;
 8007a3a:	e00a      	b.n	8007a52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f8e5 	bl	8007c0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a44:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <USBD_SetConfig+0x118>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff f9ac 	bl	8006da8 <USBD_ClrClassConfig>
        break;
 8007a50:	bf00      	nop
    }
  }
}
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200003f0 	.word	0x200003f0

08007a5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d004      	beq.n	8007a78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8cc 	bl	8007c0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a76:	e022      	b.n	8007abe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	dc02      	bgt.n	8007a88 <USBD_GetConfig+0x2c>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc03      	bgt.n	8007a8e <USBD_GetConfig+0x32>
 8007a86:	e015      	b.n	8007ab4 <USBD_GetConfig+0x58>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetConfig+0x48>
 8007a8c:	e012      	b.n	8007ab4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3308      	adds	r3, #8
 8007a98:	2201      	movs	r2, #1
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f920 	bl	8007ce2 <USBD_CtlSendData>
        break;
 8007aa2:	e00c      	b.n	8007abe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f918 	bl	8007ce2 <USBD_CtlSendData>
        break;
 8007ab2:	e004      	b.n	8007abe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8a9 	bl	8007c0e <USBD_CtlError>
        break;
 8007abc:	bf00      	nop
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d81e      	bhi.n	8007b1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	88db      	ldrh	r3, [r3, #6]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d004      	beq.n	8007aee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f891 	bl	8007c0e <USBD_CtlError>
        break;
 8007aec:	e01a      	b.n	8007b24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f043 0202 	orr.w	r2, r3, #2
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	2202      	movs	r2, #2
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f8e5 	bl	8007ce2 <USBD_CtlSendData>
      break;
 8007b18:	e004      	b.n	8007b24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f876 	bl	8007c0e <USBD_CtlError>
      break;
 8007b22:	bf00      	nop
  }
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d106      	bne.n	8007b4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f929 	bl	8007d9e <USBD_CtlSendStatus>
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	3b01      	subs	r3, #1
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d80b      	bhi.n	8007b82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	885b      	ldrh	r3, [r3, #2]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d10c      	bne.n	8007b8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f90f 	bl	8007d9e <USBD_CtlSendStatus>
      }
      break;
 8007b80:	e004      	b.n	8007b8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f842 	bl	8007c0e <USBD_CtlError>
      break;
 8007b8a:	e000      	b.n	8007b8e <USBD_ClrFeature+0x3a>
      break;
 8007b8c:	bf00      	nop
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785a      	ldrb	r2, [r3, #1]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	3303      	adds	r3, #3
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	3305      	adds	r3, #5
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4413      	add	r3, r2
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3306      	adds	r3, #6
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3307      	adds	r3, #7
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	80da      	strh	r2, [r3, #6]

}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr

08007c0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c18:	2180      	movs	r1, #128	; 0x80
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f003 f894 	bl	800ad48 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f003 f890 	bl	800ad48 <USBD_LL_StallEP>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d032      	beq.n	8007cac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f834 	bl	8007cb4 <USBD_GetLen>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	3301      	adds	r3, #1
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	75fa      	strb	r2, [r7, #23]
 8007c60:	461a      	mov	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4413      	add	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	7812      	ldrb	r2, [r2, #0]
 8007c6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	75fa      	strb	r2, [r7, #23]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4413      	add	r3, r2
 8007c78:	2203      	movs	r2, #3
 8007c7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c7c:	e012      	b.n	8007ca4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	60fa      	str	r2, [r7, #12]
 8007c84:	7dfa      	ldrb	r2, [r7, #23]
 8007c86:	1c51      	adds	r1, r2, #1
 8007c88:	75f9      	strb	r1, [r7, #23]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	440a      	add	r2, r1
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	75fa      	strb	r2, [r7, #23]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e8      	bne.n	8007c7e <USBD_GetString+0x4e>
    }
  }
}
 8007cac:	bf00      	nop
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cc0:	e005      	b.n	8007cce <USBD_GetLen+0x1a>
  {
    len++;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f5      	bne.n	8007cc2 <USBD_GetLen+0xe>
  }

  return len;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr

08007ce2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	4613      	mov	r3, r2
 8007cee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f003 f8a5 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f003 f893 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f003 f898 	bl	800aea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	4613      	mov	r3, r2
 8007d86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f003 f886 	bl	800aea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2204      	movs	r2, #4
 8007daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dae:	2300      	movs	r3, #0
 8007db0:	2200      	movs	r2, #0
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f003 f850 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2205      	movs	r2, #5
 8007dd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2100      	movs	r1, #0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f003 f860 	bl	800aea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	4603      	mov	r3, r0
 8007df2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dfc:	2b84      	cmp	r3, #132	; 0x84
 8007dfe:	d005      	beq.n	8007e0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	3303      	adds	r3, #3
 8007e0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e1c:	f000 fed4 	bl	8008bc8 <vTaskStartScheduler>
  
  return osOK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e28:	b089      	sub	sp, #36	; 0x24
 8007e2a:	af04      	add	r7, sp, #16
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d020      	beq.n	8007e7a <osThreadCreate+0x54>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01c      	beq.n	8007e7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685c      	ldr	r4, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681d      	ldr	r5, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691e      	ldr	r6, [r3, #16]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff ffc9 	bl	8007dea <makeFreeRtosPriority>
 8007e58:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e62:	9202      	str	r2, [sp, #8]
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	9100      	str	r1, [sp, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	4632      	mov	r2, r6
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fceb 	bl	800884a <xTaskCreateStatic>
 8007e74:	4603      	mov	r3, r0
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e01c      	b.n	8007eb4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685c      	ldr	r4, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e86:	b29e      	uxth	r6, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ffab 	bl	8007dea <makeFreeRtosPriority>
 8007e94:	4602      	mov	r2, r0
 8007e96:	f107 030c 	add.w	r3, r7, #12
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	9200      	str	r2, [sp, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fd2c 	bl	8008902 <xTaskCreate>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d001      	beq.n	8007eb4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e000      	b.n	8007eb6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ebe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <osDelay+0x16>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	e000      	b.n	8007ed6 <osDelay+0x18>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fe42 	bl	8008b60 <vTaskDelay>
  
  return osOK;
 8007edc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f103 0208 	add.w	r2, r3, #8
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f04f 32ff 	mov.w	r2, #4294967295
 8007efe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f103 0208 	add.w	r2, r3, #8
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f103 0208 	add.w	r2, r3, #8
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr

08007f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr

08007f3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f82:	b480      	push	{r7}
 8007f84:	b085      	sub	sp, #20
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d103      	bne.n	8007fa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e00c      	b.n	8007fbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	e002      	b.n	8007fb0 <vListInsert+0x2e>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d2f6      	bcs.n	8007faa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]
}
 8007fe8:	bf00      	nop
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6892      	ldr	r2, [r2, #8]
 8008008:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6852      	ldr	r2, [r2, #4]
 8008012:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d103      	bne.n	8008026 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	1e5a      	subs	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800806e:	f001 fce5 	bl	8009a3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	441a      	add	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	3b01      	subs	r3, #1
 80080a0:	68f9      	ldr	r1, [r7, #12]
 80080a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	441a      	add	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	22ff      	movs	r2, #255	; 0xff
 80080b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	22ff      	movs	r2, #255	; 0xff
 80080ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d114      	bne.n	80080ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01a      	beq.n	8008102 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3310      	adds	r3, #16
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 ffbf 	bl	8009054 <xTaskRemoveFromEventList>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d012      	beq.n	8008102 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <xQueueGenericReset+0xcc>)
 80080de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	e009      	b.n	8008102 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3310      	adds	r3, #16
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fef7 	bl	8007ee6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff fef2 	bl	8007ee6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008102:	f001 fccb 	bl	8009a9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008106:	2301      	movs	r3, #1
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af02      	add	r7, sp, #8
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	613b      	str	r3, [r7, #16]
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	e004      	b.n	8008154 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	fb02 f303 	mul.w	r3, r2, r3
 8008152:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	3348      	adds	r3, #72	; 0x48
 8008158:	4618      	mov	r0, r3
 800815a:	f001 fd31 	bl	8009bc0 <pvPortMalloc>
 800815e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00f      	beq.n	8008186 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	3348      	adds	r3, #72	; 0x48
 800816a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008174:	79fa      	ldrb	r2, [r7, #7]
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f805 	bl	8008190 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008186:	69bb      	ldr	r3, [r7, #24]
	}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e002      	b.n	80081b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081be:	2101      	movs	r1, #1
 80081c0:	69b8      	ldr	r0, [r7, #24]
 80081c2:	f7ff ff3f 	bl	8008044 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081c6:	bf00      	nop
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00e      	beq.n	80081fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80081ee:	2300      	movs	r3, #0
 80081f0:	2200      	movs	r2, #0
 80081f2:	2100      	movs	r1, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f81d 	bl	8008234 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	4603      	mov	r3, r0
 800820a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	461a      	mov	r2, r3
 8008218:	6939      	ldr	r1, [r7, #16]
 800821a:	6978      	ldr	r0, [r7, #20]
 800821c:	f7ff ff7a 	bl	8008114 <xQueueGenericCreate>
 8008220:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff ffd3 	bl	80081ce <prvInitialiseMutex>

		return pxNewQueue;
 8008228:	68fb      	ldr	r3, [r7, #12]
	}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08e      	sub	sp, #56	; 0x38
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008242:	2300      	movs	r3, #0
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xQueueGenericSend+0x32>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d103      	bne.n	8008274 <xQueueGenericSend+0x40>
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <xQueueGenericSend+0x44>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <xQueueGenericSend+0x46>
 8008278:	2300      	movs	r3, #0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <xQueueGenericSend+0x60>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d103      	bne.n	80082a2 <xQueueGenericSend+0x6e>
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <xQueueGenericSend+0x72>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e000      	b.n	80082a8 <xQueueGenericSend+0x74>
 80082a6:	2300      	movs	r3, #0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	623b      	str	r3, [r7, #32]
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082c2:	f001 f887 	bl	80093d4 <xTaskGetSchedulerState>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <xQueueGenericSend+0x9e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <xQueueGenericSend+0xa2>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <xQueueGenericSend+0xa4>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	61fb      	str	r3, [r7, #28]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082f2:	f001 fba3 	bl	8009a3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fe:	429a      	cmp	r2, r3
 8008300:	d302      	bcc.n	8008308 <xQueueGenericSend+0xd4>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d129      	bne.n	800835c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800830e:	f000 f9b2 	bl	8008676 <prvCopyDataToQueue>
 8008312:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d010      	beq.n	800833e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	3324      	adds	r3, #36	; 0x24
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fe97 	bl	8009054 <xTaskRemoveFromEventList>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d013      	beq.n	8008354 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800832c:	4b3f      	ldr	r3, [pc, #252]	; (800842c <xQueueGenericSend+0x1f8>)
 800832e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	e00a      	b.n	8008354 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008344:	4b39      	ldr	r3, [pc, #228]	; (800842c <xQueueGenericSend+0x1f8>)
 8008346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008354:	f001 fba2 	bl	8009a9c <vPortExitCritical>
				return pdPASS;
 8008358:	2301      	movs	r3, #1
 800835a:	e063      	b.n	8008424 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d103      	bne.n	800836a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008362:	f001 fb9b 	bl	8009a9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008366:	2300      	movs	r3, #0
 8008368:	e05c      	b.n	8008424 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fecf 	bl	8009118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800837a:	2301      	movs	r3, #1
 800837c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800837e:	f001 fb8d 	bl	8009a9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008382:	f000 fc81 	bl	8008c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008386:	f001 fb59 	bl	8009a3c <vPortEnterCritical>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008390:	b25b      	sxtb	r3, r3
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008396:	d103      	bne.n	80083a0 <xQueueGenericSend+0x16c>
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d103      	bne.n	80083b6 <xQueueGenericSend+0x182>
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083b6:	f001 fb71 	bl	8009a9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083ba:	1d3a      	adds	r2, r7, #4
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	4611      	mov	r1, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 febe 	bl	8009144 <xTaskCheckForTimeOut>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d124      	bne.n	8008418 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083d0:	f000 fa23 	bl	800881a <prvIsQueueFull>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d018      	beq.n	800840c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	3310      	adds	r3, #16
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4611      	mov	r1, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fe12 	bl	800900c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ea:	f000 f9ae 	bl	800874a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083ee:	f000 fc59 	bl	8008ca4 <xTaskResumeAll>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f47f af7c 	bne.w	80082f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <xQueueGenericSend+0x1f8>)
 80083fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	e772      	b.n	80082f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800840c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800840e:	f000 f99c 	bl	800874a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008412:	f000 fc47 	bl	8008ca4 <xTaskResumeAll>
 8008416:	e76c      	b.n	80082f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841a:	f000 f996 	bl	800874a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800841e:	f000 fc41 	bl	8008ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008422:	2300      	movs	r3, #0
		}
	}
}
 8008424:	4618      	mov	r0, r3
 8008426:	3738      	adds	r7, #56	; 0x38
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800843a:	2300      	movs	r3, #0
 800843c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	623b      	str	r3, [r7, #32]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	61fb      	str	r3, [r7, #28]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008480:	f000 ffa8 	bl	80093d4 <xTaskGetSchedulerState>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <xQueueSemaphoreTake+0x60>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <xQueueSemaphoreTake+0x64>
 8008490:	2301      	movs	r3, #1
 8008492:	e000      	b.n	8008496 <xQueueSemaphoreTake+0x66>
 8008494:	2300      	movs	r3, #0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	61bb      	str	r3, [r7, #24]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80084b0:	f001 fac4 	bl	8009a3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d024      	beq.n	800850a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	1e5a      	subs	r2, r3, #1
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d104      	bne.n	80084da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80084d0:	f001 f94a 	bl	8009768 <pvTaskIncrementMutexHeldCount>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00f      	beq.n	8008502 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	3310      	adds	r3, #16
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fdb4 	bl	8009054 <xTaskRemoveFromEventList>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084f2:	4b54      	ldr	r3, [pc, #336]	; (8008644 <xQueueSemaphoreTake+0x214>)
 80084f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008502:	f001 facb 	bl	8009a9c <vPortExitCritical>
				return pdPASS;
 8008506:	2301      	movs	r3, #1
 8008508:	e097      	b.n	800863a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d111      	bne.n	8008534 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	617b      	str	r3, [r7, #20]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800852c:	f001 fab6 	bl	8009a9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008530:	2300      	movs	r3, #0
 8008532:	e082      	b.n	800863a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008536:	2b00      	cmp	r3, #0
 8008538:	d106      	bne.n	8008548 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800853a:	f107 030c 	add.w	r3, r7, #12
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fdea 	bl	8009118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008548:	f001 faa8 	bl	8009a9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800854c:	f000 fb9c 	bl	8008c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008550:	f001 fa74 	bl	8009a3c <vPortEnterCritical>
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800855a:	b25b      	sxtb	r3, r3
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d103      	bne.n	800856a <xQueueSemaphoreTake+0x13a>
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008570:	b25b      	sxtb	r3, r3
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d103      	bne.n	8008580 <xQueueSemaphoreTake+0x150>
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008580:	f001 fa8c 	bl	8009a9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008584:	463a      	mov	r2, r7
 8008586:	f107 030c 	add.w	r3, r7, #12
 800858a:	4611      	mov	r1, r2
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fdd9 	bl	8009144 <xTaskCheckForTimeOut>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d132      	bne.n	80085fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800859a:	f000 f928 	bl	80087ee <prvIsQueueEmpty>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d026      	beq.n	80085f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d109      	bne.n	80085c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80085ac:	f001 fa46 	bl	8009a3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80085b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 ff2b 	bl	8009410 <xTaskPriorityInherit>
 80085ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80085bc:	f001 fa6e 	bl	8009a9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	3324      	adds	r3, #36	; 0x24
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 fd1f 	bl	800900c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085d0:	f000 f8bb 	bl	800874a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085d4:	f000 fb66 	bl	8008ca4 <xTaskResumeAll>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f47f af68 	bne.w	80084b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80085e0:	4b18      	ldr	r3, [pc, #96]	; (8008644 <xQueueSemaphoreTake+0x214>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	e75e      	b.n	80084b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80085f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085f4:	f000 f8a9 	bl	800874a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085f8:	f000 fb54 	bl	8008ca4 <xTaskResumeAll>
 80085fc:	e758      	b.n	80084b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80085fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008600:	f000 f8a3 	bl	800874a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008604:	f000 fb4e 	bl	8008ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800860a:	f000 f8f0 	bl	80087ee <prvIsQueueEmpty>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	f43f af4d 	beq.w	80084b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00d      	beq.n	8008638 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800861c:	f001 fa0e 	bl	8009a3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008622:	f000 f811 	bl	8008648 <prvGetDisinheritPriorityAfterTimeout>
 8008626:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fffa 	bl	8009628 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008634:	f001 fa32 	bl	8009a9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800863a:	4618      	mov	r0, r3
 800863c:	3738      	adds	r7, #56	; 0x38
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d006      	beq.n	8008666 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f1c3 0307 	rsb	r3, r3, #7
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e001      	b.n	800866a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800866a:	68fb      	ldr	r3, [r7, #12]
	}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr

08008676 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b086      	sub	sp, #24
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10d      	bne.n	80086b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d14d      	bne.n	8008738 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 ff3b 	bl	800951c <xTaskPriorityDisinherit>
 80086a6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	e043      	b.n	8008738 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d119      	bne.n	80086ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6898      	ldr	r0, [r3, #8]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	461a      	mov	r2, r3
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	f002 fc93 	bl	800afec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	441a      	add	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d32b      	bcc.n	8008738 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	609a      	str	r2, [r3, #8]
 80086e8:	e026      	b.n	8008738 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	68d8      	ldr	r0, [r3, #12]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	461a      	mov	r2, r3
 80086f4:	68b9      	ldr	r1, [r7, #8]
 80086f6:	f002 fc79 	bl	800afec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	425b      	negs	r3, r3
 8008704:	441a      	add	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d207      	bcs.n	8008726 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	425b      	negs	r3, r3
 8008720:	441a      	add	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d105      	bne.n	8008738 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3b01      	subs	r3, #1
 8008736:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008740:	697b      	ldr	r3, [r7, #20]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008752:	f001 f973 	bl	8009a3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800875c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800875e:	e011      	b.n	8008784 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d012      	beq.n	800878e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3324      	adds	r3, #36	; 0x24
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fc71 	bl	8009054 <xTaskRemoveFromEventList>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008778:	f000 fd46 	bl	8009208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	3b01      	subs	r3, #1
 8008780:	b2db      	uxtb	r3, r3
 8008782:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008788:	2b00      	cmp	r3, #0
 800878a:	dce9      	bgt.n	8008760 <prvUnlockQueue+0x16>
 800878c:	e000      	b.n	8008790 <prvUnlockQueue+0x46>
					break;
 800878e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	22ff      	movs	r2, #255	; 0xff
 8008794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008798:	f001 f980 	bl	8009a9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800879c:	f001 f94e 	bl	8009a3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087a8:	e011      	b.n	80087ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d012      	beq.n	80087d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3310      	adds	r3, #16
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fc4c 	bl	8009054 <xTaskRemoveFromEventList>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087c2:	f000 fd21 	bl	8009208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dce9      	bgt.n	80087aa <prvUnlockQueue+0x60>
 80087d6:	e000      	b.n	80087da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	22ff      	movs	r2, #255	; 0xff
 80087de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087e2:	f001 f95b 	bl	8009a9c <vPortExitCritical>
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087f6:	f001 f921 	bl	8009a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008802:	2301      	movs	r3, #1
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e001      	b.n	800880c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800880c:	f001 f946 	bl	8009a9c <vPortExitCritical>

	return xReturn;
 8008810:	68fb      	ldr	r3, [r7, #12]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008822:	f001 f90b 	bl	8009a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882e:	429a      	cmp	r2, r3
 8008830:	d102      	bne.n	8008838 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	e001      	b.n	800883c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800883c:	f001 f92e 	bl	8009a9c <vPortExitCritical>

	return xReturn;
 8008840:	68fb      	ldr	r3, [r7, #12]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800884a:	b580      	push	{r7, lr}
 800884c:	b08e      	sub	sp, #56	; 0x38
 800884e:	af04      	add	r7, sp, #16
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <xTaskCreateStatic+0x2a>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	623b      	str	r3, [r7, #32]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <xTaskCreateStatic+0x46>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fb      	str	r3, [r7, #28]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008890:	2354      	movs	r3, #84	; 0x54
 8008892:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b54      	cmp	r3, #84	; 0x54
 8008898:	d00a      	beq.n	80088b0 <xTaskCreateStatic+0x66>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	61bb      	str	r3, [r7, #24]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d01e      	beq.n	80088f4 <xTaskCreateStatic+0xaa>
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01b      	beq.n	80088f4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	2202      	movs	r2, #2
 80088ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088ce:	2300      	movs	r3, #0
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	9302      	str	r3, [sp, #8]
 80088d6:	f107 0314 	add.w	r3, r7, #20
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f850 	bl	800898c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088ee:	f000 f8cd 	bl	8008a8c <prvAddNewTaskToReadyList>
 80088f2:	e001      	b.n	80088f8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088f8:	697b      	ldr	r3, [r7, #20]
	}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3728      	adds	r7, #40	; 0x28
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008902:	b580      	push	{r7, lr}
 8008904:	b08c      	sub	sp, #48	; 0x30
 8008906:	af04      	add	r7, sp, #16
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4618      	mov	r0, r3
 8008918:	f001 f952 	bl	8009bc0 <pvPortMalloc>
 800891c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00e      	beq.n	8008942 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008924:	2054      	movs	r0, #84	; 0x54
 8008926:	f001 f94b 	bl	8009bc0 <pvPortMalloc>
 800892a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	631a      	str	r2, [r3, #48]	; 0x30
 8008938:	e005      	b.n	8008946 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800893a:	6978      	ldr	r0, [r7, #20]
 800893c:	f001 fa04 	bl	8009d48 <vPortFree>
 8008940:	e001      	b.n	8008946 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d017      	beq.n	800897c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008954:	88fa      	ldrh	r2, [r7, #6]
 8008956:	2300      	movs	r3, #0
 8008958:	9303      	str	r3, [sp, #12]
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	9302      	str	r3, [sp, #8]
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68b9      	ldr	r1, [r7, #8]
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 f80e 	bl	800898c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008970:	69f8      	ldr	r0, [r7, #28]
 8008972:	f000 f88b 	bl	8008a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008976:	2301      	movs	r3, #1
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	e002      	b.n	8008982 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800897c:	f04f 33ff 	mov.w	r3, #4294967295
 8008980:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008982:	69bb      	ldr	r3, [r7, #24]
	}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089a4:	3b01      	subs	r3, #1
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f023 0307 	bic.w	r3, r3, #7
 80089b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	617b      	str	r3, [r7, #20]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089d4:	2300      	movs	r3, #0
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	e012      	b.n	8008a00 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	7819      	ldrb	r1, [r3, #0]
 80089e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	3334      	adds	r3, #52	; 0x34
 80089ea:	460a      	mov	r2, r1
 80089ec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d006      	beq.n	8008a08 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	3301      	adds	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b0f      	cmp	r3, #15
 8008a04:	d9e9      	bls.n	80089da <prvInitialiseNewTask+0x4e>
 8008a06:	e000      	b.n	8008a0a <prvInitialiseNewTask+0x7e>
		{
			break;
 8008a08:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	2b06      	cmp	r3, #6
 8008a16:	d901      	bls.n	8008a1c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a18:	2306      	movs	r3, #6
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fa76 	bl	8007f24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	3318      	adds	r3, #24
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff fa71 	bl	8007f24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	f1c3 0207 	rsb	r2, r3, #7
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	68f9      	ldr	r1, [r7, #12]
 8008a6a:	69b8      	ldr	r0, [r7, #24]
 8008a6c:	f000 fef6 	bl	800985c <pxPortInitialiseStack>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a82:	bf00      	nop
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a94:	f000 ffd2 	bl	8009a3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a98:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <prvAddNewTaskToReadyList+0xb8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	4a29      	ldr	r2, [pc, #164]	; (8008b44 <prvAddNewTaskToReadyList+0xb8>)
 8008aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008aa2:	4b29      	ldr	r3, [pc, #164]	; (8008b48 <prvAddNewTaskToReadyList+0xbc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008aaa:	4a27      	ldr	r2, [pc, #156]	; (8008b48 <prvAddNewTaskToReadyList+0xbc>)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ab0:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <prvAddNewTaskToReadyList+0xb8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d110      	bne.n	8008ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ab8:	f000 fbca 	bl	8009250 <prvInitialiseTaskLists>
 8008abc:	e00d      	b.n	8008ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008abe:	4b23      	ldr	r3, [pc, #140]	; (8008b4c <prvAddNewTaskToReadyList+0xc0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ac6:	4b20      	ldr	r3, [pc, #128]	; (8008b48 <prvAddNewTaskToReadyList+0xbc>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d802      	bhi.n	8008ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ad4:	4a1c      	ldr	r2, [pc, #112]	; (8008b48 <prvAddNewTaskToReadyList+0xbc>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ada:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <prvAddNewTaskToReadyList+0xc4>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <prvAddNewTaskToReadyList+0xc4>)
 8008ae2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	2201      	movs	r2, #1
 8008aea:	409a      	lsls	r2, r3
 8008aec:	4b19      	ldr	r3, [pc, #100]	; (8008b54 <prvAddNewTaskToReadyList+0xc8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	4a18      	ldr	r2, [pc, #96]	; (8008b54 <prvAddNewTaskToReadyList+0xc8>)
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <prvAddNewTaskToReadyList+0xcc>)
 8008b04:	441a      	add	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	f7ff fa15 	bl	8007f3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b12:	f000 ffc3 	bl	8009a9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <prvAddNewTaskToReadyList+0xc0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <prvAddNewTaskToReadyList+0xbc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d207      	bcs.n	8008b3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	; (8008b5c <prvAddNewTaskToReadyList+0xd0>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200004f4 	.word	0x200004f4
 8008b48:	200003f4 	.word	0x200003f4
 8008b4c:	20000500 	.word	0x20000500
 8008b50:	20000510 	.word	0x20000510
 8008b54:	200004fc 	.word	0x200004fc
 8008b58:	200003f8 	.word	0x200003f8
 8008b5c:	e000ed04 	.word	0xe000ed04

08008b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d017      	beq.n	8008ba2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b72:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <vTaskDelay+0x60>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <vTaskDelay+0x30>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	60bb      	str	r3, [r7, #8]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b90:	f000 f87a 	bl	8008c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b94:	2100      	movs	r1, #0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fdfa 	bl	8009790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b9c:	f000 f882 	bl	8008ca4 <xTaskResumeAll>
 8008ba0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ba8:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <vTaskDelay+0x64>)
 8008baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	2000051c 	.word	0x2000051c
 8008bc4:	e000ed04 	.word	0xe000ed04

08008bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08a      	sub	sp, #40	; 0x28
 8008bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bd6:	463a      	mov	r2, r7
 8008bd8:	1d39      	adds	r1, r7, #4
 8008bda:	f107 0308 	add.w	r3, r7, #8
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f7 fabe 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	9202      	str	r2, [sp, #8]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	460a      	mov	r2, r1
 8008bf6:	491e      	ldr	r1, [pc, #120]	; (8008c70 <vTaskStartScheduler+0xa8>)
 8008bf8:	481e      	ldr	r0, [pc, #120]	; (8008c74 <vTaskStartScheduler+0xac>)
 8008bfa:	f7ff fe26 	bl	800884a <xTaskCreateStatic>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4a1d      	ldr	r2, [pc, #116]	; (8008c78 <vTaskStartScheduler+0xb0>)
 8008c02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c04:	4b1c      	ldr	r3, [pc, #112]	; (8008c78 <vTaskStartScheduler+0xb0>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e001      	b.n	8008c16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d116      	bne.n	8008c4a <vTaskStartScheduler+0x82>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	613b      	str	r3, [r7, #16]
}
 8008c2e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c30:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <vTaskStartScheduler+0xb4>)
 8008c32:	f04f 32ff 	mov.w	r2, #4294967295
 8008c36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c38:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <vTaskStartScheduler+0xb8>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008c3e:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <vTaskStartScheduler+0xbc>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c44:	f000 fe88 	bl	8009958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c48:	e00e      	b.n	8008c68 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c50:	d10a      	bne.n	8008c68 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vTaskStartScheduler+0x9e>
}
 8008c68:	bf00      	nop
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	0800b07c 	.word	0x0800b07c
 8008c74:	08009221 	.word	0x08009221
 8008c78:	20000518 	.word	0x20000518
 8008c7c:	20000514 	.word	0x20000514
 8008c80:	20000500 	.word	0x20000500
 8008c84:	200004f8 	.word	0x200004f8

08008c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008c8c:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <vTaskSuspendAll+0x18>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	4a03      	ldr	r2, [pc, #12]	; (8008ca0 <vTaskSuspendAll+0x18>)
 8008c94:	6013      	str	r3, [r2, #0]
}
 8008c96:	bf00      	nop
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bc80      	pop	{r7}
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	2000051c 	.word	0x2000051c

08008ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cb2:	4b41      	ldr	r3, [pc, #260]	; (8008db8 <xTaskResumeAll+0x114>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10a      	bne.n	8008cd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	603b      	str	r3, [r7, #0]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cd0:	f000 feb4 	bl	8009a3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cd4:	4b38      	ldr	r3, [pc, #224]	; (8008db8 <xTaskResumeAll+0x114>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	4a37      	ldr	r2, [pc, #220]	; (8008db8 <xTaskResumeAll+0x114>)
 8008cdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cde:	4b36      	ldr	r3, [pc, #216]	; (8008db8 <xTaskResumeAll+0x114>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d161      	bne.n	8008daa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ce6:	4b35      	ldr	r3, [pc, #212]	; (8008dbc <xTaskResumeAll+0x118>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d05d      	beq.n	8008daa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cee:	e02e      	b.n	8008d4e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008cf0:	4b33      	ldr	r3, [pc, #204]	; (8008dc0 <xTaskResumeAll+0x11c>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3318      	adds	r3, #24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff f978 	bl	8007ff2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3304      	adds	r3, #4
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff f973 	bl	8007ff2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	2201      	movs	r2, #1
 8008d12:	409a      	lsls	r2, r3
 8008d14:	4b2b      	ldr	r3, [pc, #172]	; (8008dc4 <xTaskResumeAll+0x120>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	4a2a      	ldr	r2, [pc, #168]	; (8008dc4 <xTaskResumeAll+0x120>)
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4a27      	ldr	r2, [pc, #156]	; (8008dc8 <xTaskResumeAll+0x124>)
 8008d2c:	441a      	add	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7ff f901 	bl	8007f3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	4b23      	ldr	r3, [pc, #140]	; (8008dcc <xTaskResumeAll+0x128>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d302      	bcc.n	8008d4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008d48:	4b21      	ldr	r3, [pc, #132]	; (8008dd0 <xTaskResumeAll+0x12c>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d4e:	4b1c      	ldr	r3, [pc, #112]	; (8008dc0 <xTaskResumeAll+0x11c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1cc      	bne.n	8008cf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d5c:	f000 fb16 	bl	800938c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008d60:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <xTaskResumeAll+0x130>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d010      	beq.n	8008d8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d6c:	f000 f836 	bl	8008ddc <xTaskIncrementTick>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008d76:	4b16      	ldr	r3, [pc, #88]	; (8008dd0 <xTaskResumeAll+0x12c>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1f1      	bne.n	8008d6c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <xTaskResumeAll+0x130>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d8e:	4b10      	ldr	r3, [pc, #64]	; (8008dd0 <xTaskResumeAll+0x12c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d96:	2301      	movs	r3, #1
 8008d98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d9a:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <xTaskResumeAll+0x134>)
 8008d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008daa:	f000 fe77 	bl	8009a9c <vPortExitCritical>

	return xAlreadyYielded;
 8008dae:	68bb      	ldr	r3, [r7, #8]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	2000051c 	.word	0x2000051c
 8008dbc:	200004f4 	.word	0x200004f4
 8008dc0:	200004b4 	.word	0x200004b4
 8008dc4:	200004fc 	.word	0x200004fc
 8008dc8:	200003f8 	.word	0x200003f8
 8008dcc:	200003f4 	.word	0x200003f4
 8008dd0:	20000508 	.word	0x20000508
 8008dd4:	20000504 	.word	0x20000504
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de6:	4b51      	ldr	r3, [pc, #324]	; (8008f2c <xTaskIncrementTick+0x150>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f040 808d 	bne.w	8008f0a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008df0:	4b4f      	ldr	r3, [pc, #316]	; (8008f30 <xTaskIncrementTick+0x154>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008df8:	4a4d      	ldr	r2, [pc, #308]	; (8008f30 <xTaskIncrementTick+0x154>)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d120      	bne.n	8008e46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e04:	4b4b      	ldr	r3, [pc, #300]	; (8008f34 <xTaskIncrementTick+0x158>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	603b      	str	r3, [r7, #0]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <xTaskIncrementTick+0x46>
 8008e24:	4b43      	ldr	r3, [pc, #268]	; (8008f34 <xTaskIncrementTick+0x158>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	4b43      	ldr	r3, [pc, #268]	; (8008f38 <xTaskIncrementTick+0x15c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a41      	ldr	r2, [pc, #260]	; (8008f34 <xTaskIncrementTick+0x158>)
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	4a41      	ldr	r2, [pc, #260]	; (8008f38 <xTaskIncrementTick+0x15c>)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	4b40      	ldr	r3, [pc, #256]	; (8008f3c <xTaskIncrementTick+0x160>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	4a3f      	ldr	r2, [pc, #252]	; (8008f3c <xTaskIncrementTick+0x160>)
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	f000 faa3 	bl	800938c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e46:	4b3e      	ldr	r3, [pc, #248]	; (8008f40 <xTaskIncrementTick+0x164>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d34d      	bcc.n	8008eec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e50:	4b38      	ldr	r3, [pc, #224]	; (8008f34 <xTaskIncrementTick+0x158>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <xTaskIncrementTick+0x82>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <xTaskIncrementTick+0x84>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e64:	4b36      	ldr	r3, [pc, #216]	; (8008f40 <xTaskIncrementTick+0x164>)
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	601a      	str	r2, [r3, #0]
					break;
 8008e6c:	e03e      	b.n	8008eec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008e6e:	4b31      	ldr	r3, [pc, #196]	; (8008f34 <xTaskIncrementTick+0x158>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d203      	bcs.n	8008e8e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e86:	4a2e      	ldr	r2, [pc, #184]	; (8008f40 <xTaskIncrementTick+0x164>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6013      	str	r3, [r2, #0]
						break;
 8008e8c:	e02e      	b.n	8008eec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff f8ad 	bl	8007ff2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	3318      	adds	r3, #24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff f8a4 	bl	8007ff2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	2201      	movs	r2, #1
 8008eb0:	409a      	lsls	r2, r3
 8008eb2:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <xTaskIncrementTick+0x168>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	4a22      	ldr	r2, [pc, #136]	; (8008f44 <xTaskIncrementTick+0x168>)
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <xTaskIncrementTick+0x16c>)
 8008eca:	441a      	add	r2, r3
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f7ff f832 	bl	8007f3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008edc:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <xTaskIncrementTick+0x170>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d3b4      	bcc.n	8008e50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eea:	e7b1      	b.n	8008e50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eec:	4b17      	ldr	r3, [pc, #92]	; (8008f4c <xTaskIncrementTick+0x170>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef2:	4915      	ldr	r1, [pc, #84]	; (8008f48 <xTaskIncrementTick+0x16c>)
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d907      	bls.n	8008f14 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008f04:	2301      	movs	r3, #1
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	e004      	b.n	8008f14 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008f0a:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <xTaskIncrementTick+0x174>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	4a0f      	ldr	r2, [pc, #60]	; (8008f50 <xTaskIncrementTick+0x174>)
 8008f12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008f14:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <xTaskIncrementTick+0x178>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008f20:	697b      	ldr	r3, [r7, #20]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	2000051c 	.word	0x2000051c
 8008f30:	200004f8 	.word	0x200004f8
 8008f34:	200004ac 	.word	0x200004ac
 8008f38:	200004b0 	.word	0x200004b0
 8008f3c:	2000050c 	.word	0x2000050c
 8008f40:	20000514 	.word	0x20000514
 8008f44:	200004fc 	.word	0x200004fc
 8008f48:	200003f8 	.word	0x200003f8
 8008f4c:	200003f4 	.word	0x200003f4
 8008f50:	20000504 	.word	0x20000504
 8008f54:	20000508 	.word	0x20000508

08008f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f5e:	4b26      	ldr	r3, [pc, #152]	; (8008ff8 <vTaskSwitchContext+0xa0>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f66:	4b25      	ldr	r3, [pc, #148]	; (8008ffc <vTaskSwitchContext+0xa4>)
 8008f68:	2201      	movs	r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f6c:	e03f      	b.n	8008fee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008f6e:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <vTaskSwitchContext+0xa4>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008f74:	4b22      	ldr	r3, [pc, #136]	; (8009000 <vTaskSwitchContext+0xa8>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	fab3 f383 	clz	r3, r3
 8008f80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	f1c3 031f 	rsb	r3, r3, #31
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	491e      	ldr	r1, [pc, #120]	; (8009004 <vTaskSwitchContext+0xac>)
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	440b      	add	r3, r1
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10a      	bne.n	8008fb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	607b      	str	r3, [r7, #4]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <vTaskSwitchContext+0x5a>
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4a11      	ldr	r2, [pc, #68]	; (8009004 <vTaskSwitchContext+0xac>)
 8008fc0:	4413      	add	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	605a      	str	r2, [r3, #4]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d104      	bne.n	8008fe4 <vTaskSwitchContext+0x8c>
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	605a      	str	r2, [r3, #4]
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	4a07      	ldr	r2, [pc, #28]	; (8009008 <vTaskSwitchContext+0xb0>)
 8008fec:	6013      	str	r3, [r2, #0]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr
 8008ff8:	2000051c 	.word	0x2000051c
 8008ffc:	20000508 	.word	0x20000508
 8009000:	200004fc 	.word	0x200004fc
 8009004:	200003f8 	.word	0x200003f8
 8009008:	200003f4 	.word	0x200003f4

0800900c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60fb      	str	r3, [r7, #12]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009032:	4b07      	ldr	r3, [pc, #28]	; (8009050 <vTaskPlaceOnEventList+0x44>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3318      	adds	r3, #24
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fe ffa1 	bl	8007f82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009040:	2101      	movs	r1, #1
 8009042:	6838      	ldr	r0, [r7, #0]
 8009044:	f000 fba4 	bl	8009790 <prvAddCurrentTaskToDelayedList>
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	200003f4 	.word	0x200003f4

08009054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10a      	bne.n	8009080 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	60fb      	str	r3, [r7, #12]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3318      	adds	r3, #24
 8009084:	4618      	mov	r0, r3
 8009086:	f7fe ffb4 	bl	8007ff2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800908a:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <xTaskRemoveFromEventList+0xac>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d11c      	bne.n	80090cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3304      	adds	r3, #4
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe ffab 	bl	8007ff2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	2201      	movs	r2, #1
 80090a2:	409a      	lsls	r2, r3
 80090a4:	4b17      	ldr	r3, [pc, #92]	; (8009104 <xTaskRemoveFromEventList+0xb0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	4a16      	ldr	r2, [pc, #88]	; (8009104 <xTaskRemoveFromEventList+0xb0>)
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4a13      	ldr	r2, [pc, #76]	; (8009108 <xTaskRemoveFromEventList+0xb4>)
 80090bc:	441a      	add	r2, r3
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	3304      	adds	r3, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fe ff39 	bl	8007f3c <vListInsertEnd>
 80090ca:	e005      	b.n	80090d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	3318      	adds	r3, #24
 80090d0:	4619      	mov	r1, r3
 80090d2:	480e      	ldr	r0, [pc, #56]	; (800910c <xTaskRemoveFromEventList+0xb8>)
 80090d4:	f7fe ff32 	bl	8007f3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <xTaskRemoveFromEventList+0xbc>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d905      	bls.n	80090f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090e6:	2301      	movs	r3, #1
 80090e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <xTaskRemoveFromEventList+0xc0>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	e001      	b.n	80090f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80090f6:	697b      	ldr	r3, [r7, #20]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	2000051c 	.word	0x2000051c
 8009104:	200004fc 	.word	0x200004fc
 8009108:	200003f8 	.word	0x200003f8
 800910c:	200004b4 	.word	0x200004b4
 8009110:	200003f4 	.word	0x200003f4
 8009114:	20000508 	.word	0x20000508

08009118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <vTaskInternalSetTimeOutState+0x24>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <vTaskInternalSetTimeOutState+0x28>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	605a      	str	r2, [r3, #4]
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	2000050c 	.word	0x2000050c
 8009140:	200004f8 	.word	0x200004f8

08009144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	613b      	str	r3, [r7, #16]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009186:	f000 fc59 	bl	8009a3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800918a:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <xTaskCheckForTimeOut+0xbc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	d102      	bne.n	80091aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e023      	b.n	80091f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4b15      	ldr	r3, [pc, #84]	; (8009204 <xTaskCheckForTimeOut+0xc0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d007      	beq.n	80091c6 <xTaskCheckForTimeOut+0x82>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d302      	bcc.n	80091c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091c0:	2301      	movs	r3, #1
 80091c2:	61fb      	str	r3, [r7, #28]
 80091c4:	e015      	b.n	80091f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d20b      	bcs.n	80091e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	1ad2      	subs	r2, r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ff9b 	bl	8009118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	61fb      	str	r3, [r7, #28]
 80091e6:	e004      	b.n	80091f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091ee:	2301      	movs	r3, #1
 80091f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091f2:	f000 fc53 	bl	8009a9c <vPortExitCritical>

	return xReturn;
 80091f6:	69fb      	ldr	r3, [r7, #28]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200004f8 	.word	0x200004f8
 8009204:	2000050c 	.word	0x2000050c

08009208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800920c:	4b03      	ldr	r3, [pc, #12]	; (800921c <vTaskMissedYield+0x14>)
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
}
 8009212:	bf00      	nop
 8009214:	46bd      	mov	sp, r7
 8009216:	bc80      	pop	{r7}
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	20000508 	.word	0x20000508

08009220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009228:	f000 f852 	bl	80092d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <prvIdleTask+0x28>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d9f9      	bls.n	8009228 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <prvIdleTask+0x2c>)
 8009236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009244:	e7f0      	b.n	8009228 <prvIdleTask+0x8>
 8009246:	bf00      	nop
 8009248:	200003f8 	.word	0x200003f8
 800924c:	e000ed04 	.word	0xe000ed04

08009250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009256:	2300      	movs	r3, #0
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	e00c      	b.n	8009276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a12      	ldr	r2, [pc, #72]	; (80092b0 <prvInitialiseTaskLists+0x60>)
 8009268:	4413      	add	r3, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe fe3b 	bl	8007ee6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3301      	adds	r3, #1
 8009274:	607b      	str	r3, [r7, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b06      	cmp	r3, #6
 800927a:	d9ef      	bls.n	800925c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800927c:	480d      	ldr	r0, [pc, #52]	; (80092b4 <prvInitialiseTaskLists+0x64>)
 800927e:	f7fe fe32 	bl	8007ee6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009282:	480d      	ldr	r0, [pc, #52]	; (80092b8 <prvInitialiseTaskLists+0x68>)
 8009284:	f7fe fe2f 	bl	8007ee6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009288:	480c      	ldr	r0, [pc, #48]	; (80092bc <prvInitialiseTaskLists+0x6c>)
 800928a:	f7fe fe2c 	bl	8007ee6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800928e:	480c      	ldr	r0, [pc, #48]	; (80092c0 <prvInitialiseTaskLists+0x70>)
 8009290:	f7fe fe29 	bl	8007ee6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009294:	480b      	ldr	r0, [pc, #44]	; (80092c4 <prvInitialiseTaskLists+0x74>)
 8009296:	f7fe fe26 	bl	8007ee6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <prvInitialiseTaskLists+0x78>)
 800929c:	4a05      	ldr	r2, [pc, #20]	; (80092b4 <prvInitialiseTaskLists+0x64>)
 800929e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092a0:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <prvInitialiseTaskLists+0x7c>)
 80092a2:	4a05      	ldr	r2, [pc, #20]	; (80092b8 <prvInitialiseTaskLists+0x68>)
 80092a4:	601a      	str	r2, [r3, #0]
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	200003f8 	.word	0x200003f8
 80092b4:	20000484 	.word	0x20000484
 80092b8:	20000498 	.word	0x20000498
 80092bc:	200004b4 	.word	0x200004b4
 80092c0:	200004c8 	.word	0x200004c8
 80092c4:	200004e0 	.word	0x200004e0
 80092c8:	200004ac 	.word	0x200004ac
 80092cc:	200004b0 	.word	0x200004b0

080092d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092d6:	e019      	b.n	800930c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092d8:	f000 fbb0 	bl	8009a3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80092dc:	4b10      	ldr	r3, [pc, #64]	; (8009320 <prvCheckTasksWaitingTermination+0x50>)
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fe82 	bl	8007ff2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <prvCheckTasksWaitingTermination+0x54>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	4a0b      	ldr	r2, [pc, #44]	; (8009324 <prvCheckTasksWaitingTermination+0x54>)
 80092f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092f8:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <prvCheckTasksWaitingTermination+0x58>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <prvCheckTasksWaitingTermination+0x58>)
 8009300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009302:	f000 fbcb 	bl	8009a9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f810 	bl	800932c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800930c:	4b06      	ldr	r3, [pc, #24]	; (8009328 <prvCheckTasksWaitingTermination+0x58>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e1      	bne.n	80092d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	200004c8 	.word	0x200004c8
 8009324:	200004f4 	.word	0x200004f4
 8009328:	200004dc 	.word	0x200004dc

0800932c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800933a:	2b00      	cmp	r3, #0
 800933c:	d108      	bne.n	8009350 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fd00 	bl	8009d48 <vPortFree>
				vPortFree( pxTCB );
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fcfd 	bl	8009d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800934e:	e018      	b.n	8009382 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009356:	2b01      	cmp	r3, #1
 8009358:	d103      	bne.n	8009362 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fcf4 	bl	8009d48 <vPortFree>
	}
 8009360:	e00f      	b.n	8009382 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009368:	2b02      	cmp	r3, #2
 800936a:	d00a      	beq.n	8009382 <prvDeleteTCB+0x56>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60fb      	str	r3, [r7, #12]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <prvDeleteTCB+0x54>
	}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009392:	4b0e      	ldr	r3, [pc, #56]	; (80093cc <prvResetNextTaskUnblockTime+0x40>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <prvResetNextTaskUnblockTime+0x14>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <prvResetNextTaskUnblockTime+0x16>
 80093a0:	2300      	movs	r3, #0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d004      	beq.n	80093b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <prvResetNextTaskUnblockTime+0x44>)
 80093a8:	f04f 32ff 	mov.w	r2, #4294967295
 80093ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093ae:	e008      	b.n	80093c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80093b0:	4b06      	ldr	r3, [pc, #24]	; (80093cc <prvResetNextTaskUnblockTime+0x40>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	4a04      	ldr	r2, [pc, #16]	; (80093d0 <prvResetNextTaskUnblockTime+0x44>)
 80093c0:	6013      	str	r3, [r2, #0]
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr
 80093cc:	200004ac 	.word	0x200004ac
 80093d0:	20000514 	.word	0x20000514

080093d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093da:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <xTaskGetSchedulerState+0x34>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093e2:	2301      	movs	r3, #1
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	e008      	b.n	80093fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093e8:	4b08      	ldr	r3, [pc, #32]	; (800940c <xTaskGetSchedulerState+0x38>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093f0:	2302      	movs	r3, #2
 80093f2:	607b      	str	r3, [r7, #4]
 80093f4:	e001      	b.n	80093fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093f6:	2300      	movs	r3, #0
 80093f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093fa:	687b      	ldr	r3, [r7, #4]
	}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20000500 	.word	0x20000500
 800940c:	2000051c 	.word	0x2000051c

08009410 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d06e      	beq.n	8009504 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942a:	4b39      	ldr	r3, [pc, #228]	; (8009510 <xTaskPriorityInherit+0x100>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009430:	429a      	cmp	r2, r3
 8009432:	d25e      	bcs.n	80094f2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	db06      	blt.n	800944a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800943c:	4b34      	ldr	r3, [pc, #208]	; (8009510 <xTaskPriorityInherit+0x100>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	f1c3 0207 	rsb	r2, r3, #7
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	6959      	ldr	r1, [r3, #20]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4a2e      	ldr	r2, [pc, #184]	; (8009514 <xTaskPriorityInherit+0x104>)
 800945c:	4413      	add	r3, r2
 800945e:	4299      	cmp	r1, r3
 8009460:	d101      	bne.n	8009466 <xTaskPriorityInherit+0x56>
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <xTaskPriorityInherit+0x58>
 8009466:	2300      	movs	r3, #0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d03a      	beq.n	80094e2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	3304      	adds	r3, #4
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fdbe 	bl	8007ff2 <uxListRemove>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d115      	bne.n	80094a8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4924      	ldr	r1, [pc, #144]	; (8009514 <xTaskPriorityInherit+0x104>)
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <xTaskPriorityInherit+0x98>
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009496:	2201      	movs	r2, #1
 8009498:	fa02 f303 	lsl.w	r3, r2, r3
 800949c:	43da      	mvns	r2, r3
 800949e:	4b1e      	ldr	r3, [pc, #120]	; (8009518 <xTaskPriorityInherit+0x108>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4013      	ands	r3, r2
 80094a4:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <xTaskPriorityInherit+0x108>)
 80094a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094a8:	4b19      	ldr	r3, [pc, #100]	; (8009510 <xTaskPriorityInherit+0x100>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	2201      	movs	r2, #1
 80094b8:	409a      	lsls	r2, r3
 80094ba:	4b17      	ldr	r3, [pc, #92]	; (8009518 <xTaskPriorityInherit+0x108>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4313      	orrs	r3, r2
 80094c0:	4a15      	ldr	r2, [pc, #84]	; (8009518 <xTaskPriorityInherit+0x108>)
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4a10      	ldr	r2, [pc, #64]	; (8009514 <xTaskPriorityInherit+0x104>)
 80094d2:	441a      	add	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4619      	mov	r1, r3
 80094da:	4610      	mov	r0, r2
 80094dc:	f7fe fd2e 	bl	8007f3c <vListInsertEnd>
 80094e0:	e004      	b.n	80094ec <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094e2:	4b0b      	ldr	r3, [pc, #44]	; (8009510 <xTaskPriorityInherit+0x100>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80094ec:	2301      	movs	r3, #1
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e008      	b.n	8009504 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094f6:	4b06      	ldr	r3, [pc, #24]	; (8009510 <xTaskPriorityInherit+0x100>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d201      	bcs.n	8009504 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009500:	2301      	movs	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009504:	68fb      	ldr	r3, [r7, #12]
	}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	200003f4 	.word	0x200003f4
 8009514:	200003f8 	.word	0x200003f8
 8009518:	200004fc 	.word	0x200004fc

0800951c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d06e      	beq.n	8009610 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009532:	4b3a      	ldr	r3, [pc, #232]	; (800961c <xTaskPriorityDisinherit+0x100>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	429a      	cmp	r2, r3
 800953a:	d00a      	beq.n	8009552 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	60fb      	str	r3, [r7, #12]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10a      	bne.n	8009570 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	60bb      	str	r3, [r7, #8]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009574:	1e5a      	subs	r2, r3, #1
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009582:	429a      	cmp	r2, r3
 8009584:	d044      	beq.n	8009610 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958a:	2b00      	cmp	r3, #0
 800958c:	d140      	bne.n	8009610 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	3304      	adds	r3, #4
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fd2d 	bl	8007ff2 <uxListRemove>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d115      	bne.n	80095ca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a2:	491f      	ldr	r1, [pc, #124]	; (8009620 <xTaskPriorityDisinherit+0x104>)
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <xTaskPriorityDisinherit+0xae>
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	2201      	movs	r2, #1
 80095ba:	fa02 f303 	lsl.w	r3, r2, r3
 80095be:	43da      	mvns	r2, r3
 80095c0:	4b18      	ldr	r3, [pc, #96]	; (8009624 <xTaskPriorityDisinherit+0x108>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4013      	ands	r3, r2
 80095c6:	4a17      	ldr	r2, [pc, #92]	; (8009624 <xTaskPriorityDisinherit+0x108>)
 80095c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	f1c3 0207 	rsb	r2, r3, #7
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	2201      	movs	r2, #1
 80095e4:	409a      	lsls	r2, r3
 80095e6:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <xTaskPriorityDisinherit+0x108>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	4a0d      	ldr	r2, [pc, #52]	; (8009624 <xTaskPriorityDisinherit+0x108>)
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a08      	ldr	r2, [pc, #32]	; (8009620 <xTaskPriorityDisinherit+0x104>)
 80095fe:	441a      	add	r2, r3
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe fc98 	bl	8007f3c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009610:	697b      	ldr	r3, [r7, #20]
	}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200003f4 	.word	0x200003f4
 8009620:	200003f8 	.word	0x200003f8
 8009624:	200004fc 	.word	0x200004fc

08009628 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009636:	2301      	movs	r3, #1
 8009638:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 8088 	beq.w	8009752 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	60fb      	str	r3, [r7, #12]
}
 800965c:	bf00      	nop
 800965e:	e7fe      	b.n	800965e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d902      	bls.n	8009670 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	61fb      	str	r3, [r7, #28]
 800966e:	e002      	b.n	8009676 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009674:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967a:	69fa      	ldr	r2, [r7, #28]
 800967c:	429a      	cmp	r2, r3
 800967e:	d068      	beq.n	8009752 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	429a      	cmp	r2, r3
 8009688:	d163      	bne.n	8009752 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800968a:	4b34      	ldr	r3, [pc, #208]	; (800975c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	429a      	cmp	r2, r3
 8009692:	d10a      	bne.n	80096aa <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	60bb      	str	r3, [r7, #8]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	db04      	blt.n	80096c8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	f1c3 0207 	rsb	r2, r3, #7
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	6959      	ldr	r1, [r3, #20]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a22      	ldr	r2, [pc, #136]	; (8009760 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80096d8:	4413      	add	r3, r2
 80096da:	4299      	cmp	r1, r3
 80096dc:	d101      	bne.n	80096e2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80096e2:	2300      	movs	r3, #0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d034      	beq.n	8009752 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fc80 	bl	8007ff2 <uxListRemove>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d115      	bne.n	8009724 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fc:	4918      	ldr	r1, [pc, #96]	; (8009760 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009712:	2201      	movs	r2, #1
 8009714:	fa02 f303 	lsl.w	r3, r2, r3
 8009718:	43da      	mvns	r2, r3
 800971a:	4b12      	ldr	r3, [pc, #72]	; (8009764 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4013      	ands	r3, r2
 8009720:	4a10      	ldr	r2, [pc, #64]	; (8009764 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009722:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	2201      	movs	r2, #1
 800972a:	409a      	lsls	r2, r3
 800972c:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4313      	orrs	r3, r2
 8009732:	4a0c      	ldr	r2, [pc, #48]	; (8009764 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4a07      	ldr	r2, [pc, #28]	; (8009760 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009744:	441a      	add	r2, r3
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	3304      	adds	r3, #4
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7fe fbf5 	bl	8007f3c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009752:	bf00      	nop
 8009754:	3720      	adds	r7, #32
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	200003f4 	.word	0x200003f4
 8009760:	200003f8 	.word	0x200003f8
 8009764:	200004fc 	.word	0x200004fc

08009768 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800976c:	4b07      	ldr	r3, [pc, #28]	; (800978c <pvTaskIncrementMutexHeldCount+0x24>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <pvTaskIncrementMutexHeldCount+0x24>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800977a:	3201      	adds	r2, #1
 800977c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800977e:	4b03      	ldr	r3, [pc, #12]	; (800978c <pvTaskIncrementMutexHeldCount+0x24>)
 8009780:	681b      	ldr	r3, [r3, #0]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	46bd      	mov	sp, r7
 8009786:	bc80      	pop	{r7}
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	200003f4 	.word	0x200003f4

08009790 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800979a:	4b29      	ldr	r3, [pc, #164]	; (8009840 <prvAddCurrentTaskToDelayedList+0xb0>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097a0:	4b28      	ldr	r3, [pc, #160]	; (8009844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fc23 	bl	8007ff2 <uxListRemove>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10b      	bne.n	80097ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80097b2:	4b24      	ldr	r3, [pc, #144]	; (8009844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b8:	2201      	movs	r2, #1
 80097ba:	fa02 f303 	lsl.w	r3, r2, r3
 80097be:	43da      	mvns	r2, r3
 80097c0:	4b21      	ldr	r3, [pc, #132]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4013      	ands	r3, r2
 80097c6:	4a20      	ldr	r2, [pc, #128]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80097c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d0:	d10a      	bne.n	80097e8 <prvAddCurrentTaskToDelayedList+0x58>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d8:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3304      	adds	r3, #4
 80097de:	4619      	mov	r1, r3
 80097e0:	481a      	ldr	r0, [pc, #104]	; (800984c <prvAddCurrentTaskToDelayedList+0xbc>)
 80097e2:	f7fe fbab 	bl	8007f3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097e6:	e026      	b.n	8009836 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097f0:	4b14      	ldr	r3, [pc, #80]	; (8009844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d209      	bcs.n	8009814 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009800:	4b13      	ldr	r3, [pc, #76]	; (8009850 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3304      	adds	r3, #4
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f7fe fbb8 	bl	8007f82 <vListInsert>
}
 8009812:	e010      	b.n	8009836 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009814:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3304      	adds	r3, #4
 800981e:	4619      	mov	r1, r3
 8009820:	4610      	mov	r0, r2
 8009822:	f7fe fbae 	bl	8007f82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	429a      	cmp	r2, r3
 800982e:	d202      	bcs.n	8009836 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009830:	4a09      	ldr	r2, [pc, #36]	; (8009858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	6013      	str	r3, [r2, #0]
}
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	200004f8 	.word	0x200004f8
 8009844:	200003f4 	.word	0x200003f4
 8009848:	200004fc 	.word	0x200004fc
 800984c:	200004e0 	.word	0x200004e0
 8009850:	200004b0 	.word	0x200004b0
 8009854:	200004ac 	.word	0x200004ac
 8009858:	20000514 	.word	0x20000514

0800985c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3b04      	subs	r3, #4
 800986c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3b04      	subs	r3, #4
 800987a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f023 0201 	bic.w	r2, r3, #1
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3b04      	subs	r3, #4
 800988a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800988c:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <pxPortInitialiseStack+0x54>)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3b14      	subs	r3, #20
 8009896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3b20      	subs	r3, #32
 80098a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098a4:	68fb      	ldr	r3, [r7, #12]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bc80      	pop	{r7}
 80098ae:	4770      	bx	lr
 80098b0:	080098b5 	.word	0x080098b5

080098b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098be:	4b12      	ldr	r3, [pc, #72]	; (8009908 <prvTaskExitError+0x54>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c6:	d00a      	beq.n	80098de <prvTaskExitError+0x2a>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	60fb      	str	r3, [r7, #12]
}
 80098da:	bf00      	nop
 80098dc:	e7fe      	b.n	80098dc <prvTaskExitError+0x28>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60bb      	str	r3, [r7, #8]
}
 80098f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098f2:	bf00      	nop
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0fc      	beq.n	80098f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098fa:	bf00      	nop
 80098fc:	bf00      	nop
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	2000011c 	.word	0x2000011c
 800990c:	00000000 	.word	0x00000000

08009910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <pxCurrentTCBConst2>)
 8009912:	6819      	ldr	r1, [r3, #0]
 8009914:	6808      	ldr	r0, [r1, #0]
 8009916:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800991a:	f380 8809 	msr	PSP, r0
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f04f 0000 	mov.w	r0, #0
 8009926:	f380 8811 	msr	BASEPRI, r0
 800992a:	f04e 0e0d 	orr.w	lr, lr, #13
 800992e:	4770      	bx	lr

08009930 <pxCurrentTCBConst2>:
 8009930:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009938:	4806      	ldr	r0, [pc, #24]	; (8009954 <prvPortStartFirstTask+0x1c>)
 800993a:	6800      	ldr	r0, [r0, #0]
 800993c:	6800      	ldr	r0, [r0, #0]
 800993e:	f380 8808 	msr	MSP, r0
 8009942:	b662      	cpsie	i
 8009944:	b661      	cpsie	f
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	df00      	svc	0
 8009950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009952:	bf00      	nop
 8009954:	e000ed08 	.word	0xe000ed08

08009958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800995e:	4b32      	ldr	r3, [pc, #200]	; (8009a28 <xPortStartScheduler+0xd0>)
 8009960:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	b2db      	uxtb	r3, r3
 8009968:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	22ff      	movs	r2, #255	; 0xff
 800996e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	b2db      	uxtb	r3, r3
 800997c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4b2a      	ldr	r3, [pc, #168]	; (8009a2c <xPortStartScheduler+0xd4>)
 8009984:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009986:	4b2a      	ldr	r3, [pc, #168]	; (8009a30 <xPortStartScheduler+0xd8>)
 8009988:	2207      	movs	r2, #7
 800998a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800998c:	e009      	b.n	80099a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800998e:	4b28      	ldr	r3, [pc, #160]	; (8009a30 <xPortStartScheduler+0xd8>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3b01      	subs	r3, #1
 8009994:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <xPortStartScheduler+0xd8>)
 8009996:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099aa:	2b80      	cmp	r3, #128	; 0x80
 80099ac:	d0ef      	beq.n	800998e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099ae:	4b20      	ldr	r3, [pc, #128]	; (8009a30 <xPortStartScheduler+0xd8>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f1c3 0307 	rsb	r3, r3, #7
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d00a      	beq.n	80099d0 <xPortStartScheduler+0x78>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	60bb      	str	r3, [r7, #8]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099d0:	4b17      	ldr	r3, [pc, #92]	; (8009a30 <xPortStartScheduler+0xd8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	4a16      	ldr	r2, [pc, #88]	; (8009a30 <xPortStartScheduler+0xd8>)
 80099d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099da:	4b15      	ldr	r3, [pc, #84]	; (8009a30 <xPortStartScheduler+0xd8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099e2:	4a13      	ldr	r2, [pc, #76]	; (8009a30 <xPortStartScheduler+0xd8>)
 80099e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099ee:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <xPortStartScheduler+0xdc>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a10      	ldr	r2, [pc, #64]	; (8009a34 <xPortStartScheduler+0xdc>)
 80099f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099fa:	4b0e      	ldr	r3, [pc, #56]	; (8009a34 <xPortStartScheduler+0xdc>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a0d      	ldr	r2, [pc, #52]	; (8009a34 <xPortStartScheduler+0xdc>)
 8009a00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a06:	f000 f8b9 	bl	8009b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <xPortStartScheduler+0xe0>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a10:	f7ff ff92 	bl	8009938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a14:	f7ff faa0 	bl	8008f58 <vTaskSwitchContext>
	prvTaskExitError();
 8009a18:	f7ff ff4c 	bl	80098b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	e000e400 	.word	0xe000e400
 8009a2c:	20000520 	.word	0x20000520
 8009a30:	20000524 	.word	0x20000524
 8009a34:	e000ed20 	.word	0xe000ed20
 8009a38:	2000011c 	.word	0x2000011c

08009a3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	607b      	str	r3, [r7, #4]
}
 8009a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a56:	4b0f      	ldr	r3, [pc, #60]	; (8009a94 <vPortEnterCritical+0x58>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	4a0d      	ldr	r2, [pc, #52]	; (8009a94 <vPortEnterCritical+0x58>)
 8009a5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a60:	4b0c      	ldr	r3, [pc, #48]	; (8009a94 <vPortEnterCritical+0x58>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d10f      	bne.n	8009a88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a68:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <vPortEnterCritical+0x5c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	603b      	str	r3, [r7, #0]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <vPortEnterCritical+0x4a>
	}
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	2000011c 	.word	0x2000011c
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009aa2:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <vPortExitCritical+0x4c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10a      	bne.n	8009ac0 <vPortExitCritical+0x24>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	607b      	str	r3, [r7, #4]
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ac0:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <vPortExitCritical+0x4c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <vPortExitCritical+0x4c>)
 8009ac8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009aca:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <vPortExitCritical+0x4c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d105      	bne.n	8009ade <vPortExitCritical+0x42>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009adc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr
 8009ae8:	2000011c 	.word	0x2000011c
 8009aec:	00000000 	.word	0x00000000

08009af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009af0:	f3ef 8009 	mrs	r0, PSP
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <pxCurrentTCBConst>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b00:	6010      	str	r0, [r2, #0]
 8009b02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009b06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b0a:	f380 8811 	msr	BASEPRI, r0
 8009b0e:	f7ff fa23 	bl	8008f58 <vTaskSwitchContext>
 8009b12:	f04f 0000 	mov.w	r0, #0
 8009b16:	f380 8811 	msr	BASEPRI, r0
 8009b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b1e:	6819      	ldr	r1, [r3, #0]
 8009b20:	6808      	ldr	r0, [r1, #0]
 8009b22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b26:	f380 8809 	msr	PSP, r0
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	4770      	bx	lr

08009b30 <pxCurrentTCBConst>:
 8009b30:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop

08009b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	607b      	str	r3, [r7, #4]
}
 8009b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b52:	f7ff f943 	bl	8008ddc <xTaskIncrementTick>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b5c:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <SysTick_Handler+0x40>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	2300      	movs	r3, #0
 8009b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	f383 8811 	msr	BASEPRI, r3
}
 8009b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <vPortSetupTimerInterrupt+0x30>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b86:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <vPortSetupTimerInterrupt+0x34>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <vPortSetupTimerInterrupt+0x38>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a09      	ldr	r2, [pc, #36]	; (8009bb8 <vPortSetupTimerInterrupt+0x3c>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	099b      	lsrs	r3, r3, #6
 8009b98:	4a08      	ldr	r2, [pc, #32]	; (8009bbc <vPortSetupTimerInterrupt+0x40>)
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b9e:	4b03      	ldr	r3, [pc, #12]	; (8009bac <vPortSetupTimerInterrupt+0x30>)
 8009ba0:	2207      	movs	r2, #7
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr
 8009bac:	e000e010 	.word	0xe000e010
 8009bb0:	e000e018 	.word	0xe000e018
 8009bb4:	20000000 	.word	0x20000000
 8009bb8:	10624dd3 	.word	0x10624dd3
 8009bbc:	e000e014 	.word	0xe000e014

08009bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	; 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bcc:	f7ff f85c 	bl	8008c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bd0:	4b58      	ldr	r3, [pc, #352]	; (8009d34 <pvPortMalloc+0x174>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bd8:	f000 f910 	bl	8009dfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bdc:	4b56      	ldr	r3, [pc, #344]	; (8009d38 <pvPortMalloc+0x178>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4013      	ands	r3, r2
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f040 808e 	bne.w	8009d06 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01d      	beq.n	8009c2c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d014      	beq.n	8009c2c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f023 0307 	bic.w	r3, r3, #7
 8009c08:	3308      	adds	r3, #8
 8009c0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f003 0307 	and.w	r3, r3, #7
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <pvPortMalloc+0x6c>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	617b      	str	r3, [r7, #20]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d069      	beq.n	8009d06 <pvPortMalloc+0x146>
 8009c32:	4b42      	ldr	r3, [pc, #264]	; (8009d3c <pvPortMalloc+0x17c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d864      	bhi.n	8009d06 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c3c:	4b40      	ldr	r3, [pc, #256]	; (8009d40 <pvPortMalloc+0x180>)
 8009c3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c40:	4b3f      	ldr	r3, [pc, #252]	; (8009d40 <pvPortMalloc+0x180>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c46:	e004      	b.n	8009c52 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d903      	bls.n	8009c64 <pvPortMalloc+0xa4>
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1f1      	bne.n	8009c48 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c64:	4b33      	ldr	r3, [pc, #204]	; (8009d34 <pvPortMalloc+0x174>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d04b      	beq.n	8009d06 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2208      	movs	r2, #8
 8009c74:	4413      	add	r3, r2
 8009c76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	1ad2      	subs	r2, r2, r3
 8009c88:	2308      	movs	r3, #8
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d91f      	bls.n	8009cd0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4413      	add	r3, r2
 8009c96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <pvPortMalloc+0xf8>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	613b      	str	r3, [r7, #16]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cca:	69b8      	ldr	r0, [r7, #24]
 8009ccc:	f000 f8f8 	bl	8009ec0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <pvPortMalloc+0x17c>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	4a18      	ldr	r2, [pc, #96]	; (8009d3c <pvPortMalloc+0x17c>)
 8009cdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cde:	4b17      	ldr	r3, [pc, #92]	; (8009d3c <pvPortMalloc+0x17c>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	4b18      	ldr	r3, [pc, #96]	; (8009d44 <pvPortMalloc+0x184>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d203      	bcs.n	8009cf2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <pvPortMalloc+0x17c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a15      	ldr	r2, [pc, #84]	; (8009d44 <pvPortMalloc+0x184>)
 8009cf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	4b10      	ldr	r3, [pc, #64]	; (8009d38 <pvPortMalloc+0x178>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d06:	f7fe ffcd 	bl	8008ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f003 0307 	and.w	r3, r3, #7
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <pvPortMalloc+0x16a>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	60fb      	str	r3, [r7, #12]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <pvPortMalloc+0x168>
	return pvReturn;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3728      	adds	r7, #40	; 0x28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	20001900 	.word	0x20001900
 8009d38:	2000190c 	.word	0x2000190c
 8009d3c:	20001904 	.word	0x20001904
 8009d40:	200018f8 	.word	0x200018f8
 8009d44:	20001908 	.word	0x20001908

08009d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d048      	beq.n	8009dec <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d5a:	2308      	movs	r3, #8
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4413      	add	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	4b21      	ldr	r3, [pc, #132]	; (8009df4 <vPortFree+0xac>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4013      	ands	r3, r2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10a      	bne.n	8009d8c <vPortFree+0x44>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60fb      	str	r3, [r7, #12]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00a      	beq.n	8009daa <vPortFree+0x62>
	__asm volatile
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	60bb      	str	r3, [r7, #8]
}
 8009da6:	bf00      	nop
 8009da8:	e7fe      	b.n	8009da8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <vPortFree+0xac>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4013      	ands	r3, r2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d019      	beq.n	8009dec <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d115      	bne.n	8009dec <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <vPortFree+0xac>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	43db      	mvns	r3, r3
 8009dca:	401a      	ands	r2, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dd0:	f7fe ff5a 	bl	8008c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <vPortFree+0xb0>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4413      	add	r3, r2
 8009dde:	4a06      	ldr	r2, [pc, #24]	; (8009df8 <vPortFree+0xb0>)
 8009de0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009de2:	6938      	ldr	r0, [r7, #16]
 8009de4:	f000 f86c 	bl	8009ec0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009de8:	f7fe ff5c 	bl	8008ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	2000190c 	.word	0x2000190c
 8009df8:	20001904 	.word	0x20001904

08009dfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e02:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009e06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e08:	4b27      	ldr	r3, [pc, #156]	; (8009ea8 <prvHeapInit+0xac>)
 8009e0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00c      	beq.n	8009e30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3307      	adds	r3, #7
 8009e1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 0307 	bic.w	r3, r3, #7
 8009e22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	4a1f      	ldr	r2, [pc, #124]	; (8009ea8 <prvHeapInit+0xac>)
 8009e2c:	4413      	add	r3, r2
 8009e2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e34:	4a1d      	ldr	r2, [pc, #116]	; (8009eac <prvHeapInit+0xb0>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e3a:	4b1c      	ldr	r3, [pc, #112]	; (8009eac <prvHeapInit+0xb0>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	4413      	add	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e48:	2208      	movs	r2, #8
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0307 	bic.w	r3, r3, #7
 8009e56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4a15      	ldr	r2, [pc, #84]	; (8009eb0 <prvHeapInit+0xb4>)
 8009e5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e5e:	4b14      	ldr	r3, [pc, #80]	; (8009eb0 <prvHeapInit+0xb4>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e66:	4b12      	ldr	r3, [pc, #72]	; (8009eb0 <prvHeapInit+0xb4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <prvHeapInit+0xb4>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	4a0a      	ldr	r2, [pc, #40]	; (8009eb4 <prvHeapInit+0xb8>)
 8009e8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4a09      	ldr	r2, [pc, #36]	; (8009eb8 <prvHeapInit+0xbc>)
 8009e92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e94:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <prvHeapInit+0xc0>)
 8009e96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e9a:	601a      	str	r2, [r3, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bc80      	pop	{r7}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	20000528 	.word	0x20000528
 8009eac:	200018f8 	.word	0x200018f8
 8009eb0:	20001900 	.word	0x20001900
 8009eb4:	20001908 	.word	0x20001908
 8009eb8:	20001904 	.word	0x20001904
 8009ebc:	2000190c 	.word	0x2000190c

08009ec0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ec8:	4b27      	ldr	r3, [pc, #156]	; (8009f68 <prvInsertBlockIntoFreeList+0xa8>)
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	e002      	b.n	8009ed4 <prvInsertBlockIntoFreeList+0x14>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d8f7      	bhi.n	8009ece <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	4413      	add	r3, r2
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d108      	bne.n	8009f02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	441a      	add	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	441a      	add	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d118      	bne.n	8009f48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	4b14      	ldr	r3, [pc, #80]	; (8009f6c <prvInsertBlockIntoFreeList+0xac>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d00d      	beq.n	8009f3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	441a      	add	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	e008      	b.n	8009f50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f3e:	4b0b      	ldr	r3, [pc, #44]	; (8009f6c <prvInsertBlockIntoFreeList+0xac>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	e003      	b.n	8009f50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d002      	beq.n	8009f5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f5e:	bf00      	nop
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bc80      	pop	{r7}
 8009f66:	4770      	bx	lr
 8009f68:	200018f8 	.word	0x200018f8
 8009f6c:	20001900 	.word	0x20001900

08009f70 <cnc_init>:

#include "cnc_2d.h"



void cnc_init(void){
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0

	Motor1.Conf.ENB = 0;
 8009f74:	4b23      	ldr	r3, [pc, #140]	; (800a004 <cnc_init+0x94>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Motor1.Conf.MS1 = 1;
 8009f7c:	4b21      	ldr	r3, [pc, #132]	; (800a004 <cnc_init+0x94>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	Motor1.Conf.MS2 = 1;
 8009f84:	4b1f      	ldr	r3, [pc, #124]	; (800a004 <cnc_init+0x94>)
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Motor1.Conf.MS3 = 1;
 8009f8c:	4b1d      	ldr	r3, [pc, #116]	; (800a004 <cnc_init+0x94>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Motor1.Conf.DIR = 0;
 8009f94:	4b1b      	ldr	r3, [pc, #108]	; (800a004 <cnc_init+0x94>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Motor1.Status = ST_OFF;
 8009f9c:	4b19      	ldr	r3, [pc, #100]	; (800a004 <cnc_init+0x94>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Motor1.tar_steps = 0;
 8009fa4:	4b17      	ldr	r3, [pc, #92]	; (800a004 <cnc_init+0x94>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	63da      	str	r2, [r3, #60]	; 0x3c
	Motor1.Steps_count = 0;
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <cnc_init+0x94>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	639a      	str	r2, [r3, #56]	; 0x38

	Motor2.Conf.ENB = 0;
 8009fb0:	4b15      	ldr	r3, [pc, #84]	; (800a008 <cnc_init+0x98>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Motor2.Conf.MS1 = 1;
 8009fb8:	4b13      	ldr	r3, [pc, #76]	; (800a008 <cnc_init+0x98>)
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	Motor2.Conf.MS2 = 1;
 8009fc0:	4b11      	ldr	r3, [pc, #68]	; (800a008 <cnc_init+0x98>)
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Motor2.Conf.MS3 = 1;
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <cnc_init+0x98>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Motor2.Conf.DIR = 0;
 8009fd0:	4b0d      	ldr	r3, [pc, #52]	; (800a008 <cnc_init+0x98>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Motor2.Status = ST_OFF;
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <cnc_init+0x98>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Motor2.tar_steps = 0;
 8009fe0:	4b09      	ldr	r3, [pc, #36]	; (800a008 <cnc_init+0x98>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	63da      	str	r2, [r3, #60]	; 0x3c
	Motor2.Steps_count = 0;
 8009fe6:	4b08      	ldr	r3, [pc, #32]	; (800a008 <cnc_init+0x98>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38

	StM_Pin_Conf_v2(&Motor1,&Motor2);
 8009fec:	4906      	ldr	r1, [pc, #24]	; (800a008 <cnc_init+0x98>)
 8009fee:	4805      	ldr	r0, [pc, #20]	; (800a004 <cnc_init+0x94>)
 8009ff0:	f000 f892 	bl	800a118 <StM_Pin_Conf_v2>
	StM_Conf_Init(&Motor1);
 8009ff4:	4803      	ldr	r0, [pc, #12]	; (800a004 <cnc_init+0x94>)
 8009ff6:	f000 f8e7 	bl	800a1c8 <StM_Conf_Init>
	StM_Conf_Init(&Motor2);
 8009ffa:	4803      	ldr	r0, [pc, #12]	; (800a008 <cnc_init+0x98>)
 8009ffc:	f000 f8e4 	bl	800a1c8 <StM_Conf_Init>
}
 800a000:	bf00      	nop
 800a002:	bd80      	pop	{r7, pc}
 800a004:	200026d0 	.word	0x200026d0
 800a008:	20002100 	.word	0x20002100

0800a00c <cnc_DriveM>:


void cnc_DriveM(Step_Driver_Handler* Motor){
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	if (Motor->Status == ST_ORDER){
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d117      	bne.n	800a04e <cnc_DriveM+0x42>
			  STM_Step(Motor);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f92d 	bl	800a27e <STM_Step>
			  if (Motor->Steps_count == Motor->tar_steps){
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d10e      	bne.n	800a04e <cnc_DriveM+0x42>
					  Motor->Steps_count = 0;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	639a      	str	r2, [r3, #56]	; 0x38
					  Motor->Status = ST_OFF;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					  HAL_GPIO_WritePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP,GPIO_PIN_RESET);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a046:	2200      	movs	r2, #0
 800a048:	4619      	mov	r1, r3
 800a04a:	f7f7 f814 	bl	8001076 <HAL_GPIO_WritePin>
			  	  }
	}
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <Servo_Init>:
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Init(Servo_Handle_t* servo,TIM_HandleTypeDef* ptim)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
	servo->ptim = ptim;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	601a      	str	r2, [r3, #0]
	servo->curr_pos = 0;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	711a      	strb	r2, [r3, #4]
	servo->Status = OFF;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	715a      	strb	r2, [r3, #5]
	Servo_Goto(servo, 0);
 800a072:	2100      	movs	r1, #0
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f805 	bl	800a084 <Servo_Goto>


}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <Servo_Goto>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Goto(Servo_Handle_t* servo,uint8_t angle){
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70fb      	strb	r3, [r7, #3]
		uint16_t Period = servo->ptim->Init.Period;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	81fb      	strh	r3, [r7, #14]
		uint16_t duty = angle *( ( (Period / 10) - OFFSET) / MAX_ANGLE )+ OFFSET;
 800a098:	78fb      	ldrb	r3, [r7, #3]
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	89fb      	ldrh	r3, [r7, #14]
 800a09e:	4911      	ldr	r1, [pc, #68]	; (800a0e4 <Servo_Goto+0x60>)
 800a0a0:	fba1 1303 	umull	r1, r3, r1, r3
 800a0a4:	08db      	lsrs	r3, r3, #3
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3bfa      	subs	r3, #250	; 0xfa
 800a0aa:	490f      	ldr	r1, [pc, #60]	; (800a0e8 <Servo_Goto+0x64>)
 800a0ac:	fb81 0103 	smull	r0, r1, r1, r3
 800a0b0:	4419      	add	r1, r3
 800a0b2:	11c9      	asrs	r1, r1, #7
 800a0b4:	17db      	asrs	r3, r3, #31
 800a0b6:	1acb      	subs	r3, r1, r3
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	fb03 f302 	mul.w	r3, r3, r2
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	33fa      	adds	r3, #250	; 0xfa
 800a0c2:	81bb      	strh	r3, [r7, #12]
		servo->curr_pos = angle;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	711a      	strb	r2, [r3, #4]
		Servo_Start(servo);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f80e 	bl	800a0ec <Servo_Start>
		__HAL_TIM_SET_COMPARE(servo->ptim,TIM_CHANNEL_1,duty);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	89ba      	ldrh	r2, [r7, #12]
 800a0d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	cccccccd 	.word	0xcccccccd
 800a0e8:	b60b60b7 	.word	0xb60b60b7

0800a0ec <Servo_Start>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Start(Servo_Handle_t* servo){
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
	if(servo->Status == OFF ){
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	795b      	ldrb	r3, [r3, #5]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d108      	bne.n	800a10e <Servo_Start+0x22>
		HAL_TIM_PWM_Start(servo->ptim, TIM_CHANNEL_1);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f7f9 fb60 	bl	80037c8 <HAL_TIM_PWM_Start>
		servo->Status = ON;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	715a      	strb	r2, [r3, #5]
	}
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <StM_Pin_Conf_v2>:
	Motor2->Pins.port_STEP = GPIOA;
	Motor2->Pins.pin_STEP = GPIO_PIN_4;

}

void StM_Pin_Conf_v2(Step_Driver_Handler * Motor1,Step_Driver_Handler * Motor2){
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]

	// pin B9 en
	Motor1->Pins.port_ENB = GPIOB;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a26      	ldr	r2, [pc, #152]	; (800a1c0 <StM_Pin_Conf_v2+0xa8>)
 800a126:	601a      	str	r2, [r3, #0]
	Motor1->Pins.pin_ENB = GPIO_PIN_9;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a12e:	809a      	strh	r2, [r3, #4]
	// pin 8 MS1 : 0
	Motor1->Pins.port_MS1 = GPIOB;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a23      	ldr	r2, [pc, #140]	; (800a1c0 <StM_Pin_Conf_v2+0xa8>)
 800a134:	609a      	str	r2, [r3, #8]
	Motor1->Pins.pin_MS1 = GPIO_PIN_7;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2280      	movs	r2, #128	; 0x80
 800a13a:	819a      	strh	r2, [r3, #12]
	// pin 7 MS2 : 0
	Motor1->Pins.port_MS2 = GPIOB;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a20      	ldr	r2, [pc, #128]	; (800a1c0 <StM_Pin_Conf_v2+0xa8>)
 800a140:	611a      	str	r2, [r3, #16]
	Motor1->Pins.pin_MS2 = GPIO_PIN_6;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2240      	movs	r2, #64	; 0x40
 800a146:	829a      	strh	r2, [r3, #20]
	// pin 6 MS3 : 0
	Motor1->Pins.port_MS3 = GPIOB;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a1d      	ldr	r2, [pc, #116]	; (800a1c0 <StM_Pin_Conf_v2+0xa8>)
 800a14c:	619a      	str	r2, [r3, #24]
	Motor1->Pins.pin_MS3 = GPIO_PIN_5;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2220      	movs	r2, #32
 800a152:	839a      	strh	r2, [r3, #28]
	// pin 4 DIR : 0
	Motor1->Pins.port_DIR = GPIOB;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a1a      	ldr	r2, [pc, #104]	; (800a1c0 <StM_Pin_Conf_v2+0xa8>)
 800a158:	621a      	str	r2, [r3, #32]
	Motor1->Pins.pin_DIR = GPIO_PIN_3;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2208      	movs	r2, #8
 800a15e:	849a      	strh	r2, [r3, #36]	; 0x24
	// pin B5 Step
	Motor1->Pins.port_STEP = GPIOB;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a17      	ldr	r2, [pc, #92]	; (800a1c0 <StM_Pin_Conf_v2+0xa8>)
 800a164:	629a      	str	r2, [r3, #40]	; 0x28
	Motor1->Pins.pin_STEP = GPIO_PIN_4;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2210      	movs	r2, #16
 800a16a:	859a      	strh	r2, [r3, #44]	; 0x2c



	// pin B9 EN
	Motor2->Pins.port_ENB = GPIOB;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <StM_Pin_Conf_v2+0xa8>)
 800a170:	601a      	str	r2, [r3, #0]
	Motor2->Pins.pin_ENB = GPIO_PIN_9;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a178:	809a      	strh	r2, [r3, #4]
	// pin A7 MS1
	Motor2->Pins.port_MS1 = GPIOA;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	4a11      	ldr	r2, [pc, #68]	; (800a1c4 <StM_Pin_Conf_v2+0xac>)
 800a17e:	609a      	str	r2, [r3, #8]
	Motor2->Pins.pin_MS1 = GPIO_PIN_7;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2280      	movs	r2, #128	; 0x80
 800a184:	819a      	strh	r2, [r3, #12]
	// pin A6 MS2
	Motor2->Pins.port_MS2 = GPIOA;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	4a0e      	ldr	r2, [pc, #56]	; (800a1c4 <StM_Pin_Conf_v2+0xac>)
 800a18a:	611a      	str	r2, [r3, #16]
	Motor2->Pins.pin_MS2 = GPIO_PIN_6;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2240      	movs	r2, #64	; 0x40
 800a190:	829a      	strh	r2, [r3, #20]
	// pin A5 MS3
	Motor2->Pins.port_MS3 = GPIOA;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	4a0b      	ldr	r2, [pc, #44]	; (800a1c4 <StM_Pin_Conf_v2+0xac>)
 800a196:	619a      	str	r2, [r3, #24]
	Motor2->Pins.pin_MS3 = GPIO_PIN_5;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2220      	movs	r2, #32
 800a19c:	839a      	strh	r2, [r3, #28]
	// pin A3 DIR
	Motor2->Pins.port_DIR = GPIOA;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	4a08      	ldr	r2, [pc, #32]	; (800a1c4 <StM_Pin_Conf_v2+0xac>)
 800a1a2:	621a      	str	r2, [r3, #32]
	Motor2->Pins.pin_DIR = GPIO_PIN_3;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2208      	movs	r2, #8
 800a1a8:	849a      	strh	r2, [r3, #36]	; 0x24
	// pin A4 Step
	Motor2->Pins.port_STEP = GPIOA;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	4a05      	ldr	r2, [pc, #20]	; (800a1c4 <StM_Pin_Conf_v2+0xac>)
 800a1ae:	629a      	str	r2, [r3, #40]	; 0x28
	Motor2->Pins.pin_STEP = GPIO_PIN_4;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2210      	movs	r2, #16
 800a1b4:	859a      	strh	r2, [r3, #44]	; 0x2c

}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr
 800a1c0:	40010c00 	.word	0x40010c00
 800a1c4:	40010800 	.word	0x40010800

0800a1c8 <StM_Conf_Init>:

void StM_Conf_Init(Step_Driver_Handler * Motor){
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]

	// pin ENB
	HAL_GPIO_WritePin(Motor->Pins.port_ENB, Motor->Pins.pin_ENB, Motor->Conf.ENB);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	8899      	ldrh	r1, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f7f6 ff49 	bl	8001076 <HAL_GPIO_WritePin>
	// pin MS1
	HAL_GPIO_WritePin(Motor->Pins.port_MS1, Motor->Pins.pin_MS1, Motor->Conf.MS1);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6898      	ldr	r0, [r3, #8]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8999      	ldrh	r1, [r3, #12]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f7f6 ff3f 	bl	8001076 <HAL_GPIO_WritePin>
	// pin MS2
	HAL_GPIO_WritePin(Motor->Pins.port_MS2, Motor->Pins.pin_MS2, Motor->Conf.MS2);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6918      	ldr	r0, [r3, #16]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	8a99      	ldrh	r1, [r3, #20]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a206:	461a      	mov	r2, r3
 800a208:	f7f6 ff35 	bl	8001076 <HAL_GPIO_WritePin>
	// pin MS3
	HAL_GPIO_WritePin(Motor->Pins.port_MS3, Motor->Pins.pin_MS3, Motor->Conf.MS3);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6998      	ldr	r0, [r3, #24]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	8b99      	ldrh	r1, [r3, #28]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a21a:	461a      	mov	r2, r3
 800a21c:	f7f6 ff2b 	bl	8001076 <HAL_GPIO_WritePin>
	// pin DIR
	HAL_GPIO_WritePin(Motor->Pins.port_DIR, Motor->Pins.pin_DIR, Motor->Conf.DIR);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a18      	ldr	r0, [r3, #32]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a22e:	461a      	mov	r2, r3
 800a230:	f7f6 ff21 	bl	8001076 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP, GPIO_PIN_RESET);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a23c:	2200      	movs	r2, #0
 800a23e:	4619      	mov	r1, r3
 800a240:	f7f6 ff19 	bl	8001076 <HAL_GPIO_WritePin>

}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <GoToStep>:
void GoToStep(Step_Driver_Handler * Motor,uint16_t tar_Step,uint8_t acc)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	807b      	strh	r3, [r7, #2]
 800a258:	4613      	mov	r3, r2
 800a25a:	707b      	strb	r3, [r7, #1]
	if (Motor->Status == ST_OFF){
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <GoToStep+0x28>
		Motor->Status = ST_ORDER;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		Motor->tar_steps = tar_Step;
 800a26e:	887a      	ldrh	r2, [r7, #2]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	bc80      	pop	{r7}
 800a27c:	4770      	bx	lr

0800a27e <STM_Step>:

void STM_Step(Step_Driver_Handler* Motor){
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f7f6 ff08 	bl	80010a6 <HAL_GPIO_TogglePin>
	if (HAL_GPIO_ReadPin(Motor->Pins.port_STEP, Motor->Pins.pin_STEP) == GPIO_PIN_SET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	f7f6 fed1 	bl	8001048 <HAL_GPIO_ReadPin>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d104      	bne.n	800a2b6 <STM_Step+0x38>
		Motor->Steps_count++;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38

}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <Com_Init>:
 * @fn					- Com_Init
 *
 * @Note				- Init the Com Stack
 *
 **************************************************************************/
void Com_Init(){
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
	Buf_Init(&Com_TXstorage) ;
 800a2c4:	4807      	ldr	r0, [pc, #28]	; (800a2e4 <Com_Init+0x24>)
 800a2c6:	f000 f891 	bl	800a3ec <Buf_Init>
	Buf_Init(&Com_RXstorage) ;
 800a2ca:	4807      	ldr	r0, [pc, #28]	; (800a2e8 <Com_Init+0x28>)
 800a2cc:	f000 f88e 	bl	800a3ec <Buf_Init>
	memset(buffer,'\0',64);
 800a2d0:	2240      	movs	r2, #64	; 0x40
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4805      	ldr	r0, [pc, #20]	; (800a2ec <Com_Init+0x2c>)
 800a2d6:	f000 fe97 	bl	800b008 <memset>
	MX_USB_DEVICE_Init();
 800a2da:	f000 f9ab 	bl	800a634 <MX_USB_DEVICE_Init>
}
 800a2de:	bf00      	nop
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20001bc8 	.word	0x20001bc8
 800a2e8:	20001e64 	.word	0x20001e64
 800a2ec:	20002760 	.word	0x20002760

0800a2f0 <Com_Transmit>:
 * @fn					- Com_Transmit
 *
 * @Note				- Transmit Message
 *
 **************************************************************************/
void Com_Transmit(){
 800a2f0:	b590      	push	{r4, r7, lr}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	607b      	str	r3, [r7, #4]

	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 800a2fa:	e014      	b.n	800a326 <Com_Transmit+0x36>
		ptr = Buf_Dequeue(&Com_TXstorage);
 800a2fc:	480f      	ldr	r0, [pc, #60]	; (800a33c <Com_Transmit+0x4c>)
 800a2fe:	f000 f901 	bl	800a504 <Buf_Dequeue>
 800a302:	6078      	str	r0, [r7, #4]
		while(CDC_Transmit_FS((uint8_t*) ptr->data, strlen(ptr->data)+1) != USBD_OK);
 800a304:	bf00      	nop
 800a306:	687c      	ldr	r4, [r7, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7f5 ff20 	bl	8000150 <strlen>
 800a310:	4603      	mov	r3, r0
 800a312:	b29b      	uxth	r3, r3
 800a314:	3301      	adds	r3, #1
 800a316:	b29b      	uxth	r3, r3
 800a318:	4619      	mov	r1, r3
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 fa64 	bl	800a7e8 <CDC_Transmit_FS>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1ef      	bne.n	800a306 <Com_Transmit+0x16>
	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 800a326:	4805      	ldr	r0, [pc, #20]	; (800a33c <Com_Transmit+0x4c>)
 800a328:	f000 f972 	bl	800a610 <Buf_IsEmpty>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e4      	bne.n	800a2fc <Com_Transmit+0xc>
	}
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd90      	pop	{r4, r7, pc}
 800a33c:	20001bc8 	.word	0x20001bc8

0800a340 <Com_Receive>:
 * @fn					- Com_Receive
 *
 * @Note				- Store message received in the RXbuffer
 *
 **************************************************************************/
void Com_Receive(){
 800a340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a342:	b093      	sub	sp, #76	; 0x4c
 800a344:	af00      	add	r7, sp, #0
	Data_t ptr;

	if (Buf_IsFull(&Com_RXstorage) != BUF_FULL && flag_data_received == 1 ){
 800a346:	481e      	ldr	r0, [pc, #120]	; (800a3c0 <Com_Receive+0x80>)
 800a348:	f000 f940 	bl	800a5cc <Buf_IsFull>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d01c      	beq.n	800a38c <Com_Receive+0x4c>
 800a352:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <Com_Receive+0x84>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d118      	bne.n	800a38c <Com_Receive+0x4c>
		memcpy(ptr.data,buffer,MAX_SIZE_MESSAGE);
 800a35a:	4b1b      	ldr	r3, [pc, #108]	; (800a3c8 <Com_Receive+0x88>)
 800a35c:	461c      	mov	r4, r3
 800a35e:	1d3e      	adds	r6, r7, #4
 800a360:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800a364:	4635      	mov	r5, r6
 800a366:	4623      	mov	r3, r4
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	6859      	ldr	r1, [r3, #4]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a372:	3410      	adds	r4, #16
 800a374:	3610      	adds	r6, #16
 800a376:	4564      	cmp	r4, ip
 800a378:	d1f4      	bne.n	800a364 <Com_Receive+0x24>
		flag_data_received = 0;
 800a37a:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <Com_Receive+0x84>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]
		Buf_Queue(&Com_RXstorage,&ptr);
 800a380:	1d3b      	adds	r3, r7, #4
 800a382:	4619      	mov	r1, r3
 800a384:	480e      	ldr	r0, [pc, #56]	; (800a3c0 <Com_Receive+0x80>)
 800a386:	f000 f861 	bl	800a44c <Buf_Queue>
	else if (Buf_IsFull(&Com_RXstorage) == BUF_FULL && flag_data_received == 1){
				while(CDC_Transmit_FS((uint8_t*) "RX:Full\n", 8) != USBD_OK);
				flag_data_received = 0;
			}

}
 800a38a:	e014      	b.n	800a3b6 <Com_Receive+0x76>
	else if (Buf_IsFull(&Com_RXstorage) == BUF_FULL && flag_data_received == 1){
 800a38c:	480c      	ldr	r0, [pc, #48]	; (800a3c0 <Com_Receive+0x80>)
 800a38e:	f000 f91d 	bl	800a5cc <Buf_IsFull>
 800a392:	4603      	mov	r3, r0
 800a394:	2b01      	cmp	r3, #1
 800a396:	d10e      	bne.n	800a3b6 <Com_Receive+0x76>
 800a398:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <Com_Receive+0x84>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d10a      	bne.n	800a3b6 <Com_Receive+0x76>
				while(CDC_Transmit_FS((uint8_t*) "RX:Full\n", 8) != USBD_OK);
 800a3a0:	bf00      	nop
 800a3a2:	2108      	movs	r1, #8
 800a3a4:	4809      	ldr	r0, [pc, #36]	; (800a3cc <Com_Receive+0x8c>)
 800a3a6:	f000 fa1f 	bl	800a7e8 <CDC_Transmit_FS>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f8      	bne.n	800a3a2 <Com_Receive+0x62>
				flag_data_received = 0;
 800a3b0:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <Com_Receive+0x84>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]
}
 800a3b6:	bf00      	nop
 800a3b8:	374c      	adds	r7, #76	; 0x4c
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20001e64 	.word	0x20001e64
 800a3c4:	20001910 	.word	0x20001910
 800a3c8:	20002760 	.word	0x20002760
 800a3cc:	0800b084 	.word	0x0800b084

0800a3d0 <G_Code_Init>:
 *      Author: soufiane
 */

#include "G_code.h"

void G_Code_Init(){
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
	Buf_Init(&Job_Stack);
 800a3d4:	4803      	ldr	r0, [pc, #12]	; (800a3e4 <G_Code_Init+0x14>)
 800a3d6:	f000 f809 	bl	800a3ec <Buf_Init>
	Buf_Init(&Gcode_Stack);
 800a3da:	4803      	ldr	r0, [pc, #12]	; (800a3e8 <G_Code_Init+0x18>)
 800a3dc:	f000 f806 	bl	800a3ec <Buf_Init>
}
 800a3e0:	bf00      	nop
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	20002434 	.word	0x20002434
 800a3e8:	20002144 	.word	0x20002144

0800a3ec <Buf_Init>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Buf_Init(Buf_Handler_t* buf){
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
	for (int index = 0;index<BUF_SIZE;index++)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	e011      	b.n	800a41e <Buf_Init+0x32>
		memset(buf->data[buf->rear].data,'\0',MESSAGE_SIZE);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a400:	461a      	mov	r2, r3
 800a402:	4613      	mov	r3, r2
 800a404:	015b      	lsls	r3, r3, #5
 800a406:	4413      	add	r3, r2
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	4413      	add	r3, r2
 800a40e:	2240      	movs	r2, #64	; 0x40
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fdf8 	bl	800b008 <memset>
	for (int index = 0;index<BUF_SIZE;index++)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b09      	cmp	r3, #9
 800a422:	ddea      	ble.n	800a3fa <Buf_Init+0xe>
	buf->front = -1;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	22ff      	movs	r2, #255	; 0xff
 800a428:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	buf->rear = -1;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	22ff      	movs	r2, #255	; 0xff
 800a430:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	buf->mutex = xSemaphoreCreateMutex();
 800a434:	2001      	movs	r0, #1
 800a436:	f7fd fee4 	bl	8008202 <xQueueCreateMutex>
 800a43a:	4602      	mov	r2, r0
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	if (buf->mutex == NULL){

	}
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <Buf_Queue>:
 * @return				- HAL_StatusTypeDef
 *
 * @Note				- None
 *
 **************************************************************************/
HAL_StatusTypeDef Buf_Queue(Buf_Handler_t* buf,Data_t* ptr){
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]

	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a45c:	2101      	movs	r1, #1
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fd ffe6 	bl	8008430 <xQueueSemaphoreTake>
	if (Buf_IsFull(buf) == BUF_FULL ){
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f8b1 	bl	800a5cc <Buf_IsFull>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d109      	bne.n	800a484 <Buf_Queue+0x38>
		xSemaphoreGive(buf->mutex);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a476:	2300      	movs	r3, #0
 800a478:	2200      	movs	r2, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	f7fd feda 	bl	8008234 <xQueueGenericSend>
		return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e039      	b.n	800a4f8 <Buf_Queue+0xac>
	}
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f8c3 	bl	800a610 <Buf_IsEmpty>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d108      	bne.n	800a4a2 <Buf_Queue+0x56>
		buf->front = 0;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		buf->rear = 0;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a4a0:	e012      	b.n	800a4c8 <Buf_Queue+0x7c>
	}else{
		buf->front = (buf->front+1) % BUF_SIZE ;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	4b15      	ldr	r3, [pc, #84]	; (800a500 <Buf_Queue+0xb4>)
 800a4ac:	fb83 1302 	smull	r1, r3, r3, r2
 800a4b0:	1099      	asrs	r1, r3, #2
 800a4b2:	17d3      	asrs	r3, r2, #31
 800a4b4:	1ac9      	subs	r1, r1, r3
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	440b      	add	r3, r1
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	1ad1      	subs	r1, r2, r3
 800a4c0:	b24a      	sxtb	r2, r1
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	}
	memcpy(&buf->data[buf->front],ptr,sizeof(Data_t));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	015b      	lsls	r3, r3, #5
 800a4d4:	4413      	add	r3, r2
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	4413      	add	r3, r2
 800a4dc:	2242      	movs	r2, #66	; 0x42
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fd83 	bl	800afec <memcpy>
	xSemaphoreGive(buf->mutex);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	f7fd fe9f 	bl	8008234 <xQueueGenericSend>
	return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	66666667 	.word	0x66666667

0800a504 <Buf_Dequeue>:
 * @fn					- Buf_Dequeue
 *
 * @Note				- None
 *
 **************************************************************************/
Data_t* Buf_Dequeue(Buf_Handler_t* buf){
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a512:	2101      	movs	r1, #1
 800a514:	4618      	mov	r0, r3
 800a516:	f7fd ff8b 	bl	8008430 <xQueueSemaphoreTake>
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f878 	bl	800a610 <Buf_IsEmpty>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d109      	bne.n	800a53a <Buf_Dequeue+0x36>
		xSemaphoreGive(buf->mutex);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a52c:	2300      	movs	r3, #0
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	f7fd fe7f 	bl	8008234 <xQueueGenericSend>
		return NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	e03f      	b.n	800a5ba <Buf_Dequeue+0xb6>
	}
	static Data_t rt;
	memcpy(&rt,&(buf->data[buf->rear]),sizeof(Data_t));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a540:	461a      	mov	r2, r3
 800a542:	4613      	mov	r3, r2
 800a544:	015b      	lsls	r3, r3, #5
 800a546:	4413      	add	r3, r2
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	4413      	add	r3, r2
 800a54e:	4a1d      	ldr	r2, [pc, #116]	; (800a5c4 <Buf_Dequeue+0xc0>)
 800a550:	4610      	mov	r0, r2
 800a552:	4619      	mov	r1, r3
 800a554:	2342      	movs	r3, #66	; 0x42
 800a556:	461a      	mov	r2, r3
 800a558:	f000 fd48 	bl	800afec <memcpy>
	if (buf->front == buf->rear){
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f993 2298 	ldrsb.w	r2, [r3, #664]	; 0x298
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a568:	429a      	cmp	r2, r3
 800a56a:	d10a      	bne.n	800a582 <Buf_Dequeue+0x7e>
		buf->front = buf->rear = -1;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	22ff      	movs	r2, #255	; 0xff
 800a570:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f993 2299 	ldrsb.w	r2, [r3, #665]	; 0x299
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800a580:	e012      	b.n	800a5a8 <Buf_Dequeue+0xa4>
	}else {
		buf->rear = (buf->rear + 1) % BUF_SIZE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <Buf_Dequeue+0xc4>)
 800a58c:	fb83 1302 	smull	r1, r3, r3, r2
 800a590:	1099      	asrs	r1, r3, #2
 800a592:	17d3      	asrs	r3, r2, #31
 800a594:	1ac9      	subs	r1, r1, r3
 800a596:	460b      	mov	r3, r1
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	440b      	add	r3, r1
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	1ad1      	subs	r1, r2, r3
 800a5a0:	b24a      	sxtb	r2, r1
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	}
	xSemaphoreGive(buf->mutex);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	f7fd fe3e 	bl	8008234 <xQueueGenericSend>
	return &rt ;
 800a5b8:	4b02      	ldr	r3, [pc, #8]	; (800a5c4 <Buf_Dequeue+0xc0>)
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20001914 	.word	0x20001914
 800a5c8:	66666667 	.word	0x66666667

0800a5cc <Buf_IsFull>:
 * @fn					- Buf_IsFull
 *
 * @Note				- func to check if the Buf is full
 *
 **************************************************************************/
Buf_Status_t Buf_IsFull(Buf_Handler_t* buf){
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	return ((buf->front+1) % BUF_SIZE) == buf->rear;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <Buf_IsFull+0x40>)
 800a5de:	fb83 2301 	smull	r2, r3, r3, r1
 800a5e2:	109a      	asrs	r2, r3, #2
 800a5e4:	17cb      	asrs	r3, r1, #31
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	005b      	lsls	r3, r3, #1
 800a5f0:	1aca      	subs	r2, r1, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	bf0c      	ite	eq
 800a5fc:	2301      	moveq	r3, #1
 800a5fe:	2300      	movne	r3, #0
 800a600:	b2db      	uxtb	r3, r3
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	bc80      	pop	{r7}
 800a60a:	4770      	bx	lr
 800a60c:	66666667 	.word	0x66666667

0800a610 <Buf_IsEmpty>:
 * @fn					- Buf_IsEmpty
 *
 * @Note				- func to check if the Buf is empty
 *
 **************************************************************************/
Buf_Status_t Buf_IsEmpty(Buf_Handler_t* buf){
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
	return !(buf->front == -1);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	b2db      	uxtb	r3, r3
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr

0800a634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a638:	2200      	movs	r2, #0
 800a63a:	4912      	ldr	r1, [pc, #72]	; (800a684 <MX_USB_DEVICE_Init+0x50>)
 800a63c:	4812      	ldr	r0, [pc, #72]	; (800a688 <MX_USB_DEVICE_Init+0x54>)
 800a63e:	f7fc fb3a 	bl	8006cb6 <USBD_Init>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a648:	f7f6 f8e6 	bl	8000818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a64c:	490f      	ldr	r1, [pc, #60]	; (800a68c <MX_USB_DEVICE_Init+0x58>)
 800a64e:	480e      	ldr	r0, [pc, #56]	; (800a688 <MX_USB_DEVICE_Init+0x54>)
 800a650:	f7fc fb5c 	bl	8006d0c <USBD_RegisterClass>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a65a:	f7f6 f8dd 	bl	8000818 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a65e:	490c      	ldr	r1, [pc, #48]	; (800a690 <MX_USB_DEVICE_Init+0x5c>)
 800a660:	4809      	ldr	r0, [pc, #36]	; (800a688 <MX_USB_DEVICE_Init+0x54>)
 800a662:	f7fc fa8d 	bl	8006b80 <USBD_CDC_RegisterInterface>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a66c:	f7f6 f8d4 	bl	8000818 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <MX_USB_DEVICE_Init+0x54>)
 800a672:	f7fc fb64 	bl	8006d3e <USBD_Start>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a67c:	f7f6 f8cc 	bl	8000818 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a680:	bf00      	nop
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20000130 	.word	0x20000130
 800a688:	200027a0 	.word	0x200027a0
 800a68c:	20000018 	.word	0x20000018
 800a690:	20000120 	.word	0x20000120

0800a694 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a698:	2200      	movs	r2, #0
 800a69a:	4905      	ldr	r1, [pc, #20]	; (800a6b0 <CDC_Init_FS+0x1c>)
 800a69c:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <CDC_Init_FS+0x20>)
 800a69e:	f7fc fa85 	bl	8006bac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6a2:	4905      	ldr	r1, [pc, #20]	; (800a6b8 <CDC_Init_FS+0x24>)
 800a6a4:	4803      	ldr	r0, [pc, #12]	; (800a6b4 <CDC_Init_FS+0x20>)
 800a6a6:	f7fc fa9a 	bl	8006bde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20002c58 	.word	0x20002c58
 800a6b4:	200027a0 	.word	0x200027a0
 800a6b8:	20002a64 	.word	0x20002a64

0800a6bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bc80      	pop	{r7}
 800a6c8:	4770      	bx	lr
	...

0800a6cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	6039      	str	r1, [r7, #0]
 800a6d6:	71fb      	strb	r3, [r7, #7]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	2b23      	cmp	r3, #35	; 0x23
 800a6e0:	d84a      	bhi.n	800a778 <CDC_Control_FS+0xac>
 800a6e2:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <CDC_Control_FS+0x1c>)
 800a6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e8:	0800a779 	.word	0x0800a779
 800a6ec:	0800a779 	.word	0x0800a779
 800a6f0:	0800a779 	.word	0x0800a779
 800a6f4:	0800a779 	.word	0x0800a779
 800a6f8:	0800a779 	.word	0x0800a779
 800a6fc:	0800a779 	.word	0x0800a779
 800a700:	0800a779 	.word	0x0800a779
 800a704:	0800a779 	.word	0x0800a779
 800a708:	0800a779 	.word	0x0800a779
 800a70c:	0800a779 	.word	0x0800a779
 800a710:	0800a779 	.word	0x0800a779
 800a714:	0800a779 	.word	0x0800a779
 800a718:	0800a779 	.word	0x0800a779
 800a71c:	0800a779 	.word	0x0800a779
 800a720:	0800a779 	.word	0x0800a779
 800a724:	0800a779 	.word	0x0800a779
 800a728:	0800a779 	.word	0x0800a779
 800a72c:	0800a779 	.word	0x0800a779
 800a730:	0800a779 	.word	0x0800a779
 800a734:	0800a779 	.word	0x0800a779
 800a738:	0800a779 	.word	0x0800a779
 800a73c:	0800a779 	.word	0x0800a779
 800a740:	0800a779 	.word	0x0800a779
 800a744:	0800a779 	.word	0x0800a779
 800a748:	0800a779 	.word	0x0800a779
 800a74c:	0800a779 	.word	0x0800a779
 800a750:	0800a779 	.word	0x0800a779
 800a754:	0800a779 	.word	0x0800a779
 800a758:	0800a779 	.word	0x0800a779
 800a75c:	0800a779 	.word	0x0800a779
 800a760:	0800a779 	.word	0x0800a779
 800a764:	0800a779 	.word	0x0800a779
 800a768:	0800a779 	.word	0x0800a779
 800a76c:	0800a779 	.word	0x0800a779
 800a770:	0800a779 	.word	0x0800a779
 800a774:	0800a779 	.word	0x0800a779
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a778:	bf00      	nop
  }

  return (USBD_OK);
 800a77a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop

0800a788 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	4811      	ldr	r0, [pc, #68]	; (800a7dc <CDC_Receive_FS+0x54>)
 800a796:	f7fc fa22 	bl	8006bde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a79a:	4810      	ldr	r0, [pc, #64]	; (800a7dc <CDC_Receive_FS+0x54>)
 800a79c:	f7fc fa61 	bl	8006c62 <USBD_CDC_ReceivePacket>

  uint32_t len = *Len;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60fb      	str	r3, [r7, #12]
  if (flag_data_received == 0){
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <CDC_Receive_FS+0x58>)
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d111      	bne.n	800a7d2 <CDC_Receive_FS+0x4a>
		flag_data_received = 1 ;
 800a7ae:	4b0c      	ldr	r3, [pc, #48]	; (800a7e0 <CDC_Receive_FS+0x58>)
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	701a      	strb	r2, [r3, #0]
		memset(buffer,'\0',64);
 800a7b4:	2240      	movs	r2, #64	; 0x40
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	480a      	ldr	r0, [pc, #40]	; (800a7e4 <CDC_Receive_FS+0x5c>)
 800a7ba:	f000 fc25 	bl	800b008 <memset>
		memcpy(buffer,Buf,len);
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	4808      	ldr	r0, [pc, #32]	; (800a7e4 <CDC_Receive_FS+0x5c>)
 800a7c4:	f000 fc12 	bl	800afec <memcpy>
		memset(Buf,'\0',len);
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fc1b 	bl	800b008 <memset>
  }


  return (USBD_OK);
 800a7d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200027a0 	.word	0x200027a0
 800a7e0:	20001910 	.word	0x20001910
 800a7e4:	20002760 	.word	0x20002760

0800a7e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <CDC_Transmit_FS+0x48>)
 800a7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e00b      	b.n	800a826 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a80e:	887b      	ldrh	r3, [r7, #2]
 800a810:	461a      	mov	r2, r3
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	4806      	ldr	r0, [pc, #24]	; (800a830 <CDC_Transmit_FS+0x48>)
 800a816:	f7fc f9c9 	bl	8006bac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a81a:	4805      	ldr	r0, [pc, #20]	; (800a830 <CDC_Transmit_FS+0x48>)
 800a81c:	f7fc f9f2 	bl	8006c04 <USBD_CDC_TransmitPacket>
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	200027a0 	.word	0x200027a0

0800a834 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2212      	movs	r2, #18
 800a844:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a846:	4b03      	ldr	r3, [pc, #12]	; (800a854 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bc80      	pop	{r7}
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	2000014c 	.word	0x2000014c

0800a858 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2204      	movs	r2, #4
 800a868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a86a:	4b03      	ldr	r3, [pc, #12]	; (800a878 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	bc80      	pop	{r7}
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20000160 	.word	0x20000160

0800a87c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	; (800a8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a894:	f7fd f9cc 	bl	8007c30 <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8a0:	f7fd f9c6 	bl	8007c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20002e4c 	.word	0x20002e4c
 800a8b4:	0800b090 	.word	0x0800b090

0800a8b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	4904      	ldr	r1, [pc, #16]	; (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8c8:	4804      	ldr	r0, [pc, #16]	; (800a8dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8ca:	f7fd f9b1 	bl	8007c30 <USBD_GetString>
  return USBD_StrDesc;
 800a8ce:	4b02      	ldr	r3, [pc, #8]	; (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20002e4c 	.word	0x20002e4c
 800a8dc:	0800b0a8 	.word	0x0800b0a8

0800a8e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	221a      	movs	r2, #26
 800a8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8f2:	f000 f843 	bl	800a97c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8f6:	4b02      	ldr	r3, [pc, #8]	; (800a900 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000164 	.word	0x20000164

0800a904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	4907      	ldr	r1, [pc, #28]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a91a:	4808      	ldr	r0, [pc, #32]	; (800a93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a91c:	f7fd f988 	bl	8007c30 <USBD_GetString>
 800a920:	e004      	b.n	800a92c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	4904      	ldr	r1, [pc, #16]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a926:	4805      	ldr	r0, [pc, #20]	; (800a93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a928:	f7fd f982 	bl	8007c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20002e4c 	.word	0x20002e4c
 800a93c:	0800b0bc 	.word	0x0800b0bc

0800a940 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	4907      	ldr	r1, [pc, #28]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a956:	4808      	ldr	r0, [pc, #32]	; (800a978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a958:	f7fd f96a 	bl	8007c30 <USBD_GetString>
 800a95c:	e004      	b.n	800a968 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	4904      	ldr	r1, [pc, #16]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a964:	f7fd f964 	bl	8007c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a968:	4b02      	ldr	r3, [pc, #8]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20002e4c 	.word	0x20002e4c
 800a978:	0800b0c8 	.word	0x0800b0c8

0800a97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <Get_SerialNum+0x44>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a988:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <Get_SerialNum+0x48>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a98e:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <Get_SerialNum+0x4c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4413      	add	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9a2:	2208      	movs	r2, #8
 800a9a4:	4909      	ldr	r1, [pc, #36]	; (800a9cc <Get_SerialNum+0x50>)
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f814 	bl	800a9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	4908      	ldr	r1, [pc, #32]	; (800a9d0 <Get_SerialNum+0x54>)
 800a9b0:	68b8      	ldr	r0, [r7, #8]
 800a9b2:	f000 f80f 	bl	800a9d4 <IntToUnicode>
  }
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	1ffff7e8 	.word	0x1ffff7e8
 800a9c4:	1ffff7ec 	.word	0x1ffff7ec
 800a9c8:	1ffff7f0 	.word	0x1ffff7f0
 800a9cc:	20000166 	.word	0x20000166
 800a9d0:	20000176 	.word	0x20000176

0800a9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	75fb      	strb	r3, [r7, #23]
 800a9ea:	e027      	b.n	800aa3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	0f1b      	lsrs	r3, r3, #28
 800a9f0:	2b09      	cmp	r3, #9
 800a9f2:	d80b      	bhi.n	800aa0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	0f1b      	lsrs	r3, r3, #28
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	4619      	mov	r1, r3
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	440b      	add	r3, r1
 800aa04:	3230      	adds	r2, #48	; 0x30
 800aa06:	b2d2      	uxtb	r2, r2
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	e00a      	b.n	800aa22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	0f1b      	lsrs	r3, r3, #28
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	4619      	mov	r1, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	440b      	add	r3, r1
 800aa1c:	3237      	adds	r2, #55	; 0x37
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	011b      	lsls	r3, r3, #4
 800aa26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	75fb      	strb	r3, [r7, #23]
 800aa3c:	7dfa      	ldrb	r2, [r7, #23]
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3d3      	bcc.n	800a9ec <IntToUnicode+0x18>
  }
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	371c      	adds	r7, #28
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bc80      	pop	{r7}
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a0d      	ldr	r2, [pc, #52]	; (800aa94 <HAL_PCD_MspInit+0x44>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d113      	bne.n	800aa8a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa62:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <HAL_PCD_MspInit+0x48>)
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	4a0c      	ldr	r2, [pc, #48]	; (800aa98 <HAL_PCD_MspInit+0x48>)
 800aa68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa6c:	61d3      	str	r3, [r2, #28]
 800aa6e:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <HAL_PCD_MspInit+0x48>)
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2105      	movs	r1, #5
 800aa7e:	2014      	movs	r0, #20
 800aa80:	f7f6 f933 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aa84:	2014      	movs	r0, #20
 800aa86:	f7f6 f94c 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	40005c00 	.word	0x40005c00
 800aa98:	40021000 	.word	0x40021000

0800aa9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aab0:	4619      	mov	r1, r3
 800aab2:	4610      	mov	r0, r2
 800aab4:	f7fc f98b 	bl	8006dce <USBD_LL_SetupStage>
}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	440b      	add	r3, r1
 800aae0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	4619      	mov	r1, r3
 800aaea:	f7fc f9bd 	bl	8006e68 <USBD_LL_DataOutStage>
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b082      	sub	sp, #8
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ab08:	78fa      	ldrb	r2, [r7, #3]
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	00db      	lsls	r3, r3, #3
 800ab14:	440b      	add	r3, r1
 800ab16:	333c      	adds	r3, #60	; 0x3c
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f7fc fa14 	bl	8006f4a <USBD_LL_DataInStage>
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fc fb24 	bl	8007186 <USBD_LL_SOF>
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d001      	beq.n	800ab5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab5a:	f7f5 fe5d 	bl	8000818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab64:	7bfa      	ldrb	r2, [r7, #15]
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fc fad4 	bl	8007116 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fc fa8d 	bl	8007094 <USBD_LL_Reset>
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fc face 	bl	8007134 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <HAL_PCD_SuspendCallback+0x30>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	4a03      	ldr	r2, [pc, #12]	; (800abb4 <HAL_PCD_SuspendCallback+0x30>)
 800aba6:	f043 0306 	orr.w	r3, r3, #6
 800abaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed00 	.word	0xe000ed00

0800abb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fc fac8 	bl	800715c <USBD_LL_Resume>
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800abdc:	4a28      	ldr	r2, [pc, #160]	; (800ac80 <USBD_LL_Init+0xac>)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a26      	ldr	r2, [pc, #152]	; (800ac80 <USBD_LL_Init+0xac>)
 800abe8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <USBD_LL_Init+0xac>)
 800abee:	4a25      	ldr	r2, [pc, #148]	; (800ac84 <USBD_LL_Init+0xb0>)
 800abf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800abf2:	4b23      	ldr	r3, [pc, #140]	; (800ac80 <USBD_LL_Init+0xac>)
 800abf4:	2208      	movs	r2, #8
 800abf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800abf8:	4b21      	ldr	r3, [pc, #132]	; (800ac80 <USBD_LL_Init+0xac>)
 800abfa:	2202      	movs	r2, #2
 800abfc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800abfe:	4b20      	ldr	r3, [pc, #128]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ac0a:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ac10:	481b      	ldr	r0, [pc, #108]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac12:	f7f6 fa61 	bl	80010d8 <HAL_PCD_Init>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ac1c:	f7f5 fdfc 	bl	8000818 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac26:	2318      	movs	r3, #24
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	f7f7 ff82 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac36:	2358      	movs	r3, #88	; 0x58
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2180      	movs	r1, #128	; 0x80
 800ac3c:	f7f7 ff7a 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac46:	23c0      	movs	r3, #192	; 0xc0
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2181      	movs	r1, #129	; 0x81
 800ac4c:	f7f7 ff72 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac56:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	f7f7 ff69 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2182      	movs	r1, #130	; 0x82
 800ac70:	f7f7 ff60 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	2000304c 	.word	0x2000304c
 800ac84:	40005c00 	.word	0x40005c00

0800ac88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7f6 fb19 	bl	80012d6 <HAL_PCD_Start>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 f94e 	bl	800af4c <USBD_Get_USB_Status>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	461a      	mov	r2, r3
 800accc:	4603      	mov	r3, r0
 800acce:	70fb      	strb	r3, [r7, #3]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70bb      	strb	r3, [r7, #2]
 800acd4:	4613      	mov	r3, r2
 800acd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ace6:	78bb      	ldrb	r3, [r7, #2]
 800ace8:	883a      	ldrh	r2, [r7, #0]
 800acea:	78f9      	ldrb	r1, [r7, #3]
 800acec:	f7f6 fc70 	bl	80015d0 <HAL_PCD_EP_Open>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f928 	bl	800af4c <USBD_Get_USB_Status>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	460b      	mov	r3, r1
 800ad14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f6 fcae 	bl	800168a <HAL_PCD_EP_Close>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f909 	bl	800af4c <USBD_Get_USB_Status>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f6 fd56 	bl	8001818 <HAL_PCD_EP_SetStall>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f8ea 	bl	800af4c <USBD_Get_USB_Status>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ada0:	78fa      	ldrb	r2, [r7, #3]
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f6 fd97 	bl	80018d8 <HAL_PCD_EP_ClrStall>
 800adaa:	4603      	mov	r3, r0
 800adac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f8cb 	bl	800af4c <USBD_Get_USB_Status>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adba:	7bbb      	ldrb	r3, [r7, #14]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800add6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800add8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800addc:	2b00      	cmp	r3, #0
 800adde:	da0c      	bge.n	800adfa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade6:	68f9      	ldr	r1, [r7, #12]
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	440b      	add	r3, r1
 800adf4:	3302      	adds	r3, #2
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	e00b      	b.n	800ae12 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae00:	68f9      	ldr	r1, [r7, #12]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	00db      	lsls	r3, r3, #3
 800ae0a:	440b      	add	r3, r1
 800ae0c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ae10:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bc80      	pop	{r7}
 800ae1a:	4770      	bx	lr

0800ae1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae36:	78fa      	ldrb	r2, [r7, #3]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f6 fba3 	bl	8001586 <HAL_PCD_SetAddress>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 f880 	bl	800af4c <USBD_Get_USB_Status>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	461a      	mov	r2, r3
 800ae66:	460b      	mov	r3, r1
 800ae68:	72fb      	strb	r3, [r7, #11]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae7c:	893b      	ldrh	r3, [r7, #8]
 800ae7e:	7af9      	ldrb	r1, [r7, #11]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	f7f6 fc92 	bl	80017aa <HAL_PCD_EP_Transmit>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae8a:	7dfb      	ldrb	r3, [r7, #23]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 f85d 	bl	800af4c <USBD_Get_USB_Status>
 800ae92:	4603      	mov	r3, r0
 800ae94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	607a      	str	r2, [r7, #4]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	460b      	mov	r3, r1
 800aeae:	72fb      	strb	r3, [r7, #11]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aec2:	893b      	ldrh	r3, [r7, #8]
 800aec4:	7af9      	ldrb	r1, [r7, #11]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f7f6 fc27 	bl	800171a <HAL_PCD_EP_Receive>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f83a 	bl	800af4c <USBD_Get_USB_Status>
 800aed8:	4603      	mov	r3, r0
 800aeda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aedc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7f6 fc3d 	bl	800177c <HAL_PCD_EP_GetRxCount>
 800af02:	4603      	mov	r3, r0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af14:	4b02      	ldr	r3, [pc, #8]	; (800af20 <USBD_static_malloc+0x14>)
}
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr
 800af20:	20001958 	.word	0x20001958

0800af24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]

}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr

0800af36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af36:	b480      	push	{r7}
 800af38:	b083      	sub	sp, #12
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	bc80      	pop	{r7}
 800af4a:	4770      	bx	lr

0800af4c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af5a:	79fb      	ldrb	r3, [r7, #7]
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	d817      	bhi.n	800af90 <USBD_Get_USB_Status+0x44>
 800af60:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <USBD_Get_USB_Status+0x1c>)
 800af62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af66:	bf00      	nop
 800af68:	0800af79 	.word	0x0800af79
 800af6c:	0800af7f 	.word	0x0800af7f
 800af70:	0800af85 	.word	0x0800af85
 800af74:	0800af8b 	.word	0x0800af8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73fb      	strb	r3, [r7, #15]
    break;
 800af7c:	e00b      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af7e:	2302      	movs	r3, #2
 800af80:	73fb      	strb	r3, [r7, #15]
    break;
 800af82:	e008      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
    break;
 800af88:	e005      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af8a:	2302      	movs	r3, #2
 800af8c:	73fb      	strb	r3, [r7, #15]
    break;
 800af8e:	e002      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af90:	2302      	movs	r3, #2
 800af92:	73fb      	strb	r3, [r7, #15]
    break;
 800af94:	bf00      	nop
  }
  return usb_status;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop

0800afa4 <__libc_init_array>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	2600      	movs	r6, #0
 800afa8:	4d0c      	ldr	r5, [pc, #48]	; (800afdc <__libc_init_array+0x38>)
 800afaa:	4c0d      	ldr	r4, [pc, #52]	; (800afe0 <__libc_init_array+0x3c>)
 800afac:	1b64      	subs	r4, r4, r5
 800afae:	10a4      	asrs	r4, r4, #2
 800afb0:	42a6      	cmp	r6, r4
 800afb2:	d109      	bne.n	800afc8 <__libc_init_array+0x24>
 800afb4:	f000 f830 	bl	800b018 <_init>
 800afb8:	2600      	movs	r6, #0
 800afba:	4d0a      	ldr	r5, [pc, #40]	; (800afe4 <__libc_init_array+0x40>)
 800afbc:	4c0a      	ldr	r4, [pc, #40]	; (800afe8 <__libc_init_array+0x44>)
 800afbe:	1b64      	subs	r4, r4, r5
 800afc0:	10a4      	asrs	r4, r4, #2
 800afc2:	42a6      	cmp	r6, r4
 800afc4:	d105      	bne.n	800afd2 <__libc_init_array+0x2e>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afcc:	4798      	blx	r3
 800afce:	3601      	adds	r6, #1
 800afd0:	e7ee      	b.n	800afb0 <__libc_init_array+0xc>
 800afd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd6:	4798      	blx	r3
 800afd8:	3601      	adds	r6, #1
 800afda:	e7f2      	b.n	800afc2 <__libc_init_array+0x1e>
 800afdc:	0800b104 	.word	0x0800b104
 800afe0:	0800b104 	.word	0x0800b104
 800afe4:	0800b104 	.word	0x0800b104
 800afe8:	0800b108 	.word	0x0800b108

0800afec <memcpy>:
 800afec:	440a      	add	r2, r1
 800afee:	4291      	cmp	r1, r2
 800aff0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aff4:	d100      	bne.n	800aff8 <memcpy+0xc>
 800aff6:	4770      	bx	lr
 800aff8:	b510      	push	{r4, lr}
 800affa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800affe:	4291      	cmp	r1, r2
 800b000:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b004:	d1f9      	bne.n	800affa <memcpy+0xe>
 800b006:	bd10      	pop	{r4, pc}

0800b008 <memset>:
 800b008:	4603      	mov	r3, r0
 800b00a:	4402      	add	r2, r0
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d100      	bne.n	800b012 <memset+0xa>
 800b010:	4770      	bx	lr
 800b012:	f803 1b01 	strb.w	r1, [r3], #1
 800b016:	e7f9      	b.n	800b00c <memset+0x4>

0800b018 <_init>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	bf00      	nop
 800b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	469e      	mov	lr, r3
 800b022:	4770      	bx	lr

0800b024 <_fini>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	bf00      	nop
 800b028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02a:	bc08      	pop	{r3}
 800b02c:	469e      	mov	lr, r3
 800b02e:	4770      	bx	lr
