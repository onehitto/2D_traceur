
2D_traceur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b448  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b66c  0800b66c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b66c  0800b66c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b66c  0800b66c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003154  200001e4  0800b858  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003338  0800b858  00023338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024979  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000521c  00000000  00000000  00044b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00049da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0004b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014079  00000000  00000000  0004c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006ce1  00000000  00000000  000609b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0006769a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000603c  00000000  00000000  000676f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b540 	.word	0x0800b540

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800b540 	.word	0x0800b540

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000200 	.word	0x20000200
 800018c:	20000254 	.word	0x20000254

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08e      	sub	sp, #56	; 0x38
 8000194:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fc0b 	bl	80009b0 <HAL_Init>
  SystemClock_Config();
 800019a:	f000 f845 	bl	8000228 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f961 	bl	8000464 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f89b 	bl	80002dc <MX_TIM2_Init>
  MX_TIM4_Init();
 80001a6:	f000 f90f 	bl	80003c8 <MX_TIM4_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  Com_Init();
 80001aa:	f009 fea9 	bl	8009f00 <Com_Init>
  Servo_Init(&servo, &htim2);
 80001ae:	4918      	ldr	r1, [pc, #96]	; (8000210 <main+0x80>)
 80001b0:	4818      	ldr	r0, [pc, #96]	; (8000214 <main+0x84>)
 80001b2:	f009 fe45 	bl	8009e40 <Servo_Init>
  G_Code_Init();
 80001b6:	f009 ff59 	bl	800a06c <G_Code_Init>
  /* USER CODE END RTOS_QUEUES */
  HAL_Delay(10);
 80001ba:	200a      	movs	r0, #10
 80001bc:	f000 fc2a 	bl	8000a14 <HAL_Delay>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x88>)
 80001c2:	f107 041c 	add.w	r4, r7, #28
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(ComTask, StartComTask, osPriorityNormal, 0, 256);
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <main+0x8c>)
 80001d6:	463c      	mov	r4, r7
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 fd80 	bl	8007cf2 <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <main+0x90>)
 80001f6:	6013      	str	r3, [r2, #0]
  ComTaskHandle = osThreadCreate(osThread(ComTask), NULL); // every 20ms
 80001f8:	463b      	mov	r3, r7
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f007 fd78 	bl	8007cf2 <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0x94>)
 8000206:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 8000208:	f007 fd6c 	bl	8007ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x7c>
 800020e:	bf00      	nop
 8000210:	2000241c 	.word	0x2000241c
 8000214:	20002410 	.word	0x20002410
 8000218:	0800b56c 	.word	0x0800b56c
 800021c:	0800b588 	.word	0x0800b588
 8000220:	20001bec 	.word	0x20001bec
 8000224:	20002418 	.word	0x20002418

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f00a fd3a 	bl	800acb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fc08 	bl	8002a94 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 f9fd 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fe72 	bl	8002f94 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 f9e7 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ba:	2310      	movs	r3, #16
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 f80f 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d0:	f000 f9da 	bl	8000688 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0320 	add.w	r3, r7, #32
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000314:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000316:	228f      	movs	r2, #143	; 0x8f
 8000318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000322:	f242 7210 	movw	r2, #10000	; 0x2710
 8000326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000334:	4823      	ldr	r0, [pc, #140]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000336:	f003 f88d 	bl	8003454 <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000340:	f000 f9a2 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4619      	mov	r1, r3
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000352:	f003 fc0b 	bl	8003b6c <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800035c:	f000 f994 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000362:	f003 f93f 	bl	80035e4 <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800036c:	f000 f98c 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000380:	f003 ff84 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800038a:	f000 f97d 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000392:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000396:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	4619      	mov	r1, r3
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003a8:	f003 fb1e 	bl	80039e8 <HAL_TIM_PWM_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003b2:	f000 f969 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003b8:	f000 f9dc 	bl	8000774 <HAL_TIM_MspPostInit>

}
 80003bc:	bf00      	nop
 80003be:	3738      	adds	r7, #56	; 0x38
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	2000241c 	.word	0x2000241c

080003c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM4_Init+0x94>)
 80003e6:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <MX_TIM4_Init+0x98>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM4_Init+0x94>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM4_Init+0x94>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 36000;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_TIM4_Init+0x94>)
 80003f8:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80003fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_TIM4_Init+0x94>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_TIM4_Init+0x94>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_TIM4_Init+0x94>)
 800040c:	f003 f822 	bl	8003454 <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000416:	f000 f937 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	; (800045c <MX_TIM4_Init+0x94>)
 8000428:	f003 fba0 	bl	8003b6c <HAL_TIM_ConfigClockSource>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f929 	bl	8000688 <Error_Handler>
  }
  //if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 // {
    //Error_Handler();
  //}
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_TIM4_Init+0x94>)
 8000444:	f003 ff22 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800044e:	f000 f91b 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20001bf4 	.word	0x20001bf4
 8000460:	40000800 	.word	0x40000800

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b40      	ldr	r3, [pc, #256]	; (800057c <MX_GPIO_Init+0x118>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a3f      	ldr	r2, [pc, #252]	; (800057c <MX_GPIO_Init+0x118>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b3d      	ldr	r3, [pc, #244]	; (800057c <MX_GPIO_Init+0x118>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b3a      	ldr	r3, [pc, #232]	; (800057c <MX_GPIO_Init+0x118>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <MX_GPIO_Init+0x118>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <MX_GPIO_Init+0x118>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_GPIO_Init+0x118>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a33      	ldr	r2, [pc, #204]	; (800057c <MX_GPIO_Init+0x118>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <MX_GPIO_Init+0x118>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b2e      	ldr	r3, [pc, #184]	; (800057c <MX_GPIO_Init+0x118>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a2d      	ldr	r2, [pc, #180]	; (800057c <MX_GPIO_Init+0x118>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b2b      	ldr	r3, [pc, #172]	; (800057c <MX_GPIO_Init+0x118>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004de:	4828      	ldr	r0, [pc, #160]	; (8000580 <MX_GPIO_Init+0x11c>)
 80004e0:	f000 fd37 	bl	8000f52 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004e4:	2200      	movs	r2, #0
 80004e6:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <MX_GPIO_Init+0x120>)
 80004ec:	f000 fd31 	bl	8000f52 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004f0:	2200      	movs	r2, #0
 80004f2:	f248 31f0 	movw	r1, #33776	; 0x83f0
 80004f6:	4824      	ldr	r0, [pc, #144]	; (8000588 <MX_GPIO_Init+0x124>)
 80004f8:	f000 fd2b 	bl	8000f52 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <MX_GPIO_Init+0x11c>)
 8000516:	f000 fb81 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800051a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2302      	movs	r3, #2
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <MX_GPIO_Init+0x124>)
 8000534:	f000 fb72 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000538:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800053c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <MX_GPIO_Init+0x120>)
 8000552:	f000 fb63 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000556:	f248 33f0 	movw	r3, #33776	; 0x83f0
 800055a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_GPIO_Init+0x124>)
 8000570:	f000 fb54 	bl	8000c1c <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	40011000 	.word	0x40011000
 8000584:	40010800 	.word	0x40010800
 8000588:	40010c00 	.word	0x40010c00

0800058c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  Data_t msg;
  uint8_t timflag = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  for(;;)
  {
	  osDelay(20);
 800059a:	2014      	movs	r0, #20
 800059c:	f007 fbf5 	bl	8007d8a <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && timflag == 0){
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <StartDefaultTask+0x70>)
 80005a6:	f000 fcbd 	bl	8000f24 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d115      	bne.n	80005dc <StartDefaultTask+0x50>
 80005b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d111      	bne.n	80005dc <StartDefaultTask+0x50>
		  timflag = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  	snprintf(msg.data,sizeof(msg.data),"<InfoServo>\n");
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <StartDefaultTask+0x74>)
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00a fb7a 	bl	800acc0 <sniprintf>
		  	Com_Queue_msg(&msg);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4618      	mov	r0, r3
 80005d2:	f009 fcd5 	bl	8009f80 <Com_Queue_msg>
		  	HAL_TIM_Base_Start_IT(&htim4);
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <StartDefaultTask+0x78>)
 80005d8:	f002 ffb2 	bl	8003540 <HAL_TIM_Base_Start_IT>
		  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET && timflag == 1){
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <StartDefaultTask+0x70>)
 80005e2:	f000 fc9f 	bl	8000f24 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1d6      	bne.n	800059a <StartDefaultTask+0xe>
 80005ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1d2      	bne.n	800059a <StartDefaultTask+0xe>
	  		  timflag = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  osDelay(20);
 80005fa:	e7ce      	b.n	800059a <StartDefaultTask+0xe>
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	0800b5a4 	.word	0x0800b5a4
 8000604:	20001bf4 	.word	0x20001bf4

08000608 <StartComTask>:
  * @brief  Function implementing the ComTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Header_StartComTask */
void StartComTask(void const * argument){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

	for(;;)
	  {
			osDelay(20);
 8000610:	2014      	movs	r0, #20
 8000612:	f007 fbba 	bl	8007d8a <osDelay>
			Com_Transmit();
 8000616:	f009 fc8b 	bl	8009f30 <Com_Transmit>
			Com_Receive();
 800061a:	f009 fcc5 	bl	8009fa8 <Com_Receive>
			Com_Assign();
 800061e:	f009 fcff 	bl	800a020 <Com_Assign>
			osDelay(20);
 8000622:	e7f5      	b.n	8000610 <StartComTask+0x8>

08000624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a10      	ldr	r2, [pc, #64]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d101      	bne.n	800063a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000636:	f000 f9d1 	bl	80009dc <HAL_IncTick>
  }
  if (htim->Instance == TIM4) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d112      	bne.n	800066a <HAL_TIM_PeriodElapsedCallback+0x46>
	  interruptCount++;
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	4a0c      	ldr	r2, [pc, #48]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800064c:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800064e:	2120      	movs	r1, #32
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000652:	f000 fc96 	bl	8000f82 <HAL_GPIO_TogglePin>
	  if (interruptCount == 10){
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d105      	bne.n	800066a <HAL_TIM_PeriodElapsedCallback+0x46>
	        HAL_TIM_Base_Stop(&htim4);
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000660:	f002 ff47 	bl	80034f2 <HAL_TIM_Base_Stop>
	        interruptCount = 0;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
	  }
    }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40000400 	.word	0x40000400
 8000678:	40000800 	.word	0x40000800
 800067c:	20000454 	.word	0x20000454
 8000680:	40010c00 	.word	0x40010c00
 8000684:	20001bf4 	.word	0x20001bf4

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_MspInit+0x68>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_MspInit+0x68>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_MspInit+0x68>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_MspInit+0x68>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <HAL_MspInit+0x68>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x68>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	210f      	movs	r1, #15
 80006ce:	f06f 0001 	mvn.w	r0, #1
 80006d2:	f000 fa78 	bl	8000bc6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x6c>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_MspInit+0x6c>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000

08000704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000714:	d10c      	bne.n	8000730 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_TIM_Base_MspInit+0x68>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <HAL_TIM_Base_MspInit+0x68>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_TIM_Base_MspInit+0x68>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
    }

}
 800072e:	e018      	b.n	8000762 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_TIM_Base_MspInit+0x6c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d113      	bne.n	8000762 <HAL_TIM_Base_MspInit+0x5e>
      __HAL_RCC_TIM4_CLK_ENABLE();
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_TIM_Base_MspInit+0x68>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <HAL_TIM_Base_MspInit+0x68>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_TIM_Base_MspInit+0x68>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2105      	movs	r1, #5
 8000756:	201e      	movs	r0, #30
 8000758:	f000 fa35 	bl	8000bc6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800075c:	201e      	movs	r0, #30
 800075e:	f000 fa4e 	bl	8000bfe <HAL_NVIC_EnableIRQ>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	40000800 	.word	0x40000800

08000774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000792:	d117      	bne.n	80007c4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_TIM_MspPostInit+0x58>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <HAL_TIM_MspPostInit+0x58>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_TIM_MspPostInit+0x58>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <HAL_TIM_MspPostInit+0x5c>)
 80007c0:	f000 fa2c 	bl	8000c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010800 	.word	0x40010800

080007d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	201d      	movs	r0, #29
 80007ea:	f000 f9ec 	bl	8000bc6 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007ee:	201d      	movs	r0, #29
 80007f0:	f000 fa05 	bl	8000bfe <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HAL_InitTick+0xa0>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <HAL_InitTick+0xa0>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_InitTick+0xa0>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800080c:	f107 0210 	add.w	r2, r7, #16
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fd18 	bl	800324c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800081c:	f002 fd02 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 8000820:	4603      	mov	r3, r0
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_InitTick+0xa4>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	0c9b      	lsrs	r3, r3, #18
 8000830:	3b01      	subs	r3, #1
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_InitTick+0xa8>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <HAL_InitTick+0xac>)
 8000838:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_InitTick+0xa8>)
 800083c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000840:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_InitTick+0xa8>)
 8000844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000846:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_InitTick+0xa8>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_InitTick+0xa8>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <HAL_InitTick+0xa8>)
 8000856:	f002 fdfd 	bl	8003454 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d104      	bne.n	800086a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <HAL_InitTick+0xa8>)
 8000862:	f002 fe6d 	bl	8003540 <HAL_TIM_Base_Start_IT>
 8000866:	4603      	mov	r3, r0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3730      	adds	r7, #48	; 0x30
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	431bde83 	.word	0x431bde83
 800087c:	20002700 	.word	0x20002700
 8000880:	40000400 	.word	0x40000400

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
	...

080008b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008b6:	f000 fca2 	bl	80011fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20003038 	.word	0x20003038

080008c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <TIM3_IRQHandler+0x10>)
 80008ca:	f002 ff85 	bl	80037d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20002700 	.word	0x20002700

080008d8 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim4);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <TIM4_IRQHandler+0x10>)
 80008de:	f002 ff7b 	bl	80037d8 <HAL_TIM_IRQHandler>

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20001bf4 	.word	0x20001bf4

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800091c:	f00a f990 	bl	800ac40 <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20005000 	.word	0x20005000
 800094c:	00000400 	.word	0x00000400
 8000950:	20000458 	.word	0x20000458
 8000954:	20003338 	.word	0x20003338

08000958 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000964:	f7ff fff8 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800096a:	490c      	ldr	r1, [pc, #48]	; (800099c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000980:	4c09      	ldr	r4, [pc, #36]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f00a f95d 	bl	800ac4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff fbfd 	bl	8000190 <main>
  bx lr
 8000996:	4770      	bx	lr
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80009a0:	0800b674 	.word	0x0800b674
  ldr r2, =_sbss
 80009a4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80009a8:	20003338 	.word	0x20003338

080009ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC1_2_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_Init+0x28>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_Init+0x28>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f8f5 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff ff04 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff fe62 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40022000 	.word	0x40022000

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x1c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_IncTick+0x20>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <HAL_IncTick+0x20>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20002748 	.word	0x20002748

08000a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <HAL_GetTick+0x10>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20002748 	.word	0x20002748

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff fff0 	bl	8000a00 <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffe0 	bl	8000a00 <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <__NVIC_EnableIRQ+0x34>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff4f 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff64 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ffb2 	bl	8000b4c <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff81 	bl	8000af8 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff57 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b08b      	sub	sp, #44	; 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e169      	b.n	8000f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8158 	bne.w	8000efe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a9a      	ldr	r2, [pc, #616]	; (8000ebc <HAL_GPIO_Init+0x2a0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d05e      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c58:	4a98      	ldr	r2, [pc, #608]	; (8000ebc <HAL_GPIO_Init+0x2a0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d875      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c5e:	4a98      	ldr	r2, [pc, #608]	; (8000ec0 <HAL_GPIO_Init+0x2a4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d058      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c64:	4a96      	ldr	r2, [pc, #600]	; (8000ec0 <HAL_GPIO_Init+0x2a4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d86f      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c6a:	4a96      	ldr	r2, [pc, #600]	; (8000ec4 <HAL_GPIO_Init+0x2a8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d052      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c70:	4a94      	ldr	r2, [pc, #592]	; (8000ec4 <HAL_GPIO_Init+0x2a8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d869      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c76:	4a94      	ldr	r2, [pc, #592]	; (8000ec8 <HAL_GPIO_Init+0x2ac>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d04c      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c7c:	4a92      	ldr	r2, [pc, #584]	; (8000ec8 <HAL_GPIO_Init+0x2ac>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d863      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c82:	4a92      	ldr	r2, [pc, #584]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d046      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c88:	4a90      	ldr	r2, [pc, #576]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d85d      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d82a      	bhi.n	8000ce8 <HAL_GPIO_Init+0xcc>
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d859      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c96:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <HAL_GPIO_Init+0x80>)
 8000c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9c:	08000d17 	.word	0x08000d17
 8000ca0:	08000cf1 	.word	0x08000cf1
 8000ca4:	08000d03 	.word	0x08000d03
 8000ca8:	08000d45 	.word	0x08000d45
 8000cac:	08000d4b 	.word	0x08000d4b
 8000cb0:	08000d4b 	.word	0x08000d4b
 8000cb4:	08000d4b 	.word	0x08000d4b
 8000cb8:	08000d4b 	.word	0x08000d4b
 8000cbc:	08000d4b 	.word	0x08000d4b
 8000cc0:	08000d4b 	.word	0x08000d4b
 8000cc4:	08000d4b 	.word	0x08000d4b
 8000cc8:	08000d4b 	.word	0x08000d4b
 8000ccc:	08000d4b 	.word	0x08000d4b
 8000cd0:	08000d4b 	.word	0x08000d4b
 8000cd4:	08000d4b 	.word	0x08000d4b
 8000cd8:	08000d4b 	.word	0x08000d4b
 8000cdc:	08000d4b 	.word	0x08000d4b
 8000ce0:	08000cf9 	.word	0x08000cf9
 8000ce4:	08000d0d 	.word	0x08000d0d
 8000ce8:	4a79      	ldr	r2, [pc, #484]	; (8000ed0 <HAL_GPIO_Init+0x2b4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cee:	e02c      	b.n	8000d4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e029      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e024      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	3308      	adds	r3, #8
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e01f      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	330c      	adds	r3, #12
 8000d12:	623b      	str	r3, [r7, #32]
          break;
 8000d14:	e01a      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	623b      	str	r3, [r7, #32]
          break;
 8000d22:	e013      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d105      	bne.n	8000d38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	611a      	str	r2, [r3, #16]
          break;
 8000d36:	e009      	b.n	8000d4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69fa      	ldr	r2, [r7, #28]
 8000d40:	615a      	str	r2, [r3, #20]
          break;
 8000d42:	e003      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
          break;
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          break;
 8000d4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2bff      	cmp	r3, #255	; 0xff
 8000d50:	d801      	bhi.n	8000d56 <HAL_GPIO_Init+0x13a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	e001      	b.n	8000d5a <HAL_GPIO_Init+0x13e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2bff      	cmp	r3, #255	; 0xff
 8000d60:	d802      	bhi.n	8000d68 <HAL_GPIO_Init+0x14c>
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	e002      	b.n	8000d6e <HAL_GPIO_Init+0x152>
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3b08      	subs	r3, #8
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	210f      	movs	r1, #15
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	401a      	ands	r2, r3
 8000d80:	6a39      	ldr	r1, [r7, #32]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80b1 	beq.w	8000efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9c:	4b4d      	ldr	r3, [pc, #308]	; (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a4c      	ldr	r2, [pc, #304]	; (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000db4:	4a48      	ldr	r2, [pc, #288]	; (8000ed8 <HAL_GPIO_Init+0x2bc>)
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a40      	ldr	r2, [pc, #256]	; (8000edc <HAL_GPIO_Init+0x2c0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d013      	beq.n	8000e08 <HAL_GPIO_Init+0x1ec>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a3f      	ldr	r2, [pc, #252]	; (8000ee0 <HAL_GPIO_Init+0x2c4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d00d      	beq.n	8000e04 <HAL_GPIO_Init+0x1e8>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a3e      	ldr	r2, [pc, #248]	; (8000ee4 <HAL_GPIO_Init+0x2c8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x1e4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a3d      	ldr	r2, [pc, #244]	; (8000ee8 <HAL_GPIO_Init+0x2cc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d101      	bne.n	8000dfc <HAL_GPIO_Init+0x1e0>
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	e004      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e0c:	f002 0203 	and.w	r2, r2, #3
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	4093      	lsls	r3, r2
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1a:	492f      	ldr	r1, [pc, #188]	; (8000ed8 <HAL_GPIO_Init+0x2bc>)
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	492c      	ldr	r1, [pc, #176]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	608b      	str	r3, [r1, #8]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4928      	ldr	r1, [pc, #160]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	4922      	ldr	r1, [pc, #136]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60cb      	str	r3, [r1, #12]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	491e      	ldr	r1, [pc, #120]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4918      	ldr	r1, [pc, #96]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	604b      	str	r3, [r1, #4]
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4914      	ldr	r1, [pc, #80]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d021      	beq.n	8000ef0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	490e      	ldr	r1, [pc, #56]	; (8000eec <HAL_GPIO_Init+0x2d0>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
 8000eb8:	e021      	b.n	8000efe <HAL_GPIO_Init+0x2e2>
 8000eba:	bf00      	nop
 8000ebc:	10320000 	.word	0x10320000
 8000ec0:	10310000 	.word	0x10310000
 8000ec4:	10220000 	.word	0x10220000
 8000ec8:	10210000 	.word	0x10210000
 8000ecc:	10120000 	.word	0x10120000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40010c00 	.word	0x40010c00
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40011400 	.word	0x40011400
 8000eec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_GPIO_Init+0x304>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4909      	ldr	r1, [pc, #36]	; (8000f20 <HAL_GPIO_Init+0x304>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	3301      	adds	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f47f ae8e 	bne.w	8000c30 <HAL_GPIO_Init+0x14>
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	372c      	adds	r7, #44	; 0x2c
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	807b      	strh	r3, [r7, #2]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f68:	887a      	ldrh	r2, [r7, #2]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f6e:	e003      	b.n	8000f78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	041a      	lsls	r2, r3, #16
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f94:	887a      	ldrh	r2, [r7, #2]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	041a      	lsls	r2, r3, #16
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b08b      	sub	sp, #44	; 0x2c
 8000fb8:	af06      	add	r7, sp, #24
 8000fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0f1      	b.n	80011aa <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d106      	bne.n	8000fe0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f009 fb86 	bl	800a6ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 f9e3 	bl	80043b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	687e      	ldr	r6, [r7, #4]
 8000ffa:	466d      	mov	r5, sp
 8000ffc:	f106 0410 	add.w	r4, r6, #16
 8001000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	1d33      	adds	r3, r6, #4
 800100a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f003 f9ad 	bl	800436c <USB_CoreInit>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0c2      	b.n	80011aa <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f003 f9de 	bl	80043ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e040      	b.n	80010b8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	3301      	adds	r3, #1
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3303      	adds	r3, #3
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	3338      	adds	r3, #56	; 0x38
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	333c      	adds	r3, #60	; 0x3c
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	3340      	adds	r3, #64	; 0x40
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3b9      	bcc.n	8001036 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e044      	b.n	8001152 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	3301      	adds	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	d3b5      	bcc.n	80010c8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	687e      	ldr	r6, [r7, #4]
 8001164:	466d      	mov	r5, sp
 8001166:	f106 0410 	add.w	r4, r6, #16
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	602b      	str	r3, [r5, #0]
 8001172:	1d33      	adds	r3, r6, #4
 8001174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f003 f944 	bl	8004404 <USB_DevInit>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2202      	movs	r2, #2
 8001186:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00d      	b.n	80011aa <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 f960 	bl	8006468 <USB_DevDisconnect>

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_PCD_Start+0x16>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e016      	b.n	80011f6 <HAL_PCD_Start+0x44>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f8d9 	bl	800438c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011da:	2101      	movs	r1, #1
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f009 fcf8 	bl	800abd2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f005 f934 	bl	8006454 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b088      	sub	sp, #32
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f005 f936 	bl	800647c <USB_ReadInterrupts>
 8001210:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fb1d 	bl	800185c <PCD_EP_ISR_Handler>

    return;
 8001222:	e11b      	b.n	800145c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	2b00      	cmp	r3, #0
 800122c:	d013      	beq.n	8001256 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001240:	b292      	uxth	r2, r2
 8001242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f009 facb 	bl	800a7e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800124c:	2100      	movs	r1, #0
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f907 	bl	8001462 <HAL_PCD_SetAddress>

    return;
 8001254:	e102      	b.n	800145c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00c      	beq.n	800127a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001272:	b292      	uxth	r2, r2
 8001274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001278:	e0f0      	b.n	800145c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00c      	beq.n	800129e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001296:	b292      	uxth	r2, r2
 8001298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800129c:	e0de      	b.n	800145c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d027      	beq.n	80012f8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0204 	bic.w	r2, r2, #4
 80012ba:	b292      	uxth	r2, r2
 80012bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0208 	bic.w	r2, r2, #8
 80012d2:	b292      	uxth	r2, r2
 80012d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f009 fabb 	bl	800a854 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012f0:	b292      	uxth	r2, r2
 80012f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012f6:	e0b1      	b.n	800145c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8085 	beq.w	800140e <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	77fb      	strb	r3, [r7, #31]
 8001308:	e011      	b.n	800132e <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	441a      	add	r2, r3
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	b292      	uxth	r2, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	f107 0120 	add.w	r1, r7, #32
 8001322:	440b      	add	r3, r1
 8001324:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001328:	7ffb      	ldrb	r3, [r7, #31]
 800132a:	3301      	adds	r3, #1
 800132c:	77fb      	strb	r3, [r7, #31]
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	2b07      	cmp	r3, #7
 8001332:	d9ea      	bls.n	800130a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	b292      	uxth	r2, r2
 8001348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	b292      	uxth	r2, r2
 8001360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001364:	bf00      	nop
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800136e:	b29b      	uxth	r3, r3
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f6      	beq.n	8001366 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001380:	b29a      	uxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138a:	b292      	uxth	r2, r2
 800138c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	e010      	b.n	80013b8 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4611      	mov	r1, r2
 800139e:	7ffa      	ldrb	r2, [r7, #31]
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	440a      	add	r2, r1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	f107 0120 	add.w	r1, r7, #32
 80013aa:	440b      	add	r3, r1
 80013ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013b0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013b2:	7ffb      	ldrb	r3, [r7, #31]
 80013b4:	3301      	adds	r3, #1
 80013b6:	77fb      	strb	r3, [r7, #31]
 80013b8:	7ffb      	ldrb	r3, [r7, #31]
 80013ba:	2b07      	cmp	r3, #7
 80013bc:	d9eb      	bls.n	8001396 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0208 	orr.w	r2, r2, #8
 80013d0:	b292      	uxth	r2, r2
 80013d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013de:	b29a      	uxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e8:	b292      	uxth	r2, r2
 80013ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0204 	orr.w	r2, r2, #4
 8001400:	b292      	uxth	r2, r2
 8001402:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f009 fa0a 	bl	800a820 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800140c:	e026      	b.n	800145c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00f      	beq.n	8001438 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800142a:	b292      	uxth	r2, r2
 800142c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f009 f9c8 	bl	800a7c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001436:	e011      	b.n	800145c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00c      	beq.n	800145c <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001454:	b292      	uxth	r2, r2
 8001456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800145a:	bf00      	nop
  }
}
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_PCD_SetAddress+0x1a>
 8001478:	2302      	movs	r3, #2
 800147a:	e013      	b.n	80014a4 <HAL_PCD_SetAddress+0x42>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f004 ffca 	bl	800642e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	4608      	mov	r0, r1
 80014b6:	4611      	mov	r1, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	460b      	mov	r3, r1
 80014c0:	803b      	strh	r3, [r7, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da0e      	bge.n	80014f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	705a      	strb	r2, [r3, #1]
 80014ee:	e00e      	b.n	800150e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f003 0207 	and.w	r2, r3, #7
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	b2da      	uxtb	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800151a:	883a      	ldrh	r2, [r7, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	78ba      	ldrb	r2, [r7, #2]
 8001524:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001526:	78bb      	ldrb	r3, [r7, #2]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d102      	bne.n	8001532 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_PCD_EP_Open+0x94>
 800153c:	2302      	movs	r3, #2
 800153e:	e00e      	b.n	800155e <HAL_PCD_EP_Open+0xb2>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	4618      	mov	r0, r3
 8001550:	f002 ff78 	bl	8004444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800155c:	7afb      	ldrb	r3, [r7, #11]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001576:	2b00      	cmp	r3, #0
 8001578:	da0e      	bge.n	8001598 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	705a      	strb	r2, [r3, #1]
 8001596:	e00e      	b.n	80015b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0207 	and.w	r2, r3, #7
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_PCD_EP_Close+0x6a>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e00e      	b.n	80015ee <HAL_PCD_EP_Close+0x88>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68f9      	ldr	r1, [r7, #12]
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 faf0 	bl	8004bc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	460b      	mov	r3, r1
 8001604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	f003 0207 	and.w	r2, r3, #7
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2200      	movs	r2, #0
 8001634:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	b2da      	uxtb	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6979      	ldr	r1, [r7, #20]
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fca7 	bl	8004f9c <USB_EPStartXfer>

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f003 0207 	and.w	r2, r3, #7
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	460b      	mov	r3, r1
 8001694:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2201      	movs	r2, #1
 80016d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6979      	ldr	r1, [r7, #20]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fc59 	bl	8004f9c <USB_EPStartXfer>

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	f003 0207 	and.w	r2, r3, #7
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d901      	bls.n	8001712 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e04c      	b.n	80017ac <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001716:	2b00      	cmp	r3, #0
 8001718:	da0e      	bge.n	8001738 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	705a      	strb	r2, [r3, #1]
 8001736:	e00c      	b.n	8001752 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	b2da      	uxtb	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_PCD_EP_SetStall+0x7e>
 800176e:	2302      	movs	r3, #2
 8001770:	e01c      	b.n	80017ac <HAL_PCD_EP_SetStall+0xb8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68f9      	ldr	r1, [r7, #12]
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fd57 	bl	8006234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	2b00      	cmp	r3, #0
 800178e:	d108      	bne.n	80017a2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f004 fe7c 	bl	800649a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 020f 	and.w	r2, r3, #15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d901      	bls.n	80017d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e040      	b.n	8001854 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da0e      	bge.n	80017f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	705a      	strb	r2, [r3, #1]
 80017f6:	e00e      	b.n	8001816 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0207 	and.w	r2, r3, #7
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	b2da      	uxtb	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_PCD_EP_ClrStall+0x82>
 8001832:	2302      	movs	r3, #2
 8001834:	e00e      	b.n	8001854 <HAL_PCD_EP_ClrStall+0xa0>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fd45 	bl	80062d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b096      	sub	sp, #88	; 0x58
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001864:	e3bf      	b.n	8001fe6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001880:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 8179 	bne.w	8001b7c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800188a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b00      	cmp	r3, #0
 8001894:	d152      	bne.n	800193c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a6:	81fb      	strh	r3, [r7, #14]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3328      	adds	r3, #40	; 0x28
 80018be:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	3302      	adds	r3, #2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	441a      	add	r2, r3
 80018f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f008 ff48 	bl	800a792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 836b 	beq.w	8001fe6 <PCD_EP_ISR_Handler+0x78a>
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 8366 	bne.w	8001fe6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001926:	b2da      	uxtb	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b292      	uxth	r2, r2
 800192e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800193a:	e354      	b.n	8001fe6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001942:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800194e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001956:	2b00      	cmp	r3, #0
 8001958:	d034      	beq.n	80019c4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	3306      	adds	r3, #6
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001984:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001996:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001998:	b29b      	uxth	r3, r3
 800199a:	f004 fdce 	bl	800653a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019aa:	4013      	ands	r3, r2
 80019ac:	823b      	strh	r3, [r7, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	8a3a      	ldrh	r2, [r7, #16]
 80019b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b8:	b292      	uxth	r2, r2
 80019ba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f008 febb 	bl	800a738 <HAL_PCD_SetupStageCallback>
 80019c2:	e310      	b.n	8001fe6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019c4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f280 830c 	bge.w	8001fe6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019da:	4013      	ands	r3, r2
 80019dc:	83fb      	strh	r3, [r7, #30]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	8bfa      	ldrh	r2, [r7, #30]
 80019e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e8:	b292      	uxth	r2, r2
 80019ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	3306      	adds	r3, #6
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a16:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d019      	beq.n	8001a54 <PCD_EP_ISR_Handler+0x1f8>
 8001a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d015      	beq.n	8001a54 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	6959      	ldr	r1, [r3, #20]
 8001a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a32:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f004 fd7e 	bl	800653a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	441a      	add	r2, r3
 8001a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f008 fe84 	bl	800a75c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 82bd 	bne.w	8001fe6 <PCD_EP_ISR_Handler+0x78a>
 8001a6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a70:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a78:	f000 82b5 	beq.w	8001fe6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4413      	add	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	801a      	strh	r2, [r3, #0]
 8001aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ab2:	d91d      	bls.n	8001af0 <PCD_EP_ISR_Handler+0x294>
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
 8001abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <PCD_EP_ISR_Handler+0x272>
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aca:	3b01      	subs	r3, #1
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	801a      	strh	r2, [r3, #0]
 8001aee:	e026      	b.n	8001b3e <PCD_EP_ISR_Handler+0x2e2>
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10a      	bne.n	8001b0e <PCD_EP_ISR_Handler+0x2b2>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	e017      	b.n	8001b3e <PCD_EP_ISR_Handler+0x2e2>
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	647b      	str	r3, [r7, #68]	; 0x44
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <PCD_EP_ISR_Handler+0x2cc>
 8001b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b24:	3301      	adds	r3, #1
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	827b      	strh	r3, [r7, #18]
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b56:	827b      	strh	r3, [r7, #18]
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b5e:	827b      	strh	r3, [r7, #18]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	8013      	strh	r3, [r2, #0]
 8001b7a:	e234      	b.n	8001fe6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b90:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f280 80fc 	bge.w	8001d92 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bd0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	7b1b      	ldrb	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d125      	bne.n	8001c3a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	3306      	adds	r3, #6
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001c1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8092 	beq.w	8001d48 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	6959      	ldr	r1, [r3, #20]
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	88da      	ldrh	r2, [r3, #6]
 8001c30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c34:	f004 fc81 	bl	800653a <USB_ReadPMA>
 8001c38:	e086      	b.n	8001d48 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	78db      	ldrb	r3, [r3, #3]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d10a      	bne.n	8001c58 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c46:	461a      	mov	r2, r3
 8001c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f9d9 	bl	8002002 <HAL_PCD_EP_DB_Receive>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001c56:	e077      	b.n	8001d48 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c72:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	441a      	add	r2, r3
 8001c84:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cde:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ce2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d02e      	beq.n	8001d48 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	6959      	ldr	r1, [r3, #20]
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf4:	891a      	ldrh	r2, [r3, #8]
 8001cf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cfa:	f004 fc1e 	bl	800653a <USB_ReadPMA>
 8001cfe:	e023      	b.n	8001d48 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	3306      	adds	r3, #6
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d28:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	6959      	ldr	r1, [r3, #20]
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3e:	895a      	ldrh	r2, [r3, #10]
 8001d40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d44:	f004 fbf9 	bl	800653a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d50:	441a      	add	r2, r3
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d5e:	441a      	add	r2, r3
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <PCD_EP_ISR_Handler+0x51c>
 8001d6c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d206      	bcs.n	8001d86 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f008 fcec 	bl	800a75c <HAL_PCD_DataOutStageCallback>
 8001d84:	e005      	b.n	8001d92 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 f905 	bl	8004f9c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8123 	beq.w	8001fe6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001da0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	441a      	add	r2, r3
 8001de0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	78db      	ldrb	r3, [r3, #3]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	f040 80a2 	bne.w	8001f3e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e02:	7b1b      	ldrb	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8093 	beq.w	8001f30 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d046      	beq.n	8001ea4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	785b      	ldrb	r3, [r3, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d126      	bne.n	8001e6c <PCD_EP_ISR_Handler+0x610>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	4413      	add	r3, r2
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	011a      	lsls	r2, r3, #4
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	4413      	add	r3, r2
 8001e40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e44:	623b      	str	r3, [r7, #32]
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	e061      	b.n	8001f30 <PCD_EP_ISR_Handler+0x6d4>
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d15d      	bne.n	8001f30 <PCD_EP_ISR_Handler+0x6d4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	4413      	add	r3, r2
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	011a      	lsls	r2, r3, #4
 8001e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e94:	4413      	add	r3, r2
 8001e96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	801a      	strh	r2, [r3, #0]
 8001ea2:	e045      	b.n	8001f30 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d126      	bne.n	8001f00 <PCD_EP_ISR_Handler+0x6a4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	4413      	add	r3, r2
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	011a      	lsls	r2, r3, #4
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efc:	801a      	strh	r2, [r3, #0]
 8001efe:	e017      	b.n	8001f30 <PCD_EP_ISR_Handler+0x6d4>
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d113      	bne.n	8001f30 <PCD_EP_ISR_Handler+0x6d4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f16:	4413      	add	r3, r2
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	011a      	lsls	r2, r3, #4
 8001f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f22:	4413      	add	r3, r2
 8001f24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f008 fc2b 	bl	800a792 <HAL_PCD_DataInStageCallback>
 8001f3c:	e053      	b.n	8001fe6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d146      	bne.n	8001fd8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d907      	bls.n	8001f92 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f8a:	1ad2      	subs	r2, r2, r3
 8001f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8e:	619a      	str	r2, [r3, #24]
 8001f90:	e002      	b.n	8001f98 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f008 fbf3 	bl	800a792 <HAL_PCD_DataInStageCallback>
 8001fac:	e01b      	b.n	8001fe6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fb6:	441a      	add	r2, r3
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fc4:	441a      	add	r2, r3
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 ffe3 	bl	8004f9c <USB_EPStartXfer>
 8001fd6:	e006      	b.n	8001fe6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fdc:	461a      	mov	r2, r3
 8001fde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f91b 	bl	800221c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f6ff ac37 	blt.w	8001866 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3758      	adds	r7, #88	; 0x58
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b088      	sub	sp, #32
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	4613      	mov	r3, r2
 800200e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07e      	beq.n	8002118 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	3302      	adds	r3, #2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	4413      	add	r3, r2
 8002038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002042:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	8b7b      	ldrh	r3, [r7, #26]
 800204a:	429a      	cmp	r2, r3
 800204c:	d306      	bcc.n	800205c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	8b7b      	ldrh	r3, [r7, #26]
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	619a      	str	r2, [r3, #24]
 800205a:	e002      	b.n	8002062 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d123      	bne.n	80020b2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002084:	833b      	strh	r3, [r7, #24]
 8002086:	8b3b      	ldrh	r3, [r7, #24]
 8002088:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800208c:	833b      	strh	r3, [r7, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	8b3b      	ldrh	r3, [r7, #24]
 800209e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01f      	beq.n	80020fc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	82fb      	strh	r3, [r7, #22]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	8afb      	ldrh	r3, [r7, #22]
 80020e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020fc:	8b7b      	ldrh	r3, [r7, #26]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	6959      	ldr	r1, [r3, #20]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	891a      	ldrh	r2, [r3, #8]
 8002110:	8b7b      	ldrh	r3, [r7, #26]
 8002112:	f004 fa12 	bl	800653a <USB_ReadPMA>
 8002116:	e07c      	b.n	8002212 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	3306      	adds	r3, #6
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002140:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	8b7b      	ldrh	r3, [r7, #26]
 8002148:	429a      	cmp	r2, r3
 800214a:	d306      	bcc.n	800215a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	8b7b      	ldrh	r3, [r7, #26]
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	619a      	str	r2, [r3, #24]
 8002158:	e002      	b.n	8002160 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d123      	bne.n	80021b0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	83fb      	strh	r3, [r7, #30]
 8002184:	8bfb      	ldrh	r3, [r7, #30]
 8002186:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800218a:	83fb      	strh	r3, [r7, #30]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	441a      	add	r2, r3
 800219a:	8bfb      	ldrh	r3, [r7, #30]
 800219c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d4:	83bb      	strh	r3, [r7, #28]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	441a      	add	r2, r3
 80021e4:	8bbb      	ldrh	r3, [r7, #28]
 80021e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021fa:	8b7b      	ldrh	r3, [r7, #26]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	895a      	ldrh	r2, [r3, #10]
 800220c:	8b7b      	ldrh	r3, [r7, #26]
 800220e:	f004 f994 	bl	800653a <USB_ReadPMA>
    }
  }

  return count;
 8002212:	8b7b      	ldrh	r3, [r7, #26]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a4      	sub	sp, #144	; 0x90
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 81dd 	beq.w	80025f0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	3302      	adds	r3, #2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800226a:	429a      	cmp	r2, r3
 800226c:	d907      	bls.n	800227e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	619a      	str	r2, [r3, #24]
 800227c:	e002      	b.n	8002284 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 80b9 	bne.w	8002400 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d126      	bne.n	80022e4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	4413      	add	r3, r2
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	011a      	lsls	r2, r3, #4
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	4413      	add	r3, r2
 80022b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022dc:	b29a      	uxth	r2, r3
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	e01a      	b.n	800231a <HAL_PCD_EP_DB_Transmit+0xfe>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d116      	bne.n	800231a <HAL_PCD_EP_DB_Transmit+0xfe>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	4413      	add	r3, r2
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	011a      	lsls	r2, r3, #4
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	4413      	add	r3, r2
 800230e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	2200      	movs	r2, #0
 8002318:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	785b      	ldrb	r3, [r3, #1]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d126      	bne.n	8002376 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	011a      	lsls	r2, r3, #4
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235a:	b29a      	uxth	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	801a      	strh	r2, [r3, #0]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236e:	b29a      	uxth	r2, r3
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	e017      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d113      	bne.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002386:	b29b      	uxth	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	4413      	add	r3, r2
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	011a      	lsls	r2, r3, #4
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	4413      	add	r3, r2
 800239a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	2200      	movs	r2, #0
 80023a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f008 f9f0 	bl	800a792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 82fc 	beq.w	80029b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	82fb      	strh	r3, [r7, #22]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	441a      	add	r2, r3
 80023e8:	8afb      	ldrh	r3, [r7, #22]
 80023ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	8013      	strh	r3, [r2, #0]
 80023fe:	e2da      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d021      	beq.n	800244e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002424:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	441a      	add	r2, r3
 8002436:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800243a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800243e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244a:	b29b      	uxth	r3, r3
 800244c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 82ae 	bne.w	80029b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002462:	441a      	add	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002470:	441a      	add	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	429a      	cmp	r2, r3
 8002480:	d30b      	bcc.n	800249a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	621a      	str	r2, [r3, #32]
 8002498:	e017      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80024a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024b2:	e00a      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d165      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0x382>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e6:	4413      	add	r3, r2
 80024e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	011a      	lsls	r2, r3, #4
 80024f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f2:	4413      	add	r3, r2
 80024f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002504:	b29a      	uxth	r2, r3
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800250e:	2b3e      	cmp	r3, #62	; 0x3e
 8002510:	d91d      	bls.n	800254e <HAL_PCD_EP_DB_Transmit+0x332>
 8002512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
 800251a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_PCD_EP_DB_Transmit+0x310>
 8002526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002528:	3b01      	subs	r3, #1
 800252a:	64bb      	str	r3, [r7, #72]	; 0x48
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29a      	uxth	r2, r3
 8002532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002534:	b29b      	uxth	r3, r3
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	b29b      	uxth	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	e044      	b.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800254e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10a      	bne.n	800256c <HAL_PCD_EP_DB_Transmit+0x350>
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002564:	b29a      	uxth	r2, r3
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	801a      	strh	r2, [r3, #0]
 800256a:	e035      	b.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800256c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48
 8002574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002582:	3301      	adds	r3, #1
 8002584:	64bb      	str	r3, [r7, #72]	; 0x48
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29a      	uxth	r2, r3
 800258c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258e:	b29b      	uxth	r3, r3
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	b29b      	uxth	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b29a      	uxth	r2, r3
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	e01c      	b.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d118      	bne.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	647b      	str	r3, [r7, #68]	; 0x44
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	4413      	add	r3, r2
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	011a      	lsls	r2, r3, #4
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
 80025ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6959      	ldr	r1, [r3, #20]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	891a      	ldrh	r2, [r3, #8]
 80025e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f003 ff61 	bl	80064b0 <USB_WritePMA>
 80025ee:	e1e2      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	3306      	adds	r3, #6
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002618:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002624:	429a      	cmp	r2, r3
 8002626:	d307      	bcc.n	8002638 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002630:	1ad2      	subs	r2, r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	619a      	str	r2, [r3, #24]
 8002636:	e002      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 80c0 	bne.w	80027c8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d126      	bne.n	800269e <HAL_PCD_EP_DB_Transmit+0x482>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002664:	4413      	add	r3, r2
 8002666:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	011a      	lsls	r2, r3, #4
 800266e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002670:	4413      	add	r3, r2
 8002672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002676:	67bb      	str	r3, [r7, #120]	; 0x78
 8002678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	b29a      	uxth	r2, r3
 8002684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002696:	b29a      	uxth	r2, r3
 8002698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800269a:	801a      	strh	r2, [r3, #0]
 800269c:	e01a      	b.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d116      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	667b      	str	r3, [r7, #100]	; 0x64
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ba:	4413      	add	r3, r2
 80026bc:	667b      	str	r3, [r7, #100]	; 0x64
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	011a      	lsls	r2, r3, #4
 80026c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026cc:	663b      	str	r3, [r7, #96]	; 0x60
 80026ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d0:	2200      	movs	r2, #0
 80026d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	677b      	str	r3, [r7, #116]	; 0x74
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d12b      	bne.n	800273a <HAL_PCD_EP_DB_Transmit+0x51e>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	4413      	add	r3, r2
 80026f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	011a      	lsls	r2, r3, #4
 8002700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002702:	4413      	add	r3, r2
 8002704:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800270c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	b29a      	uxth	r2, r3
 800271a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002730:	b29a      	uxth	r2, r3
 8002732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	e017      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x54e>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d113      	bne.n	800276a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002750:	4413      	add	r3, r2
 8002752:	677b      	str	r3, [r7, #116]	; 0x74
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	011a      	lsls	r2, r3, #4
 800275a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275c:	4413      	add	r3, r2
 800275e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002762:	673b      	str	r3, [r7, #112]	; 0x70
 8002764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002766:	2200      	movs	r2, #0
 8002768:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f008 f80e 	bl	800a792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 811a 	bne.w	80029b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
 80027c6:	e0f6      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d121      	bne.n	8002816 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800280a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800280e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002812:	b29b      	uxth	r3, r3
 8002814:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 80ca 	bne.w	80029b6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800282a:	441a      	add	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002838:	441a      	add	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6a1a      	ldr	r2, [r3, #32]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	429a      	cmp	r2, r3
 8002848:	d30b      	bcc.n	8002862 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	6a1a      	ldr	r2, [r3, #32]
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	1ad2      	subs	r2, r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	621a      	str	r2, [r3, #32]
 8002860:	e017      	b.n	8002892 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800286a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800286e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800287a:	e00a      	b.n	8002892 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	657b      	str	r3, [r7, #84]	; 0x54
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d165      	bne.n	800296c <HAL_PCD_EP_DB_Transmit+0x750>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b4:	4413      	add	r3, r2
 80028b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	011a      	lsls	r2, r3, #4
 80028be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c0:	4413      	add	r3, r2
 80028c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80028c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028dc:	2b3e      	cmp	r3, #62	; 0x3e
 80028de:	d91d      	bls.n	800291c <HAL_PCD_EP_DB_Transmit+0x700>
 80028e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <HAL_PCD_EP_DB_Transmit+0x6de>
 80028f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f6:	3b01      	subs	r3, #1
 80028f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80028fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002902:	b29b      	uxth	r3, r3
 8002904:	029b      	lsls	r3, r3, #10
 8002906:	b29b      	uxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b29b      	uxth	r3, r3
 800290c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002914:	b29a      	uxth	r2, r3
 8002916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	e041      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x784>
 800291c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002932:	b29a      	uxth	r2, r3
 8002934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	e032      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x784>
 800293a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	66bb      	str	r3, [r7, #104]	; 0x68
 8002942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_PCD_EP_DB_Transmit+0x738>
 800294e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002950:	3301      	adds	r3, #1
 8002952:	66bb      	str	r3, [r7, #104]	; 0x68
 8002954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29a      	uxth	r2, r3
 800295a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295c:	b29b      	uxth	r3, r3
 800295e:	029b      	lsls	r3, r3, #10
 8002960:	b29b      	uxth	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	b29a      	uxth	r2, r3
 8002966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002968:	801a      	strh	r2, [r3, #0]
 800296a:	e019      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x784>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d115      	bne.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297c:	b29b      	uxth	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002982:	4413      	add	r3, r2
 8002984:	657b      	str	r3, [r7, #84]	; 0x54
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	011a      	lsls	r2, r3, #4
 800298c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298e:	4413      	add	r3, r2
 8002990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002994:	653b      	str	r3, [r7, #80]	; 0x50
 8002996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800299a:	b29a      	uxth	r2, r3
 800299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	6959      	ldr	r1, [r3, #20]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	895a      	ldrh	r2, [r3, #10]
 80029ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f003 fd7d 	bl	80064b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d0:	82bb      	strh	r3, [r7, #20]
 80029d2:	8abb      	ldrh	r3, [r7, #20]
 80029d4:	f083 0310 	eor.w	r3, r3, #16
 80029d8:	82bb      	strh	r3, [r7, #20]
 80029da:	8abb      	ldrh	r3, [r7, #20]
 80029dc:	f083 0320 	eor.w	r3, r3, #32
 80029e0:	82bb      	strh	r3, [r7, #20]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	441a      	add	r2, r3
 80029f0:	8abb      	ldrh	r3, [r7, #20]
 80029f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3790      	adds	r7, #144	; 0x90
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	897b      	ldrh	r3, [r7, #10]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e009      	b.n	8002a5a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a46:	897a      	ldrh	r2, [r7, #10]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a5a:	893b      	ldrh	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2200      	movs	r2, #0
 8002a64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	80da      	strh	r2, [r3, #6]
 8002a6e:	e00b      	b.n	8002a88 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2201      	movs	r2, #1
 8002a74:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e26c      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8087 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00c      	beq.n	8002ada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ac0:	4b8f      	ldr	r3, [pc, #572]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d112      	bne.n	8002af2 <HAL_RCC_OscConfig+0x5e>
 8002acc:	4b8c      	ldr	r3, [pc, #560]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad8:	d10b      	bne.n	8002af2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ada:	4b89      	ldr	r3, [pc, #548]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d06c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x12c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d168      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e246      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x76>
 8002afc:	4b80      	ldr	r3, [pc, #512]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a7f      	ldr	r2, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e02e      	b.n	8002b68 <HAL_RCC_OscConfig+0xd4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x98>
 8002b12:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7a      	ldr	r2, [pc, #488]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b78      	ldr	r3, [pc, #480]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a77      	ldr	r2, [pc, #476]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xd4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0xbc>
 8002b36:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a71      	ldr	r2, [pc, #452]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6e      	ldr	r2, [pc, #440]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xd4>
 8002b50:	4b6b      	ldr	r3, [pc, #428]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6a      	ldr	r2, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a67      	ldr	r2, [pc, #412]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fd ff46 	bl	8000a00 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fd ff42 	bl	8000a00 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1fa      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xe4>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fd ff32 	bl	8000a00 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fd ff2e 	bl	8000a00 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1e6      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x10c>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d063      	beq.n	8002c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bce:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bda:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d11c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x18c>
 8002be6:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d116      	bne.n	8002c20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x176>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1ba      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4939      	ldr	r1, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	e03a      	b.n	8002c96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCC_OscConfig+0x270>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fd fee7 	bl	8000a00 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c36:	f7fd fee3 	bl	8000a00 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e19b      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4927      	ldr	r1, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6a:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fd fec6 	bl	8000a00 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fd fec2 	bl	8000a00 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e17a      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d03a      	beq.n	8002d18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d019      	beq.n	8002cde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_RCC_OscConfig+0x274>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7fd fea6 	bl	8000a00 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fd fea2 	bl	8000a00 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e15a      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f000 fae8 	bl	80032ac <RCC_Delay>
 8002cdc:	e01c      	b.n	8002d18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7fd fe8c 	bl	8000a00 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cea:	e00f      	b.n	8002d0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fd fe88 	bl	8000a00 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d908      	bls.n	8002d0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e140      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	42420000 	.word	0x42420000
 8002d08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4b9e      	ldr	r3, [pc, #632]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e9      	bne.n	8002cec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a6 	beq.w	8002e72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b97      	ldr	r3, [pc, #604]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b94      	ldr	r3, [pc, #592]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4a93      	ldr	r2, [pc, #588]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	61d3      	str	r3, [r2, #28]
 8002d42:	4b91      	ldr	r3, [pc, #580]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d52:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5e:	4b8b      	ldr	r3, [pc, #556]	; (8002f8c <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a8a      	ldr	r2, [pc, #552]	; (8002f8c <HAL_RCC_OscConfig+0x4f8>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6a:	f7fd fe49 	bl	8000a00 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7fd fe45 	bl	8000a00 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	; 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0fd      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	4b81      	ldr	r3, [pc, #516]	; (8002f8c <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x312>
 8002d98:	4b7b      	ldr	r3, [pc, #492]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a7a      	ldr	r2, [pc, #488]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	e02d      	b.n	8002e02 <HAL_RCC_OscConfig+0x36e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x334>
 8002dae:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a75      	ldr	r2, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a72      	ldr	r2, [pc, #456]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6213      	str	r3, [r2, #32]
 8002dc6:	e01c      	b.n	8002e02 <HAL_RCC_OscConfig+0x36e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d10c      	bne.n	8002dea <HAL_RCC_OscConfig+0x356>
 8002dd0:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4a6c      	ldr	r2, [pc, #432]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	6213      	str	r3, [r2, #32]
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4a69      	ldr	r2, [pc, #420]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6213      	str	r3, [r2, #32]
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0x36e>
 8002dea:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a66      	ldr	r2, [pc, #408]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d015      	beq.n	8002e36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fd fdf9 	bl	8000a00 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fd fdf5 	bl	8000a00 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0ab      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	4b57      	ldr	r3, [pc, #348]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ee      	beq.n	8002e12 <HAL_RCC_OscConfig+0x37e>
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fd fde3 	bl	8000a00 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fd fddf 	bl	8000a00 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e095      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4a47      	ldr	r2, [pc, #284]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8081 	beq.w	8002f7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7c:	4b42      	ldr	r3, [pc, #264]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d061      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d146      	bne.n	8002f1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCC_OscConfig+0x4fc>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fd fdb3 	bl	8000a00 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fd fdaf 	bl	8000a00 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e067      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb0:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec4:	d108      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ec6:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	492d      	ldr	r1, [pc, #180]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a19      	ldr	r1, [r3, #32]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	4927      	ldr	r1, [pc, #156]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_RCC_OscConfig+0x4fc>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fd fd83 	bl	8000a00 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fd fd7f 	bl	8000a00 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e037      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x46a>
 8002f1c:	e02f      	b.n	8002f7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_RCC_OscConfig+0x4fc>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fd fd6c 	bl	8000a00 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fd fd68 	bl	8000a00 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e020      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x498>
 8002f4a:	e018      	b.n	8002f7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e013      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	42420060 	.word	0x42420060

08002f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0d0      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d910      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 0207 	bic.w	r2, r3, #7
 8002fbe:	4965      	ldr	r1, [pc, #404]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ffa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003012:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	494d      	ldr	r1, [pc, #308]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d040      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d115      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07f      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b41      	ldr	r3, [pc, #260]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e073      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06b      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003072:	4b39      	ldr	r3, [pc, #228]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f023 0203 	bic.w	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4936      	ldr	r1, [pc, #216]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003084:	f7fd fcbc 	bl	8000a00 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7fd fcb8 	bl	8000a00 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e053      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 020c 	and.w	r2, r3, #12
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d1eb      	bne.n	800308c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d210      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4922      	ldr	r1, [pc, #136]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e032      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4916      	ldr	r1, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	490e      	ldr	r1, [pc, #56]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003122:	f000 f821 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003126:	4602      	mov	r2, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	490a      	ldr	r1, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_RCC_ClockConfig+0x1cc>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1d0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fb46 	bl	80007d4 <HAL_InitTick>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40022000 	.word	0x40022000
 8003158:	40021000 	.word	0x40021000
 800315c:	0800b60c 	.word	0x0800b60c
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x30>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x36>
 8003196:	e027      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 800319a:	613b      	str	r3, [r7, #16]
      break;
 800319c:	e027      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_GetSysClockFreq+0x94>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	0c5b      	lsrs	r3, r3, #17
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ca:	fb02 f203 	mul.w	r2, r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e004      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <HAL_RCC_GetSysClockFreq+0xa4>)
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	613b      	str	r3, [r7, #16]
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ea:	613b      	str	r3, [r7, #16]
      break;
 80031ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ee:	693b      	ldr	r3, [r7, #16]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	007a1200 	.word	0x007a1200
 8003204:	0800b624 	.word	0x0800b624
 8003208:	0800b634 	.word	0x0800b634
 800320c:	003d0900 	.word	0x003d0900

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b02      	ldr	r3, [pc, #8]	; (8003220 <HAL_RCC_GetHCLKFreq+0x10>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	20000000 	.word	0x20000000

08003224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003228:	f7ff fff2 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4903      	ldr	r1, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	0800b61c 	.word	0x0800b61c

0800324c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	220f      	movs	r2, #15
 800325a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_RCC_GetClockConfig+0x58>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_RCC_GetClockConfig+0x58>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_GetClockConfig+0x58>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_RCC_GetClockConfig+0x58>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40022000 	.word	0x40022000

080032ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <RCC_Delay+0x34>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <RCC_Delay+0x38>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0a5b      	lsrs	r3, r3, #9
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032c8:	bf00      	nop
  }
  while (Delay --);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	60fa      	str	r2, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <RCC_Delay+0x1c>
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	20000000 	.word	0x20000000
 80032e4:	10624dd3 	.word	0x10624dd3

080032e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d07d      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003308:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10d      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	4a4b      	ldr	r2, [pc, #300]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	61d3      	str	r3, [r2, #28]
 8003320:	4b49      	ldr	r3, [pc, #292]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332c:	2301      	movs	r3, #1
 800332e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b46      	ldr	r3, [pc, #280]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d118      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333c:	4b43      	ldr	r3, [pc, #268]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a42      	ldr	r2, [pc, #264]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003348:	f7fd fb5a 	bl	8000a00 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	e008      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003350:	f7fd fb56 	bl	8000a00 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e06d      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003376:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02e      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d027      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800338c:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003394:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800339c:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d014      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fd fb25 	bl	8000a00 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fd fb21 	bl	8000a00 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e036      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ee      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4917      	ldr	r1, [pc, #92]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	490b      	ldr	r1, [pc, #44]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
 8003450:	42420440 	.word	0x42420440

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e041      	b.n	80034ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd f942 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 fc56 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	f241 1311 	movw	r3, #4369	; 0x1111
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_TIM_Base_Stop+0x38>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	f240 4344 	movw	r3, #1092	; 0x444
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d107      	bne.n	800352a <HAL_TIM_Base_Stop+0x38>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
	...

08003540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e03a      	b.n	80035ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_TIM_Base_Start_IT+0x98>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x58>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d009      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x58>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <HAL_TIM_Base_Start_IT+0x9c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x58>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d010      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ba:	e007      	b.n	80035cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800

080035e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e041      	b.n	800367a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f839 	bl	8003682 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 fb8e 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_TIM_PWM_Start+0x24>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e022      	b.n	80036fe <HAL_TIM_PWM_Start+0x6a>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d109      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x3e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e015      	b.n	80036fe <HAL_TIM_PWM_Start+0x6a>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d109      	bne.n	80036ec <HAL_TIM_PWM_Start+0x58>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e008      	b.n	80036fe <HAL_TIM_PWM_Start+0x6a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e05e      	b.n	80037c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0x82>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003714:	e013      	b.n	800373e <HAL_TIM_PWM_Start+0xaa>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Start+0x92>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003724:	e00b      	b.n	800373e <HAL_TIM_PWM_Start+0xaa>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Start+0xa2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003734:	e003      	b.n	800373e <HAL_TIM_PWM_Start+0xaa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2201      	movs	r2, #1
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fd7c 	bl	8004244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_TIM_PWM_Start+0x138>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d107      	bne.n	8003766 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a18      	ldr	r2, [pc, #96]	; (80037cc <HAL_TIM_PWM_Start+0x138>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_TIM_PWM_Start+0xfa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d009      	beq.n	800378e <HAL_TIM_PWM_Start+0xfa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <HAL_TIM_PWM_Start+0x13c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_TIM_PWM_Start+0xfa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_TIM_PWM_Start+0x140>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d111      	bne.n	80037b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b06      	cmp	r3, #6
 800379e:	d010      	beq.n	80037c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b0:	e007      	b.n	80037c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800

080037d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0202 	mvn.w	r2, #2
 8003804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa76 	bl	8003d0c <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa69 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa78 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0204 	mvn.w	r2, #4
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa4c 	bl	8003d0c <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa3f 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fa4e 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0208 	mvn.w	r2, #8
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa22 	bl	8003d0c <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa15 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa24 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0210 	mvn.w	r2, #16
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2208      	movs	r2, #8
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9f8 	bl	8003d0c <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9eb 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f9fa 	bl	8003d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0201 	mvn.w	r2, #1
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fc fe64 	bl	8000624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fce9 	bl	800435a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f9be 	bl	8003d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d10e      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d107      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0220 	mvn.w	r2, #32
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fcb4 	bl	8004348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0ae      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	f200 809f 	bhi.w	8003b54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003b55 	.word	0x08003b55
 8003a24:	08003b55 	.word	0x08003b55
 8003a28:	08003b55 	.word	0x08003b55
 8003a2c:	08003a91 	.word	0x08003a91
 8003a30:	08003b55 	.word	0x08003b55
 8003a34:	08003b55 	.word	0x08003b55
 8003a38:	08003b55 	.word	0x08003b55
 8003a3c:	08003ad3 	.word	0x08003ad3
 8003a40:	08003b55 	.word	0x08003b55
 8003a44:	08003b55 	.word	0x08003b55
 8003a48:	08003b55 	.word	0x08003b55
 8003a4c:	08003b13 	.word	0x08003b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f9d6 	bl	8003e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0208 	orr.w	r2, r2, #8
 8003a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6999      	ldr	r1, [r3, #24]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	619a      	str	r2, [r3, #24]
      break;
 8003a8e:	e064      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa1c 	bl	8003ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6999      	ldr	r1, [r3, #24]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	619a      	str	r2, [r3, #24]
      break;
 8003ad0:	e043      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fa65 	bl	8003fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0208 	orr.w	r2, r2, #8
 8003aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69da      	ldr	r2, [r3, #28]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0204 	bic.w	r2, r2, #4
 8003afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69d9      	ldr	r1, [r3, #28]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	61da      	str	r2, [r3, #28]
      break;
 8003b10:	e023      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 faaf 	bl	800407c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	021a      	lsls	r2, r3, #8
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	61da      	str	r2, [r3, #28]
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	75fb      	strb	r3, [r7, #23]
      break;
 8003b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIM_ConfigClockSource+0x1c>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e0b4      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x186>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc0:	d03e      	beq.n	8003c40 <HAL_TIM_ConfigClockSource+0xd4>
 8003bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc6:	f200 8087 	bhi.w	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	f000 8086 	beq.w	8003cde <HAL_TIM_ConfigClockSource+0x172>
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd6:	d87f      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b70      	cmp	r3, #112	; 0x70
 8003bda:	d01a      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0xa6>
 8003bdc:	2b70      	cmp	r3, #112	; 0x70
 8003bde:	d87b      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b60      	cmp	r3, #96	; 0x60
 8003be2:	d050      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0x11a>
 8003be4:	2b60      	cmp	r3, #96	; 0x60
 8003be6:	d877      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b50      	cmp	r3, #80	; 0x50
 8003bea:	d03c      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0xfa>
 8003bec:	2b50      	cmp	r3, #80	; 0x50
 8003bee:	d873      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d058      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x13a>
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d86f      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d064      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	2b30      	cmp	r3, #48	; 0x30
 8003bfe:	d86b      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d060      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d867      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d05c      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d05a      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c10:	e062      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f000 faf0 	bl	8004206 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	609a      	str	r2, [r3, #8]
      break;
 8003c3e:	e04f      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6899      	ldr	r1, [r3, #8]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f000 fad9 	bl	8004206 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c62:	609a      	str	r2, [r3, #8]
      break;
 8003c64:	e03c      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f000 fa50 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2150      	movs	r1, #80	; 0x50
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 faa7 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003c84:	e02c      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f000 fa6e 	bl	8004174 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2160      	movs	r1, #96	; 0x60
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fa97 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003ca4:	e01c      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f000 fa30 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2140      	movs	r1, #64	; 0x40
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fa87 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003cc4:	e00c      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f000 fa7e 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003cd6:	e003      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e000      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr
	...

08003d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <TIM_Base_SetConfig+0xb8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x30>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x30>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <TIM_Base_SetConfig+0xbc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x30>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <TIM_Base_SetConfig+0xc0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <TIM_Base_SetConfig+0xb8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_Base_SetConfig+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <TIM_Base_SetConfig+0xbc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0x62>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <TIM_Base_SetConfig+0xc0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <TIM_Base_SetConfig+0xb8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800

08003e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f023 0201 	bic.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 0302 	bic.w	r3, r3, #2
 8003e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <TIM_OC1_SetConfig+0xc8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10c      	bne.n	8003e7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0308 	bic.w	r3, r3, #8
 8003e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <TIM_OC1_SetConfig+0xc8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d111      	bne.n	8003eaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00

08003ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f023 0210 	bic.w	r2, r3, #16
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0320 	bic.w	r3, r3, #32
 8003f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <TIM_OC2_SetConfig+0xd0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d10d      	bne.n	8003f50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <TIM_OC2_SetConfig+0xd0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d113      	bne.n	8003f80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40012c00 	.word	0x40012c00

08003fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <TIM_OC3_SetConfig+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10d      	bne.n	8004022 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800400c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <TIM_OC3_SetConfig+0xd0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d113      	bne.n	8004052 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00

0800407c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	031b      	lsls	r3, r3, #12
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <TIM_OC4_SetConfig+0x98>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d109      	bne.n	80040f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	019b      	lsls	r3, r3, #6
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00

08004118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 030a 	bic.w	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f023 0210 	bic.w	r2, r3, #16
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	031b      	lsls	r3, r3, #12
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004206:	b480      	push	{r7}
 8004208:	b087      	sub	sp, #28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004220:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	021a      	lsls	r2, r3, #8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	431a      	orrs	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4313      	orrs	r3, r2
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	609a      	str	r2, [r3, #8]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e046      	b.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f0:	d009      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a10      	ldr	r2, [pc, #64]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10c      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4313      	orrs	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800

08004348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800436c:	b084      	sub	sp, #16
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	f107 0014 	add.w	r0, r7, #20
 800437a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	b004      	add	sp, #16
 800438a:	4770      	bx	lr

0800438c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800439c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	4013      	ands	r3, r2
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004404:	b084      	sub	sp, #16
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	f107 0014 	add.w	r0, r7, #20
 8004412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	b004      	add	sp, #16
 8004442:	4770      	bx	lr

08004444 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004444:	b480      	push	{r7}
 8004446:	b09d      	sub	sp, #116	; 0x74
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	78db      	ldrb	r3, [r3, #3]
 8004472:	2b03      	cmp	r3, #3
 8004474:	d81f      	bhi.n	80044b6 <USB_ActivateEndpoint+0x72>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <USB_ActivateEndpoint+0x38>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	0800448d 	.word	0x0800448d
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044bf 	.word	0x080044bf
 8004488:	0800449b 	.word	0x0800449b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800448c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004494:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004498:	e012      	b.n	80044c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800449a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800449e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80044a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044a6:	e00b      	b.n	80044c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044b4:	e004      	b.n	80044c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80044bc:	e000      	b.n	80044c0 <USB_ActivateEndpoint+0x7c>
      break;
 80044be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044de:	b29b      	uxth	r3, r3
 80044e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4313      	orrs	r3, r2
 8004502:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	441a      	add	r2, r3
 8004510:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	7b1b      	ldrb	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 8178 	bne.w	8004822 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8084 	beq.w	8004644 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	4413      	add	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	011a      	lsls	r2, r3, #4
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	88db      	ldrh	r3, [r3, #6]
 8004564:	085b      	lsrs	r3, r3, #1
 8004566:	b29b      	uxth	r3, r3
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	827b      	strh	r3, [r7, #18]
 800457e:	8a7b      	ldrh	r3, [r7, #18]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <USB_ActivateEndpoint+0x17c>
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	823b      	strh	r3, [r7, #16]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	8a3b      	ldrh	r3, [r7, #16]
 80045ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045bc:	b29b      	uxth	r3, r3
 80045be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	78db      	ldrb	r3, [r3, #3]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d020      	beq.n	800460a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045de:	81bb      	strh	r3, [r7, #12]
 80045e0:	89bb      	ldrh	r3, [r7, #12]
 80045e2:	f083 0320 	eor.w	r3, r3, #32
 80045e6:	81bb      	strh	r3, [r7, #12]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	89bb      	ldrh	r3, [r7, #12]
 80045f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004604:	b29b      	uxth	r3, r3
 8004606:	8013      	strh	r3, [r2, #0]
 8004608:	e2d5      	b.n	8004bb6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004620:	81fb      	strh	r3, [r7, #14]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	441a      	add	r2, r3
 800462c:	89fb      	ldrh	r3, [r7, #14]
 800462e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]
 8004642:	e2b8      	b.n	8004bb6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	633b      	str	r3, [r7, #48]	; 0x30
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800464e:	b29b      	uxth	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	4413      	add	r3, r2
 8004656:	633b      	str	r3, [r7, #48]	; 0x30
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	011a      	lsls	r2, r3, #4
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	4413      	add	r3, r2
 8004662:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	88db      	ldrh	r3, [r3, #6]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	b29b      	uxth	r3, r3
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004676:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004682:	b29b      	uxth	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	4413      	add	r3, r2
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	011a      	lsls	r2, r3, #4
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	4413      	add	r3, r2
 8004696:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b3e      	cmp	r3, #62	; 0x3e
 80046b2:	d91d      	bls.n	80046f0 <USB_ActivateEndpoint+0x2ac>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <USB_ActivateEndpoint+0x28a>
 80046c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ca:	3b01      	subs	r3, #1
 80046cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	029b      	lsls	r3, r3, #10
 80046da:	b29b      	uxth	r3, r3
 80046dc:	4313      	orrs	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e026      	b.n	800473e <USB_ActivateEndpoint+0x2fa>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <USB_ActivateEndpoint+0x2ca>
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004706:	b29a      	uxth	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e017      	b.n	800473e <USB_ActivateEndpoint+0x2fa>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	66bb      	str	r3, [r7, #104]	; 0x68
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <USB_ActivateEndpoint+0x2e4>
 8004722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004724:	3301      	adds	r3, #1
 8004726:	66bb      	str	r3, [r7, #104]	; 0x68
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29a      	uxth	r2, r3
 800472e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004730:	b29b      	uxth	r3, r3
 8004732:	029b      	lsls	r3, r3, #10
 8004734:	b29b      	uxth	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b29a      	uxth	r2, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	847b      	strh	r3, [r7, #34]	; 0x22
 800474c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800474e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01b      	beq.n	800478e <USB_ActivateEndpoint+0x34a>
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	843b      	strh	r3, [r7, #32]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	8c3b      	ldrh	r3, [r7, #32]
 800477a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478a:	b29b      	uxth	r3, r3
 800478c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d124      	bne.n	80047e0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ac:	83bb      	strh	r3, [r7, #28]
 80047ae:	8bbb      	ldrh	r3, [r7, #28]
 80047b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047b4:	83bb      	strh	r3, [r7, #28]
 80047b6:	8bbb      	ldrh	r3, [r7, #28]
 80047b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047bc:	83bb      	strh	r3, [r7, #28]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	8bbb      	ldrh	r3, [r7, #28]
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
 80047de:	e1ea      	b.n	8004bb6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	83fb      	strh	r3, [r7, #30]
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047fe:	83fb      	strh	r3, [r7, #30]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	8bfb      	ldrh	r3, [r7, #30]
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]
 8004820:	e1c9      	b.n	8004bb6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	78db      	ldrb	r3, [r3, #3]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d11e      	bne.n	8004868 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004840:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	441a      	add	r2, r3
 800484e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800485e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004862:	b29b      	uxth	r3, r3
 8004864:	8013      	strh	r3, [r2, #0]
 8004866:	e01d      	b.n	80048a4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b4:	4413      	add	r3, r2
 80048b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	011a      	lsls	r2, r3, #4
 80048be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	891b      	ldrh	r3, [r3, #8]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e8:	4413      	add	r3, r2
 80048ea:	657b      	str	r3, [r7, #84]	; 0x54
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	011a      	lsls	r2, r3, #4
 80048f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048fa:	653b      	str	r3, [r7, #80]	; 0x50
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	895b      	ldrh	r3, [r3, #10]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	2b00      	cmp	r3, #0
 8004912:	f040 8093 	bne.w	8004a3c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004926:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800492a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01b      	beq.n	800496a <USB_ActivateEndpoint+0x526>
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004948:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004978:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01b      	beq.n	80049ba <USB_ActivateEndpoint+0x576>
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	877b      	strh	r3, [r7, #58]	; 0x3a
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80049d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80049da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]
 8004a3a:	e0bc      	b.n	8004bb6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01d      	beq.n	8004a94 <USB_ActivateEndpoint+0x650>
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004aa4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01d      	beq.n	8004aec <USB_ActivateEndpoint+0x6a8>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	441a      	add	r2, r3
 8004ad4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	78db      	ldrb	r3, [r3, #3]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d024      	beq.n	8004b3e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b12:	f083 0320 	eor.w	r3, r3, #32
 8004b16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]
 8004b3c:	e01d      	b.n	8004b7a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	441a      	add	r2, r3
 8004b9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004bb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3774      	adds	r7, #116	; 0x74
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b08d      	sub	sp, #52	; 0x34
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	7b1b      	ldrb	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 808e 	bne.w	8004cf4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d044      	beq.n	8004c6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	81bb      	strh	r3, [r7, #12]
 8004bee:	89bb      	ldrh	r3, [r7, #12]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <USB_DeactivateEndpoint+0x6c>
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	817b      	strh	r3, [r7, #10]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	813b      	strh	r3, [r7, #8]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	893b      	ldrh	r3, [r7, #8]
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
 8004c68:	e192      	b.n	8004f90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	827b      	strh	r3, [r7, #18]
 8004c78:	8a7b      	ldrh	r3, [r7, #18]
 8004c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01b      	beq.n	8004cba <USB_DeactivateEndpoint+0xf6>
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c98:	823b      	strh	r3, [r7, #16]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	8a3b      	ldrh	r3, [r7, #16]
 8004ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd0:	81fb      	strh	r3, [r7, #14]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	89fb      	ldrh	r3, [r7, #14]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
 8004cf2:	e14d      	b.n	8004f90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 80a5 	bne.w	8004e48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	843b      	strh	r3, [r7, #32]
 8004d0c:	8c3b      	ldrh	r3, [r7, #32]
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <USB_DeactivateEndpoint+0x18a>
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2c:	83fb      	strh	r3, [r7, #30]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	8bfb      	ldrh	r3, [r7, #30]
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	83bb      	strh	r3, [r7, #28]
 8004d5c:	8bbb      	ldrh	r3, [r7, #28]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01b      	beq.n	8004d9e <USB_DeactivateEndpoint+0x1da>
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	837b      	strh	r3, [r7, #26]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	8b7b      	ldrh	r3, [r7, #26]
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db4:	833b      	strh	r3, [r7, #24]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	8b3b      	ldrh	r3, [r7, #24]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	82fb      	strh	r3, [r7, #22]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	8afb      	ldrh	r3, [r7, #22]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e24:	82bb      	strh	r3, [r7, #20]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8abb      	ldrh	r3, [r7, #20]
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
 8004e46:	e0a3      	b.n	8004f90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <USB_DeactivateEndpoint+0x2d4>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ea6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01b      	beq.n	8004ee8 <USB_DeactivateEndpoint+0x324>
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3734      	adds	r7, #52	; 0x34
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b0c2      	sub	sp, #264	; 0x108
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	6018      	str	r0, [r3, #0]
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 8545 	bne.w	8005a40 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d905      	bls.n	8004fd2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fd0:	e004      	b.n	8004fdc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	7b1b      	ldrb	r3, [r3, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d128      	bne.n	8005038 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6959      	ldr	r1, [r3, #20]
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	88da      	ldrh	r2, [r3, #6]
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	1d38      	adds	r0, r7, #4
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	f001 fa58 	bl	80064b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500e:	b29b      	uxth	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	463b      	mov	r3, r7
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	011a      	lsls	r2, r3, #4
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4413      	add	r3, r2
 8005024:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	f000 bcdb 	b.w	80059ee <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005038:	463b      	mov	r3, r7
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	2b02      	cmp	r3, #2
 8005040:	f040 836f 	bne.w	8005722 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005044:	463b      	mov	r3, r7
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	463b      	mov	r3, r7
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	f240 8313 	bls.w	800567c <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005056:	1d3b      	adds	r3, r7, #4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	463b      	mov	r3, r7
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 816d 	beq.w	80053a2 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050c8:	1d3b      	adds	r3, r7, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	633b      	str	r3, [r7, #48]	; 0x30
 80050ce:	463b      	mov	r3, r7
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d16e      	bne.n	80051b6 <USB_EPStartXfer+0x21a>
 80050d8:	1d3b      	adds	r3, r7, #4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	4413      	add	r3, r2
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	011a      	lsls	r2, r3, #4
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	4413      	add	r3, r2
 80050fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510c:	b29a      	uxth	r2, r3
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005116:	2b3e      	cmp	r3, #62	; 0x3e
 8005118:	d921      	bls.n	800515e <USB_EPStartXfer+0x1c2>
 800511a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <USB_EPStartXfer+0x19e>
 8005130:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005134:	3b01      	subs	r3, #1
 8005136:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29a      	uxth	r2, r3
 8005140:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005144:	b29b      	uxth	r3, r3
 8005146:	029b      	lsls	r3, r3, #10
 8005148:	b29b      	uxth	r3, r3
 800514a:	4313      	orrs	r3, r2
 800514c:	b29b      	uxth	r3, r3
 800514e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005156:	b29a      	uxth	r2, r3
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	e047      	b.n	80051ee <USB_EPStartXfer+0x252>
 800515e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <USB_EPStartXfer+0x1e0>
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005174:	b29a      	uxth	r2, r3
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	e038      	b.n	80051ee <USB_EPStartXfer+0x252>
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <USB_EPStartXfer+0x200>
 8005192:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005196:	3301      	adds	r3, #1
 8005198:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	029b      	lsls	r3, r3, #10
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	4313      	orrs	r3, r2
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e01b      	b.n	80051ee <USB_EPStartXfer+0x252>
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d116      	bne.n	80051ee <USB_EPStartXfer+0x252>
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	4413      	add	r3, r2
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30
 80051d2:	463b      	mov	r3, r7
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	011a      	lsls	r2, r3, #4
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	4413      	add	r3, r2
 80051de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	895b      	ldrh	r3, [r3, #10]
 80051f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6959      	ldr	r1, [r3, #20]
 80051fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005202:	b29b      	uxth	r3, r3
 8005204:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005208:	1d38      	adds	r0, r7, #4
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	f001 f950 	bl	80064b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005210:	463b      	mov	r3, r7
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521a:	441a      	add	r2, r3
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	463b      	mov	r3, r7
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d909      	bls.n	8005246 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8005232:	463b      	mov	r3, r7
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523c:	1ad2      	subs	r2, r2, r3
 800523e:	463b      	mov	r3, r7
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	621a      	str	r2, [r3, #32]
 8005244:	e008      	b.n	8005258 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005250:	463b      	mov	r3, r7
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2200      	movs	r2, #0
 8005256:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d16e      	bne.n	8005340 <USB_EPStartXfer+0x3a4>
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	4413      	add	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	463b      	mov	r3, r7
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	011a      	lsls	r2, r3, #4
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	4413      	add	r3, r2
 8005286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005296:	b29a      	uxth	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a0:	2b3e      	cmp	r3, #62	; 0x3e
 80052a2:	d921      	bls.n	80052e8 <USB_EPStartXfer+0x34c>
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <USB_EPStartXfer+0x328>
 80052ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052be:	3b01      	subs	r3, #1
 80052c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	029b      	lsls	r3, r3, #10
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e04a      	b.n	800537e <USB_EPStartXfer+0x3e2>
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <USB_EPStartXfer+0x36a>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e03b      	b.n	800537e <USB_EPStartXfer+0x3e2>
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <USB_EPStartXfer+0x38a>
 800531c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005320:	3301      	adds	r3, #1
 8005322:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005330:	b29b      	uxth	r3, r3
 8005332:	029b      	lsls	r3, r3, #10
 8005334:	b29b      	uxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e01e      	b.n	800537e <USB_EPStartXfer+0x3e2>
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d119      	bne.n	800537e <USB_EPStartXfer+0x3e2>
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	623b      	str	r3, [r7, #32]
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	4413      	add	r3, r2
 8005360:	623b      	str	r3, [r7, #32]
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	011a      	lsls	r2, r3, #4
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	4413      	add	r3, r2
 800536e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005378:	b29a      	uxth	r2, r3
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800537e:	463b      	mov	r3, r7
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	891b      	ldrh	r3, [r3, #8]
 8005384:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6959      	ldr	r1, [r3, #20]
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005392:	b29b      	uxth	r3, r3
 8005394:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005398:	1d38      	adds	r0, r7, #4
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	f001 f888 	bl	80064b0 <USB_WritePMA>
 80053a0:	e325      	b.n	80059ee <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053a2:	463b      	mov	r3, r7
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d16e      	bne.n	800548a <USB_EPStartXfer+0x4ee>
 80053ac:	1d3b      	adds	r3, r7, #4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	4413      	add	r3, r2
 80053c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c4:	463b      	mov	r3, r7
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	011a      	lsls	r2, r3, #4
 80053cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ce:	4413      	add	r3, r2
 80053d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
 80053d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ea:	2b3e      	cmp	r3, #62	; 0x3e
 80053ec:	d921      	bls.n	8005432 <USB_EPStartXfer+0x496>
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <USB_EPStartXfer+0x472>
 8005404:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005408:	3b01      	subs	r3, #1
 800540a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800540e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29a      	uxth	r2, r3
 8005414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005418:	b29b      	uxth	r3, r3
 800541a:	029b      	lsls	r3, r3, #10
 800541c:	b29b      	uxth	r3, r3
 800541e:	4313      	orrs	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542a:	b29a      	uxth	r2, r3
 800542c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	e04a      	b.n	80054c8 <USB_EPStartXfer+0x52c>
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <USB_EPStartXfer+0x4b4>
 800543a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005448:	b29a      	uxth	r2, r3
 800544a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e03b      	b.n	80054c8 <USB_EPStartXfer+0x52c>
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <USB_EPStartXfer+0x4d4>
 8005466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800546a:	3301      	adds	r3, #1
 800546c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29a      	uxth	r2, r3
 8005476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800547a:	b29b      	uxth	r3, r3
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	b29b      	uxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	b29a      	uxth	r2, r3
 8005484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	e01e      	b.n	80054c8 <USB_EPStartXfer+0x52c>
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d119      	bne.n	80054c8 <USB_EPStartXfer+0x52c>
 8005494:	1d3b      	adds	r3, r7, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	653b      	str	r3, [r7, #80]	; 0x50
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a8:	4413      	add	r3, r2
 80054aa:	653b      	str	r3, [r7, #80]	; 0x50
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	011a      	lsls	r2, r3, #4
 80054b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b6:	4413      	add	r3, r2
 80054b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	891b      	ldrh	r3, [r3, #8]
 80054ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054d2:	463b      	mov	r3, r7
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6959      	ldr	r1, [r3, #20]
 80054d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054e2:	1d38      	adds	r0, r7, #4
 80054e4:	6800      	ldr	r0, [r0, #0]
 80054e6:	f000 ffe3 	bl	80064b0 <USB_WritePMA>
            ep->xfer_buff += len;
 80054ea:	463b      	mov	r3, r7
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f4:	441a      	add	r2, r3
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054fc:	463b      	mov	r3, r7
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	463b      	mov	r3, r7
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	429a      	cmp	r2, r3
 800550a:	d909      	bls.n	8005520 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	463b      	mov	r3, r7
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	621a      	str	r2, [r3, #32]
 800551e:	e008      	b.n	8005532 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8005520:	463b      	mov	r3, r7
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800552a:	463b      	mov	r3, r7
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	643b      	str	r3, [r7, #64]	; 0x40
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d16e      	bne.n	8005620 <USB_EPStartXfer+0x684>
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	63bb      	str	r3, [r7, #56]	; 0x38
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	4413      	add	r3, r2
 8005558:	63bb      	str	r3, [r7, #56]	; 0x38
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	4413      	add	r3, r2
 8005566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005576:	b29a      	uxth	r2, r3
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005580:	2b3e      	cmp	r3, #62	; 0x3e
 8005582:	d921      	bls.n	80055c8 <USB_EPStartXfer+0x62c>
 8005584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <USB_EPStartXfer+0x608>
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	3b01      	subs	r3, #1
 80055a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	e047      	b.n	8005658 <USB_EPStartXfer+0x6bc>
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <USB_EPStartXfer+0x64a>
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e038      	b.n	8005658 <USB_EPStartXfer+0x6bc>
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <USB_EPStartXfer+0x66a>
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	3301      	adds	r3, #1
 8005602:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29a      	uxth	r2, r3
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	b29b      	uxth	r3, r3
 8005612:	029b      	lsls	r3, r3, #10
 8005614:	b29b      	uxth	r3, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	b29a      	uxth	r2, r3
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e01b      	b.n	8005658 <USB_EPStartXfer+0x6bc>
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d116      	bne.n	8005658 <USB_EPStartXfer+0x6bc>
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005632:	b29b      	uxth	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005638:	4413      	add	r3, r2
 800563a:	643b      	str	r3, [r7, #64]	; 0x40
 800563c:	463b      	mov	r3, r7
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	011a      	lsls	r2, r3, #4
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	4413      	add	r3, r2
 8005648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005652:	b29a      	uxth	r2, r3
 8005654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005656:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	895b      	ldrh	r3, [r3, #10]
 800565e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6959      	ldr	r1, [r3, #20]
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566c:	b29b      	uxth	r3, r3
 800566e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005672:	1d38      	adds	r0, r7, #4
 8005674:	6800      	ldr	r0, [r0, #0]
 8005676:	f000 ff1b 	bl	80064b0 <USB_WritePMA>
 800567a:	e1b8      	b.n	80059ee <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800567c:	463b      	mov	r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80056a4:	1d3b      	adds	r3, r7, #4
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80056b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d0:	1d3b      	adds	r3, r7, #4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d8:	b29b      	uxth	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056de:	4413      	add	r3, r2
 80056e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e2:	463b      	mov	r3, r7
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	011a      	lsls	r2, r3, #4
 80056ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	891b      	ldrh	r3, [r3, #8]
 8005704:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005708:	463b      	mov	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6959      	ldr	r1, [r3, #20]
 800570e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005712:	b29b      	uxth	r3, r3
 8005714:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005718:	1d38      	adds	r0, r7, #4
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	f000 fec8 	bl	80064b0 <USB_WritePMA>
 8005720:	e165      	b.n	80059ee <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572c:	1ad2      	subs	r2, r2, r3
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005734:	1d3b      	adds	r3, r7, #4
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80a5 	beq.w	800589a <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	673b      	str	r3, [r7, #112]	; 0x70
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d16e      	bne.n	800583e <USB_EPStartXfer+0x8a2>
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	66bb      	str	r3, [r7, #104]	; 0x68
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005774:	4413      	add	r3, r2
 8005776:	66bb      	str	r3, [r7, #104]	; 0x68
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	011a      	lsls	r2, r3, #4
 8005780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005782:	4413      	add	r3, r2
 8005784:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005788:	667b      	str	r3, [r7, #100]	; 0x64
 800578a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005794:	b29a      	uxth	r2, r3
 8005796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579e:	2b3e      	cmp	r3, #62	; 0x3e
 80057a0:	d921      	bls.n	80057e6 <USB_EPStartXfer+0x84a>
 80057a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <USB_EPStartXfer+0x826>
 80057b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057bc:	3b01      	subs	r3, #1
 80057be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4313      	orrs	r3, r2
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057de:	b29a      	uxth	r2, r3
 80057e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	e047      	b.n	8005876 <USB_EPStartXfer+0x8da>
 80057e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <USB_EPStartXfer+0x868>
 80057ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e038      	b.n	8005876 <USB_EPStartXfer+0x8da>
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <USB_EPStartXfer+0x888>
 800581a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800581e:	3301      	adds	r3, #1
 8005820:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29a      	uxth	r2, r3
 800582a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800582e:	b29b      	uxth	r3, r3
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	b29b      	uxth	r3, r3
 8005834:	4313      	orrs	r3, r2
 8005836:	b29a      	uxth	r2, r3
 8005838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	e01b      	b.n	8005876 <USB_EPStartXfer+0x8da>
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d116      	bne.n	8005876 <USB_EPStartXfer+0x8da>
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005850:	b29b      	uxth	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005856:	4413      	add	r3, r2
 8005858:	673b      	str	r3, [r7, #112]	; 0x70
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005864:	4413      	add	r3, r2
 8005866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800586a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005870:	b29a      	uxth	r2, r3
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005876:	463b      	mov	r3, r7
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	895b      	ldrh	r3, [r3, #10]
 800587c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6959      	ldr	r1, [r3, #20]
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588a:	b29b      	uxth	r3, r3
 800588c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005890:	1d38      	adds	r0, r7, #4
 8005892:	6800      	ldr	r0, [r0, #0]
 8005894:	f000 fe0c 	bl	80064b0 <USB_WritePMA>
 8005898:	e0a9      	b.n	80059ee <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d16e      	bne.n	8005982 <USB_EPStartXfer+0x9e6>
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058b8:	4413      	add	r3, r2
 80058ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c6:	4413      	add	r3, r2
 80058c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d8:	b29a      	uxth	r2, r3
 80058da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e2:	2b3e      	cmp	r3, #62	; 0x3e
 80058e4:	d921      	bls.n	800592a <USB_EPStartXfer+0x98e>
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <USB_EPStartXfer+0x96a>
 80058fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005900:	3b01      	subs	r3, #1
 8005902:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005910:	b29b      	uxth	r3, r3
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	b29b      	uxth	r3, r3
 8005916:	4313      	orrs	r3, r2
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005922:	b29a      	uxth	r2, r3
 8005924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e050      	b.n	80059cc <USB_EPStartXfer+0xa30>
 800592a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <USB_EPStartXfer+0x9ac>
 8005932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e041      	b.n	80059cc <USB_EPStartXfer+0xa30>
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <USB_EPStartXfer+0x9cc>
 800595e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005962:	3301      	adds	r3, #1
 8005964:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29a      	uxth	r2, r3
 800596e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005972:	b29b      	uxth	r3, r3
 8005974:	029b      	lsls	r3, r3, #10
 8005976:	b29b      	uxth	r3, r3
 8005978:	4313      	orrs	r3, r2
 800597a:	b29a      	uxth	r2, r3
 800597c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e024      	b.n	80059cc <USB_EPStartXfer+0xa30>
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d11f      	bne.n	80059cc <USB_EPStartXfer+0xa30>
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599c:	b29b      	uxth	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a4:	4413      	add	r3, r2
 80059a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b6:	4413      	add	r3, r2
 80059b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	891b      	ldrh	r3, [r3, #8]
 80059d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6959      	ldr	r1, [r3, #20]
 80059dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059e6:	1d38      	adds	r0, r7, #4
 80059e8:	6800      	ldr	r0, [r0, #0]
 80059ea:	f000 fd61 	bl	80064b0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80059ee:	1d3b      	adds	r3, r7, #4
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	463b      	mov	r3, r7
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a08:	817b      	strh	r3, [r7, #10]
 8005a0a:	897b      	ldrh	r3, [r7, #10]
 8005a0c:	f083 0310 	eor.w	r3, r3, #16
 8005a10:	817b      	strh	r3, [r7, #10]
 8005a12:	897b      	ldrh	r3, [r7, #10]
 8005a14:	f083 0320 	eor.w	r3, r3, #32
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	897b      	ldrh	r3, [r7, #10]
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]
 8005a3e:	e3f3      	b.n	8006228 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	7b1b      	ldrb	r3, [r3, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 809c 	bne.w	8005b84 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	463b      	mov	r3, r7
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d90e      	bls.n	8005a7a <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005a66:	463b      	mov	r3, r7
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	1ad2      	subs	r2, r2, r3
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	619a      	str	r2, [r3, #24]
 8005a78:	e008      	b.n	8005a8c <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005a84:	463b      	mov	r3, r7
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a94:	1d3b      	adds	r3, r7, #4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	011a      	lsls	r2, r3, #4
 8005ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005abc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8005ada:	d923      	bls.n	8005b24 <USB_EPStartXfer+0xb88>
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <USB_EPStartXfer+0xb60>
 8005af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005af6:	3b01      	subs	r3, #1
 8005af8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	029b      	lsls	r3, r3, #10
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e353      	b.n	80061cc <USB_EPStartXfer+0x1230>
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10c      	bne.n	8005b46 <USB_EPStartXfer+0xbaa>
 8005b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e342      	b.n	80061cc <USB_EPStartXfer+0x1230>
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <USB_EPStartXfer+0xbca>
 8005b5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b60:	3301      	adds	r3, #1
 8005b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	e323      	b.n	80061cc <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b84:	463b      	mov	r3, r7
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	f040 81a9 	bne.w	8005ee2 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8082 	bne.w	8005ca0 <USB_EPStartXfer+0xd04>
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ba4:	1d3b      	adds	r3, r7, #4
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bba:	463b      	mov	r3, r7
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	011a      	lsls	r2, r3, #4
 8005bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b3e      	cmp	r3, #62	; 0x3e
 8005bec:	d925      	bls.n	8005c3a <USB_EPStartXfer+0xc9e>
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <USB_EPStartXfer+0xc76>
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	029b      	lsls	r3, r3, #10
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e058      	b.n	8005cec <USB_EPStartXfer+0xd50>
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10c      	bne.n	8005c5e <USB_EPStartXfer+0xcc2>
 8005c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e046      	b.n	8005cec <USB_EPStartXfer+0xd50>
 8005c5e:	463b      	mov	r3, r7
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <USB_EPStartXfer+0xce6>
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4313      	orrs	r3, r2
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e025      	b.n	8005cec <USB_EPStartXfer+0xd50>
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d120      	bne.n	8005cec <USB_EPStartXfer+0xd50>
 8005caa:	1d3b      	adds	r3, r7, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc8:	463b      	mov	r3, r7
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	011a      	lsls	r2, r3, #4
 8005cd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	1d3b      	adds	r3, r7, #4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 8082 	bne.w	8005e04 <USB_EPStartXfer+0xe68>
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d08:	1d3b      	adds	r3, r7, #4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d18:	4413      	add	r3, r2
 8005d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d1e:	463b      	mov	r3, r7
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	011a      	lsls	r2, r3, #4
 8005d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d46:	801a      	strh	r2, [r3, #0]
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d50:	d925      	bls.n	8005d9e <USB_EPStartXfer+0xe02>
 8005d52:	463b      	mov	r3, r7
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <USB_EPStartXfer+0xdda>
 8005d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d70:	3b01      	subs	r3, #1
 8005d72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e054      	b.n	8005e48 <USB_EPStartXfer+0xeac>
 8005d9e:	463b      	mov	r3, r7
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10c      	bne.n	8005dc2 <USB_EPStartXfer+0xe26>
 8005da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	e042      	b.n	8005e48 <USB_EPStartXfer+0xeac>
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <USB_EPStartXfer+0xe4a>
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	3301      	adds	r3, #1
 8005de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	e021      	b.n	8005e48 <USB_EPStartXfer+0xeac>
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d11c      	bne.n	8005e48 <USB_EPStartXfer+0xeac>
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e1e:	4413      	add	r3, r2
 8005e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e24:	463b      	mov	r3, r7
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	011a      	lsls	r2, r3, #4
 8005e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e30:	4413      	add	r3, r2
 8005e32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 81bc 	beq.w	80061cc <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e54:	1d3b      	adds	r3, r7, #4
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	463b      	mov	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <USB_EPStartXfer+0xee4>
 8005e74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f040 819f 	bne.w	80061cc <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 8198 	bne.w	80061cc <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]
 8005ee0:	e174      	b.n	80061cc <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f040 816d 	bne.w	80061c8 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005eee:	463b      	mov	r3, r7
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d90e      	bls.n	8005f1c <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	619a      	str	r2, [r3, #24]
 8005f1a:	e008      	b.n	8005f2e <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005f26:	463b      	mov	r3, r7
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d17b      	bne.n	8006030 <USB_EPStartXfer+0x1094>
 8005f38:	1d3b      	adds	r3, r7, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f40:	1d3b      	adds	r3, r7, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f50:	4413      	add	r3, r2
 8005f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f56:	463b      	mov	r3, r7
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	011a      	lsls	r2, r3, #4
 8005f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f62:	4413      	add	r3, r2
 8005f64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f84:	2b3e      	cmp	r3, #62	; 0x3e
 8005f86:	d923      	bls.n	8005fd0 <USB_EPStartXfer+0x1034>
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <USB_EPStartXfer+0x100c>
 8005f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	029b      	lsls	r3, r3, #10
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	e054      	b.n	800607a <USB_EPStartXfer+0x10de>
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10c      	bne.n	8005ff2 <USB_EPStartXfer+0x1056>
 8005fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	e043      	b.n	800607a <USB_EPStartXfer+0x10de>
 8005ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <USB_EPStartXfer+0x1076>
 8006008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600c:	3301      	adds	r3, #1
 800600e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29a      	uxth	r2, r3
 800601a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601e:	b29b      	uxth	r3, r3
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	b29b      	uxth	r3, r3
 8006024:	4313      	orrs	r3, r2
 8006026:	b29a      	uxth	r2, r3
 8006028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	e024      	b.n	800607a <USB_EPStartXfer+0x10de>
 8006030:	463b      	mov	r3, r7
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d11f      	bne.n	800607a <USB_EPStartXfer+0x10de>
 800603a:	1d3b      	adds	r3, r7, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006042:	1d3b      	adds	r3, r7, #4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006052:	4413      	add	r3, r2
 8006054:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006058:	463b      	mov	r3, r7
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	011a      	lsls	r2, r3, #4
 8006060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006064:	4413      	add	r3, r2
 8006066:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800606a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d17b      	bne.n	8006184 <USB_EPStartXfer+0x11e8>
 800608c:	1d3b      	adds	r3, r7, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006094:	1d3b      	adds	r3, r7, #4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609c:	b29b      	uxth	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060a4:	4413      	add	r3, r2
 80060a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	011a      	lsls	r2, r3, #4
 80060b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060b6:	4413      	add	r3, r2
 80060b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	2b3e      	cmp	r3, #62	; 0x3e
 80060da:	d923      	bls.n	8006124 <USB_EPStartXfer+0x1188>
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <USB_EPStartXfer+0x1160>
 80060f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f6:	3b01      	subs	r3, #1
 80060f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006108:	b29b      	uxth	r3, r3
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	b29b      	uxth	r3, r3
 800610e:	4313      	orrs	r3, r2
 8006110:	b29b      	uxth	r3, r3
 8006112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	e053      	b.n	80061cc <USB_EPStartXfer+0x1230>
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10c      	bne.n	8006146 <USB_EPStartXfer+0x11aa>
 800612c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e042      	b.n	80061cc <USB_EPStartXfer+0x1230>
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <USB_EPStartXfer+0x11ca>
 800615c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006160:	3301      	adds	r3, #1
 8006162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006172:	b29b      	uxth	r3, r3
 8006174:	029b      	lsls	r3, r3, #10
 8006176:	b29b      	uxth	r3, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	b29a      	uxth	r2, r3
 800617c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	e023      	b.n	80061cc <USB_EPStartXfer+0x1230>
 8006184:	463b      	mov	r3, r7
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d11e      	bne.n	80061cc <USB_EPStartXfer+0x1230>
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800619e:	4413      	add	r3, r2
 80061a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	011a      	lsls	r2, r3, #4
 80061ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061b0:	4413      	add	r3, r2
 80061b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e001      	b.n	80061cc <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e02e      	b.n	800622a <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006202:	1d3b      	adds	r3, r7, #4
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d020      	beq.n	8006288 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625c:	81bb      	strh	r3, [r7, #12]
 800625e:	89bb      	ldrh	r3, [r7, #12]
 8006260:	f083 0310 	eor.w	r3, r3, #16
 8006264:	81bb      	strh	r3, [r7, #12]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	441a      	add	r2, r3
 8006270:	89bb      	ldrh	r3, [r7, #12]
 8006272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006282:	b29b      	uxth	r3, r3
 8006284:	8013      	strh	r3, [r2, #0]
 8006286:	e01f      	b.n	80062c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	81fb      	strh	r3, [r7, #14]
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062a6:	81fb      	strh	r3, [r7, #14]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	441a      	add	r2, r3
 80062b2:	89fb      	ldrh	r3, [r7, #14]
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	7b1b      	ldrb	r3, [r3, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 809d 	bne.w	8006422 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d04c      	beq.n	800638a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	823b      	strh	r3, [r7, #16]
 80062fe:	8a3b      	ldrh	r3, [r7, #16]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01b      	beq.n	8006340 <USB_EPClearStall+0x6c>
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	81fb      	strh	r3, [r7, #14]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	89fb      	ldrh	r3, [r7, #14]
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	78db      	ldrb	r3, [r3, #3]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d06c      	beq.n	8006422 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635e:	81bb      	strh	r3, [r7, #12]
 8006360:	89bb      	ldrh	r3, [r7, #12]
 8006362:	f083 0320 	eor.w	r3, r3, #32
 8006366:	81bb      	strh	r3, [r7, #12]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	89bb      	ldrh	r3, [r7, #12]
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
 8006388:	e04b      	b.n	8006422 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	82fb      	strh	r3, [r7, #22]
 8006398:	8afb      	ldrh	r3, [r7, #22]
 800639a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01b      	beq.n	80063da <USB_EPClearStall+0x106>
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	82bb      	strh	r3, [r7, #20]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	8abb      	ldrh	r3, [r7, #20]
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f0:	827b      	strh	r3, [r7, #18]
 80063f2:	8a7b      	ldrh	r3, [r7, #18]
 80063f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063f8:	827b      	strh	r3, [r7, #18]
 80063fa:	8a7b      	ldrh	r3, [r7, #18]
 80063fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006400:	827b      	strh	r3, [r7, #18]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	8a7b      	ldrh	r3, [r7, #18]
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr

08006468 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800648a:	b29b      	uxth	r3, r3
 800648c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr

0800649a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b08b      	sub	sp, #44	; 0x2c
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4611      	mov	r1, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	460b      	mov	r3, r1
 80064c0:	80fb      	strh	r3, [r7, #6]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80064c6:	88bb      	ldrh	r3, [r7, #4]
 80064c8:	3301      	adds	r3, #1
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	005a      	lsls	r2, r3, #1
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
 80064e8:	e01e      	b.n	8006528 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	b21a      	sxth	r2, r3
 80064fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064fe:	4313      	orrs	r3, r2
 8006500:	b21b      	sxth	r3, r3
 8006502:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	8a7a      	ldrh	r2, [r7, #18]
 8006508:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	3302      	adds	r3, #2
 800650e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	3302      	adds	r3, #2
 8006514:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	3301      	adds	r3, #1
 800651a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	3b01      	subs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1dd      	bne.n	80064ea <USB_WritePMA+0x3a>
  }
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	372c      	adds	r7, #44	; 0x2c
 8006534:	46bd      	mov	sp, r7
 8006536:	bc80      	pop	{r7}
 8006538:	4770      	bx	lr

0800653a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800653a:	b480      	push	{r7}
 800653c:	b08b      	sub	sp, #44	; 0x2c
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	4611      	mov	r1, r2
 8006546:	461a      	mov	r2, r3
 8006548:	460b      	mov	r3, r1
 800654a:	80fb      	strh	r3, [r7, #6]
 800654c:	4613      	mov	r3, r2
 800654e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006550:	88bb      	ldrh	r3, [r7, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	b29b      	uxth	r3, r3
 8006556:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	005a      	lsls	r2, r3, #1
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
 8006572:	e01b      	b.n	80065ac <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	3302      	adds	r3, #2
 8006580:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	b2da      	uxtb	r2, r3
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3301      	adds	r3, #1
 800659e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	3302      	adds	r3, #2
 80065a4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	3b01      	subs	r3, #1
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e0      	bne.n	8006574 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80065b2:	88bb      	ldrh	r3, [r7, #4]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	701a      	strb	r2, [r3, #0]
  }
}
 80065ce:	bf00      	nop
 80065d0:	372c      	adds	r7, #44	; 0x2c
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr

080065d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7c1b      	ldrb	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d115      	bne.n	800661c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f4:	2202      	movs	r2, #2
 80065f6:	2181      	movs	r1, #129	; 0x81
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f004 f9ae 	bl	800a95a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006608:	2202      	movs	r2, #2
 800660a:	2101      	movs	r1, #1
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f004 f9a4 	bl	800a95a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800661a:	e012      	b.n	8006642 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	2202      	movs	r2, #2
 8006620:	2181      	movs	r1, #129	; 0x81
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f004 f999 	bl	800a95a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800662e:	2340      	movs	r3, #64	; 0x40
 8006630:	2202      	movs	r2, #2
 8006632:	2101      	movs	r1, #1
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f004 f990 	bl	800a95a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006642:	2308      	movs	r3, #8
 8006644:	2203      	movs	r2, #3
 8006646:	2182      	movs	r1, #130	; 0x82
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f004 f986 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006654:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006658:	f004 faa6 	bl	800aba8 <USBD_static_malloc>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800666e:	2301      	movs	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	e026      	b.n	80066c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2200      	movs	r2, #0
 8006692:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7c1b      	ldrb	r3, [r3, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a8:	2101      	movs	r1, #1
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f004 fa46 	bl	800ab3c <USBD_LL_PrepareReceive>
 80066b0:	e007      	b.n	80066c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	2101      	movs	r1, #1
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f004 fa3d 	bl	800ab3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066dc:	2181      	movs	r1, #129	; 0x81
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f004 f961 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066ea:	2101      	movs	r1, #1
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f004 f95a 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066fa:	2182      	movs	r1, #130	; 0x82
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f004 f952 	bl	800a9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00e      	beq.n	8006730 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	4618      	mov	r0, r3
 8006724:	f004 fa4c 	bl	800abc0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b086      	sub	sp, #24
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006760:	2b00      	cmp	r3, #0
 8006762:	d039      	beq.n	80067d8 <USBD_CDC_Setup+0x9e>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d17f      	bne.n	8006868 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	88db      	ldrh	r3, [r3, #6]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d029      	beq.n	80067c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	b25b      	sxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	da11      	bge.n	800679e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006786:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	88d2      	ldrh	r2, [r2, #6]
 800678c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800678e:	6939      	ldr	r1, [r7, #16]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	88db      	ldrh	r3, [r3, #6]
 8006794:	461a      	mov	r2, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 fa09 	bl	8007bae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800679c:	e06b      	b.n	8006876 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	785a      	ldrb	r2, [r3, #1]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	88db      	ldrh	r3, [r3, #6]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80067b4:	6939      	ldr	r1, [r7, #16]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	88db      	ldrh	r3, [r3, #6]
 80067ba:	461a      	mov	r2, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fa24 	bl	8007c0a <USBD_CtlPrepareRx>
      break;
 80067c2:	e058      	b.n	8006876 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	7850      	ldrb	r0, [r2, #1]
 80067d0:	2200      	movs	r2, #0
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	4798      	blx	r3
      break;
 80067d6:	e04e      	b.n	8006876 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b0b      	cmp	r3, #11
 80067de:	d02e      	beq.n	800683e <USBD_CDC_Setup+0x104>
 80067e0:	2b0b      	cmp	r3, #11
 80067e2:	dc38      	bgt.n	8006856 <USBD_CDC_Setup+0x11c>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <USBD_CDC_Setup+0xb4>
 80067e8:	2b0a      	cmp	r3, #10
 80067ea:	d014      	beq.n	8006816 <USBD_CDC_Setup+0xdc>
 80067ec:	e033      	b.n	8006856 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d107      	bne.n	8006808 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80067f8:	f107 030c 	add.w	r3, r7, #12
 80067fc:	2202      	movs	r2, #2
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 f9d4 	bl	8007bae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006806:	e02e      	b.n	8006866 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 f965 	bl	8007ada <USBD_CtlError>
            ret = USBD_FAIL;
 8006810:	2302      	movs	r3, #2
 8006812:	75fb      	strb	r3, [r7, #23]
          break;
 8006814:	e027      	b.n	8006866 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681c:	2b03      	cmp	r3, #3
 800681e:	d107      	bne.n	8006830 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006820:	f107 030f 	add.w	r3, r7, #15
 8006824:	2201      	movs	r2, #1
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 f9c0 	bl	8007bae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800682e:	e01a      	b.n	8006866 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 f951 	bl	8007ada <USBD_CtlError>
            ret = USBD_FAIL;
 8006838:	2302      	movs	r3, #2
 800683a:	75fb      	strb	r3, [r7, #23]
          break;
 800683c:	e013      	b.n	8006866 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006844:	2b03      	cmp	r3, #3
 8006846:	d00d      	beq.n	8006864 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 f945 	bl	8007ada <USBD_CtlError>
            ret = USBD_FAIL;
 8006850:	2302      	movs	r3, #2
 8006852:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006854:	e006      	b.n	8006864 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 f93e 	bl	8007ada <USBD_CtlError>
          ret = USBD_FAIL;
 800685e:	2302      	movs	r3, #2
 8006860:	75fb      	strb	r3, [r7, #23]
          break;
 8006862:	e000      	b.n	8006866 <USBD_CDC_Setup+0x12c>
          break;
 8006864:	bf00      	nop
      }
      break;
 8006866:	e006      	b.n	8006876 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f935 	bl	8007ada <USBD_CtlError>
      ret = USBD_FAIL;
 8006870:	2302      	movs	r3, #2
 8006872:	75fb      	strb	r3, [r7, #23]
      break;
 8006874:	bf00      	nop
  }

  return ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800689a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d03a      	beq.n	800691c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	331c      	adds	r3, #28
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d029      	beq.n	8006910 <USBD_CDC_DataIn+0x90>
 80068bc:	78fa      	ldrb	r2, [r7, #3]
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	331c      	adds	r3, #28
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	78f9      	ldrb	r1, [r7, #3]
 80068d0:	68b8      	ldr	r0, [r7, #8]
 80068d2:	460b      	mov	r3, r1
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4403      	add	r3, r0
 80068dc:	3338      	adds	r3, #56	; 0x38
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80068e4:	fb03 f301 	mul.w	r3, r3, r1
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d110      	bne.n	8006910 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	331c      	adds	r3, #28
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006902:	78f9      	ldrb	r1, [r7, #3]
 8006904:	2300      	movs	r3, #0
 8006906:	2200      	movs	r2, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f004 f8f4 	bl	800aaf6 <USBD_LL_Transmit>
 800690e:	e003      	b.n	8006918 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	e000      	b.n	800691e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800691c:	2302      	movs	r3, #2
  }
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006938:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f004 f91f 	bl	800ab82 <USBD_LL_GetRxDataSize>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00d      	beq.n	8006972 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800696a:	4611      	mov	r1, r2
 800696c:	4798      	blx	r3

    return USBD_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	e000      	b.n	8006974 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006972:	2302      	movs	r3, #2
  }
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006992:	2b00      	cmp	r3, #0
 8006994:	d015      	beq.n	80069c2 <USBD_CDC_EP0_RxReady+0x46>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800699c:	2bff      	cmp	r3, #255	; 0xff
 800699e:	d010      	beq.n	80069c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80069ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069b6:	b292      	uxth	r2, r2
 80069b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	22ff      	movs	r2, #255	; 0xff
 80069be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2243      	movs	r2, #67	; 0x43
 80069d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80069da:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000094 	.word	0x20000094

080069ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2243      	movs	r2, #67	; 0x43
 80069f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80069fa:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000050 	.word	0x20000050

08006a0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2243      	movs	r2, #67	; 0x43
 8006a18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006a1a:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	200000d8 	.word	0x200000d8

08006a2c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	220a      	movs	r2, #10
 8006a38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006a56:	2302      	movs	r3, #2
 8006a58:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ade:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01c      	beq.n	8006b24 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d115      	bne.n	8006b20 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2181      	movs	r1, #129	; 0x81
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f003 ffed 	bl	800aaf6 <USBD_LL_Transmit>

      return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e002      	b.n	8006b26 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006b24:	2302      	movs	r3, #2
  }
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d017      	beq.n	8006b78 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	7c1b      	ldrb	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f003 ffed 	bl	800ab3c <USBD_LL_PrepareReceive>
 8006b62:	e007      	b.n	8006b74 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f003 ffe4 	bl	800ab3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b96:	2302      	movs	r3, #2
 8006b98:	e01a      	b.n	8006bd0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	79fa      	ldrb	r2, [r7, #7]
 8006bc6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f003 fe51 	bl	800a870 <USBD_LL_Init>

  return USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
 8006bf8:	e001      	b.n	8006bfe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f003 fe86 	bl	800a924 <USBD_LL_Start>

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	78fa      	ldrb	r2, [r7, #3]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3

  return USBD_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fed8 	bl	8007a62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d016      	beq.n	8006d04 <USBD_LL_SetupStage+0x6a>
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d81c      	bhi.n	8006d14 <USBD_LL_SetupStage+0x7a>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <USBD_LL_SetupStage+0x4a>
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d008      	beq.n	8006cf4 <USBD_LL_SetupStage+0x5a>
 8006ce2:	e017      	b.n	8006d14 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f9cb 	bl	8007088 <USBD_StdDevReq>
      break;
 8006cf2:	e01a      	b.n	8006d2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa2d 	bl	800715c <USBD_StdItfReq>
      break;
 8006d02:	e012      	b.n	8006d2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fa6d 	bl	80071ec <USBD_StdEPReq>
      break;
 8006d12:	e00a      	b.n	8006d2a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f003 fe5e 	bl	800a9e4 <USBD_LL_StallEP>
      break;
 8006d28:	bf00      	nop
  }

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d14b      	bne.n	8006de0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d134      	bne.n	8006dc4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d919      	bls.n	8006d9a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d203      	bcs.n	8006d88 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	e002      	b.n	8006d8e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 ff57 	bl	8007c46 <USBD_CtlContinueRx>
 8006d98:	e038      	b.n	8006e0c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d105      	bne.n	8006dbc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 ff54 	bl	8007c6a <USBD_CtlSendStatus>
 8006dc2:	e023      	b.n	8006e0c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dca:	2b05      	cmp	r3, #5
 8006dcc:	d11e      	bne.n	8006e0c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f003 fe03 	bl	800a9e4 <USBD_LL_StallEP>
 8006dde:	e015      	b.n	8006e0c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00d      	beq.n	8006e08 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d108      	bne.n	8006e08 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	7afa      	ldrb	r2, [r7, #11]
 8006e00:	4611      	mov	r1, r2
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	4798      	blx	r3
 8006e06:	e001      	b.n	8006e0c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e000      	b.n	8006e0e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e24:	7afb      	ldrb	r3, [r7, #11]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d17f      	bne.n	8006f2a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d15c      	bne.n	8006ef4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d915      	bls.n	8006e72 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fec1 	bl	8007be6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e64:	2300      	movs	r3, #0
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f003 fe66 	bl	800ab3c <USBD_LL_PrepareReceive>
 8006e70:	e04e      	b.n	8006f10 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	6912      	ldr	r2, [r2, #16]
 8006e7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e7e:	fb02 f201 	mul.w	r2, r2, r1
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11c      	bne.n	8006ec2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d316      	bcc.n	8006ec2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d20f      	bcs.n	8006ec2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fe9d 	bl	8007be6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f003 fe3e 	bl	800ab3c <USBD_LL_PrepareReceive>
 8006ec0:	e026      	b.n	8006f10 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d105      	bne.n	8006ee4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ee4:	2180      	movs	r1, #128	; 0x80
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f003 fd7c 	bl	800a9e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fecf 	bl	8007c90 <USBD_CtlReceiveStatus>
 8006ef2:	e00d      	b.n	8006f10 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d004      	beq.n	8006f08 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d103      	bne.n	8006f10 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006f08:	2180      	movs	r1, #128	; 0x80
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f003 fd6a 	bl	800a9e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d11d      	bne.n	8006f56 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fe81 	bl	8006c22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f28:	e015      	b.n	8006f56 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d108      	bne.n	8006f52 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	7afa      	ldrb	r2, [r7, #11]
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	4798      	blx	r3
 8006f50:	e001      	b.n	8006f56 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	e000      	b.n	8006f58 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f68:	2340      	movs	r3, #64	; 0x40
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f003 fcf3 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2240      	movs	r2, #64	; 0x40
 8006f80:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f84:	2340      	movs	r3, #64	; 0x40
 8006f86:	2200      	movs	r2, #0
 8006f88:	2180      	movs	r1, #128	; 0x80
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f003 fce5 	bl	800a95a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2240      	movs	r2, #64	; 0x40
 8006f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6852      	ldr	r2, [r2, #4]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
  }

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2204      	movs	r2, #4
 8007018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007036:	2b04      	cmp	r3, #4
 8007038:	d105      	bne.n	8007046 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr

08007052 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007060:	2b03      	cmp	r3, #3
 8007062:	d10b      	bne.n	800707c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d005      	beq.n	80070ae <USBD_StdDevReq+0x26>
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d84f      	bhi.n	8007146 <USBD_StdDevReq+0xbe>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <USBD_StdDevReq+0x36>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d14b      	bne.n	8007146 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
      break;
 80070bc:	e048      	b.n	8007150 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	2b09      	cmp	r3, #9
 80070c4:	d839      	bhi.n	800713a <USBD_StdDevReq+0xb2>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <USBD_StdDevReq+0x44>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	0800711d 	.word	0x0800711d
 80070d0:	08007131 	.word	0x08007131
 80070d4:	0800713b 	.word	0x0800713b
 80070d8:	08007127 	.word	0x08007127
 80070dc:	0800713b 	.word	0x0800713b
 80070e0:	080070ff 	.word	0x080070ff
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	0800713b 	.word	0x0800713b
 80070ec:	08007113 	.word	0x08007113
 80070f0:	08007109 	.word	0x08007109
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9dc 	bl	80074b4 <USBD_GetDescriptor>
          break;
 80070fc:	e022      	b.n	8007144 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fb3f 	bl	8007784 <USBD_SetAddress>
          break;
 8007106:	e01d      	b.n	8007144 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fb7e 	bl	800780c <USBD_SetConfig>
          break;
 8007110:	e018      	b.n	8007144 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fc07 	bl	8007928 <USBD_GetConfig>
          break;
 800711a:	e013      	b.n	8007144 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fc37 	bl	8007992 <USBD_GetStatus>
          break;
 8007124:	e00e      	b.n	8007144 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc65 	bl	80079f8 <USBD_SetFeature>
          break;
 800712e:	e009      	b.n	8007144 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fc74 	bl	8007a20 <USBD_ClrFeature>
          break;
 8007138:	e004      	b.n	8007144 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fccc 	bl	8007ada <USBD_CtlError>
          break;
 8007142:	bf00      	nop
      }
      break;
 8007144:	e004      	b.n	8007150 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fcc6 	bl	8007ada <USBD_CtlError>
      break;
 800714e:	bf00      	nop
  }

  return ret;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop

0800715c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d005      	beq.n	8007182 <USBD_StdItfReq+0x26>
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d82e      	bhi.n	80071d8 <USBD_StdItfReq+0x7c>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <USBD_StdItfReq+0x26>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d12a      	bne.n	80071d8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007188:	3b01      	subs	r3, #1
 800718a:	2b02      	cmp	r3, #2
 800718c:	d81d      	bhi.n	80071ca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	889b      	ldrh	r3, [r3, #4]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d813      	bhi.n	80071c0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d110      	bne.n	80071d4 <USBD_StdItfReq+0x78>
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10d      	bne.n	80071d4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fd56 	bl	8007c6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071be:	e009      	b.n	80071d4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fc89 	bl	8007ada <USBD_CtlError>
          break;
 80071c8:	e004      	b.n	80071d4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc84 	bl	8007ada <USBD_CtlError>
          break;
 80071d2:	e000      	b.n	80071d6 <USBD_StdItfReq+0x7a>
          break;
 80071d4:	bf00      	nop
      }
      break;
 80071d6:	e004      	b.n	80071e2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fc7d 	bl	8007ada <USBD_CtlError>
      break;
 80071e0:	bf00      	nop
  }

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	889b      	ldrh	r3, [r3, #4]
 80071fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d007      	beq.n	800721c <USBD_StdEPReq+0x30>
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	f200 8146 	bhi.w	800749e <USBD_StdEPReq+0x2b2>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <USBD_StdEPReq+0x40>
 8007216:	2b20      	cmp	r3, #32
 8007218:	f040 8141 	bne.w	800749e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
      break;
 800722a:	e13d      	b.n	80074a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007234:	2b20      	cmp	r3, #32
 8007236:	d10a      	bne.n	800724e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]

        return ret;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	e12d      	b.n	80074aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d007      	beq.n	8007266 <USBD_StdEPReq+0x7a>
 8007256:	2b03      	cmp	r3, #3
 8007258:	f300 811b 	bgt.w	8007492 <USBD_StdEPReq+0x2a6>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d072      	beq.n	8007346 <USBD_StdEPReq+0x15a>
 8007260:	2b01      	cmp	r3, #1
 8007262:	d03a      	beq.n	80072da <USBD_StdEPReq+0xee>
 8007264:	e115      	b.n	8007492 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	2b02      	cmp	r3, #2
 800726e:	d002      	beq.n	8007276 <USBD_StdEPReq+0x8a>
 8007270:	2b03      	cmp	r3, #3
 8007272:	d015      	beq.n	80072a0 <USBD_StdEPReq+0xb4>
 8007274:	e02b      	b.n	80072ce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00c      	beq.n	8007296 <USBD_StdEPReq+0xaa>
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d009      	beq.n	8007296 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f003 fbac 	bl	800a9e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f003 fba8 	bl	800a9e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007294:	e020      	b.n	80072d8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fc1e 	bl	8007ada <USBD_CtlError>
              break;
 800729e:	e01b      	b.n	80072d8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	885b      	ldrh	r3, [r3, #2]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10e      	bne.n	80072c6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <USBD_StdEPReq+0xda>
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b80      	cmp	r3, #128	; 0x80
 80072b2:	d008      	beq.n	80072c6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f003 fb8f 	bl	800a9e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fccf 	bl	8007c6a <USBD_CtlSendStatus>

              break;
 80072cc:	e004      	b.n	80072d8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc02 	bl	8007ada <USBD_CtlError>
              break;
 80072d6:	bf00      	nop
          }
          break;
 80072d8:	e0e0      	b.n	800749c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d002      	beq.n	80072ea <USBD_StdEPReq+0xfe>
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d015      	beq.n	8007314 <USBD_StdEPReq+0x128>
 80072e8:	e026      	b.n	8007338 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00c      	beq.n	800730a <USBD_StdEPReq+0x11e>
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b80      	cmp	r3, #128	; 0x80
 80072f4:	d009      	beq.n	800730a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f003 fb72 	bl	800a9e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f003 fb6e 	bl	800a9e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007308:	e01c      	b.n	8007344 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fbe4 	bl	8007ada <USBD_CtlError>
              break;
 8007312:	e017      	b.n	8007344 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	885b      	ldrh	r3, [r3, #2]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d112      	bne.n	8007342 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007322:	2b00      	cmp	r3, #0
 8007324:	d004      	beq.n	8007330 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f003 fb79 	bl	800aa22 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc9a 	bl	8007c6a <USBD_CtlSendStatus>
              }
              break;
 8007336:	e004      	b.n	8007342 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fbcd 	bl	8007ada <USBD_CtlError>
              break;
 8007340:	e000      	b.n	8007344 <USBD_StdEPReq+0x158>
              break;
 8007342:	bf00      	nop
          }
          break;
 8007344:	e0aa      	b.n	800749c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734c:	2b02      	cmp	r3, #2
 800734e:	d002      	beq.n	8007356 <USBD_StdEPReq+0x16a>
 8007350:	2b03      	cmp	r3, #3
 8007352:	d032      	beq.n	80073ba <USBD_StdEPReq+0x1ce>
 8007354:	e097      	b.n	8007486 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <USBD_StdEPReq+0x180>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d004      	beq.n	800736c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fbb8 	bl	8007ada <USBD_CtlError>
                break;
 800736a:	e091      	b.n	8007490 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800736c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007370:	2b00      	cmp	r3, #0
 8007372:	da0b      	bge.n	800738c <USBD_StdEPReq+0x1a0>
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	3310      	adds	r3, #16
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	3304      	adds	r3, #4
 800738a:	e00b      	b.n	80073a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	3304      	adds	r3, #4
 80073a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2202      	movs	r2, #2
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fbfb 	bl	8007bae <USBD_CtlSendData>
              break;
 80073b8:	e06a      	b.n	8007490 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da11      	bge.n	80073e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	f003 020f 	and.w	r2, r3, #15
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	3318      	adds	r3, #24
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d117      	bne.n	800740c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fb7b 	bl	8007ada <USBD_CtlError>
                  break;
 80073e4:	e054      	b.n	8007490 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fb68 	bl	8007ada <USBD_CtlError>
                  break;
 800740a:	e041      	b.n	8007490 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800740c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007410:	2b00      	cmp	r3, #0
 8007412:	da0b      	bge.n	800742c <USBD_StdEPReq+0x240>
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	3310      	adds	r3, #16
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4413      	add	r3, r2
 8007428:	3304      	adds	r3, #4
 800742a:	e00b      	b.n	8007444 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	3304      	adds	r3, #4
 8007444:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <USBD_StdEPReq+0x266>
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b80      	cmp	r3, #128	; 0x80
 8007450:	d103      	bne.n	800745a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e00e      	b.n	8007478 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f003 fafe 	bl	800aa60 <USBD_LL_IsStallEP>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2201      	movs	r2, #1
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	e002      	b.n	8007478 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2202      	movs	r2, #2
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fb95 	bl	8007bae <USBD_CtlSendData>
              break;
 8007484:	e004      	b.n	8007490 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb26 	bl	8007ada <USBD_CtlError>
              break;
 800748e:	bf00      	nop
          }
          break;
 8007490:	e004      	b.n	800749c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fb20 	bl	8007ada <USBD_CtlError>
          break;
 800749a:	bf00      	nop
      }
      break;
 800749c:	e004      	b.n	80074a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fb1a 	bl	8007ada <USBD_CtlError>
      break;
 80074a6:	bf00      	nop
  }

  return ret;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	0a1b      	lsrs	r3, r3, #8
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	f200 8128 	bhi.w	800772a <USBD_GetDescriptor+0x276>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBD_GetDescriptor+0x2c>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	080074fd 	.word	0x080074fd
 80074e4:	08007515 	.word	0x08007515
 80074e8:	08007555 	.word	0x08007555
 80074ec:	0800772b 	.word	0x0800772b
 80074f0:	0800772b 	.word	0x0800772b
 80074f4:	080076cb 	.word	0x080076cb
 80074f8:	080076f7 	.word	0x080076f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	7c12      	ldrb	r2, [r2, #16]
 8007508:	f107 0108 	add.w	r1, r7, #8
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	60f8      	str	r0, [r7, #12]
      break;
 8007512:	e112      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7c1b      	ldrb	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10d      	bne.n	8007538 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f107 0208 	add.w	r2, r7, #8
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
 800752c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	2202      	movs	r2, #2
 8007534:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007536:	e100      	b.n	800773a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	f107 0208 	add.w	r2, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3301      	adds	r3, #1
 800754e:	2202      	movs	r2, #2
 8007550:	701a      	strb	r2, [r3, #0]
      break;
 8007552:	e0f2      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	885b      	ldrh	r3, [r3, #2]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b05      	cmp	r3, #5
 800755c:	f200 80ac 	bhi.w	80076b8 <USBD_GetDescriptor+0x204>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <USBD_GetDescriptor+0xb4>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	08007581 	.word	0x08007581
 800756c:	080075b5 	.word	0x080075b5
 8007570:	080075e9 	.word	0x080075e9
 8007574:	0800761d 	.word	0x0800761d
 8007578:	08007651 	.word	0x08007651
 800757c:	08007685 	.word	0x08007685
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a2:	e091      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa97 	bl	8007ada <USBD_CtlError>
            err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
          break;
 80075b2:	e089      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d6:	e077      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa7d 	bl	8007ada <USBD_CtlError>
            err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
          break;
 80075e6:	e06f      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	7c12      	ldrb	r2, [r2, #16]
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760a:	e05d      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa63 	bl	8007ada <USBD_CtlError>
            err++;
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	3301      	adds	r3, #1
 8007618:	72fb      	strb	r3, [r7, #11]
          break;
 800761a:	e055      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7c12      	ldrb	r2, [r2, #16]
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763e:	e043      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa49 	bl	8007ada <USBD_CtlError>
            err++;
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	3301      	adds	r3, #1
 800764c:	72fb      	strb	r3, [r7, #11]
          break;
 800764e:	e03b      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7c12      	ldrb	r2, [r2, #16]
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007672:	e029      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa2f 	bl	8007ada <USBD_CtlError>
            err++;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	3301      	adds	r3, #1
 8007680:	72fb      	strb	r3, [r7, #11]
          break;
 8007682:	e021      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e00f      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa15 	bl	8007ada <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e007      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa0d 	bl	8007ada <USBD_CtlError>
          err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80076c6:	e038      	b.n	800773a <USBD_GetDescriptor+0x286>
 80076c8:	e037      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7c1b      	ldrb	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	f107 0208 	add.w	r2, r7, #8
 80076de:	4610      	mov	r0, r2
 80076e0:	4798      	blx	r3
 80076e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e4:	e029      	b.n	800773a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9f6 	bl	8007ada <USBD_CtlError>
        err++;
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	3301      	adds	r3, #1
 80076f2:	72fb      	strb	r3, [r7, #11]
      break;
 80076f4:	e021      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7c1b      	ldrb	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10d      	bne.n	800771a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	f107 0208 	add.w	r2, r7, #8
 800770a:	4610      	mov	r0, r2
 800770c:	4798      	blx	r3
 800770e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	2207      	movs	r2, #7
 8007716:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007718:	e00f      	b.n	800773a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9dc 	bl	8007ada <USBD_CtlError>
        err++;
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	3301      	adds	r3, #1
 8007726:	72fb      	strb	r3, [r7, #11]
      break;
 8007728:	e007      	b.n	800773a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f9d4 	bl	8007ada <USBD_CtlError>
      err++;
 8007732:	7afb      	ldrb	r3, [r7, #11]
 8007734:	3301      	adds	r3, #1
 8007736:	72fb      	strb	r3, [r7, #11]
      break;
 8007738:	bf00      	nop
  }

  if (err != 0U)
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d11c      	bne.n	800777a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007740:	893b      	ldrh	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d011      	beq.n	800776a <USBD_GetDescriptor+0x2b6>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	88db      	ldrh	r3, [r3, #6]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	88da      	ldrh	r2, [r3, #6]
 8007752:	893b      	ldrh	r3, [r7, #8]
 8007754:	4293      	cmp	r3, r2
 8007756:	bf28      	it	cs
 8007758:	4613      	movcs	r3, r2
 800775a:	b29b      	uxth	r3, r3
 800775c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800775e:	893b      	ldrh	r3, [r7, #8]
 8007760:	461a      	mov	r2, r3
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa22 	bl	8007bae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	88db      	ldrh	r3, [r3, #6]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d104      	bne.n	800777c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa79 	bl	8007c6a <USBD_CtlSendStatus>
 8007778:	e000      	b.n	800777c <USBD_GetDescriptor+0x2c8>
    return;
 800777a:	bf00      	nop
    }
  }
}
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop

08007784 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	889b      	ldrh	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d130      	bne.n	80077f8 <USBD_SetAddress+0x74>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	88db      	ldrh	r3, [r3, #6]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d12c      	bne.n	80077f8 <USBD_SetAddress+0x74>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	2b7f      	cmp	r3, #127	; 0x7f
 80077a4:	d828      	bhi.n	80077f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	885b      	ldrh	r3, [r3, #2]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d104      	bne.n	80077c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f98b 	bl	8007ada <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c4:	e01d      	b.n	8007802 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7bfa      	ldrb	r2, [r7, #15]
 80077ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f003 f970 	bl	800aab8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fa46 	bl	8007c6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ec:	e009      	b.n	8007802 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f6:	e004      	b.n	8007802 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f96d 	bl	8007ada <USBD_CtlError>
  }
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	885b      	ldrh	r3, [r3, #2]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	4b41      	ldr	r3, [pc, #260]	; (8007924 <USBD_SetConfig+0x118>)
 800781e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007820:	4b40      	ldr	r3, [pc, #256]	; (8007924 <USBD_SetConfig+0x118>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d904      	bls.n	8007832 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f955 	bl	8007ada <USBD_CtlError>
 8007830:	e075      	b.n	800791e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	2b02      	cmp	r3, #2
 800783a:	d002      	beq.n	8007842 <USBD_SetConfig+0x36>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d023      	beq.n	8007888 <USBD_SetConfig+0x7c>
 8007840:	e062      	b.n	8007908 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007842:	4b38      	ldr	r3, [pc, #224]	; (8007924 <USBD_SetConfig+0x118>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01a      	beq.n	8007880 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800784a:	4b36      	ldr	r3, [pc, #216]	; (8007924 <USBD_SetConfig+0x118>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2203      	movs	r2, #3
 8007858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800785c:	4b31      	ldr	r3, [pc, #196]	; (8007924 <USBD_SetConfig+0x118>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff f9e7 	bl	8006c36 <USBD_SetClassConfig>
 8007868:	4603      	mov	r3, r0
 800786a:	2b02      	cmp	r3, #2
 800786c:	d104      	bne.n	8007878 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f932 	bl	8007ada <USBD_CtlError>
            return;
 8007876:	e052      	b.n	800791e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f9f6 	bl	8007c6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800787e:	e04e      	b.n	800791e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f9f2 	bl	8007c6a <USBD_CtlSendStatus>
        break;
 8007886:	e04a      	b.n	800791e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007888:	4b26      	ldr	r3, [pc, #152]	; (8007924 <USBD_SetConfig+0x118>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d112      	bne.n	80078b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007898:	4b22      	ldr	r3, [pc, #136]	; (8007924 <USBD_SetConfig+0x118>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80078a2:	4b20      	ldr	r3, [pc, #128]	; (8007924 <USBD_SetConfig+0x118>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff f9e3 	bl	8006c74 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9db 	bl	8007c6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80078b4:	e033      	b.n	800791e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80078b6:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <USBD_SetConfig+0x118>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d01d      	beq.n	8007900 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff f9d1 	bl	8006c74 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078d2:	4b14      	ldr	r3, [pc, #80]	; (8007924 <USBD_SetConfig+0x118>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078dc:	4b11      	ldr	r3, [pc, #68]	; (8007924 <USBD_SetConfig+0x118>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff f9a7 	bl	8006c36 <USBD_SetClassConfig>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d104      	bne.n	80078f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f8f2 	bl	8007ada <USBD_CtlError>
            return;
 80078f6:	e012      	b.n	800791e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f9b6 	bl	8007c6a <USBD_CtlSendStatus>
        break;
 80078fe:	e00e      	b.n	800791e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f9b2 	bl	8007c6a <USBD_CtlSendStatus>
        break;
 8007906:	e00a      	b.n	800791e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f8e5 	bl	8007ada <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <USBD_SetConfig+0x118>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff f9ac 	bl	8006c74 <USBD_ClrClassConfig>
        break;
 800791c:	bf00      	nop
    }
  }
}
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	2000045c 	.word	0x2000045c

08007928 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	88db      	ldrh	r3, [r3, #6]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d004      	beq.n	8007944 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f8cc 	bl	8007ada <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007942:	e022      	b.n	800798a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794a:	2b02      	cmp	r3, #2
 800794c:	dc02      	bgt.n	8007954 <USBD_GetConfig+0x2c>
 800794e:	2b00      	cmp	r3, #0
 8007950:	dc03      	bgt.n	800795a <USBD_GetConfig+0x32>
 8007952:	e015      	b.n	8007980 <USBD_GetConfig+0x58>
 8007954:	2b03      	cmp	r3, #3
 8007956:	d00b      	beq.n	8007970 <USBD_GetConfig+0x48>
 8007958:	e012      	b.n	8007980 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3308      	adds	r3, #8
 8007964:	2201      	movs	r2, #1
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f920 	bl	8007bae <USBD_CtlSendData>
        break;
 800796e:	e00c      	b.n	800798a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	2201      	movs	r2, #1
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f918 	bl	8007bae <USBD_CtlSendData>
        break;
 800797e:	e004      	b.n	800798a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8a9 	bl	8007ada <USBD_CtlError>
        break;
 8007988:	bf00      	nop
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a2:	3b01      	subs	r3, #1
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d81e      	bhi.n	80079e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	88db      	ldrh	r3, [r3, #6]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d004      	beq.n	80079ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f891 	bl	8007ada <USBD_CtlError>
        break;
 80079b8:	e01a      	b.n	80079f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f043 0202 	orr.w	r2, r3, #2
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	330c      	adds	r3, #12
 80079da:	2202      	movs	r2, #2
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f8e5 	bl	8007bae <USBD_CtlSendData>
      break;
 80079e4:	e004      	b.n	80079f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f876 	bl	8007ada <USBD_CtlError>
      break;
 80079ee:	bf00      	nop
  }
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d106      	bne.n	8007a18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f929 	bl	8007c6a <USBD_CtlSendStatus>
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a30:	3b01      	subs	r3, #1
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d80b      	bhi.n	8007a4e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10c      	bne.n	8007a58 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f90f 	bl	8007c6a <USBD_CtlSendStatus>
      }
      break;
 8007a4c:	e004      	b.n	8007a58 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f842 	bl	8007ada <USBD_CtlError>
      break;
 8007a56:	e000      	b.n	8007a5a <USBD_ClrFeature+0x3a>
      break;
 8007a58:	bf00      	nop
  }
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	785a      	ldrb	r2, [r3, #1]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	3302      	adds	r3, #2
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	3303      	adds	r3, #3
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4413      	add	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	3305      	adds	r3, #5
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	021b      	lsls	r3, r3, #8
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4413      	add	r3, r2
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3306      	adds	r3, #6
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	3307      	adds	r3, #7
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	80da      	strh	r2, [r3, #6]

}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr

08007ada <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f002 ff7c 	bl	800a9e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007aec:	2100      	movs	r1, #0
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f002 ff78 	bl	800a9e4 <USBD_LL_StallEP>
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d032      	beq.n	8007b78 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f834 	bl	8007b80 <USBD_GetLen>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	75fa      	strb	r2, [r7, #23]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4413      	add	r3, r2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	7812      	ldrb	r2, [r2, #0]
 8007b36:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	75fa      	strb	r2, [r7, #23]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4413      	add	r3, r2
 8007b44:	2203      	movs	r2, #3
 8007b46:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b48:	e012      	b.n	8007b70 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	60fa      	str	r2, [r7, #12]
 8007b50:	7dfa      	ldrb	r2, [r7, #23]
 8007b52:	1c51      	adds	r1, r2, #1
 8007b54:	75f9      	strb	r1, [r7, #23]
 8007b56:	4611      	mov	r1, r2
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	75fa      	strb	r2, [r7, #23]
 8007b66:	461a      	mov	r2, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e8      	bne.n	8007b4a <USBD_GetString+0x4e>
    }
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b8c:	e005      	b.n	8007b9a <USBD_GetLen+0x1a>
  {
    len++;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	3301      	adds	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3301      	adds	r3, #1
 8007b98:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f5      	bne.n	8007b8e <USBD_GetLen+0xe>
  }

  return len;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bc4:	88fa      	ldrh	r2, [r7, #6]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f002 ff8d 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f002 ff7b 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c20:	88fa      	ldrh	r2, [r7, #6]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007c28:	88fa      	ldrh	r2, [r7, #6]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c30:	88fb      	ldrh	r3, [r7, #6]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	2100      	movs	r1, #0
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f002 ff80 	bl	800ab3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f002 ff6e 	bl	800ab3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f002 ff38 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f002 ff48 	bl	800ab3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cc8:	2b84      	cmp	r3, #132	; 0x84
 8007cca:	d005      	beq.n	8007cd8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ccc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	3303      	adds	r3, #3
 8007cd6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr

08007ce4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ce8:	f000 fed4 	bl	8008a94 <vTaskStartScheduler>
  
  return osOK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf4:	b089      	sub	sp, #36	; 0x24
 8007cf6:	af04      	add	r7, sp, #16
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d020      	beq.n	8007d46 <osThreadCreate+0x54>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01c      	beq.n	8007d46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685c      	ldr	r4, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681d      	ldr	r5, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691e      	ldr	r6, [r3, #16]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff ffc9 	bl	8007cb6 <makeFreeRtosPriority>
 8007d24:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d2e:	9202      	str	r2, [sp, #8]
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	9100      	str	r1, [sp, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	4632      	mov	r2, r6
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 fceb 	bl	8008716 <xTaskCreateStatic>
 8007d40:	4603      	mov	r3, r0
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e01c      	b.n	8007d80 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685c      	ldr	r4, [r3, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d52:	b29e      	uxth	r6, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff ffab 	bl	8007cb6 <makeFreeRtosPriority>
 8007d60:	4602      	mov	r2, r0
 8007d62:	f107 030c 	add.w	r3, r7, #12
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	9200      	str	r2, [sp, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 fd2c 	bl	80087ce <xTaskCreate>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d001      	beq.n	8007d80 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e000      	b.n	8007d82 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d80:	68fb      	ldr	r3, [r7, #12]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <osDelay+0x16>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	e000      	b.n	8007da2 <osDelay+0x18>
 8007da0:	2301      	movs	r3, #1
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fe42 	bl	8008a2c <vTaskDelay>
  
  return osOK;
 8007da8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f103 0208 	add.w	r2, r3, #8
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f103 0208 	add.w	r2, r3, #8
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f103 0208 	add.w	r2, r3, #8
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d103      	bne.n	8007e6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	e00c      	b.n	8007e88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3308      	adds	r3, #8
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e002      	b.n	8007e7c <vListInsert+0x2e>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d2f6      	bcs.n	8007e76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bc80      	pop	{r7}
 8007ebc:	4770      	bx	lr

08007ebe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6892      	ldr	r2, [r2, #8]
 8007ed4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6852      	ldr	r2, [r2, #4]
 8007ede:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d103      	bne.n	8007ef2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	1e5a      	subs	r2, r3, #1
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f3a:	f001 fce7 	bl	800990c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	68f9      	ldr	r1, [r7, #12]
 8007f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f4a:	fb01 f303 	mul.w	r3, r1, r3
 8007f4e:	441a      	add	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	68f9      	ldr	r1, [r7, #12]
 8007f6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	441a      	add	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22ff      	movs	r2, #255	; 0xff
 8007f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	22ff      	movs	r2, #255	; 0xff
 8007f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d114      	bne.n	8007fba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01a      	beq.n	8007fce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3310      	adds	r3, #16
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 ffbf 	bl	8008f20 <xTaskRemoveFromEventList>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d012      	beq.n	8007fce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fa8:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <xQueueGenericReset+0xcc>)
 8007faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	e009      	b.n	8007fce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3310      	adds	r3, #16
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fef7 	bl	8007db2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3324      	adds	r3, #36	; 0x24
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff fef2 	bl	8007db2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fce:	f001 fccd 	bl	800996c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fd2:	2301      	movs	r3, #1
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	613b      	str	r3, [r7, #16]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008010:	2300      	movs	r3, #0
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	e004      	b.n	8008020 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3348      	adds	r3, #72	; 0x48
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fd33 	bl	8009a90 <pvPortMalloc>
 800802a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00f      	beq.n	8008052 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	3348      	adds	r3, #72	; 0x48
 8008036:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008040:	79fa      	ldrb	r2, [r7, #7]
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4613      	mov	r3, r2
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f805 	bl	800805c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008052:	69bb      	ldr	r3, [r7, #24]
	}
 8008054:	4618      	mov	r0, r3
 8008056:	3720      	adds	r7, #32
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	e002      	b.n	800807e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800808a:	2101      	movs	r1, #1
 800808c:	69b8      	ldr	r0, [r7, #24]
 800808e:	f7ff ff3f 	bl	8007f10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00e      	beq.n	80080c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80080ba:	2300      	movs	r3, #0
 80080bc:	2200      	movs	r2, #0
 80080be:	2100      	movs	r1, #0
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f81d 	bl	8008100 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	4603      	mov	r3, r0
 80080d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080d8:	2301      	movs	r3, #1
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6939      	ldr	r1, [r7, #16]
 80080e6:	6978      	ldr	r0, [r7, #20]
 80080e8:	f7ff ff7a 	bl	8007fe0 <xQueueGenericCreate>
 80080ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7ff ffd3 	bl	800809a <prvInitialiseMutex>

		return pxNewQueue;
 80080f4:	68fb      	ldr	r3, [r7, #12]
	}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08e      	sub	sp, #56	; 0x38
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xQueueGenericSend+0x32>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d103      	bne.n	8008140 <xQueueGenericSend+0x40>
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <xQueueGenericSend+0x44>
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <xQueueGenericSend+0x46>
 8008144:	2300      	movs	r3, #0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10a      	bne.n	8008160 <xQueueGenericSend+0x60>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d103      	bne.n	800816e <xQueueGenericSend+0x6e>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <xQueueGenericSend+0x72>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <xQueueGenericSend+0x74>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueGenericSend+0x8e>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	623b      	str	r3, [r7, #32]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800818e:	f001 f887 	bl	80092a0 <xTaskGetSchedulerState>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <xQueueGenericSend+0x9e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <xQueueGenericSend+0xa2>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <xQueueGenericSend+0xa4>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <xQueueGenericSend+0xbe>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	61fb      	str	r3, [r7, #28]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081be:	f001 fba5 	bl	800990c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <xQueueGenericSend+0xd4>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d129      	bne.n	8008228 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081da:	f000 f9b2 	bl	8008542 <prvCopyDataToQueue>
 80081de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d010      	beq.n	800820a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	3324      	adds	r3, #36	; 0x24
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 fe97 	bl	8008f20 <xTaskRemoveFromEventList>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d013      	beq.n	8008220 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081f8:	4b3f      	ldr	r3, [pc, #252]	; (80082f8 <xQueueGenericSend+0x1f8>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	e00a      	b.n	8008220 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d007      	beq.n	8008220 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008210:	4b39      	ldr	r3, [pc, #228]	; (80082f8 <xQueueGenericSend+0x1f8>)
 8008212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008220:	f001 fba4 	bl	800996c <vPortExitCritical>
				return pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	e063      	b.n	80082f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d103      	bne.n	8008236 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800822e:	f001 fb9d 	bl	800996c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008232:	2300      	movs	r3, #0
 8008234:	e05c      	b.n	80082f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800823c:	f107 0314 	add.w	r3, r7, #20
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fecf 	bl	8008fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008246:	2301      	movs	r3, #1
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800824a:	f001 fb8f 	bl	800996c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800824e:	f000 fc81 	bl	8008b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008252:	f001 fb5b 	bl	800990c <vPortEnterCritical>
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800825c:	b25b      	sxtb	r3, r3
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	d103      	bne.n	800826c <xQueueGenericSend+0x16c>
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008272:	b25b      	sxtb	r3, r3
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d103      	bne.n	8008282 <xQueueGenericSend+0x182>
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008282:	f001 fb73 	bl	800996c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008286:	1d3a      	adds	r2, r7, #4
 8008288:	f107 0314 	add.w	r3, r7, #20
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f000 febe 	bl	8009010 <xTaskCheckForTimeOut>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d124      	bne.n	80082e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800829a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800829c:	f000 fa23 	bl	80086e6 <prvIsQueueFull>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d018      	beq.n	80082d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	3310      	adds	r3, #16
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fe12 	bl	8008ed8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b6:	f000 f9ae 	bl	8008616 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082ba:	f000 fc59 	bl	8008b70 <xTaskResumeAll>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f47f af7c 	bne.w	80081be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <xQueueGenericSend+0x1f8>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	e772      	b.n	80081be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082da:	f000 f99c 	bl	8008616 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082de:	f000 fc47 	bl	8008b70 <xTaskResumeAll>
 80082e2:	e76c      	b.n	80081be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082e6:	f000 f996 	bl	8008616 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082ea:	f000 fc41 	bl	8008b70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082ee:	2300      	movs	r3, #0
		}
	}
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3738      	adds	r7, #56	; 0x38
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08e      	sub	sp, #56	; 0x38
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008306:	2300      	movs	r3, #0
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800830e:	2300      	movs	r3, #0
 8008310:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	623b      	str	r3, [r7, #32]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	61fb      	str	r3, [r7, #28]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800834c:	f000 ffa8 	bl	80092a0 <xTaskGetSchedulerState>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xQueueSemaphoreTake+0x60>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <xQueueSemaphoreTake+0x64>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <xQueueSemaphoreTake+0x66>
 8008360:	2300      	movs	r3, #0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	61bb      	str	r3, [r7, #24]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800837c:	f001 fac6 	bl	800990c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d024      	beq.n	80083d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	1e5a      	subs	r2, r3, #1
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800839c:	f001 f94a 	bl	8009634 <pvTaskIncrementMutexHeldCount>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00f      	beq.n	80083ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	3310      	adds	r3, #16
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fdb4 	bl	8008f20 <xTaskRemoveFromEventList>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083be:	4b54      	ldr	r3, [pc, #336]	; (8008510 <xQueueSemaphoreTake+0x214>)
 80083c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083ce:	f001 facd 	bl	800996c <vPortExitCritical>
				return pdPASS;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e097      	b.n	8008506 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d111      	bne.n	8008400 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	617b      	str	r3, [r7, #20]
}
 80083f4:	bf00      	nop
 80083f6:	e7fe      	b.n	80083f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083f8:	f001 fab8 	bl	800996c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e082      	b.n	8008506 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008406:	f107 030c 	add.w	r3, r7, #12
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fdea 	bl	8008fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008414:	f001 faaa 	bl	800996c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008418:	f000 fb9c 	bl	8008b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800841c:	f001 fa76 	bl	800990c <vPortEnterCritical>
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008426:	b25b      	sxtb	r3, r3
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d103      	bne.n	8008436 <xQueueSemaphoreTake+0x13a>
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008442:	d103      	bne.n	800844c <xQueueSemaphoreTake+0x150>
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800844c:	f001 fa8e 	bl	800996c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008450:	463a      	mov	r2, r7
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fdd9 	bl	8009010 <xTaskCheckForTimeOut>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d132      	bne.n	80084ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008466:	f000 f928 	bl	80086ba <prvIsQueueEmpty>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d026      	beq.n	80084be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008478:	f001 fa48 	bl	800990c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4618      	mov	r0, r3
 8008482:	f000 ff2b 	bl	80092dc <xTaskPriorityInherit>
 8008486:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008488:	f001 fa70 	bl	800996c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	3324      	adds	r3, #36	; 0x24
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fd1f 	bl	8008ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800849a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800849c:	f000 f8bb 	bl	8008616 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084a0:	f000 fb66 	bl	8008b70 <xTaskResumeAll>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f47f af68 	bne.w	800837c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80084ac:	4b18      	ldr	r3, [pc, #96]	; (8008510 <xQueueSemaphoreTake+0x214>)
 80084ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	e75e      	b.n	800837c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80084be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084c0:	f000 f8a9 	bl	8008616 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084c4:	f000 fb54 	bl	8008b70 <xTaskResumeAll>
 80084c8:	e758      	b.n	800837c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80084ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084cc:	f000 f8a3 	bl	8008616 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084d0:	f000 fb4e 	bl	8008b70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084d6:	f000 f8f0 	bl	80086ba <prvIsQueueEmpty>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f43f af4d 	beq.w	800837c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00d      	beq.n	8008504 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80084e8:	f001 fa10 	bl	800990c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084ee:	f000 f811 	bl	8008514 <prvGetDisinheritPriorityAfterTimeout>
 80084f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fffa 	bl	80094f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008500:	f001 fa34 	bl	800996c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008506:	4618      	mov	r0, r3
 8008508:	3738      	adds	r7, #56	; 0x38
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	2b00      	cmp	r3, #0
 8008522:	d006      	beq.n	8008532 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f1c3 0307 	rsb	r3, r3, #7
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	e001      	b.n	8008536 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008536:	68fb      	ldr	r3, [r7, #12]
	}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800854e:	2300      	movs	r3, #0
 8008550:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10d      	bne.n	800857c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d14d      	bne.n	8008604 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 ff3b 	bl	80093e8 <xTaskPriorityDisinherit>
 8008572:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	605a      	str	r2, [r3, #4]
 800857a:	e043      	b.n	8008604 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d119      	bne.n	80085b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6898      	ldr	r0, [r3, #8]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	461a      	mov	r2, r3
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	f002 fb81 	bl	800ac94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689a      	ldr	r2, [r3, #8]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	441a      	add	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d32b      	bcc.n	8008604 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	609a      	str	r2, [r3, #8]
 80085b4:	e026      	b.n	8008604 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	68d8      	ldr	r0, [r3, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	461a      	mov	r2, r3
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	f002 fb67 	bl	800ac94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	425b      	negs	r3, r3
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d207      	bcs.n	80085f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	425b      	negs	r3, r3
 80085ec:	441a      	add	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d105      	bne.n	8008604 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	3b01      	subs	r3, #1
 8008602:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800860c:	697b      	ldr	r3, [r7, #20]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800861e:	f001 f975 	bl	800990c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008628:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800862a:	e011      	b.n	8008650 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d012      	beq.n	800865a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3324      	adds	r3, #36	; 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fc71 	bl	8008f20 <xTaskRemoveFromEventList>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008644:	f000 fd46 	bl	80090d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	3b01      	subs	r3, #1
 800864c:	b2db      	uxtb	r3, r3
 800864e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dce9      	bgt.n	800862c <prvUnlockQueue+0x16>
 8008658:	e000      	b.n	800865c <prvUnlockQueue+0x46>
					break;
 800865a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	22ff      	movs	r2, #255	; 0xff
 8008660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008664:	f001 f982 	bl	800996c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008668:	f001 f950 	bl	800990c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008672:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008674:	e011      	b.n	800869a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d012      	beq.n	80086a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3310      	adds	r3, #16
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fc4c 	bl	8008f20 <xTaskRemoveFromEventList>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800868e:	f000 fd21 	bl	80090d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	3b01      	subs	r3, #1
 8008696:	b2db      	uxtb	r3, r3
 8008698:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800869a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dce9      	bgt.n	8008676 <prvUnlockQueue+0x60>
 80086a2:	e000      	b.n	80086a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086ae:	f001 f95d 	bl	800996c <vPortExitCritical>
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c2:	f001 f923 	bl	800990c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e001      	b.n	80086d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086d8:	f001 f948 	bl	800996c <vPortExitCritical>

	return xReturn;
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086ee:	f001 f90d 	bl	800990c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d102      	bne.n	8008704 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086fe:	2301      	movs	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	e001      	b.n	8008708 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008708:	f001 f930 	bl	800996c <vPortExitCritical>

	return xReturn;
 800870c:	68fb      	ldr	r3, [r7, #12]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008716:	b580      	push	{r7, lr}
 8008718:	b08e      	sub	sp, #56	; 0x38
 800871a:	af04      	add	r7, sp, #16
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <xTaskCreateStatic+0x2a>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	623b      	str	r3, [r7, #32]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10a      	bne.n	800875c <xTaskCreateStatic+0x46>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	61fb      	str	r3, [r7, #28]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800875c:	2354      	movs	r3, #84	; 0x54
 800875e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b54      	cmp	r3, #84	; 0x54
 8008764:	d00a      	beq.n	800877c <xTaskCreateStatic+0x66>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	61bb      	str	r3, [r7, #24]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	2b00      	cmp	r3, #0
 8008780:	d01e      	beq.n	80087c0 <xTaskCreateStatic+0xaa>
 8008782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01b      	beq.n	80087c0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008790:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	2202      	movs	r2, #2
 8008796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800879a:	2300      	movs	r3, #0
 800879c:	9303      	str	r3, [sp, #12]
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	9302      	str	r3, [sp, #8]
 80087a2:	f107 0314 	add.w	r3, r7, #20
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f850 	bl	8008858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ba:	f000 f8cd 	bl	8008958 <prvAddNewTaskToReadyList>
 80087be:	e001      	b.n	80087c4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087c4:	697b      	ldr	r3, [r7, #20]
	}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3728      	adds	r7, #40	; 0x28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b08c      	sub	sp, #48	; 0x30
 80087d2:	af04      	add	r7, sp, #16
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	603b      	str	r3, [r7, #0]
 80087da:	4613      	mov	r3, r2
 80087dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087de:	88fb      	ldrh	r3, [r7, #6]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 f954 	bl	8009a90 <pvPortMalloc>
 80087e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00e      	beq.n	800880e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80087f0:	2054      	movs	r0, #84	; 0x54
 80087f2:	f001 f94d 	bl	8009a90 <pvPortMalloc>
 80087f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
 8008804:	e005      	b.n	8008812 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008806:	6978      	ldr	r0, [r7, #20]
 8008808:	f001 fa06 	bl	8009c18 <vPortFree>
 800880c:	e001      	b.n	8008812 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d017      	beq.n	8008848 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	2300      	movs	r3, #0
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	9302      	str	r3, [sp, #8]
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f80e 	bl	8008858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800883c:	69f8      	ldr	r0, [r7, #28]
 800883e:	f000 f88b 	bl	8008958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008842:	2301      	movs	r3, #1
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	e002      	b.n	800884e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008848:	f04f 33ff 	mov.w	r3, #4294967295
 800884c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800884e:	69bb      	ldr	r3, [r7, #24]
	}
 8008850:	4618      	mov	r0, r3
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008870:	3b01      	subs	r3, #1
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	f023 0307 	bic.w	r3, r3, #7
 800887e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	617b      	str	r3, [r7, #20]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	e012      	b.n	80088cc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	7819      	ldrb	r1, [r3, #0]
 80088ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	4413      	add	r3, r2
 80088b4:	3334      	adds	r3, #52	; 0x34
 80088b6:	460a      	mov	r2, r1
 80088b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d006      	beq.n	80088d4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	3301      	adds	r3, #1
 80088ca:	61fb      	str	r3, [r7, #28]
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	2b0f      	cmp	r3, #15
 80088d0:	d9e9      	bls.n	80088a6 <prvInitialiseNewTask+0x4e>
 80088d2:	e000      	b.n	80088d6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80088d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	2b06      	cmp	r3, #6
 80088e2:	d901      	bls.n	80088e8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088e4:	2306      	movs	r3, #6
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	2200      	movs	r2, #0
 80088f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff fa76 	bl	8007df0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	3318      	adds	r3, #24
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff fa71 	bl	8007df0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008912:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	f1c3 0207 	rsb	r2, r3, #7
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008922:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	2200      	movs	r2, #0
 8008928:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	68f9      	ldr	r1, [r7, #12]
 8008936:	69b8      	ldr	r0, [r7, #24]
 8008938:	f000 fef6 	bl	8009728 <pxPortInitialiseStack>
 800893c:	4602      	mov	r2, r0
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800894c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800894e:	bf00      	nop
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008960:	f000 ffd4 	bl	800990c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008964:	4b2a      	ldr	r3, [pc, #168]	; (8008a10 <prvAddNewTaskToReadyList+0xb8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3301      	adds	r3, #1
 800896a:	4a29      	ldr	r2, [pc, #164]	; (8008a10 <prvAddNewTaskToReadyList+0xb8>)
 800896c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800896e:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <prvAddNewTaskToReadyList+0xbc>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008976:	4a27      	ldr	r2, [pc, #156]	; (8008a14 <prvAddNewTaskToReadyList+0xbc>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800897c:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <prvAddNewTaskToReadyList+0xb8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d110      	bne.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008984:	f000 fbca 	bl	800911c <prvInitialiseTaskLists>
 8008988:	e00d      	b.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800898a:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <prvAddNewTaskToReadyList+0xc0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008992:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <prvAddNewTaskToReadyList+0xbc>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d802      	bhi.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089a0:	4a1c      	ldr	r2, [pc, #112]	; (8008a14 <prvAddNewTaskToReadyList+0xbc>)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089a6:	4b1d      	ldr	r3, [pc, #116]	; (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	4a1b      	ldr	r2, [pc, #108]	; (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 80089ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	2201      	movs	r2, #1
 80089b6:	409a      	lsls	r2, r3
 80089b8:	4b19      	ldr	r3, [pc, #100]	; (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4313      	orrs	r3, r2
 80089be:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <prvAddNewTaskToReadyList+0xcc>)
 80089d0:	441a      	add	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4619      	mov	r1, r3
 80089d8:	4610      	mov	r0, r2
 80089da:	f7ff fa15 	bl	8007e08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089de:	f000 ffc5 	bl	800996c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089e2:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <prvAddNewTaskToReadyList+0xc0>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00e      	beq.n	8008a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089ea:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <prvAddNewTaskToReadyList+0xbc>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d207      	bcs.n	8008a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089f8:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <prvAddNewTaskToReadyList+0xd0>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20000560 	.word	0x20000560
 8008a14:	20000460 	.word	0x20000460
 8008a18:	2000056c 	.word	0x2000056c
 8008a1c:	2000057c 	.word	0x2000057c
 8008a20:	20000568 	.word	0x20000568
 8008a24:	20000464 	.word	0x20000464
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d017      	beq.n	8008a6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <vTaskDelay+0x60>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <vTaskDelay+0x30>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a5c:	f000 f87a 	bl	8008b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a60:	2100      	movs	r1, #0
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fdfa 	bl	800965c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a68:	f000 f882 	bl	8008b70 <xTaskResumeAll>
 8008a6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d107      	bne.n	8008a84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a74:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <vTaskDelay+0x64>)
 8008a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a84:	bf00      	nop
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20000588 	.word	0x20000588
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08a      	sub	sp, #40	; 0x28
 8008a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008aa2:	463a      	mov	r2, r7
 8008aa4:	1d39      	adds	r1, r7, #4
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f7 fb58 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	9202      	str	r2, [sp, #8]
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	2300      	movs	r3, #0
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	460a      	mov	r2, r1
 8008ac2:	491e      	ldr	r1, [pc, #120]	; (8008b3c <vTaskStartScheduler+0xa8>)
 8008ac4:	481e      	ldr	r0, [pc, #120]	; (8008b40 <vTaskStartScheduler+0xac>)
 8008ac6:	f7ff fe26 	bl	8008716 <xTaskCreateStatic>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <vTaskStartScheduler+0xb0>)
 8008ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ad0:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <vTaskStartScheduler+0xb0>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	e001      	b.n	8008ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d116      	bne.n	8008b16 <vTaskStartScheduler+0x82>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	613b      	str	r3, [r7, #16]
}
 8008afa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008afc:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <vTaskStartScheduler+0xb4>)
 8008afe:	f04f 32ff 	mov.w	r2, #4294967295
 8008b02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b04:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <vTaskStartScheduler+0xb8>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008b0a:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <vTaskStartScheduler+0xbc>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b10:	f000 fe8a 	bl	8009828 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b14:	e00e      	b.n	8008b34 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d10a      	bne.n	8008b34 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	60fb      	str	r3, [r7, #12]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <vTaskStartScheduler+0x9e>
}
 8008b34:	bf00      	nop
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	0800b5b4 	.word	0x0800b5b4
 8008b40:	080090ed 	.word	0x080090ed
 8008b44:	20000584 	.word	0x20000584
 8008b48:	20000580 	.word	0x20000580
 8008b4c:	2000056c 	.word	0x2000056c
 8008b50:	20000564 	.word	0x20000564

08008b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b58:	4b04      	ldr	r3, [pc, #16]	; (8008b6c <vTaskSuspendAll+0x18>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	4a03      	ldr	r2, [pc, #12]	; (8008b6c <vTaskSuspendAll+0x18>)
 8008b60:	6013      	str	r3, [r2, #0]
}
 8008b62:	bf00      	nop
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	20000588 	.word	0x20000588

08008b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b7e:	4b41      	ldr	r3, [pc, #260]	; (8008c84 <xTaskResumeAll+0x114>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10a      	bne.n	8008b9c <xTaskResumeAll+0x2c>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	603b      	str	r3, [r7, #0]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b9c:	f000 feb6 	bl	800990c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ba0:	4b38      	ldr	r3, [pc, #224]	; (8008c84 <xTaskResumeAll+0x114>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	4a37      	ldr	r2, [pc, #220]	; (8008c84 <xTaskResumeAll+0x114>)
 8008ba8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008baa:	4b36      	ldr	r3, [pc, #216]	; (8008c84 <xTaskResumeAll+0x114>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d161      	bne.n	8008c76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bb2:	4b35      	ldr	r3, [pc, #212]	; (8008c88 <xTaskResumeAll+0x118>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d05d      	beq.n	8008c76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bba:	e02e      	b.n	8008c1a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008bbc:	4b33      	ldr	r3, [pc, #204]	; (8008c8c <xTaskResumeAll+0x11c>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3318      	adds	r3, #24
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff f978 	bl	8007ebe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff f973 	bl	8007ebe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	2201      	movs	r2, #1
 8008bde:	409a      	lsls	r2, r3
 8008be0:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <xTaskResumeAll+0x120>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	4a2a      	ldr	r2, [pc, #168]	; (8008c90 <xTaskResumeAll+0x120>)
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4a27      	ldr	r2, [pc, #156]	; (8008c94 <xTaskResumeAll+0x124>)
 8008bf8:	441a      	add	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7ff f901 	bl	8007e08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0a:	4b23      	ldr	r3, [pc, #140]	; (8008c98 <xTaskResumeAll+0x128>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d302      	bcc.n	8008c1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008c14:	4b21      	ldr	r3, [pc, #132]	; (8008c9c <xTaskResumeAll+0x12c>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c1a:	4b1c      	ldr	r3, [pc, #112]	; (8008c8c <xTaskResumeAll+0x11c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1cc      	bne.n	8008bbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c28:	f000 fb16 	bl	8009258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <xTaskResumeAll+0x130>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d010      	beq.n	8008c5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c38:	f000 f836 	bl	8008ca8 <xTaskIncrementTick>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008c42:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <xTaskResumeAll+0x12c>)
 8008c44:	2201      	movs	r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1f1      	bne.n	8008c38 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008c54:	4b12      	ldr	r3, [pc, #72]	; (8008ca0 <xTaskResumeAll+0x130>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <xTaskResumeAll+0x12c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d009      	beq.n	8008c76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c62:	2301      	movs	r3, #1
 8008c64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c66:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <xTaskResumeAll+0x134>)
 8008c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c76:	f000 fe79 	bl	800996c <vPortExitCritical>

	return xAlreadyYielded;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	20000588 	.word	0x20000588
 8008c88:	20000560 	.word	0x20000560
 8008c8c:	20000520 	.word	0x20000520
 8008c90:	20000568 	.word	0x20000568
 8008c94:	20000464 	.word	0x20000464
 8008c98:	20000460 	.word	0x20000460
 8008c9c:	20000574 	.word	0x20000574
 8008ca0:	20000570 	.word	0x20000570
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cb2:	4b51      	ldr	r3, [pc, #324]	; (8008df8 <xTaskIncrementTick+0x150>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f040 808d 	bne.w	8008dd6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cbc:	4b4f      	ldr	r3, [pc, #316]	; (8008dfc <xTaskIncrementTick+0x154>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cc4:	4a4d      	ldr	r2, [pc, #308]	; (8008dfc <xTaskIncrementTick+0x154>)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d120      	bne.n	8008d12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cd0:	4b4b      	ldr	r3, [pc, #300]	; (8008e00 <xTaskIncrementTick+0x158>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	603b      	str	r3, [r7, #0]
}
 8008cec:	bf00      	nop
 8008cee:	e7fe      	b.n	8008cee <xTaskIncrementTick+0x46>
 8008cf0:	4b43      	ldr	r3, [pc, #268]	; (8008e00 <xTaskIncrementTick+0x158>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	4b43      	ldr	r3, [pc, #268]	; (8008e04 <xTaskIncrementTick+0x15c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a41      	ldr	r2, [pc, #260]	; (8008e00 <xTaskIncrementTick+0x158>)
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	4a41      	ldr	r2, [pc, #260]	; (8008e04 <xTaskIncrementTick+0x15c>)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	4b40      	ldr	r3, [pc, #256]	; (8008e08 <xTaskIncrementTick+0x160>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	4a3f      	ldr	r2, [pc, #252]	; (8008e08 <xTaskIncrementTick+0x160>)
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	f000 faa3 	bl	8009258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d12:	4b3e      	ldr	r3, [pc, #248]	; (8008e0c <xTaskIncrementTick+0x164>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d34d      	bcc.n	8008db8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d1c:	4b38      	ldr	r3, [pc, #224]	; (8008e00 <xTaskIncrementTick+0x158>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <xTaskIncrementTick+0x82>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e000      	b.n	8008d2c <xTaskIncrementTick+0x84>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d004      	beq.n	8008d3a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d30:	4b36      	ldr	r3, [pc, #216]	; (8008e0c <xTaskIncrementTick+0x164>)
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295
 8008d36:	601a      	str	r2, [r3, #0]
					break;
 8008d38:	e03e      	b.n	8008db8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d3a:	4b31      	ldr	r3, [pc, #196]	; (8008e00 <xTaskIncrementTick+0x158>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d203      	bcs.n	8008d5a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d52:	4a2e      	ldr	r2, [pc, #184]	; (8008e0c <xTaskIncrementTick+0x164>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6013      	str	r3, [r2, #0]
						break;
 8008d58:	e02e      	b.n	8008db8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff f8ad 	bl	8007ebe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d004      	beq.n	8008d76 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff f8a4 	bl	8007ebe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	409a      	lsls	r2, r3
 8008d7e:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <xTaskIncrementTick+0x168>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	4a22      	ldr	r2, [pc, #136]	; (8008e10 <xTaskIncrementTick+0x168>)
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4a1f      	ldr	r2, [pc, #124]	; (8008e14 <xTaskIncrementTick+0x16c>)
 8008d96:	441a      	add	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f7ff f832 	bl	8007e08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da8:	4b1b      	ldr	r3, [pc, #108]	; (8008e18 <xTaskIncrementTick+0x170>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d3b4      	bcc.n	8008d1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008db2:	2301      	movs	r3, #1
 8008db4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008db6:	e7b1      	b.n	8008d1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <xTaskIncrementTick+0x170>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	4915      	ldr	r1, [pc, #84]	; (8008e14 <xTaskIncrementTick+0x16c>)
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d907      	bls.n	8008de0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e004      	b.n	8008de0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008dd6:	4b11      	ldr	r3, [pc, #68]	; (8008e1c <xTaskIncrementTick+0x174>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	4a0f      	ldr	r2, [pc, #60]	; (8008e1c <xTaskIncrementTick+0x174>)
 8008dde:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <xTaskIncrementTick+0x178>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008de8:	2301      	movs	r3, #1
 8008dea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008dec:	697b      	ldr	r3, [r7, #20]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000588 	.word	0x20000588
 8008dfc:	20000564 	.word	0x20000564
 8008e00:	20000518 	.word	0x20000518
 8008e04:	2000051c 	.word	0x2000051c
 8008e08:	20000578 	.word	0x20000578
 8008e0c:	20000580 	.word	0x20000580
 8008e10:	20000568 	.word	0x20000568
 8008e14:	20000464 	.word	0x20000464
 8008e18:	20000460 	.word	0x20000460
 8008e1c:	20000570 	.word	0x20000570
 8008e20:	20000574 	.word	0x20000574

08008e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e2a:	4b26      	ldr	r3, [pc, #152]	; (8008ec4 <vTaskSwitchContext+0xa0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e32:	4b25      	ldr	r3, [pc, #148]	; (8008ec8 <vTaskSwitchContext+0xa4>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e38:	e03f      	b.n	8008eba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008e3a:	4b23      	ldr	r3, [pc, #140]	; (8008ec8 <vTaskSwitchContext+0xa4>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e40:	4b22      	ldr	r3, [pc, #136]	; (8008ecc <vTaskSwitchContext+0xa8>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	fab3 f383 	clz	r3, r3
 8008e4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	f1c3 031f 	rsb	r3, r3, #31
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	491e      	ldr	r1, [pc, #120]	; (8008ed0 <vTaskSwitchContext+0xac>)
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	607b      	str	r3, [r7, #4]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <vTaskSwitchContext+0x5a>
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4a11      	ldr	r2, [pc, #68]	; (8008ed0 <vTaskSwitchContext+0xac>)
 8008e8c:	4413      	add	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d104      	bne.n	8008eb0 <vTaskSwitchContext+0x8c>
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	605a      	str	r2, [r3, #4]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	4a07      	ldr	r2, [pc, #28]	; (8008ed4 <vTaskSwitchContext+0xb0>)
 8008eb8:	6013      	str	r3, [r2, #0]
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	20000588 	.word	0x20000588
 8008ec8:	20000574 	.word	0x20000574
 8008ecc:	20000568 	.word	0x20000568
 8008ed0:	20000464 	.word	0x20000464
 8008ed4:	20000460 	.word	0x20000460

08008ed8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	60fb      	str	r3, [r7, #12]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008efe:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <vTaskPlaceOnEventList+0x44>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3318      	adds	r3, #24
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7fe ffa1 	bl	8007e4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	6838      	ldr	r0, [r7, #0]
 8008f10:	f000 fba4 	bl	800965c <prvAddCurrentTaskToDelayedList>
}
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000460 	.word	0x20000460

08008f20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10a      	bne.n	8008f4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	60fb      	str	r3, [r7, #12]
}
 8008f48:	bf00      	nop
 8008f4a:	e7fe      	b.n	8008f4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3318      	adds	r3, #24
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe ffb4 	bl	8007ebe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f56:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <xTaskRemoveFromEventList+0xac>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d11c      	bne.n	8008f98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	3304      	adds	r3, #4
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe ffab 	bl	8007ebe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	409a      	lsls	r2, r3
 8008f70:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <xTaskRemoveFromEventList+0xb0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <xTaskRemoveFromEventList+0xb0>)
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7e:	4613      	mov	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4a13      	ldr	r2, [pc, #76]	; (8008fd4 <xTaskRemoveFromEventList+0xb4>)
 8008f88:	441a      	add	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7fe ff39 	bl	8007e08 <vListInsertEnd>
 8008f96:	e005      	b.n	8008fa4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	480e      	ldr	r0, [pc, #56]	; (8008fd8 <xTaskRemoveFromEventList+0xb8>)
 8008fa0:	f7fe ff32 	bl	8007e08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <xTaskRemoveFromEventList+0xbc>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d905      	bls.n	8008fbe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fb6:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <xTaskRemoveFromEventList+0xc0>)
 8008fb8:	2201      	movs	r2, #1
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	e001      	b.n	8008fc2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008fc2:	697b      	ldr	r3, [r7, #20]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000588 	.word	0x20000588
 8008fd0:	20000568 	.word	0x20000568
 8008fd4:	20000464 	.word	0x20000464
 8008fd8:	20000520 	.word	0x20000520
 8008fdc:	20000460 	.word	0x20000460
 8008fe0:	20000574 	.word	0x20000574

08008fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <vTaskInternalSetTimeOutState+0x24>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <vTaskInternalSetTimeOutState+0x28>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	605a      	str	r2, [r3, #4]
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	bc80      	pop	{r7}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000578 	.word	0x20000578
 800900c:	20000564 	.word	0x20000564

08009010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	613b      	str	r3, [r7, #16]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	60fb      	str	r3, [r7, #12]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009052:	f000 fc5b 	bl	800990c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009056:	4b1d      	ldr	r3, [pc, #116]	; (80090cc <xTaskCheckForTimeOut+0xbc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906e:	d102      	bne.n	8009076 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009070:	2300      	movs	r3, #0
 8009072:	61fb      	str	r3, [r7, #28]
 8009074:	e023      	b.n	80090be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <xTaskCheckForTimeOut+0xc0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d007      	beq.n	8009092 <xTaskCheckForTimeOut+0x82>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	429a      	cmp	r2, r3
 800908a:	d302      	bcc.n	8009092 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	e015      	b.n	80090be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	429a      	cmp	r2, r3
 800909a:	d20b      	bcs.n	80090b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	1ad2      	subs	r2, r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff ff9b 	bl	8008fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
 80090b2:	e004      	b.n	80090be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090ba:	2301      	movs	r3, #1
 80090bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090be:	f000 fc55 	bl	800996c <vPortExitCritical>

	return xReturn;
 80090c2:	69fb      	ldr	r3, [r7, #28]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20000564 	.word	0x20000564
 80090d0:	20000578 	.word	0x20000578

080090d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090d8:	4b03      	ldr	r3, [pc, #12]	; (80090e8 <vTaskMissedYield+0x14>)
 80090da:	2201      	movs	r2, #1
 80090dc:	601a      	str	r2, [r3, #0]
}
 80090de:	bf00      	nop
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000574 	.word	0x20000574

080090ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090f4:	f000 f852 	bl	800919c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <prvIdleTask+0x28>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d9f9      	bls.n	80090f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <prvIdleTask+0x2c>)
 8009102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009110:	e7f0      	b.n	80090f4 <prvIdleTask+0x8>
 8009112:	bf00      	nop
 8009114:	20000464 	.word	0x20000464
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
 8009126:	e00c      	b.n	8009142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4a12      	ldr	r2, [pc, #72]	; (800917c <prvInitialiseTaskLists+0x60>)
 8009134:	4413      	add	r3, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe fe3b 	bl	8007db2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	3301      	adds	r3, #1
 8009140:	607b      	str	r3, [r7, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b06      	cmp	r3, #6
 8009146:	d9ef      	bls.n	8009128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009148:	480d      	ldr	r0, [pc, #52]	; (8009180 <prvInitialiseTaskLists+0x64>)
 800914a:	f7fe fe32 	bl	8007db2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800914e:	480d      	ldr	r0, [pc, #52]	; (8009184 <prvInitialiseTaskLists+0x68>)
 8009150:	f7fe fe2f 	bl	8007db2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009154:	480c      	ldr	r0, [pc, #48]	; (8009188 <prvInitialiseTaskLists+0x6c>)
 8009156:	f7fe fe2c 	bl	8007db2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800915a:	480c      	ldr	r0, [pc, #48]	; (800918c <prvInitialiseTaskLists+0x70>)
 800915c:	f7fe fe29 	bl	8007db2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009160:	480b      	ldr	r0, [pc, #44]	; (8009190 <prvInitialiseTaskLists+0x74>)
 8009162:	f7fe fe26 	bl	8007db2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <prvInitialiseTaskLists+0x78>)
 8009168:	4a05      	ldr	r2, [pc, #20]	; (8009180 <prvInitialiseTaskLists+0x64>)
 800916a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <prvInitialiseTaskLists+0x7c>)
 800916e:	4a05      	ldr	r2, [pc, #20]	; (8009184 <prvInitialiseTaskLists+0x68>)
 8009170:	601a      	str	r2, [r3, #0]
}
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000464 	.word	0x20000464
 8009180:	200004f0 	.word	0x200004f0
 8009184:	20000504 	.word	0x20000504
 8009188:	20000520 	.word	0x20000520
 800918c:	20000534 	.word	0x20000534
 8009190:	2000054c 	.word	0x2000054c
 8009194:	20000518 	.word	0x20000518
 8009198:	2000051c 	.word	0x2000051c

0800919c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091a2:	e019      	b.n	80091d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091a4:	f000 fbb2 	bl	800990c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80091a8:	4b10      	ldr	r3, [pc, #64]	; (80091ec <prvCheckTasksWaitingTermination+0x50>)
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fe82 	bl	8007ebe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091ba:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <prvCheckTasksWaitingTermination+0x54>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3b01      	subs	r3, #1
 80091c0:	4a0b      	ldr	r2, [pc, #44]	; (80091f0 <prvCheckTasksWaitingTermination+0x54>)
 80091c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091c4:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <prvCheckTasksWaitingTermination+0x58>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	4a0a      	ldr	r2, [pc, #40]	; (80091f4 <prvCheckTasksWaitingTermination+0x58>)
 80091cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091ce:	f000 fbcd 	bl	800996c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f810 	bl	80091f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091d8:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <prvCheckTasksWaitingTermination+0x58>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e1      	bne.n	80091a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20000534 	.word	0x20000534
 80091f0:	20000560 	.word	0x20000560
 80091f4:	20000548 	.word	0x20000548

080091f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009206:	2b00      	cmp	r3, #0
 8009208:	d108      	bne.n	800921c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fd02 	bl	8009c18 <vPortFree>
				vPortFree( pxTCB );
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fcff 	bl	8009c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800921a:	e018      	b.n	800924e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009222:	2b01      	cmp	r3, #1
 8009224:	d103      	bne.n	800922e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fcf6 	bl	8009c18 <vPortFree>
	}
 800922c:	e00f      	b.n	800924e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009234:	2b02      	cmp	r3, #2
 8009236:	d00a      	beq.n	800924e <prvDeleteTCB+0x56>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	60fb      	str	r3, [r7, #12]
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <prvDeleteTCB+0x54>
	}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800925e:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <prvResetNextTaskUnblockTime+0x40>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <prvResetNextTaskUnblockTime+0x14>
 8009268:	2301      	movs	r3, #1
 800926a:	e000      	b.n	800926e <prvResetNextTaskUnblockTime+0x16>
 800926c:	2300      	movs	r3, #0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <prvResetNextTaskUnblockTime+0x44>)
 8009274:	f04f 32ff 	mov.w	r2, #4294967295
 8009278:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800927a:	e008      	b.n	800928e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <prvResetNextTaskUnblockTime+0x40>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	4a04      	ldr	r2, [pc, #16]	; (800929c <prvResetNextTaskUnblockTime+0x44>)
 800928c:	6013      	str	r3, [r2, #0]
}
 800928e:	bf00      	nop
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	bc80      	pop	{r7}
 8009296:	4770      	bx	lr
 8009298:	20000518 	.word	0x20000518
 800929c:	20000580 	.word	0x20000580

080092a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <xTaskGetSchedulerState+0x34>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d102      	bne.n	80092b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092ae:	2301      	movs	r3, #1
 80092b0:	607b      	str	r3, [r7, #4]
 80092b2:	e008      	b.n	80092c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092b4:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <xTaskGetSchedulerState+0x38>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092bc:	2302      	movs	r3, #2
 80092be:	607b      	str	r3, [r7, #4]
 80092c0:	e001      	b.n	80092c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092c2:	2300      	movs	r3, #0
 80092c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092c6:	687b      	ldr	r3, [r7, #4]
	}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	2000056c 	.word	0x2000056c
 80092d8:	20000588 	.word	0x20000588

080092dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d06e      	beq.n	80093d0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	4b39      	ldr	r3, [pc, #228]	; (80093dc <xTaskPriorityInherit+0x100>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d25e      	bcs.n	80093be <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	db06      	blt.n	8009316 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009308:	4b34      	ldr	r3, [pc, #208]	; (80093dc <xTaskPriorityInherit+0x100>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	f1c3 0207 	rsb	r2, r3, #7
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6959      	ldr	r1, [r3, #20]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4a2e      	ldr	r2, [pc, #184]	; (80093e0 <xTaskPriorityInherit+0x104>)
 8009328:	4413      	add	r3, r2
 800932a:	4299      	cmp	r1, r3
 800932c:	d101      	bne.n	8009332 <xTaskPriorityInherit+0x56>
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <xTaskPriorityInherit+0x58>
 8009332:	2300      	movs	r3, #0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d03a      	beq.n	80093ae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	3304      	adds	r3, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fdbe 	bl	8007ebe <uxListRemove>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d115      	bne.n	8009374 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934c:	4924      	ldr	r1, [pc, #144]	; (80093e0 <xTaskPriorityInherit+0x104>)
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <xTaskPriorityInherit+0x98>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	2201      	movs	r2, #1
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	43da      	mvns	r2, r3
 800936a:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <xTaskPriorityInherit+0x108>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4013      	ands	r3, r2
 8009370:	4a1c      	ldr	r2, [pc, #112]	; (80093e4 <xTaskPriorityInherit+0x108>)
 8009372:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009374:	4b19      	ldr	r3, [pc, #100]	; (80093dc <xTaskPriorityInherit+0x100>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	2201      	movs	r2, #1
 8009384:	409a      	lsls	r2, r3
 8009386:	4b17      	ldr	r3, [pc, #92]	; (80093e4 <xTaskPriorityInherit+0x108>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4313      	orrs	r3, r2
 800938c:	4a15      	ldr	r2, [pc, #84]	; (80093e4 <xTaskPriorityInherit+0x108>)
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4a10      	ldr	r2, [pc, #64]	; (80093e0 <xTaskPriorityInherit+0x104>)
 800939e:	441a      	add	r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3304      	adds	r3, #4
 80093a4:	4619      	mov	r1, r3
 80093a6:	4610      	mov	r0, r2
 80093a8:	f7fe fd2e 	bl	8007e08 <vListInsertEnd>
 80093ac:	e004      	b.n	80093b8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <xTaskPriorityInherit+0x100>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093b8:	2301      	movs	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e008      	b.n	80093d0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <xTaskPriorityInherit+0x100>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d201      	bcs.n	80093d0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80093cc:	2301      	movs	r3, #1
 80093ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093d0:	68fb      	ldr	r3, [r7, #12]
	}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000460 	.word	0x20000460
 80093e0:	20000464 	.word	0x20000464
 80093e4:	20000568 	.word	0x20000568

080093e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093f4:	2300      	movs	r3, #0
 80093f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d06e      	beq.n	80094dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093fe:	4b3a      	ldr	r3, [pc, #232]	; (80094e8 <xTaskPriorityDisinherit+0x100>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	429a      	cmp	r2, r3
 8009406:	d00a      	beq.n	800941e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	60fb      	str	r3, [r7, #12]
}
 800941a:	bf00      	nop
 800941c:	e7fe      	b.n	800941c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10a      	bne.n	800943c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	60bb      	str	r3, [r7, #8]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009440:	1e5a      	subs	r2, r3, #1
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944e:	429a      	cmp	r2, r3
 8009450:	d044      	beq.n	80094dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009456:	2b00      	cmp	r3, #0
 8009458:	d140      	bne.n	80094dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3304      	adds	r3, #4
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe fd2d 	bl	8007ebe <uxListRemove>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d115      	bne.n	8009496 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946e:	491f      	ldr	r1, [pc, #124]	; (80094ec <xTaskPriorityDisinherit+0x104>)
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <xTaskPriorityDisinherit+0xae>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009484:	2201      	movs	r2, #1
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	43da      	mvns	r2, r3
 800948c:	4b18      	ldr	r3, [pc, #96]	; (80094f0 <xTaskPriorityDisinherit+0x108>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4013      	ands	r3, r2
 8009492:	4a17      	ldr	r2, [pc, #92]	; (80094f0 <xTaskPriorityDisinherit+0x108>)
 8009494:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a2:	f1c3 0207 	rsb	r2, r3, #7
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	2201      	movs	r2, #1
 80094b0:	409a      	lsls	r2, r3
 80094b2:	4b0f      	ldr	r3, [pc, #60]	; (80094f0 <xTaskPriorityDisinherit+0x108>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	4a0d      	ldr	r2, [pc, #52]	; (80094f0 <xTaskPriorityDisinherit+0x108>)
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4a08      	ldr	r2, [pc, #32]	; (80094ec <xTaskPriorityDisinherit+0x104>)
 80094ca:	441a      	add	r2, r3
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f7fe fc98 	bl	8007e08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094d8:	2301      	movs	r3, #1
 80094da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094dc:	697b      	ldr	r3, [r7, #20]
	}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000460 	.word	0x20000460
 80094ec:	20000464 	.word	0x20000464
 80094f0:	20000568 	.word	0x20000568

080094f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009502:	2301      	movs	r3, #1
 8009504:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8088 	beq.w	800961e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	60fb      	str	r3, [r7, #12]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d902      	bls.n	800953c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	e002      	b.n	8009542 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009540:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	429a      	cmp	r2, r3
 800954a:	d068      	beq.n	800961e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	429a      	cmp	r2, r3
 8009554:	d163      	bne.n	800961e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009556:	4b34      	ldr	r3, [pc, #208]	; (8009628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	429a      	cmp	r2, r3
 800955e:	d10a      	bne.n	8009576 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	60bb      	str	r3, [r7, #8]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	69fa      	ldr	r2, [r7, #28]
 8009580:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	db04      	blt.n	8009594 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f1c3 0207 	rsb	r2, r3, #7
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	6959      	ldr	r1, [r3, #20]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4a22      	ldr	r2, [pc, #136]	; (800962c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80095a4:	4413      	add	r3, r2
 80095a6:	4299      	cmp	r1, r3
 80095a8:	d101      	bne.n	80095ae <vTaskPriorityDisinheritAfterTimeout+0xba>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80095ae:	2300      	movs	r3, #0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d034      	beq.n	800961e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fc80 	bl	8007ebe <uxListRemove>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d115      	bne.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4918      	ldr	r1, [pc, #96]	; (800962c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10a      	bne.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095de:	2201      	movs	r2, #1
 80095e0:	fa02 f303 	lsl.w	r3, r2, r3
 80095e4:	43da      	mvns	r2, r3
 80095e6:	4b12      	ldr	r3, [pc, #72]	; (8009630 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4013      	ands	r3, r2
 80095ec:	4a10      	ldr	r2, [pc, #64]	; (8009630 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095ee:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	2201      	movs	r2, #1
 80095f6:	409a      	lsls	r2, r3
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	4a0c      	ldr	r2, [pc, #48]	; (8009630 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4a07      	ldr	r2, [pc, #28]	; (800962c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009610:	441a      	add	r2, r3
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	3304      	adds	r3, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fe fbf5 	bl	8007e08 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800961e:	bf00      	nop
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000460 	.word	0x20000460
 800962c:	20000464 	.word	0x20000464
 8009630:	20000568 	.word	0x20000568

08009634 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009638:	4b07      	ldr	r3, [pc, #28]	; (8009658 <pvTaskIncrementMutexHeldCount+0x24>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d004      	beq.n	800964a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009640:	4b05      	ldr	r3, [pc, #20]	; (8009658 <pvTaskIncrementMutexHeldCount+0x24>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009646:	3201      	adds	r2, #1
 8009648:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800964a:	4b03      	ldr	r3, [pc, #12]	; (8009658 <pvTaskIncrementMutexHeldCount+0x24>)
 800964c:	681b      	ldr	r3, [r3, #0]
	}
 800964e:	4618      	mov	r0, r3
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	20000460 	.word	0x20000460

0800965c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009666:	4b29      	ldr	r3, [pc, #164]	; (800970c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800966c:	4b28      	ldr	r3, [pc, #160]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3304      	adds	r3, #4
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fc23 	bl	8007ebe <uxListRemove>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10b      	bne.n	8009696 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800967e:	4b24      	ldr	r3, [pc, #144]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	2201      	movs	r2, #1
 8009686:	fa02 f303 	lsl.w	r3, r2, r3
 800968a:	43da      	mvns	r2, r3
 800968c:	4b21      	ldr	r3, [pc, #132]	; (8009714 <prvAddCurrentTaskToDelayedList+0xb8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4013      	ands	r3, r2
 8009692:	4a20      	ldr	r2, [pc, #128]	; (8009714 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009694:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969c:	d10a      	bne.n	80096b4 <prvAddCurrentTaskToDelayedList+0x58>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d007      	beq.n	80096b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096a4:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4619      	mov	r1, r3
 80096ac:	481a      	ldr	r0, [pc, #104]	; (8009718 <prvAddCurrentTaskToDelayedList+0xbc>)
 80096ae:	f7fe fbab 	bl	8007e08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096b2:	e026      	b.n	8009702 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096bc:	4b14      	ldr	r3, [pc, #80]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d209      	bcs.n	80096e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096cc:	4b13      	ldr	r3, [pc, #76]	; (800971c <prvAddCurrentTaskToDelayedList+0xc0>)
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4619      	mov	r1, r3
 80096d8:	4610      	mov	r0, r2
 80096da:	f7fe fbb8 	bl	8007e4e <vListInsert>
}
 80096de:	e010      	b.n	8009702 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096e0:	4b0f      	ldr	r3, [pc, #60]	; (8009720 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7fe fbae 	bl	8007e4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096f2:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d202      	bcs.n	8009702 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096fc:	4a09      	ldr	r2, [pc, #36]	; (8009724 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	6013      	str	r3, [r2, #0]
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000564 	.word	0x20000564
 8009710:	20000460 	.word	0x20000460
 8009714:	20000568 	.word	0x20000568
 8009718:	2000054c 	.word	0x2000054c
 800971c:	2000051c 	.word	0x2000051c
 8009720:	20000518 	.word	0x20000518
 8009724:	20000580 	.word	0x20000580

08009728 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3b04      	subs	r3, #4
 8009738:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3b04      	subs	r3, #4
 8009746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f023 0201 	bic.w	r2, r3, #1
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3b04      	subs	r3, #4
 8009756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009758:	4a08      	ldr	r2, [pc, #32]	; (800977c <pxPortInitialiseStack+0x54>)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3b14      	subs	r3, #20
 8009762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3b20      	subs	r3, #32
 800976e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009770:	68fb      	ldr	r3, [r7, #12]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	bc80      	pop	{r7}
 800977a:	4770      	bx	lr
 800977c:	08009781 	.word	0x08009781

08009780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009786:	2300      	movs	r3, #0
 8009788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800978a:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <prvTaskExitError+0x54>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009792:	d00a      	beq.n	80097aa <prvTaskExitError+0x2a>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	60fb      	str	r3, [r7, #12]
}
 80097a6:	bf00      	nop
 80097a8:	e7fe      	b.n	80097a8 <prvTaskExitError+0x28>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	60bb      	str	r3, [r7, #8]
}
 80097bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097be:	bf00      	nop
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0fc      	beq.n	80097c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	2000011c 	.word	0x2000011c
	...

080097e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <pxCurrentTCBConst2>)
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	6808      	ldr	r0, [r1, #0]
 80097e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097ea:	f380 8809 	msr	PSP, r0
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8811 	msr	BASEPRI, r0
 80097fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80097fe:	4770      	bx	lr

08009800 <pxCurrentTCBConst2>:
 8009800:	20000460 	.word	0x20000460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009808:	4806      	ldr	r0, [pc, #24]	; (8009824 <prvPortStartFirstTask+0x1c>)
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f380 8808 	msr	MSP, r0
 8009812:	b662      	cpsie	i
 8009814:	b661      	cpsie	f
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	df00      	svc	0
 8009820:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009822:	bf00      	nop
 8009824:	e000ed08 	.word	0xe000ed08

08009828 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800982e:	4b32      	ldr	r3, [pc, #200]	; (80098f8 <xPortStartScheduler+0xd0>)
 8009830:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	22ff      	movs	r2, #255	; 0xff
 800983e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009850:	b2da      	uxtb	r2, r3
 8009852:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <xPortStartScheduler+0xd4>)
 8009854:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009856:	4b2a      	ldr	r3, [pc, #168]	; (8009900 <xPortStartScheduler+0xd8>)
 8009858:	2207      	movs	r2, #7
 800985a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800985c:	e009      	b.n	8009872 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800985e:	4b28      	ldr	r3, [pc, #160]	; (8009900 <xPortStartScheduler+0xd8>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3b01      	subs	r3, #1
 8009864:	4a26      	ldr	r2, [pc, #152]	; (8009900 <xPortStartScheduler+0xd8>)
 8009866:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	b2db      	uxtb	r3, r3
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	b2db      	uxtb	r3, r3
 8009870:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009872:	78fb      	ldrb	r3, [r7, #3]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987a:	2b80      	cmp	r3, #128	; 0x80
 800987c:	d0ef      	beq.n	800985e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800987e:	4b20      	ldr	r3, [pc, #128]	; (8009900 <xPortStartScheduler+0xd8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f1c3 0307 	rsb	r3, r3, #7
 8009886:	2b04      	cmp	r3, #4
 8009888:	d00a      	beq.n	80098a0 <xPortStartScheduler+0x78>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	60bb      	str	r3, [r7, #8]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098a0:	4b17      	ldr	r3, [pc, #92]	; (8009900 <xPortStartScheduler+0xd8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	4a16      	ldr	r2, [pc, #88]	; (8009900 <xPortStartScheduler+0xd8>)
 80098a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098aa:	4b15      	ldr	r3, [pc, #84]	; (8009900 <xPortStartScheduler+0xd8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098b2:	4a13      	ldr	r2, [pc, #76]	; (8009900 <xPortStartScheduler+0xd8>)
 80098b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098be:	4b11      	ldr	r3, [pc, #68]	; (8009904 <xPortStartScheduler+0xdc>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a10      	ldr	r2, [pc, #64]	; (8009904 <xPortStartScheduler+0xdc>)
 80098c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098ca:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <xPortStartScheduler+0xdc>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a0d      	ldr	r2, [pc, #52]	; (8009904 <xPortStartScheduler+0xdc>)
 80098d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098d6:	f000 f8b9 	bl	8009a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098da:	4b0b      	ldr	r3, [pc, #44]	; (8009908 <xPortStartScheduler+0xe0>)
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098e0:	f7ff ff92 	bl	8009808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098e4:	f7ff fa9e 	bl	8008e24 <vTaskSwitchContext>
	prvTaskExitError();
 80098e8:	f7ff ff4a 	bl	8009780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	e000e400 	.word	0xe000e400
 80098fc:	2000058c 	.word	0x2000058c
 8009900:	20000590 	.word	0x20000590
 8009904:	e000ed20 	.word	0xe000ed20
 8009908:	2000011c 	.word	0x2000011c

0800990c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	607b      	str	r3, [r7, #4]
}
 8009924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009926:	4b0f      	ldr	r3, [pc, #60]	; (8009964 <vPortEnterCritical+0x58>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	4a0d      	ldr	r2, [pc, #52]	; (8009964 <vPortEnterCritical+0x58>)
 800992e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009930:	4b0c      	ldr	r3, [pc, #48]	; (8009964 <vPortEnterCritical+0x58>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d10f      	bne.n	8009958 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009938:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <vPortEnterCritical+0x5c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00a      	beq.n	8009958 <vPortEnterCritical+0x4c>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	603b      	str	r3, [r7, #0]
}
 8009954:	bf00      	nop
 8009956:	e7fe      	b.n	8009956 <vPortEnterCritical+0x4a>
	}
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	2000011c 	.word	0x2000011c
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009972:	4b11      	ldr	r3, [pc, #68]	; (80099b8 <vPortExitCritical+0x4c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10a      	bne.n	8009990 <vPortExitCritical+0x24>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	607b      	str	r3, [r7, #4]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009990:	4b09      	ldr	r3, [pc, #36]	; (80099b8 <vPortExitCritical+0x4c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3b01      	subs	r3, #1
 8009996:	4a08      	ldr	r2, [pc, #32]	; (80099b8 <vPortExitCritical+0x4c>)
 8009998:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <vPortExitCritical+0x4c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <vPortExitCritical+0x42>
 80099a2:	2300      	movs	r3, #0
 80099a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099ae:	bf00      	nop
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr
 80099b8:	2000011c 	.word	0x2000011c
 80099bc:	00000000 	.word	0x00000000

080099c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099c0:	f3ef 8009 	mrs	r0, PSP
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <pxCurrentTCBConst>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099d0:	6010      	str	r0, [r2, #0]
 80099d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80099d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099da:	f380 8811 	msr	BASEPRI, r0
 80099de:	f7ff fa21 	bl	8008e24 <vTaskSwitchContext>
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8811 	msr	BASEPRI, r0
 80099ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80099ee:	6819      	ldr	r1, [r3, #0]
 80099f0:	6808      	ldr	r0, [r1, #0]
 80099f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099f6:	f380 8809 	msr	PSP, r0
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	4770      	bx	lr

08009a00 <pxCurrentTCBConst>:
 8009a00:	20000460 	.word	0x20000460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop

08009a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	607b      	str	r3, [r7, #4]
}
 8009a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a22:	f7ff f941 	bl	8008ca8 <xTaskIncrementTick>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a2c:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <SysTick_Handler+0x40>)
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	2300      	movs	r3, #0
 8009a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	f383 8811 	msr	BASEPRI, r3
}
 8009a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	e000ed04 	.word	0xe000ed04

08009a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a50:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <vPortSetupTimerInterrupt+0x30>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a56:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <vPortSetupTimerInterrupt+0x34>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a5c:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <vPortSetupTimerInterrupt+0x38>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a09      	ldr	r2, [pc, #36]	; (8009a88 <vPortSetupTimerInterrupt+0x3c>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	099b      	lsrs	r3, r3, #6
 8009a68:	4a08      	ldr	r2, [pc, #32]	; (8009a8c <vPortSetupTimerInterrupt+0x40>)
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a6e:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <vPortSetupTimerInterrupt+0x30>)
 8009a70:	2207      	movs	r2, #7
 8009a72:	601a      	str	r2, [r3, #0]
}
 8009a74:	bf00      	nop
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr
 8009a7c:	e000e010 	.word	0xe000e010
 8009a80:	e000e018 	.word	0xe000e018
 8009a84:	20000000 	.word	0x20000000
 8009a88:	10624dd3 	.word	0x10624dd3
 8009a8c:	e000e014 	.word	0xe000e014

08009a90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a9c:	f7ff f85a 	bl	8008b54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009aa0:	4b58      	ldr	r3, [pc, #352]	; (8009c04 <pvPortMalloc+0x174>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009aa8:	f000 f910 	bl	8009ccc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009aac:	4b56      	ldr	r3, [pc, #344]	; (8009c08 <pvPortMalloc+0x178>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 808e 	bne.w	8009bd6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01d      	beq.n	8009afc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d014      	beq.n	8009afc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f023 0307 	bic.w	r3, r3, #7
 8009ad8:	3308      	adds	r3, #8
 8009ada:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <pvPortMalloc+0x6c>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	617b      	str	r3, [r7, #20]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d069      	beq.n	8009bd6 <pvPortMalloc+0x146>
 8009b02:	4b42      	ldr	r3, [pc, #264]	; (8009c0c <pvPortMalloc+0x17c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d864      	bhi.n	8009bd6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b0c:	4b40      	ldr	r3, [pc, #256]	; (8009c10 <pvPortMalloc+0x180>)
 8009b0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b10:	4b3f      	ldr	r3, [pc, #252]	; (8009c10 <pvPortMalloc+0x180>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b16:	e004      	b.n	8009b22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d903      	bls.n	8009b34 <pvPortMalloc+0xa4>
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f1      	bne.n	8009b18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b34:	4b33      	ldr	r3, [pc, #204]	; (8009c04 <pvPortMalloc+0x174>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d04b      	beq.n	8009bd6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2208      	movs	r2, #8
 8009b44:	4413      	add	r3, r2
 8009b46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	2308      	movs	r3, #8
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d91f      	bls.n	8009ba0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4413      	add	r3, r2
 8009b66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	f003 0307 	and.w	r3, r3, #7
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <pvPortMalloc+0xf8>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	613b      	str	r3, [r7, #16]
}
 8009b84:	bf00      	nop
 8009b86:	e7fe      	b.n	8009b86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b9a:	69b8      	ldr	r0, [r7, #24]
 8009b9c:	f000 f8f8 	bl	8009d90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ba0:	4b1a      	ldr	r3, [pc, #104]	; (8009c0c <pvPortMalloc+0x17c>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <pvPortMalloc+0x17c>)
 8009bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bae:	4b17      	ldr	r3, [pc, #92]	; (8009c0c <pvPortMalloc+0x17c>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b18      	ldr	r3, [pc, #96]	; (8009c14 <pvPortMalloc+0x184>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d203      	bcs.n	8009bc2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bba:	4b14      	ldr	r3, [pc, #80]	; (8009c0c <pvPortMalloc+0x17c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a15      	ldr	r2, [pc, #84]	; (8009c14 <pvPortMalloc+0x184>)
 8009bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <pvPortMalloc+0x178>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bd6:	f7fe ffcb 	bl	8008b70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00a      	beq.n	8009bfa <pvPortMalloc+0x16a>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <pvPortMalloc+0x168>
	return pvReturn;
 8009bfa:	69fb      	ldr	r3, [r7, #28]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3728      	adds	r7, #40	; 0x28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	2000196c 	.word	0x2000196c
 8009c08:	20001978 	.word	0x20001978
 8009c0c:	20001970 	.word	0x20001970
 8009c10:	20001964 	.word	0x20001964
 8009c14:	20001974 	.word	0x20001974

08009c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d048      	beq.n	8009cbc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	425b      	negs	r3, r3
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	4413      	add	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	4b21      	ldr	r3, [pc, #132]	; (8009cc4 <vPortFree+0xac>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4013      	ands	r3, r2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <vPortFree+0x44>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	60fb      	str	r3, [r7, #12]
}
 8009c58:	bf00      	nop
 8009c5a:	e7fe      	b.n	8009c5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00a      	beq.n	8009c7a <vPortFree+0x62>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	60bb      	str	r3, [r7, #8]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <vPortFree+0xac>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4013      	ands	r3, r2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d019      	beq.n	8009cbc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d115      	bne.n	8009cbc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	4b0b      	ldr	r3, [pc, #44]	; (8009cc4 <vPortFree+0xac>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	43db      	mvns	r3, r3
 8009c9a:	401a      	ands	r2, r3
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ca0:	f7fe ff58 	bl	8008b54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	4b07      	ldr	r3, [pc, #28]	; (8009cc8 <vPortFree+0xb0>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4413      	add	r3, r2
 8009cae:	4a06      	ldr	r2, [pc, #24]	; (8009cc8 <vPortFree+0xb0>)
 8009cb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cb2:	6938      	ldr	r0, [r7, #16]
 8009cb4:	f000 f86c 	bl	8009d90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009cb8:	f7fe ff5a 	bl	8008b70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cbc:	bf00      	nop
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20001978 	.word	0x20001978
 8009cc8:	20001970 	.word	0x20001970

08009ccc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cd2:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009cd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cd8:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <prvHeapInit+0xac>)
 8009cda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00c      	beq.n	8009d00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3307      	adds	r3, #7
 8009cea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 0307 	bic.w	r3, r3, #7
 8009cf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	4a1f      	ldr	r2, [pc, #124]	; (8009d78 <prvHeapInit+0xac>)
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <prvHeapInit+0xb0>)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d0a:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <prvHeapInit+0xb0>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	4413      	add	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d18:	2208      	movs	r2, #8
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	1a9b      	subs	r3, r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0307 	bic.w	r3, r3, #7
 8009d26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4a15      	ldr	r2, [pc, #84]	; (8009d80 <prvHeapInit+0xb4>)
 8009d2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d2e:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <prvHeapInit+0xb4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2200      	movs	r2, #0
 8009d34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d36:	4b12      	ldr	r3, [pc, #72]	; (8009d80 <prvHeapInit+0xb4>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d4c:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <prvHeapInit+0xb4>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	4a0a      	ldr	r2, [pc, #40]	; (8009d84 <prvHeapInit+0xb8>)
 8009d5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	4a09      	ldr	r2, [pc, #36]	; (8009d88 <prvHeapInit+0xbc>)
 8009d62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d64:	4b09      	ldr	r3, [pc, #36]	; (8009d8c <prvHeapInit+0xc0>)
 8009d66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d6a:	601a      	str	r2, [r3, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20000594 	.word	0x20000594
 8009d7c:	20001964 	.word	0x20001964
 8009d80:	2000196c 	.word	0x2000196c
 8009d84:	20001974 	.word	0x20001974
 8009d88:	20001970 	.word	0x20001970
 8009d8c:	20001978 	.word	0x20001978

08009d90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d98:	4b27      	ldr	r3, [pc, #156]	; (8009e38 <prvInsertBlockIntoFreeList+0xa8>)
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	e002      	b.n	8009da4 <prvInsertBlockIntoFreeList+0x14>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d8f7      	bhi.n	8009d9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4413      	add	r3, r2
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d108      	bne.n	8009dd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	441a      	add	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	441a      	add	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d118      	bne.n	8009e18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <prvInsertBlockIntoFreeList+0xac>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d00d      	beq.n	8009e0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	441a      	add	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	e008      	b.n	8009e20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <prvInsertBlockIntoFreeList+0xac>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	e003      	b.n	8009e20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d002      	beq.n	8009e2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr
 8009e38:	20001964 	.word	0x20001964
 8009e3c:	2000196c 	.word	0x2000196c

08009e40 <Servo_Init>:
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Init(Servo_Handle_t* servo,TIM_HandleTypeDef* ptim)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
	servo->ptim = ptim;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	601a      	str	r2, [r3, #0]
	servo->curr_pos = 0;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	711a      	strb	r2, [r3, #4]
	servo->Status = OFF;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	715a      	strb	r2, [r3, #5]
	Servo_Goto(servo, 0);
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f804 	bl	8009e6c <Servo_Goto>


}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <Servo_Goto>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Goto(Servo_Handle_t* servo,uint8_t angle){
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
		uint16_t Period = servo->ptim->Init.Period;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	81fb      	strh	r3, [r7, #14]
		uint16_t duty = angle *( ( (Period / 10) - OFFSET) / MAX_ANGLE )+ OFFSET;
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	89fb      	ldrh	r3, [r7, #14]
 8009e86:	4911      	ldr	r1, [pc, #68]	; (8009ecc <Servo_Goto+0x60>)
 8009e88:	fba1 1303 	umull	r1, r3, r1, r3
 8009e8c:	08db      	lsrs	r3, r3, #3
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	3bfa      	subs	r3, #250	; 0xfa
 8009e92:	490f      	ldr	r1, [pc, #60]	; (8009ed0 <Servo_Goto+0x64>)
 8009e94:	fb81 0103 	smull	r0, r1, r1, r3
 8009e98:	4419      	add	r1, r3
 8009e9a:	11c9      	asrs	r1, r1, #7
 8009e9c:	17db      	asrs	r3, r3, #31
 8009e9e:	1acb      	subs	r3, r1, r3
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	fb03 f302 	mul.w	r3, r3, r2
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	33fa      	adds	r3, #250	; 0xfa
 8009eaa:	81bb      	strh	r3, [r7, #12]
		servo->curr_pos = angle;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	78fa      	ldrb	r2, [r7, #3]
 8009eb0:	711a      	strb	r2, [r3, #4]
		Servo_Start(servo);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f80e 	bl	8009ed4 <Servo_Start>
		__HAL_TIM_SET_COMPARE(servo->ptim,TIM_CHANNEL_1,duty);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	89ba      	ldrh	r2, [r7, #12]
 8009ec0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	cccccccd 	.word	0xcccccccd
 8009ed0:	b60b60b7 	.word	0xb60b60b7

08009ed4 <Servo_Start>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Start(Servo_Handle_t* servo){
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	if(servo->Status == OFF ){
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	795b      	ldrb	r3, [r3, #5]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d108      	bne.n	8009ef6 <Servo_Start+0x22>
		HAL_TIM_PWM_Start(servo->ptim, TIM_CHANNEL_1);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f9 fbd2 	bl	8003694 <HAL_TIM_PWM_Start>
		servo->Status = ON;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	715a      	strb	r2, [r3, #5]
	}
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <Com_Init>:
 * @fn					- Com_Init
 *
 * @Note				- Init the Com Stack
 *
 **************************************************************************/
void Com_Init(){
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
	Buf_Init(&Com_TXstorage) ;
 8009f04:	4807      	ldr	r0, [pc, #28]	; (8009f24 <Com_Init+0x24>)
 8009f06:	f000 f8bf 	bl	800a088 <Buf_Init>
	Buf_Init(&Com_RXstorage) ;
 8009f0a:	4807      	ldr	r0, [pc, #28]	; (8009f28 <Com_Init+0x28>)
 8009f0c:	f000 f8bc 	bl	800a088 <Buf_Init>
	memset(buffer,'\0',64);
 8009f10:	2240      	movs	r2, #64	; 0x40
 8009f12:	2100      	movs	r1, #0
 8009f14:	4805      	ldr	r0, [pc, #20]	; (8009f2c <Com_Init+0x2c>)
 8009f16:	f000 fecb 	bl	800acb0 <memset>
	MX_USB_DEVICE_Init();
 8009f1a:	f000 f9d9 	bl	800a2d0 <MX_USB_DEVICE_Init>
}
 8009f1e:	bf00      	nop
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20001c3c 	.word	0x20001c3c
 8009f28:	20001ed8 	.word	0x20001ed8
 8009f2c:	2000274c 	.word	0x2000274c

08009f30 <Com_Transmit>:
 * @fn					- Com_Transmit
 *
 * @Note				- Transmit Message
 *
 **************************************************************************/
void Com_Transmit(){
 8009f30:	b590      	push	{r4, r7, lr}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	607b      	str	r3, [r7, #4]

	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 8009f3a:	e014      	b.n	8009f66 <Com_Transmit+0x36>
		ptr = Buf_Dequeue(&Com_TXstorage);
 8009f3c:	480f      	ldr	r0, [pc, #60]	; (8009f7c <Com_Transmit+0x4c>)
 8009f3e:	f000 f92f 	bl	800a1a0 <Buf_Dequeue>
 8009f42:	6078      	str	r0, [r7, #4]
		while(CDC_Transmit_FS((uint8_t*) ptr->data, strlen(ptr->data)+1) == USBD_BUSY);
 8009f44:	bf00      	nop
 8009f46:	687c      	ldr	r4, [r7, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7f6 f900 	bl	8000150 <strlen>
 8009f50:	4603      	mov	r3, r0
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3301      	adds	r3, #1
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fa92 	bl	800a484 <CDC_Transmit_FS>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d0ef      	beq.n	8009f46 <Com_Transmit+0x16>
	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 8009f66:	4805      	ldr	r0, [pc, #20]	; (8009f7c <Com_Transmit+0x4c>)
 8009f68:	f000 f9a0 	bl	800a2ac <Buf_IsEmpty>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e4      	bne.n	8009f3c <Com_Transmit+0xc>
	}
}
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd90      	pop	{r4, r7, pc}
 8009f7c:	20001c3c 	.word	0x20001c3c

08009f80 <Com_Queue_msg>:
 * @fn					- Com_Queue_msg
 *
 * @Note				- store the message to the TX buffer
 *
 **************************************************************************/
HAL_StatusTypeDef Com_Queue_msg(Data_t * msg){
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]

	if (HAL_OK == Buf_Queue(&Com_TXstorage, msg))
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4806      	ldr	r0, [pc, #24]	; (8009fa4 <Com_Queue_msg+0x24>)
 8009f8c:	f000 f8ac 	bl	800a0e8 <Buf_Queue>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <Com_Queue_msg+0x1a>
		return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <Com_Queue_msg+0x1c>
	else
		return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20001c3c 	.word	0x20001c3c

08009fa8 <Com_Receive>:
 * @fn					- Com_Receive
 *
 * @Note				- Store message received in the RXbuffer
 *
 **************************************************************************/
void Com_Receive(){
 8009fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009faa:	b093      	sub	sp, #76	; 0x4c
 8009fac:	af00      	add	r7, sp, #0
	Data_t ptr;

	if (Buf_IsFull(&Com_RXstorage) != BUF_FULL && flag_data_received == 1 ){
 8009fae:	4818      	ldr	r0, [pc, #96]	; (800a010 <Com_Receive+0x68>)
 8009fb0:	f000 f95a 	bl	800a268 <Buf_IsFull>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d026      	beq.n	800a008 <Com_Receive+0x60>
 8009fba:	4b16      	ldr	r3, [pc, #88]	; (800a014 <Com_Receive+0x6c>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d122      	bne.n	800a008 <Com_Receive+0x60>
		memcpy(ptr.data,buffer,MAX_SIZE_MESSAGE);
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <Com_Receive+0x70>)
 8009fc4:	461c      	mov	r4, r3
 8009fc6:	1d3e      	adds	r6, r7, #4
 8009fc8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8009fcc:	4635      	mov	r5, r6
 8009fce:	4623      	mov	r3, r4
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	6859      	ldr	r1, [r3, #4]
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fda:	3410      	adds	r4, #16
 8009fdc:	3610      	adds	r6, #16
 8009fde:	4564      	cmp	r4, ip
 8009fe0:	d1f4      	bne.n	8009fcc <Com_Receive+0x24>
		flag_data_received = 0;
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <Com_Receive+0x6c>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	701a      	strb	r2, [r3, #0]
		if (HAL_ERROR == Buf_Queue(&Com_RXstorage,&ptr))
 8009fe8:	1d3b      	adds	r3, r7, #4
 8009fea:	4619      	mov	r1, r3
 8009fec:	4808      	ldr	r0, [pc, #32]	; (800a010 <Com_Receive+0x68>)
 8009fee:	f000 f87b 	bl	800a0e8 <Buf_Queue>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d107      	bne.n	800a008 <Com_Receive+0x60>
			while(CDC_Transmit_FS((uint8_t*) "nok\n", 4) == USBD_BUSY);
 8009ff8:	bf00      	nop
 8009ffa:	2104      	movs	r1, #4
 8009ffc:	4807      	ldr	r0, [pc, #28]	; (800a01c <Com_Receive+0x74>)
 8009ffe:	f000 fa41 	bl	800a484 <CDC_Transmit_FS>
 800a002:	4603      	mov	r3, r0
 800a004:	2b01      	cmp	r3, #1
 800a006:	d0f8      	beq.n	8009ffa <Com_Receive+0x52>
	}

}
 800a008:	bf00      	nop
 800a00a:	374c      	adds	r7, #76	; 0x4c
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a010:	20001ed8 	.word	0x20001ed8
 800a014:	2000197c 	.word	0x2000197c
 800a018:	2000274c 	.word	0x2000274c
 800a01c:	0800b5bc 	.word	0x0800b5bc

0800a020 <Com_Assign>:
 * @fn					- Com_Assign
 *
 * @Note				- assign the message to the right buffer Job_stack/G_code_stack
 *
 **************************************************************************/
void Com_Assign(){
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	607b      	str	r3, [r7, #4]
	while(Buf_IsEmpty(&Com_RXstorage) != BUF_EMPTY && Buf_IsFull(&Job_Stack) != BUF_FULL){
 800a02a:	e00b      	b.n	800a044 <Com_Assign+0x24>
			ptr = Buf_Dequeue(&Com_RXstorage);
 800a02c:	480d      	ldr	r0, [pc, #52]	; (800a064 <Com_Assign+0x44>)
 800a02e:	f000 f8b7 	bl	800a1a0 <Buf_Dequeue>
 800a032:	6078      	str	r0, [r7, #4]
			ptr->state = BUF_PENDING;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			Queue_Job(ptr);
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	480a      	ldr	r0, [pc, #40]	; (800a068 <Com_Assign+0x48>)
 800a040:	f000 f852 	bl	800a0e8 <Buf_Queue>
	while(Buf_IsEmpty(&Com_RXstorage) != BUF_EMPTY && Buf_IsFull(&Job_Stack) != BUF_FULL){
 800a044:	4807      	ldr	r0, [pc, #28]	; (800a064 <Com_Assign+0x44>)
 800a046:	f000 f931 	bl	800a2ac <Buf_IsEmpty>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <Com_Assign+0x3c>
 800a050:	4805      	ldr	r0, [pc, #20]	; (800a068 <Com_Assign+0x48>)
 800a052:	f000 f909 	bl	800a268 <Buf_IsFull>
 800a056:	4603      	mov	r3, r0
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d1e7      	bne.n	800a02c <Com_Assign+0xc>
		}
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	20001ed8 	.word	0x20001ed8
 800a068:	20002464 	.word	0x20002464

0800a06c <G_Code_Init>:
 *      Author: soufiane
 */

#include "G_code.h"

void G_Code_Init(){
 800a06c:	b580      	push	{r7, lr}
 800a06e:	af00      	add	r7, sp, #0
	Buf_Init(&Job_Stack);
 800a070:	4803      	ldr	r0, [pc, #12]	; (800a080 <G_Code_Init+0x14>)
 800a072:	f000 f809 	bl	800a088 <Buf_Init>
	Buf_Init(&Gcode_Stack);
 800a076:	4803      	ldr	r0, [pc, #12]	; (800a084 <G_Code_Init+0x18>)
 800a078:	f000 f806 	bl	800a088 <Buf_Init>
}
 800a07c:	bf00      	nop
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20002464 	.word	0x20002464
 800a084:	20002174 	.word	0x20002174

0800a088 <Buf_Init>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Buf_Init(Buf_Handler_t* buf){
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	for (int index = 0;index<BUF_SIZE;index++)
 800a090:	2300      	movs	r3, #0
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	e011      	b.n	800a0ba <Buf_Init+0x32>
		memset(buf->data[buf->rear].data,'\0',MESSAGE_SIZE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a09c:	461a      	mov	r2, r3
 800a09e:	4613      	mov	r3, r2
 800a0a0:	015b      	lsls	r3, r3, #5
 800a0a2:	4413      	add	r3, r2
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	2240      	movs	r2, #64	; 0x40
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fdfe 	bl	800acb0 <memset>
	for (int index = 0;index<BUF_SIZE;index++)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	ddea      	ble.n	800a096 <Buf_Init+0xe>
	buf->front = -1;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	22ff      	movs	r2, #255	; 0xff
 800a0c4:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	buf->rear = -1;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	22ff      	movs	r2, #255	; 0xff
 800a0cc:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	buf->mutex = xSemaphoreCreateMutex();
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	f7fd fffc 	bl	80080ce <xQueueCreateMutex>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	if (buf->mutex == NULL){

	}
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <Buf_Queue>:
 * @return				- HAL_StatusTypeDef
 *
 * @Note				- None
 *
 **************************************************************************/
HAL_StatusTypeDef Buf_Queue(Buf_Handler_t* buf,Data_t* ptr){
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]

	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe f8fe 	bl	80082fc <xQueueSemaphoreTake>
	if (Buf_IsFull(buf) == BUF_FULL ){
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f8b1 	bl	800a268 <Buf_IsFull>
 800a106:	4603      	mov	r3, r0
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d109      	bne.n	800a120 <Buf_Queue+0x38>
		xSemaphoreGive(buf->mutex);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a112:	2300      	movs	r3, #0
 800a114:	2200      	movs	r2, #0
 800a116:	2100      	movs	r1, #0
 800a118:	f7fd fff2 	bl	8008100 <xQueueGenericSend>
		return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e039      	b.n	800a194 <Buf_Queue+0xac>
	}
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f8c3 	bl	800a2ac <Buf_IsEmpty>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d108      	bne.n	800a13e <Buf_Queue+0x56>
		buf->front = 0;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		buf->rear = 0;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a13c:	e012      	b.n	800a164 <Buf_Queue+0x7c>
	}else{
		buf->front = (buf->front+1) % BUF_SIZE ;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	4b15      	ldr	r3, [pc, #84]	; (800a19c <Buf_Queue+0xb4>)
 800a148:	fb83 1302 	smull	r1, r3, r3, r2
 800a14c:	1099      	asrs	r1, r3, #2
 800a14e:	17d3      	asrs	r3, r2, #31
 800a150:	1ac9      	subs	r1, r1, r3
 800a152:	460b      	mov	r3, r1
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	440b      	add	r3, r1
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	1ad1      	subs	r1, r2, r3
 800a15c:	b24a      	sxtb	r2, r1
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	}
	memcpy(&buf->data[buf->front],ptr,sizeof(Data_t));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a16a:	461a      	mov	r2, r3
 800a16c:	4613      	mov	r3, r2
 800a16e:	015b      	lsls	r3, r3, #5
 800a170:	4413      	add	r3, r2
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	4413      	add	r3, r2
 800a178:	2242      	movs	r2, #66	; 0x42
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 fd89 	bl	800ac94 <memcpy>
	xSemaphoreGive(buf->mutex);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a188:	2300      	movs	r3, #0
 800a18a:	2200      	movs	r2, #0
 800a18c:	2100      	movs	r1, #0
 800a18e:	f7fd ffb7 	bl	8008100 <xQueueGenericSend>
	return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	66666667 	.word	0x66666667

0800a1a0 <Buf_Dequeue>:
 * @fn					- Buf_Dequeue
 *
 * @Note				- None
 *
 **************************************************************************/
Data_t* Buf_Dequeue(Buf_Handler_t* buf){
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe f8a3 	bl	80082fc <xQueueSemaphoreTake>
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f878 	bl	800a2ac <Buf_IsEmpty>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <Buf_Dequeue+0x36>
		xSemaphoreGive(buf->mutex);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	f7fd ff97 	bl	8008100 <xQueueGenericSend>
		return NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	e03f      	b.n	800a256 <Buf_Dequeue+0xb6>
	}
	static Data_t rt;
	memcpy(&rt,&(buf->data[buf->rear]),sizeof(Data_t));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a1dc:	461a      	mov	r2, r3
 800a1de:	4613      	mov	r3, r2
 800a1e0:	015b      	lsls	r3, r3, #5
 800a1e2:	4413      	add	r3, r2
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	4a1d      	ldr	r2, [pc, #116]	; (800a260 <Buf_Dequeue+0xc0>)
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	2342      	movs	r3, #66	; 0x42
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f000 fd4e 	bl	800ac94 <memcpy>
	if (buf->front == buf->rear){
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f993 2298 	ldrsb.w	r2, [r3, #664]	; 0x298
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a204:	429a      	cmp	r2, r3
 800a206:	d10a      	bne.n	800a21e <Buf_Dequeue+0x7e>
		buf->front = buf->rear = -1;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	22ff      	movs	r2, #255	; 0xff
 800a20c:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f993 2299 	ldrsb.w	r2, [r3, #665]	; 0x299
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800a21c:	e012      	b.n	800a244 <Buf_Dequeue+0xa4>
	}else {
		buf->rear = (buf->rear + 1) % BUF_SIZE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <Buf_Dequeue+0xc4>)
 800a228:	fb83 1302 	smull	r1, r3, r3, r2
 800a22c:	1099      	asrs	r1, r3, #2
 800a22e:	17d3      	asrs	r3, r2, #31
 800a230:	1ac9      	subs	r1, r1, r3
 800a232:	460b      	mov	r3, r1
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	1ad1      	subs	r1, r2, r3
 800a23c:	b24a      	sxtb	r2, r1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	}
	xSemaphoreGive(buf->mutex);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 800a24a:	2300      	movs	r3, #0
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	f7fd ff56 	bl	8008100 <xQueueGenericSend>
	return &rt ;
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <Buf_Dequeue+0xc0>)
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20001980 	.word	0x20001980
 800a264:	66666667 	.word	0x66666667

0800a268 <Buf_IsFull>:
 * @fn					- Buf_IsFull
 *
 * @Note				- func to check if the Buf is full
 *
 **************************************************************************/
Buf_Status_t Buf_IsFull(Buf_Handler_t* buf){
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
	return ((buf->front+1) % BUF_SIZE) == buf->rear;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a276:	1c59      	adds	r1, r3, #1
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <Buf_IsFull+0x40>)
 800a27a:	fb83 2301 	smull	r2, r3, r3, r1
 800a27e:	109a      	asrs	r2, r3, #2
 800a280:	17cb      	asrs	r3, r1, #31
 800a282:	1ad2      	subs	r2, r2, r3
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	005b      	lsls	r3, r3, #1
 800a28c:	1aca      	subs	r2, r1, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 800a294:	429a      	cmp	r2, r3
 800a296:	bf0c      	ite	eq
 800a298:	2301      	moveq	r3, #1
 800a29a:	2300      	movne	r3, #0
 800a29c:	b2db      	uxtb	r3, r3
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bc80      	pop	{r7}
 800a2a6:	4770      	bx	lr
 800a2a8:	66666667 	.word	0x66666667

0800a2ac <Buf_IsEmpty>:
 * @fn					- Buf_IsEmpty
 *
 * @Note				- func to check if the Buf is empty
 *
 **************************************************************************/
Buf_Status_t Buf_IsEmpty(Buf_Handler_t* buf){
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	return !(buf->front == -1);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 800a2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2be:	bf14      	ite	ne
 800a2c0:	2301      	movne	r3, #1
 800a2c2:	2300      	moveq	r3, #0
 800a2c4:	b2db      	uxtb	r3, r3
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr

0800a2d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4912      	ldr	r1, [pc, #72]	; (800a320 <MX_USB_DEVICE_Init+0x50>)
 800a2d8:	4812      	ldr	r0, [pc, #72]	; (800a324 <MX_USB_DEVICE_Init+0x54>)
 800a2da:	f7fc fc52 	bl	8006b82 <USBD_Init>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2e4:	f7f6 f9d0 	bl	8000688 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2e8:	490f      	ldr	r1, [pc, #60]	; (800a328 <MX_USB_DEVICE_Init+0x58>)
 800a2ea:	480e      	ldr	r0, [pc, #56]	; (800a324 <MX_USB_DEVICE_Init+0x54>)
 800a2ec:	f7fc fc74 	bl	8006bd8 <USBD_RegisterClass>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2f6:	f7f6 f9c7 	bl	8000688 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2fa:	490c      	ldr	r1, [pc, #48]	; (800a32c <MX_USB_DEVICE_Init+0x5c>)
 800a2fc:	4809      	ldr	r0, [pc, #36]	; (800a324 <MX_USB_DEVICE_Init+0x54>)
 800a2fe:	f7fc fba5 	bl	8006a4c <USBD_CDC_RegisterInterface>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a308:	f7f6 f9be 	bl	8000688 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a30c:	4805      	ldr	r0, [pc, #20]	; (800a324 <MX_USB_DEVICE_Init+0x54>)
 800a30e:	f7fc fc7c 	bl	8006c0a <USBD_Start>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a318:	f7f6 f9b6 	bl	8000688 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a31c:	bf00      	nop
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000130 	.word	0x20000130
 800a324:	2000278c 	.word	0x2000278c
 800a328:	20000018 	.word	0x20000018
 800a32c:	20000120 	.word	0x20000120

0800a330 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a334:	2200      	movs	r2, #0
 800a336:	4905      	ldr	r1, [pc, #20]	; (800a34c <CDC_Init_FS+0x1c>)
 800a338:	4805      	ldr	r0, [pc, #20]	; (800a350 <CDC_Init_FS+0x20>)
 800a33a:	f7fc fb9d 	bl	8006a78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a33e:	4905      	ldr	r1, [pc, #20]	; (800a354 <CDC_Init_FS+0x24>)
 800a340:	4803      	ldr	r0, [pc, #12]	; (800a350 <CDC_Init_FS+0x20>)
 800a342:	f7fc fbb2 	bl	8006aaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a346:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a348:	4618      	mov	r0, r3
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20002c44 	.word	0x20002c44
 800a350:	2000278c 	.word	0x2000278c
 800a354:	20002a50 	.word	0x20002a50

0800a358 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a358:	b480      	push	{r7}
 800a35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a35c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a35e:	4618      	mov	r0, r3
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr
	...

0800a368 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
 800a374:	4613      	mov	r3, r2
 800a376:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b23      	cmp	r3, #35	; 0x23
 800a37c:	d84a      	bhi.n	800a414 <CDC_Control_FS+0xac>
 800a37e:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <CDC_Control_FS+0x1c>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a415 	.word	0x0800a415
 800a388:	0800a415 	.word	0x0800a415
 800a38c:	0800a415 	.word	0x0800a415
 800a390:	0800a415 	.word	0x0800a415
 800a394:	0800a415 	.word	0x0800a415
 800a398:	0800a415 	.word	0x0800a415
 800a39c:	0800a415 	.word	0x0800a415
 800a3a0:	0800a415 	.word	0x0800a415
 800a3a4:	0800a415 	.word	0x0800a415
 800a3a8:	0800a415 	.word	0x0800a415
 800a3ac:	0800a415 	.word	0x0800a415
 800a3b0:	0800a415 	.word	0x0800a415
 800a3b4:	0800a415 	.word	0x0800a415
 800a3b8:	0800a415 	.word	0x0800a415
 800a3bc:	0800a415 	.word	0x0800a415
 800a3c0:	0800a415 	.word	0x0800a415
 800a3c4:	0800a415 	.word	0x0800a415
 800a3c8:	0800a415 	.word	0x0800a415
 800a3cc:	0800a415 	.word	0x0800a415
 800a3d0:	0800a415 	.word	0x0800a415
 800a3d4:	0800a415 	.word	0x0800a415
 800a3d8:	0800a415 	.word	0x0800a415
 800a3dc:	0800a415 	.word	0x0800a415
 800a3e0:	0800a415 	.word	0x0800a415
 800a3e4:	0800a415 	.word	0x0800a415
 800a3e8:	0800a415 	.word	0x0800a415
 800a3ec:	0800a415 	.word	0x0800a415
 800a3f0:	0800a415 	.word	0x0800a415
 800a3f4:	0800a415 	.word	0x0800a415
 800a3f8:	0800a415 	.word	0x0800a415
 800a3fc:	0800a415 	.word	0x0800a415
 800a400:	0800a415 	.word	0x0800a415
 800a404:	0800a415 	.word	0x0800a415
 800a408:	0800a415 	.word	0x0800a415
 800a40c:	0800a415 	.word	0x0800a415
 800a410:	0800a415 	.word	0x0800a415
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a414:	bf00      	nop
  }

  return (USBD_OK);
 800a416:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop

0800a424 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4811      	ldr	r0, [pc, #68]	; (800a478 <CDC_Receive_FS+0x54>)
 800a432:	f7fc fb3a 	bl	8006aaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a436:	4810      	ldr	r0, [pc, #64]	; (800a478 <CDC_Receive_FS+0x54>)
 800a438:	f7fc fb79 	bl	8006b2e <USBD_CDC_ReceivePacket>

  uint32_t len = *Len;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60fb      	str	r3, [r7, #12]
  if (flag_data_received == 0){
 800a442:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <CDC_Receive_FS+0x58>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d111      	bne.n	800a46e <CDC_Receive_FS+0x4a>
		flag_data_received = 1 ;
 800a44a:	4b0c      	ldr	r3, [pc, #48]	; (800a47c <CDC_Receive_FS+0x58>)
 800a44c:	2201      	movs	r2, #1
 800a44e:	701a      	strb	r2, [r3, #0]
		memset(buffer,'\0',64);
 800a450:	2240      	movs	r2, #64	; 0x40
 800a452:	2100      	movs	r1, #0
 800a454:	480a      	ldr	r0, [pc, #40]	; (800a480 <CDC_Receive_FS+0x5c>)
 800a456:	f000 fc2b 	bl	800acb0 <memset>
		memcpy(buffer,Buf,len);
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	4808      	ldr	r0, [pc, #32]	; (800a480 <CDC_Receive_FS+0x5c>)
 800a460:	f000 fc18 	bl	800ac94 <memcpy>
		memset(Buf,'\0',len);
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	2100      	movs	r1, #0
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fc21 	bl	800acb0 <memset>
  }


  return (USBD_OK);
 800a46e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	2000278c 	.word	0x2000278c
 800a47c:	2000197c 	.word	0x2000197c
 800a480:	2000274c 	.word	0x2000274c

0800a484 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a494:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <CDC_Transmit_FS+0x48>)
 800a496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e00b      	b.n	800a4c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4aa:	887b      	ldrh	r3, [r7, #2]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	4806      	ldr	r0, [pc, #24]	; (800a4cc <CDC_Transmit_FS+0x48>)
 800a4b2:	f7fc fae1 	bl	8006a78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <CDC_Transmit_FS+0x48>)
 800a4b8:	f7fc fb0a 	bl	8006ad0 <USBD_CDC_TransmitPacket>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	2000278c 	.word	0x2000278c

0800a4d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	6039      	str	r1, [r7, #0]
 800a4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2212      	movs	r2, #18
 800a4e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4e2:	4b03      	ldr	r3, [pc, #12]	; (800a4f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bc80      	pop	{r7}
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	2000014c 	.word	0x2000014c

0800a4f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6039      	str	r1, [r7, #0]
 800a4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2204      	movs	r2, #4
 800a504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a506:	4b03      	ldr	r3, [pc, #12]	; (800a514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bc80      	pop	{r7}
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20000160 	.word	0x20000160

0800a518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d105      	bne.n	800a536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	4907      	ldr	r1, [pc, #28]	; (800a54c <USBD_FS_ProductStrDescriptor+0x34>)
 800a52e:	4808      	ldr	r0, [pc, #32]	; (800a550 <USBD_FS_ProductStrDescriptor+0x38>)
 800a530:	f7fd fae4 	bl	8007afc <USBD_GetString>
 800a534:	e004      	b.n	800a540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	4904      	ldr	r1, [pc, #16]	; (800a54c <USBD_FS_ProductStrDescriptor+0x34>)
 800a53a:	4805      	ldr	r0, [pc, #20]	; (800a550 <USBD_FS_ProductStrDescriptor+0x38>)
 800a53c:	f7fd fade 	bl	8007afc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a540:	4b02      	ldr	r3, [pc, #8]	; (800a54c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20002e38 	.word	0x20002e38
 800a550:	0800b5c4 	.word	0x0800b5c4

0800a554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	6039      	str	r1, [r7, #0]
 800a55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	4904      	ldr	r1, [pc, #16]	; (800a574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a564:	4804      	ldr	r0, [pc, #16]	; (800a578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a566:	f7fd fac9 	bl	8007afc <USBD_GetString>
  return USBD_StrDesc;
 800a56a:	4b02      	ldr	r3, [pc, #8]	; (800a574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20002e38 	.word	0x20002e38
 800a578:	0800b5dc 	.word	0x0800b5dc

0800a57c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	221a      	movs	r2, #26
 800a58c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a58e:	f000 f843 	bl	800a618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a592:	4b02      	ldr	r3, [pc, #8]	; (800a59c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	20000164 	.word	0x20000164

0800a5a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d105      	bne.n	800a5be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	4907      	ldr	r1, [pc, #28]	; (800a5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5b6:	4808      	ldr	r0, [pc, #32]	; (800a5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5b8:	f7fd faa0 	bl	8007afc <USBD_GetString>
 800a5bc:	e004      	b.n	800a5c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4904      	ldr	r1, [pc, #16]	; (800a5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5c2:	4805      	ldr	r0, [pc, #20]	; (800a5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5c4:	f7fd fa9a 	bl	8007afc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5c8:	4b02      	ldr	r3, [pc, #8]	; (800a5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20002e38 	.word	0x20002e38
 800a5d8:	0800b5f0 	.word	0x0800b5f0

0800a5dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d105      	bne.n	800a5fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	4907      	ldr	r1, [pc, #28]	; (800a610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5f2:	4808      	ldr	r0, [pc, #32]	; (800a614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5f4:	f7fd fa82 	bl	8007afc <USBD_GetString>
 800a5f8:	e004      	b.n	800a604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	4904      	ldr	r1, [pc, #16]	; (800a610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5fe:	4805      	ldr	r0, [pc, #20]	; (800a614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a600:	f7fd fa7c 	bl	8007afc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a606:	4618      	mov	r0, r3
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	20002e38 	.word	0x20002e38
 800a614:	0800b5fc 	.word	0x0800b5fc

0800a618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a61e:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <Get_SerialNum+0x44>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a624:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <Get_SerialNum+0x48>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a62a:	4b0e      	ldr	r3, [pc, #56]	; (800a664 <Get_SerialNum+0x4c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4413      	add	r3, r2
 800a636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d009      	beq.n	800a652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a63e:	2208      	movs	r2, #8
 800a640:	4909      	ldr	r1, [pc, #36]	; (800a668 <Get_SerialNum+0x50>)
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 f814 	bl	800a670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a648:	2204      	movs	r2, #4
 800a64a:	4908      	ldr	r1, [pc, #32]	; (800a66c <Get_SerialNum+0x54>)
 800a64c:	68b8      	ldr	r0, [r7, #8]
 800a64e:	f000 f80f 	bl	800a670 <IntToUnicode>
  }
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	1ffff7e8 	.word	0x1ffff7e8
 800a660:	1ffff7ec 	.word	0x1ffff7ec
 800a664:	1ffff7f0 	.word	0x1ffff7f0
 800a668:	20000166 	.word	0x20000166
 800a66c:	20000176 	.word	0x20000176

0800a670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a682:	2300      	movs	r3, #0
 800a684:	75fb      	strb	r3, [r7, #23]
 800a686:	e027      	b.n	800a6d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	0f1b      	lsrs	r3, r3, #28
 800a68c:	2b09      	cmp	r3, #9
 800a68e:	d80b      	bhi.n	800a6a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	0f1b      	lsrs	r3, r3, #28
 800a694:	b2da      	uxtb	r2, r3
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	4619      	mov	r1, r3
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	440b      	add	r3, r1
 800a6a0:	3230      	adds	r2, #48	; 0x30
 800a6a2:	b2d2      	uxtb	r2, r2
 800a6a4:	701a      	strb	r2, [r3, #0]
 800a6a6:	e00a      	b.n	800a6be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	0f1b      	lsrs	r3, r3, #28
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	440b      	add	r3, r1
 800a6b8:	3237      	adds	r2, #55	; 0x37
 800a6ba:	b2d2      	uxtb	r2, r2
 800a6bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	75fb      	strb	r3, [r7, #23]
 800a6d8:	7dfa      	ldrb	r2, [r7, #23]
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d3d3      	bcc.n	800a688 <IntToUnicode+0x18>
  }
}
 800a6e0:	bf00      	nop
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bc80      	pop	{r7}
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a0d      	ldr	r2, [pc, #52]	; (800a730 <HAL_PCD_MspInit+0x44>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d113      	bne.n	800a726 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a6fe:	4b0d      	ldr	r3, [pc, #52]	; (800a734 <HAL_PCD_MspInit+0x48>)
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	4a0c      	ldr	r2, [pc, #48]	; (800a734 <HAL_PCD_MspInit+0x48>)
 800a704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a708:	61d3      	str	r3, [r2, #28]
 800a70a:	4b0a      	ldr	r3, [pc, #40]	; (800a734 <HAL_PCD_MspInit+0x48>)
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a716:	2200      	movs	r2, #0
 800a718:	2105      	movs	r1, #5
 800a71a:	2014      	movs	r0, #20
 800a71c:	f7f6 fa53 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a720:	2014      	movs	r0, #20
 800a722:	f7f6 fa6c 	bl	8000bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a726:	bf00      	nop
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	40005c00 	.word	0x40005c00
 800a734:	40021000 	.word	0x40021000

0800a738 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f7fc faa3 	bl	8006c9a <USBD_LL_SetupStage>
}
 800a754:	bf00      	nop
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a76e:	78fa      	ldrb	r2, [r7, #3]
 800a770:	6879      	ldr	r1, [r7, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	440b      	add	r3, r1
 800a77c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	78fb      	ldrb	r3, [r7, #3]
 800a784:	4619      	mov	r1, r3
 800a786:	f7fc fad5 	bl	8006d34 <USBD_LL_DataOutStage>
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	440b      	add	r3, r1
 800a7b2:	333c      	adds	r3, #60	; 0x3c
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f7fc fb2c 	bl	8006e16 <USBD_LL_DataInStage>
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fc fc3c 	bl	8007052 <USBD_LL_SOF>
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d001      	beq.n	800a7fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7f6:	f7f5 ff47 	bl	8000688 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a800:	7bfa      	ldrb	r2, [r7, #15]
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7fc fbec 	bl	8006fe2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a810:	4618      	mov	r0, r3
 800a812:	f7fc fba5 	bl	8006f60 <USBD_LL_Reset>
}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fc fbe6 	bl	8007000 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a83c:	4b04      	ldr	r3, [pc, #16]	; (800a850 <HAL_PCD_SuspendCallback+0x30>)
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	4a03      	ldr	r2, [pc, #12]	; (800a850 <HAL_PCD_SuspendCallback+0x30>)
 800a842:	f043 0306 	orr.w	r3, r3, #6
 800a846:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	e000ed00 	.word	0xe000ed00

0800a854 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a862:	4618      	mov	r0, r3
 800a864:	f7fc fbe0 	bl	8007028 <USBD_LL_Resume>
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a878:	4a28      	ldr	r2, [pc, #160]	; (800a91c <USBD_LL_Init+0xac>)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a26      	ldr	r2, [pc, #152]	; (800a91c <USBD_LL_Init+0xac>)
 800a884:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a888:	4b24      	ldr	r3, [pc, #144]	; (800a91c <USBD_LL_Init+0xac>)
 800a88a:	4a25      	ldr	r2, [pc, #148]	; (800a920 <USBD_LL_Init+0xb0>)
 800a88c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a88e:	4b23      	ldr	r3, [pc, #140]	; (800a91c <USBD_LL_Init+0xac>)
 800a890:	2208      	movs	r2, #8
 800a892:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a894:	4b21      	ldr	r3, [pc, #132]	; (800a91c <USBD_LL_Init+0xac>)
 800a896:	2202      	movs	r2, #2
 800a898:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a89a:	4b20      	ldr	r3, [pc, #128]	; (800a91c <USBD_LL_Init+0xac>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8a0:	4b1e      	ldr	r3, [pc, #120]	; (800a91c <USBD_LL_Init+0xac>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a8a6:	4b1d      	ldr	r3, [pc, #116]	; (800a91c <USBD_LL_Init+0xac>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a8ac:	481b      	ldr	r0, [pc, #108]	; (800a91c <USBD_LL_Init+0xac>)
 800a8ae:	f7f6 fb81 	bl	8000fb4 <HAL_PCD_Init>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a8b8:	f7f5 fee6 	bl	8000688 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8c2:	2318      	movs	r3, #24
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	f7f8 f8a2 	bl	8002a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8d2:	2358      	movs	r3, #88	; 0x58
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2180      	movs	r1, #128	; 0x80
 800a8d8:	f7f8 f89a 	bl	8002a10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8e2:	23c0      	movs	r3, #192	; 0xc0
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2181      	movs	r1, #129	; 0x81
 800a8e8:	f7f8 f892 	bl	8002a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	f7f8 f889 	bl	8002a10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a904:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a908:	2200      	movs	r2, #0
 800a90a:	2182      	movs	r1, #130	; 0x82
 800a90c:	f7f8 f880 	bl	8002a10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20003038 	.word	0x20003038
 800a920:	40005c00 	.word	0x40005c00

0800a924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f6 fc39 	bl	80011b2 <HAL_PCD_Start>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	4618      	mov	r0, r3
 800a948:	f000 f94e 	bl	800abe8 <USBD_Get_USB_Status>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a950:	7bbb      	ldrb	r3, [r7, #14]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	461a      	mov	r2, r3
 800a968:	4603      	mov	r3, r0
 800a96a:	70fb      	strb	r3, [r7, #3]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70bb      	strb	r3, [r7, #2]
 800a970:	4613      	mov	r3, r2
 800a972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a982:	78bb      	ldrb	r3, [r7, #2]
 800a984:	883a      	ldrh	r2, [r7, #0]
 800a986:	78f9      	ldrb	r1, [r7, #3]
 800a988:	f7f6 fd90 	bl	80014ac <HAL_PCD_EP_Open>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f928 	bl	800abe8 <USBD_Get_USB_Status>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f6 fdce 	bl	8001566 <HAL_PCD_EP_Close>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f909 	bl	800abe8 <USBD_Get_USB_Status>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f6 fe76 	bl	80016f4 <HAL_PCD_EP_SetStall>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f8ea 	bl	800abe8 <USBD_Get_USB_Status>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa3c:	78fa      	ldrb	r2, [r7, #3]
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7f6 feb7 	bl	80017b4 <HAL_PCD_EP_ClrStall>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 f8cb 	bl	800abe8 <USBD_Get_USB_Status>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da0c      	bge.n	800aa96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	4613      	mov	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	440b      	add	r3, r1
 800aa90:	3302      	adds	r3, #2
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	e00b      	b.n	800aaae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa96:	78fb      	ldrb	r3, [r7, #3]
 800aa98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9c:	68f9      	ldr	r1, [r7, #12]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	00db      	lsls	r3, r3, #3
 800aaa6:	440b      	add	r3, r1
 800aaa8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aaac:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bc80      	pop	{r7}
 800aab6:	4770      	bx	lr

0800aab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f6 fcc3 	bl	8001462 <HAL_PCD_SetAddress>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 f880 	bl	800abe8 <USBD_Get_USB_Status>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	461a      	mov	r2, r3
 800ab02:	460b      	mov	r3, r1
 800ab04:	72fb      	strb	r3, [r7, #11]
 800ab06:	4613      	mov	r3, r2
 800ab08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab18:	893b      	ldrh	r3, [r7, #8]
 800ab1a:	7af9      	ldrb	r1, [r7, #11]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	f7f6 fdb2 	bl	8001686 <HAL_PCD_EP_Transmit>
 800ab22:	4603      	mov	r3, r0
 800ab24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f85d 	bl	800abe8 <USBD_Get_USB_Status>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab32:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	461a      	mov	r2, r3
 800ab48:	460b      	mov	r3, r1
 800ab4a:	72fb      	strb	r3, [r7, #11]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab5e:	893b      	ldrh	r3, [r7, #8]
 800ab60:	7af9      	ldrb	r1, [r7, #11]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	f7f6 fd47 	bl	80015f6 <HAL_PCD_EP_Receive>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f83a 	bl	800abe8 <USBD_Get_USB_Status>
 800ab74:	4603      	mov	r3, r0
 800ab76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	4611      	mov	r1, r2
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7f6 fd5d 	bl	8001658 <HAL_PCD_EP_GetRxCount>
 800ab9e:	4603      	mov	r3, r0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abb0:	4b02      	ldr	r3, [pc, #8]	; (800abbc <USBD_static_malloc+0x14>)
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bc80      	pop	{r7}
 800abba:	4770      	bx	lr
 800abbc:	200019c4 	.word	0x200019c4

0800abc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]

}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	bc80      	pop	{r7}
 800abd0:	4770      	bx	lr

0800abd2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bc80      	pop	{r7}
 800abe6:	4770      	bx	lr

0800abe8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d817      	bhi.n	800ac2c <USBD_Get_USB_Status+0x44>
 800abfc:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <USBD_Get_USB_Status+0x1c>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac15 	.word	0x0800ac15
 800ac08:	0800ac1b 	.word	0x0800ac1b
 800ac0c:	0800ac21 	.word	0x0800ac21
 800ac10:	0800ac27 	.word	0x0800ac27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]
    break;
 800ac18:	e00b      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1e:	e008      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac20:	2301      	movs	r3, #1
 800ac22:	73fb      	strb	r3, [r7, #15]
    break;
 800ac24:	e005      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac26:	2302      	movs	r3, #2
 800ac28:	73fb      	strb	r3, [r7, #15]
    break;
 800ac2a:	e002      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac30:	bf00      	nop
  }
  return usb_status;
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bc80      	pop	{r7}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop

0800ac40 <__errno>:
 800ac40:	4b01      	ldr	r3, [pc, #4]	; (800ac48 <__errno+0x8>)
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000180 	.word	0x20000180

0800ac4c <__libc_init_array>:
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	2600      	movs	r6, #0
 800ac50:	4d0c      	ldr	r5, [pc, #48]	; (800ac84 <__libc_init_array+0x38>)
 800ac52:	4c0d      	ldr	r4, [pc, #52]	; (800ac88 <__libc_init_array+0x3c>)
 800ac54:	1b64      	subs	r4, r4, r5
 800ac56:	10a4      	asrs	r4, r4, #2
 800ac58:	42a6      	cmp	r6, r4
 800ac5a:	d109      	bne.n	800ac70 <__libc_init_array+0x24>
 800ac5c:	f000 fc70 	bl	800b540 <_init>
 800ac60:	2600      	movs	r6, #0
 800ac62:	4d0a      	ldr	r5, [pc, #40]	; (800ac8c <__libc_init_array+0x40>)
 800ac64:	4c0a      	ldr	r4, [pc, #40]	; (800ac90 <__libc_init_array+0x44>)
 800ac66:	1b64      	subs	r4, r4, r5
 800ac68:	10a4      	asrs	r4, r4, #2
 800ac6a:	42a6      	cmp	r6, r4
 800ac6c:	d105      	bne.n	800ac7a <__libc_init_array+0x2e>
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac74:	4798      	blx	r3
 800ac76:	3601      	adds	r6, #1
 800ac78:	e7ee      	b.n	800ac58 <__libc_init_array+0xc>
 800ac7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7e:	4798      	blx	r3
 800ac80:	3601      	adds	r6, #1
 800ac82:	e7f2      	b.n	800ac6a <__libc_init_array+0x1e>
 800ac84:	0800b66c 	.word	0x0800b66c
 800ac88:	0800b66c 	.word	0x0800b66c
 800ac8c:	0800b66c 	.word	0x0800b66c
 800ac90:	0800b670 	.word	0x0800b670

0800ac94 <memcpy>:
 800ac94:	440a      	add	r2, r1
 800ac96:	4291      	cmp	r1, r2
 800ac98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac9c:	d100      	bne.n	800aca0 <memcpy+0xc>
 800ac9e:	4770      	bx	lr
 800aca0:	b510      	push	{r4, lr}
 800aca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca6:	4291      	cmp	r1, r2
 800aca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acac:	d1f9      	bne.n	800aca2 <memcpy+0xe>
 800acae:	bd10      	pop	{r4, pc}

0800acb0 <memset>:
 800acb0:	4603      	mov	r3, r0
 800acb2:	4402      	add	r2, r0
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d100      	bne.n	800acba <memset+0xa>
 800acb8:	4770      	bx	lr
 800acba:	f803 1b01 	strb.w	r1, [r3], #1
 800acbe:	e7f9      	b.n	800acb4 <memset+0x4>

0800acc0 <sniprintf>:
 800acc0:	b40c      	push	{r2, r3}
 800acc2:	b530      	push	{r4, r5, lr}
 800acc4:	4b17      	ldr	r3, [pc, #92]	; (800ad24 <sniprintf+0x64>)
 800acc6:	1e0c      	subs	r4, r1, #0
 800acc8:	681d      	ldr	r5, [r3, #0]
 800acca:	b09d      	sub	sp, #116	; 0x74
 800accc:	da08      	bge.n	800ace0 <sniprintf+0x20>
 800acce:	238b      	movs	r3, #139	; 0x8b
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	b01d      	add	sp, #116	; 0x74
 800acd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acdc:	b002      	add	sp, #8
 800acde:	4770      	bx	lr
 800ace0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ace4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ace8:	bf0c      	ite	eq
 800acea:	4623      	moveq	r3, r4
 800acec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	9307      	str	r3, [sp, #28]
 800acf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acf8:	9002      	str	r0, [sp, #8]
 800acfa:	9006      	str	r0, [sp, #24]
 800acfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad00:	4628      	mov	r0, r5
 800ad02:	ab21      	add	r3, sp, #132	; 0x84
 800ad04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad06:	a902      	add	r1, sp, #8
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	f000 f869 	bl	800ade0 <_svfiprintf_r>
 800ad0e:	1c43      	adds	r3, r0, #1
 800ad10:	bfbc      	itt	lt
 800ad12:	238b      	movlt	r3, #139	; 0x8b
 800ad14:	602b      	strlt	r3, [r5, #0]
 800ad16:	2c00      	cmp	r4, #0
 800ad18:	d0dd      	beq.n	800acd6 <sniprintf+0x16>
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	9b02      	ldr	r3, [sp, #8]
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	e7d9      	b.n	800acd6 <sniprintf+0x16>
 800ad22:	bf00      	nop
 800ad24:	20000180 	.word	0x20000180

0800ad28 <__ssputs_r>:
 800ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	688e      	ldr	r6, [r1, #8]
 800ad2e:	4682      	mov	sl, r0
 800ad30:	429e      	cmp	r6, r3
 800ad32:	460c      	mov	r4, r1
 800ad34:	4690      	mov	r8, r2
 800ad36:	461f      	mov	r7, r3
 800ad38:	d838      	bhi.n	800adac <__ssputs_r+0x84>
 800ad3a:	898a      	ldrh	r2, [r1, #12]
 800ad3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad40:	d032      	beq.n	800ada8 <__ssputs_r+0x80>
 800ad42:	6825      	ldr	r5, [r4, #0]
 800ad44:	6909      	ldr	r1, [r1, #16]
 800ad46:	3301      	adds	r3, #1
 800ad48:	eba5 0901 	sub.w	r9, r5, r1
 800ad4c:	6965      	ldr	r5, [r4, #20]
 800ad4e:	444b      	add	r3, r9
 800ad50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad58:	106d      	asrs	r5, r5, #1
 800ad5a:	429d      	cmp	r5, r3
 800ad5c:	bf38      	it	cc
 800ad5e:	461d      	movcc	r5, r3
 800ad60:	0553      	lsls	r3, r2, #21
 800ad62:	d531      	bpl.n	800adc8 <__ssputs_r+0xa0>
 800ad64:	4629      	mov	r1, r5
 800ad66:	f000 fb45 	bl	800b3f4 <_malloc_r>
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	b950      	cbnz	r0, 800ad84 <__ssputs_r+0x5c>
 800ad6e:	230c      	movs	r3, #12
 800ad70:	f04f 30ff 	mov.w	r0, #4294967295
 800ad74:	f8ca 3000 	str.w	r3, [sl]
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad7e:	81a3      	strh	r3, [r4, #12]
 800ad80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad84:	464a      	mov	r2, r9
 800ad86:	6921      	ldr	r1, [r4, #16]
 800ad88:	f7ff ff84 	bl	800ac94 <memcpy>
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad96:	81a3      	strh	r3, [r4, #12]
 800ad98:	6126      	str	r6, [r4, #16]
 800ad9a:	444e      	add	r6, r9
 800ad9c:	6026      	str	r6, [r4, #0]
 800ad9e:	463e      	mov	r6, r7
 800ada0:	6165      	str	r5, [r4, #20]
 800ada2:	eba5 0509 	sub.w	r5, r5, r9
 800ada6:	60a5      	str	r5, [r4, #8]
 800ada8:	42be      	cmp	r6, r7
 800adaa:	d900      	bls.n	800adae <__ssputs_r+0x86>
 800adac:	463e      	mov	r6, r7
 800adae:	4632      	mov	r2, r6
 800adb0:	4641      	mov	r1, r8
 800adb2:	6820      	ldr	r0, [r4, #0]
 800adb4:	f000 fab8 	bl	800b328 <memmove>
 800adb8:	68a3      	ldr	r3, [r4, #8]
 800adba:	6822      	ldr	r2, [r4, #0]
 800adbc:	1b9b      	subs	r3, r3, r6
 800adbe:	4432      	add	r2, r6
 800adc0:	2000      	movs	r0, #0
 800adc2:	60a3      	str	r3, [r4, #8]
 800adc4:	6022      	str	r2, [r4, #0]
 800adc6:	e7db      	b.n	800ad80 <__ssputs_r+0x58>
 800adc8:	462a      	mov	r2, r5
 800adca:	f000 fb6d 	bl	800b4a8 <_realloc_r>
 800adce:	4606      	mov	r6, r0
 800add0:	2800      	cmp	r0, #0
 800add2:	d1e1      	bne.n	800ad98 <__ssputs_r+0x70>
 800add4:	4650      	mov	r0, sl
 800add6:	6921      	ldr	r1, [r4, #16]
 800add8:	f000 fac0 	bl	800b35c <_free_r>
 800addc:	e7c7      	b.n	800ad6e <__ssputs_r+0x46>
	...

0800ade0 <_svfiprintf_r>:
 800ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	4698      	mov	r8, r3
 800ade6:	898b      	ldrh	r3, [r1, #12]
 800ade8:	4607      	mov	r7, r0
 800adea:	061b      	lsls	r3, r3, #24
 800adec:	460d      	mov	r5, r1
 800adee:	4614      	mov	r4, r2
 800adf0:	b09d      	sub	sp, #116	; 0x74
 800adf2:	d50e      	bpl.n	800ae12 <_svfiprintf_r+0x32>
 800adf4:	690b      	ldr	r3, [r1, #16]
 800adf6:	b963      	cbnz	r3, 800ae12 <_svfiprintf_r+0x32>
 800adf8:	2140      	movs	r1, #64	; 0x40
 800adfa:	f000 fafb 	bl	800b3f4 <_malloc_r>
 800adfe:	6028      	str	r0, [r5, #0]
 800ae00:	6128      	str	r0, [r5, #16]
 800ae02:	b920      	cbnz	r0, 800ae0e <_svfiprintf_r+0x2e>
 800ae04:	230c      	movs	r3, #12
 800ae06:	603b      	str	r3, [r7, #0]
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	e0d1      	b.n	800afb2 <_svfiprintf_r+0x1d2>
 800ae0e:	2340      	movs	r3, #64	; 0x40
 800ae10:	616b      	str	r3, [r5, #20]
 800ae12:	2300      	movs	r3, #0
 800ae14:	9309      	str	r3, [sp, #36]	; 0x24
 800ae16:	2320      	movs	r3, #32
 800ae18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae1c:	2330      	movs	r3, #48	; 0x30
 800ae1e:	f04f 0901 	mov.w	r9, #1
 800ae22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800afcc <_svfiprintf_r+0x1ec>
 800ae2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae2e:	4623      	mov	r3, r4
 800ae30:	469a      	mov	sl, r3
 800ae32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae36:	b10a      	cbz	r2, 800ae3c <_svfiprintf_r+0x5c>
 800ae38:	2a25      	cmp	r2, #37	; 0x25
 800ae3a:	d1f9      	bne.n	800ae30 <_svfiprintf_r+0x50>
 800ae3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae40:	d00b      	beq.n	800ae5a <_svfiprintf_r+0x7a>
 800ae42:	465b      	mov	r3, fp
 800ae44:	4622      	mov	r2, r4
 800ae46:	4629      	mov	r1, r5
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff ff6d 	bl	800ad28 <__ssputs_r>
 800ae4e:	3001      	adds	r0, #1
 800ae50:	f000 80aa 	beq.w	800afa8 <_svfiprintf_r+0x1c8>
 800ae54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae56:	445a      	add	r2, fp
 800ae58:	9209      	str	r2, [sp, #36]	; 0x24
 800ae5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 80a2 	beq.w	800afa8 <_svfiprintf_r+0x1c8>
 800ae64:	2300      	movs	r3, #0
 800ae66:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae6e:	f10a 0a01 	add.w	sl, sl, #1
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	9307      	str	r3, [sp, #28]
 800ae76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae7c:	4654      	mov	r4, sl
 800ae7e:	2205      	movs	r2, #5
 800ae80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae84:	4851      	ldr	r0, [pc, #324]	; (800afcc <_svfiprintf_r+0x1ec>)
 800ae86:	f000 fa41 	bl	800b30c <memchr>
 800ae8a:	9a04      	ldr	r2, [sp, #16]
 800ae8c:	b9d8      	cbnz	r0, 800aec6 <_svfiprintf_r+0xe6>
 800ae8e:	06d0      	lsls	r0, r2, #27
 800ae90:	bf44      	itt	mi
 800ae92:	2320      	movmi	r3, #32
 800ae94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae98:	0711      	lsls	r1, r2, #28
 800ae9a:	bf44      	itt	mi
 800ae9c:	232b      	movmi	r3, #43	; 0x2b
 800ae9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea2:	f89a 3000 	ldrb.w	r3, [sl]
 800aea6:	2b2a      	cmp	r3, #42	; 0x2a
 800aea8:	d015      	beq.n	800aed6 <_svfiprintf_r+0xf6>
 800aeaa:	4654      	mov	r4, sl
 800aeac:	2000      	movs	r0, #0
 800aeae:	f04f 0c0a 	mov.w	ip, #10
 800aeb2:	9a07      	ldr	r2, [sp, #28]
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeba:	3b30      	subs	r3, #48	; 0x30
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d94e      	bls.n	800af5e <_svfiprintf_r+0x17e>
 800aec0:	b1b0      	cbz	r0, 800aef0 <_svfiprintf_r+0x110>
 800aec2:	9207      	str	r2, [sp, #28]
 800aec4:	e014      	b.n	800aef0 <_svfiprintf_r+0x110>
 800aec6:	eba0 0308 	sub.w	r3, r0, r8
 800aeca:	fa09 f303 	lsl.w	r3, r9, r3
 800aece:	4313      	orrs	r3, r2
 800aed0:	46a2      	mov	sl, r4
 800aed2:	9304      	str	r3, [sp, #16]
 800aed4:	e7d2      	b.n	800ae7c <_svfiprintf_r+0x9c>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	1d19      	adds	r1, r3, #4
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	9103      	str	r1, [sp, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	bfbb      	ittet	lt
 800aee2:	425b      	neglt	r3, r3
 800aee4:	f042 0202 	orrlt.w	r2, r2, #2
 800aee8:	9307      	strge	r3, [sp, #28]
 800aeea:	9307      	strlt	r3, [sp, #28]
 800aeec:	bfb8      	it	lt
 800aeee:	9204      	strlt	r2, [sp, #16]
 800aef0:	7823      	ldrb	r3, [r4, #0]
 800aef2:	2b2e      	cmp	r3, #46	; 0x2e
 800aef4:	d10c      	bne.n	800af10 <_svfiprintf_r+0x130>
 800aef6:	7863      	ldrb	r3, [r4, #1]
 800aef8:	2b2a      	cmp	r3, #42	; 0x2a
 800aefa:	d135      	bne.n	800af68 <_svfiprintf_r+0x188>
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	3402      	adds	r4, #2
 800af00:	1d1a      	adds	r2, r3, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	9203      	str	r2, [sp, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	bfb8      	it	lt
 800af0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af0e:	9305      	str	r3, [sp, #20]
 800af10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afdc <_svfiprintf_r+0x1fc>
 800af14:	2203      	movs	r2, #3
 800af16:	4650      	mov	r0, sl
 800af18:	7821      	ldrb	r1, [r4, #0]
 800af1a:	f000 f9f7 	bl	800b30c <memchr>
 800af1e:	b140      	cbz	r0, 800af32 <_svfiprintf_r+0x152>
 800af20:	2340      	movs	r3, #64	; 0x40
 800af22:	eba0 000a 	sub.w	r0, r0, sl
 800af26:	fa03 f000 	lsl.w	r0, r3, r0
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	3401      	adds	r4, #1
 800af2e:	4303      	orrs	r3, r0
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af36:	2206      	movs	r2, #6
 800af38:	4825      	ldr	r0, [pc, #148]	; (800afd0 <_svfiprintf_r+0x1f0>)
 800af3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af3e:	f000 f9e5 	bl	800b30c <memchr>
 800af42:	2800      	cmp	r0, #0
 800af44:	d038      	beq.n	800afb8 <_svfiprintf_r+0x1d8>
 800af46:	4b23      	ldr	r3, [pc, #140]	; (800afd4 <_svfiprintf_r+0x1f4>)
 800af48:	bb1b      	cbnz	r3, 800af92 <_svfiprintf_r+0x1b2>
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	3307      	adds	r3, #7
 800af4e:	f023 0307 	bic.w	r3, r3, #7
 800af52:	3308      	adds	r3, #8
 800af54:	9303      	str	r3, [sp, #12]
 800af56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af58:	4433      	add	r3, r6
 800af5a:	9309      	str	r3, [sp, #36]	; 0x24
 800af5c:	e767      	b.n	800ae2e <_svfiprintf_r+0x4e>
 800af5e:	460c      	mov	r4, r1
 800af60:	2001      	movs	r0, #1
 800af62:	fb0c 3202 	mla	r2, ip, r2, r3
 800af66:	e7a5      	b.n	800aeb4 <_svfiprintf_r+0xd4>
 800af68:	2300      	movs	r3, #0
 800af6a:	f04f 0c0a 	mov.w	ip, #10
 800af6e:	4619      	mov	r1, r3
 800af70:	3401      	adds	r4, #1
 800af72:	9305      	str	r3, [sp, #20]
 800af74:	4620      	mov	r0, r4
 800af76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af7a:	3a30      	subs	r2, #48	; 0x30
 800af7c:	2a09      	cmp	r2, #9
 800af7e:	d903      	bls.n	800af88 <_svfiprintf_r+0x1a8>
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0c5      	beq.n	800af10 <_svfiprintf_r+0x130>
 800af84:	9105      	str	r1, [sp, #20]
 800af86:	e7c3      	b.n	800af10 <_svfiprintf_r+0x130>
 800af88:	4604      	mov	r4, r0
 800af8a:	2301      	movs	r3, #1
 800af8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af90:	e7f0      	b.n	800af74 <_svfiprintf_r+0x194>
 800af92:	ab03      	add	r3, sp, #12
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	462a      	mov	r2, r5
 800af98:	4638      	mov	r0, r7
 800af9a:	4b0f      	ldr	r3, [pc, #60]	; (800afd8 <_svfiprintf_r+0x1f8>)
 800af9c:	a904      	add	r1, sp, #16
 800af9e:	f3af 8000 	nop.w
 800afa2:	1c42      	adds	r2, r0, #1
 800afa4:	4606      	mov	r6, r0
 800afa6:	d1d6      	bne.n	800af56 <_svfiprintf_r+0x176>
 800afa8:	89ab      	ldrh	r3, [r5, #12]
 800afaa:	065b      	lsls	r3, r3, #25
 800afac:	f53f af2c 	bmi.w	800ae08 <_svfiprintf_r+0x28>
 800afb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afb2:	b01d      	add	sp, #116	; 0x74
 800afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb8:	ab03      	add	r3, sp, #12
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	462a      	mov	r2, r5
 800afbe:	4638      	mov	r0, r7
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <_svfiprintf_r+0x1f8>)
 800afc2:	a904      	add	r1, sp, #16
 800afc4:	f000 f87c 	bl	800b0c0 <_printf_i>
 800afc8:	e7eb      	b.n	800afa2 <_svfiprintf_r+0x1c2>
 800afca:	bf00      	nop
 800afcc:	0800b636 	.word	0x0800b636
 800afd0:	0800b640 	.word	0x0800b640
 800afd4:	00000000 	.word	0x00000000
 800afd8:	0800ad29 	.word	0x0800ad29
 800afdc:	0800b63c 	.word	0x0800b63c

0800afe0 <_printf_common>:
 800afe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe4:	4616      	mov	r6, r2
 800afe6:	4699      	mov	r9, r3
 800afe8:	688a      	ldr	r2, [r1, #8]
 800afea:	690b      	ldr	r3, [r1, #16]
 800afec:	4607      	mov	r7, r0
 800afee:	4293      	cmp	r3, r2
 800aff0:	bfb8      	it	lt
 800aff2:	4613      	movlt	r3, r2
 800aff4:	6033      	str	r3, [r6, #0]
 800aff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800affa:	460c      	mov	r4, r1
 800affc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b000:	b10a      	cbz	r2, 800b006 <_printf_common+0x26>
 800b002:	3301      	adds	r3, #1
 800b004:	6033      	str	r3, [r6, #0]
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	0699      	lsls	r1, r3, #26
 800b00a:	bf42      	ittt	mi
 800b00c:	6833      	ldrmi	r3, [r6, #0]
 800b00e:	3302      	addmi	r3, #2
 800b010:	6033      	strmi	r3, [r6, #0]
 800b012:	6825      	ldr	r5, [r4, #0]
 800b014:	f015 0506 	ands.w	r5, r5, #6
 800b018:	d106      	bne.n	800b028 <_printf_common+0x48>
 800b01a:	f104 0a19 	add.w	sl, r4, #25
 800b01e:	68e3      	ldr	r3, [r4, #12]
 800b020:	6832      	ldr	r2, [r6, #0]
 800b022:	1a9b      	subs	r3, r3, r2
 800b024:	42ab      	cmp	r3, r5
 800b026:	dc28      	bgt.n	800b07a <_printf_common+0x9a>
 800b028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b02c:	1e13      	subs	r3, r2, #0
 800b02e:	6822      	ldr	r2, [r4, #0]
 800b030:	bf18      	it	ne
 800b032:	2301      	movne	r3, #1
 800b034:	0692      	lsls	r2, r2, #26
 800b036:	d42d      	bmi.n	800b094 <_printf_common+0xb4>
 800b038:	4649      	mov	r1, r9
 800b03a:	4638      	mov	r0, r7
 800b03c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b040:	47c0      	blx	r8
 800b042:	3001      	adds	r0, #1
 800b044:	d020      	beq.n	800b088 <_printf_common+0xa8>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	68e5      	ldr	r5, [r4, #12]
 800b04a:	f003 0306 	and.w	r3, r3, #6
 800b04e:	2b04      	cmp	r3, #4
 800b050:	bf18      	it	ne
 800b052:	2500      	movne	r5, #0
 800b054:	6832      	ldr	r2, [r6, #0]
 800b056:	f04f 0600 	mov.w	r6, #0
 800b05a:	68a3      	ldr	r3, [r4, #8]
 800b05c:	bf08      	it	eq
 800b05e:	1aad      	subeq	r5, r5, r2
 800b060:	6922      	ldr	r2, [r4, #16]
 800b062:	bf08      	it	eq
 800b064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b068:	4293      	cmp	r3, r2
 800b06a:	bfc4      	itt	gt
 800b06c:	1a9b      	subgt	r3, r3, r2
 800b06e:	18ed      	addgt	r5, r5, r3
 800b070:	341a      	adds	r4, #26
 800b072:	42b5      	cmp	r5, r6
 800b074:	d11a      	bne.n	800b0ac <_printf_common+0xcc>
 800b076:	2000      	movs	r0, #0
 800b078:	e008      	b.n	800b08c <_printf_common+0xac>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4652      	mov	r2, sl
 800b07e:	4649      	mov	r1, r9
 800b080:	4638      	mov	r0, r7
 800b082:	47c0      	blx	r8
 800b084:	3001      	adds	r0, #1
 800b086:	d103      	bne.n	800b090 <_printf_common+0xb0>
 800b088:	f04f 30ff 	mov.w	r0, #4294967295
 800b08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b090:	3501      	adds	r5, #1
 800b092:	e7c4      	b.n	800b01e <_printf_common+0x3e>
 800b094:	2030      	movs	r0, #48	; 0x30
 800b096:	18e1      	adds	r1, r4, r3
 800b098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0a2:	4422      	add	r2, r4
 800b0a4:	3302      	adds	r3, #2
 800b0a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0aa:	e7c5      	b.n	800b038 <_printf_common+0x58>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	47c0      	blx	r8
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	d0e6      	beq.n	800b088 <_printf_common+0xa8>
 800b0ba:	3601      	adds	r6, #1
 800b0bc:	e7d9      	b.n	800b072 <_printf_common+0x92>
	...

0800b0c0 <_printf_i>:
 800b0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	7e27      	ldrb	r7, [r4, #24]
 800b0c8:	4691      	mov	r9, r2
 800b0ca:	2f78      	cmp	r7, #120	; 0x78
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	469a      	mov	sl, r3
 800b0d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b0d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0d6:	d807      	bhi.n	800b0e8 <_printf_i+0x28>
 800b0d8:	2f62      	cmp	r7, #98	; 0x62
 800b0da:	d80a      	bhi.n	800b0f2 <_printf_i+0x32>
 800b0dc:	2f00      	cmp	r7, #0
 800b0de:	f000 80d9 	beq.w	800b294 <_printf_i+0x1d4>
 800b0e2:	2f58      	cmp	r7, #88	; 0x58
 800b0e4:	f000 80a4 	beq.w	800b230 <_printf_i+0x170>
 800b0e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0f0:	e03a      	b.n	800b168 <_printf_i+0xa8>
 800b0f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0f6:	2b15      	cmp	r3, #21
 800b0f8:	d8f6      	bhi.n	800b0e8 <_printf_i+0x28>
 800b0fa:	a001      	add	r0, pc, #4	; (adr r0, 800b100 <_printf_i+0x40>)
 800b0fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b100:	0800b159 	.word	0x0800b159
 800b104:	0800b16d 	.word	0x0800b16d
 800b108:	0800b0e9 	.word	0x0800b0e9
 800b10c:	0800b0e9 	.word	0x0800b0e9
 800b110:	0800b0e9 	.word	0x0800b0e9
 800b114:	0800b0e9 	.word	0x0800b0e9
 800b118:	0800b16d 	.word	0x0800b16d
 800b11c:	0800b0e9 	.word	0x0800b0e9
 800b120:	0800b0e9 	.word	0x0800b0e9
 800b124:	0800b0e9 	.word	0x0800b0e9
 800b128:	0800b0e9 	.word	0x0800b0e9
 800b12c:	0800b27b 	.word	0x0800b27b
 800b130:	0800b19d 	.word	0x0800b19d
 800b134:	0800b25d 	.word	0x0800b25d
 800b138:	0800b0e9 	.word	0x0800b0e9
 800b13c:	0800b0e9 	.word	0x0800b0e9
 800b140:	0800b29d 	.word	0x0800b29d
 800b144:	0800b0e9 	.word	0x0800b0e9
 800b148:	0800b19d 	.word	0x0800b19d
 800b14c:	0800b0e9 	.word	0x0800b0e9
 800b150:	0800b0e9 	.word	0x0800b0e9
 800b154:	0800b265 	.word	0x0800b265
 800b158:	680b      	ldr	r3, [r1, #0]
 800b15a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	600a      	str	r2, [r1, #0]
 800b164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b168:	2301      	movs	r3, #1
 800b16a:	e0a4      	b.n	800b2b6 <_printf_i+0x1f6>
 800b16c:	6825      	ldr	r5, [r4, #0]
 800b16e:	6808      	ldr	r0, [r1, #0]
 800b170:	062e      	lsls	r6, r5, #24
 800b172:	f100 0304 	add.w	r3, r0, #4
 800b176:	d50a      	bpl.n	800b18e <_printf_i+0xce>
 800b178:	6805      	ldr	r5, [r0, #0]
 800b17a:	600b      	str	r3, [r1, #0]
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	da03      	bge.n	800b188 <_printf_i+0xc8>
 800b180:	232d      	movs	r3, #45	; 0x2d
 800b182:	426d      	negs	r5, r5
 800b184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b188:	230a      	movs	r3, #10
 800b18a:	485e      	ldr	r0, [pc, #376]	; (800b304 <_printf_i+0x244>)
 800b18c:	e019      	b.n	800b1c2 <_printf_i+0x102>
 800b18e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b192:	6805      	ldr	r5, [r0, #0]
 800b194:	600b      	str	r3, [r1, #0]
 800b196:	bf18      	it	ne
 800b198:	b22d      	sxthne	r5, r5
 800b19a:	e7ef      	b.n	800b17c <_printf_i+0xbc>
 800b19c:	680b      	ldr	r3, [r1, #0]
 800b19e:	6825      	ldr	r5, [r4, #0]
 800b1a0:	1d18      	adds	r0, r3, #4
 800b1a2:	6008      	str	r0, [r1, #0]
 800b1a4:	0628      	lsls	r0, r5, #24
 800b1a6:	d501      	bpl.n	800b1ac <_printf_i+0xec>
 800b1a8:	681d      	ldr	r5, [r3, #0]
 800b1aa:	e002      	b.n	800b1b2 <_printf_i+0xf2>
 800b1ac:	0669      	lsls	r1, r5, #25
 800b1ae:	d5fb      	bpl.n	800b1a8 <_printf_i+0xe8>
 800b1b0:	881d      	ldrh	r5, [r3, #0]
 800b1b2:	2f6f      	cmp	r7, #111	; 0x6f
 800b1b4:	bf0c      	ite	eq
 800b1b6:	2308      	moveq	r3, #8
 800b1b8:	230a      	movne	r3, #10
 800b1ba:	4852      	ldr	r0, [pc, #328]	; (800b304 <_printf_i+0x244>)
 800b1bc:	2100      	movs	r1, #0
 800b1be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1c2:	6866      	ldr	r6, [r4, #4]
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	bfa8      	it	ge
 800b1c8:	6821      	ldrge	r1, [r4, #0]
 800b1ca:	60a6      	str	r6, [r4, #8]
 800b1cc:	bfa4      	itt	ge
 800b1ce:	f021 0104 	bicge.w	r1, r1, #4
 800b1d2:	6021      	strge	r1, [r4, #0]
 800b1d4:	b90d      	cbnz	r5, 800b1da <_printf_i+0x11a>
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	d04d      	beq.n	800b276 <_printf_i+0x1b6>
 800b1da:	4616      	mov	r6, r2
 800b1dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1e0:	fb03 5711 	mls	r7, r3, r1, r5
 800b1e4:	5dc7      	ldrb	r7, [r0, r7]
 800b1e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1ea:	462f      	mov	r7, r5
 800b1ec:	42bb      	cmp	r3, r7
 800b1ee:	460d      	mov	r5, r1
 800b1f0:	d9f4      	bls.n	800b1dc <_printf_i+0x11c>
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d10b      	bne.n	800b20e <_printf_i+0x14e>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	07df      	lsls	r7, r3, #31
 800b1fa:	d508      	bpl.n	800b20e <_printf_i+0x14e>
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	6861      	ldr	r1, [r4, #4]
 800b200:	4299      	cmp	r1, r3
 800b202:	bfde      	ittt	le
 800b204:	2330      	movle	r3, #48	; 0x30
 800b206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b20a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b20e:	1b92      	subs	r2, r2, r6
 800b210:	6122      	str	r2, [r4, #16]
 800b212:	464b      	mov	r3, r9
 800b214:	4621      	mov	r1, r4
 800b216:	4640      	mov	r0, r8
 800b218:	f8cd a000 	str.w	sl, [sp]
 800b21c:	aa03      	add	r2, sp, #12
 800b21e:	f7ff fedf 	bl	800afe0 <_printf_common>
 800b222:	3001      	adds	r0, #1
 800b224:	d14c      	bne.n	800b2c0 <_printf_i+0x200>
 800b226:	f04f 30ff 	mov.w	r0, #4294967295
 800b22a:	b004      	add	sp, #16
 800b22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b230:	4834      	ldr	r0, [pc, #208]	; (800b304 <_printf_i+0x244>)
 800b232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b236:	680e      	ldr	r6, [r1, #0]
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b23e:	061f      	lsls	r7, r3, #24
 800b240:	600e      	str	r6, [r1, #0]
 800b242:	d514      	bpl.n	800b26e <_printf_i+0x1ae>
 800b244:	07d9      	lsls	r1, r3, #31
 800b246:	bf44      	itt	mi
 800b248:	f043 0320 	orrmi.w	r3, r3, #32
 800b24c:	6023      	strmi	r3, [r4, #0]
 800b24e:	b91d      	cbnz	r5, 800b258 <_printf_i+0x198>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	f023 0320 	bic.w	r3, r3, #32
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	2310      	movs	r3, #16
 800b25a:	e7af      	b.n	800b1bc <_printf_i+0xfc>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	f043 0320 	orr.w	r3, r3, #32
 800b262:	6023      	str	r3, [r4, #0]
 800b264:	2378      	movs	r3, #120	; 0x78
 800b266:	4828      	ldr	r0, [pc, #160]	; (800b308 <_printf_i+0x248>)
 800b268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b26c:	e7e3      	b.n	800b236 <_printf_i+0x176>
 800b26e:	065e      	lsls	r6, r3, #25
 800b270:	bf48      	it	mi
 800b272:	b2ad      	uxthmi	r5, r5
 800b274:	e7e6      	b.n	800b244 <_printf_i+0x184>
 800b276:	4616      	mov	r6, r2
 800b278:	e7bb      	b.n	800b1f2 <_printf_i+0x132>
 800b27a:	680b      	ldr	r3, [r1, #0]
 800b27c:	6826      	ldr	r6, [r4, #0]
 800b27e:	1d1d      	adds	r5, r3, #4
 800b280:	6960      	ldr	r0, [r4, #20]
 800b282:	600d      	str	r5, [r1, #0]
 800b284:	0635      	lsls	r5, r6, #24
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	d501      	bpl.n	800b28e <_printf_i+0x1ce>
 800b28a:	6018      	str	r0, [r3, #0]
 800b28c:	e002      	b.n	800b294 <_printf_i+0x1d4>
 800b28e:	0671      	lsls	r1, r6, #25
 800b290:	d5fb      	bpl.n	800b28a <_printf_i+0x1ca>
 800b292:	8018      	strh	r0, [r3, #0]
 800b294:	2300      	movs	r3, #0
 800b296:	4616      	mov	r6, r2
 800b298:	6123      	str	r3, [r4, #16]
 800b29a:	e7ba      	b.n	800b212 <_printf_i+0x152>
 800b29c:	680b      	ldr	r3, [r1, #0]
 800b29e:	1d1a      	adds	r2, r3, #4
 800b2a0:	600a      	str	r2, [r1, #0]
 800b2a2:	681e      	ldr	r6, [r3, #0]
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	6862      	ldr	r2, [r4, #4]
 800b2aa:	f000 f82f 	bl	800b30c <memchr>
 800b2ae:	b108      	cbz	r0, 800b2b4 <_printf_i+0x1f4>
 800b2b0:	1b80      	subs	r0, r0, r6
 800b2b2:	6060      	str	r0, [r4, #4]
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2be:	e7a8      	b.n	800b212 <_printf_i+0x152>
 800b2c0:	4632      	mov	r2, r6
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	6923      	ldr	r3, [r4, #16]
 800b2c8:	47d0      	blx	sl
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	d0ab      	beq.n	800b226 <_printf_i+0x166>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	079b      	lsls	r3, r3, #30
 800b2d2:	d413      	bmi.n	800b2fc <_printf_i+0x23c>
 800b2d4:	68e0      	ldr	r0, [r4, #12]
 800b2d6:	9b03      	ldr	r3, [sp, #12]
 800b2d8:	4298      	cmp	r0, r3
 800b2da:	bfb8      	it	lt
 800b2dc:	4618      	movlt	r0, r3
 800b2de:	e7a4      	b.n	800b22a <_printf_i+0x16a>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	47d0      	blx	sl
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d09b      	beq.n	800b226 <_printf_i+0x166>
 800b2ee:	3501      	adds	r5, #1
 800b2f0:	68e3      	ldr	r3, [r4, #12]
 800b2f2:	9903      	ldr	r1, [sp, #12]
 800b2f4:	1a5b      	subs	r3, r3, r1
 800b2f6:	42ab      	cmp	r3, r5
 800b2f8:	dcf2      	bgt.n	800b2e0 <_printf_i+0x220>
 800b2fa:	e7eb      	b.n	800b2d4 <_printf_i+0x214>
 800b2fc:	2500      	movs	r5, #0
 800b2fe:	f104 0619 	add.w	r6, r4, #25
 800b302:	e7f5      	b.n	800b2f0 <_printf_i+0x230>
 800b304:	0800b647 	.word	0x0800b647
 800b308:	0800b658 	.word	0x0800b658

0800b30c <memchr>:
 800b30c:	4603      	mov	r3, r0
 800b30e:	b510      	push	{r4, lr}
 800b310:	b2c9      	uxtb	r1, r1
 800b312:	4402      	add	r2, r0
 800b314:	4293      	cmp	r3, r2
 800b316:	4618      	mov	r0, r3
 800b318:	d101      	bne.n	800b31e <memchr+0x12>
 800b31a:	2000      	movs	r0, #0
 800b31c:	e003      	b.n	800b326 <memchr+0x1a>
 800b31e:	7804      	ldrb	r4, [r0, #0]
 800b320:	3301      	adds	r3, #1
 800b322:	428c      	cmp	r4, r1
 800b324:	d1f6      	bne.n	800b314 <memchr+0x8>
 800b326:	bd10      	pop	{r4, pc}

0800b328 <memmove>:
 800b328:	4288      	cmp	r0, r1
 800b32a:	b510      	push	{r4, lr}
 800b32c:	eb01 0402 	add.w	r4, r1, r2
 800b330:	d902      	bls.n	800b338 <memmove+0x10>
 800b332:	4284      	cmp	r4, r0
 800b334:	4623      	mov	r3, r4
 800b336:	d807      	bhi.n	800b348 <memmove+0x20>
 800b338:	1e43      	subs	r3, r0, #1
 800b33a:	42a1      	cmp	r1, r4
 800b33c:	d008      	beq.n	800b350 <memmove+0x28>
 800b33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b346:	e7f8      	b.n	800b33a <memmove+0x12>
 800b348:	4601      	mov	r1, r0
 800b34a:	4402      	add	r2, r0
 800b34c:	428a      	cmp	r2, r1
 800b34e:	d100      	bne.n	800b352 <memmove+0x2a>
 800b350:	bd10      	pop	{r4, pc}
 800b352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b35a:	e7f7      	b.n	800b34c <memmove+0x24>

0800b35c <_free_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4605      	mov	r5, r0
 800b360:	2900      	cmp	r1, #0
 800b362:	d043      	beq.n	800b3ec <_free_r+0x90>
 800b364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b368:	1f0c      	subs	r4, r1, #4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bfb8      	it	lt
 800b36e:	18e4      	addlt	r4, r4, r3
 800b370:	f000 f8d0 	bl	800b514 <__malloc_lock>
 800b374:	4a1e      	ldr	r2, [pc, #120]	; (800b3f0 <_free_r+0x94>)
 800b376:	6813      	ldr	r3, [r2, #0]
 800b378:	4610      	mov	r0, r2
 800b37a:	b933      	cbnz	r3, 800b38a <_free_r+0x2e>
 800b37c:	6063      	str	r3, [r4, #4]
 800b37e:	6014      	str	r4, [r2, #0]
 800b380:	4628      	mov	r0, r5
 800b382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b386:	f000 b8cb 	b.w	800b520 <__malloc_unlock>
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	d90a      	bls.n	800b3a4 <_free_r+0x48>
 800b38e:	6821      	ldr	r1, [r4, #0]
 800b390:	1862      	adds	r2, r4, r1
 800b392:	4293      	cmp	r3, r2
 800b394:	bf01      	itttt	eq
 800b396:	681a      	ldreq	r2, [r3, #0]
 800b398:	685b      	ldreq	r3, [r3, #4]
 800b39a:	1852      	addeq	r2, r2, r1
 800b39c:	6022      	streq	r2, [r4, #0]
 800b39e:	6063      	str	r3, [r4, #4]
 800b3a0:	6004      	str	r4, [r0, #0]
 800b3a2:	e7ed      	b.n	800b380 <_free_r+0x24>
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	b10b      	cbz	r3, 800b3ae <_free_r+0x52>
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	d9fa      	bls.n	800b3a4 <_free_r+0x48>
 800b3ae:	6811      	ldr	r1, [r2, #0]
 800b3b0:	1850      	adds	r0, r2, r1
 800b3b2:	42a0      	cmp	r0, r4
 800b3b4:	d10b      	bne.n	800b3ce <_free_r+0x72>
 800b3b6:	6820      	ldr	r0, [r4, #0]
 800b3b8:	4401      	add	r1, r0
 800b3ba:	1850      	adds	r0, r2, r1
 800b3bc:	4283      	cmp	r3, r0
 800b3be:	6011      	str	r1, [r2, #0]
 800b3c0:	d1de      	bne.n	800b380 <_free_r+0x24>
 800b3c2:	6818      	ldr	r0, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	4401      	add	r1, r0
 800b3c8:	6011      	str	r1, [r2, #0]
 800b3ca:	6053      	str	r3, [r2, #4]
 800b3cc:	e7d8      	b.n	800b380 <_free_r+0x24>
 800b3ce:	d902      	bls.n	800b3d6 <_free_r+0x7a>
 800b3d0:	230c      	movs	r3, #12
 800b3d2:	602b      	str	r3, [r5, #0]
 800b3d4:	e7d4      	b.n	800b380 <_free_r+0x24>
 800b3d6:	6820      	ldr	r0, [r4, #0]
 800b3d8:	1821      	adds	r1, r4, r0
 800b3da:	428b      	cmp	r3, r1
 800b3dc:	bf01      	itttt	eq
 800b3de:	6819      	ldreq	r1, [r3, #0]
 800b3e0:	685b      	ldreq	r3, [r3, #4]
 800b3e2:	1809      	addeq	r1, r1, r0
 800b3e4:	6021      	streq	r1, [r4, #0]
 800b3e6:	6063      	str	r3, [r4, #4]
 800b3e8:	6054      	str	r4, [r2, #4]
 800b3ea:	e7c9      	b.n	800b380 <_free_r+0x24>
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20001be4 	.word	0x20001be4

0800b3f4 <_malloc_r>:
 800b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f6:	1ccd      	adds	r5, r1, #3
 800b3f8:	f025 0503 	bic.w	r5, r5, #3
 800b3fc:	3508      	adds	r5, #8
 800b3fe:	2d0c      	cmp	r5, #12
 800b400:	bf38      	it	cc
 800b402:	250c      	movcc	r5, #12
 800b404:	2d00      	cmp	r5, #0
 800b406:	4606      	mov	r6, r0
 800b408:	db01      	blt.n	800b40e <_malloc_r+0x1a>
 800b40a:	42a9      	cmp	r1, r5
 800b40c:	d903      	bls.n	800b416 <_malloc_r+0x22>
 800b40e:	230c      	movs	r3, #12
 800b410:	6033      	str	r3, [r6, #0]
 800b412:	2000      	movs	r0, #0
 800b414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b416:	f000 f87d 	bl	800b514 <__malloc_lock>
 800b41a:	4921      	ldr	r1, [pc, #132]	; (800b4a0 <_malloc_r+0xac>)
 800b41c:	680a      	ldr	r2, [r1, #0]
 800b41e:	4614      	mov	r4, r2
 800b420:	b99c      	cbnz	r4, 800b44a <_malloc_r+0x56>
 800b422:	4f20      	ldr	r7, [pc, #128]	; (800b4a4 <_malloc_r+0xb0>)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	b923      	cbnz	r3, 800b432 <_malloc_r+0x3e>
 800b428:	4621      	mov	r1, r4
 800b42a:	4630      	mov	r0, r6
 800b42c:	f000 f862 	bl	800b4f4 <_sbrk_r>
 800b430:	6038      	str	r0, [r7, #0]
 800b432:	4629      	mov	r1, r5
 800b434:	4630      	mov	r0, r6
 800b436:	f000 f85d 	bl	800b4f4 <_sbrk_r>
 800b43a:	1c43      	adds	r3, r0, #1
 800b43c:	d123      	bne.n	800b486 <_malloc_r+0x92>
 800b43e:	230c      	movs	r3, #12
 800b440:	4630      	mov	r0, r6
 800b442:	6033      	str	r3, [r6, #0]
 800b444:	f000 f86c 	bl	800b520 <__malloc_unlock>
 800b448:	e7e3      	b.n	800b412 <_malloc_r+0x1e>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	1b5b      	subs	r3, r3, r5
 800b44e:	d417      	bmi.n	800b480 <_malloc_r+0x8c>
 800b450:	2b0b      	cmp	r3, #11
 800b452:	d903      	bls.n	800b45c <_malloc_r+0x68>
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	441c      	add	r4, r3
 800b458:	6025      	str	r5, [r4, #0]
 800b45a:	e004      	b.n	800b466 <_malloc_r+0x72>
 800b45c:	6863      	ldr	r3, [r4, #4]
 800b45e:	42a2      	cmp	r2, r4
 800b460:	bf0c      	ite	eq
 800b462:	600b      	streq	r3, [r1, #0]
 800b464:	6053      	strne	r3, [r2, #4]
 800b466:	4630      	mov	r0, r6
 800b468:	f000 f85a 	bl	800b520 <__malloc_unlock>
 800b46c:	f104 000b 	add.w	r0, r4, #11
 800b470:	1d23      	adds	r3, r4, #4
 800b472:	f020 0007 	bic.w	r0, r0, #7
 800b476:	1ac2      	subs	r2, r0, r3
 800b478:	d0cc      	beq.n	800b414 <_malloc_r+0x20>
 800b47a:	1a1b      	subs	r3, r3, r0
 800b47c:	50a3      	str	r3, [r4, r2]
 800b47e:	e7c9      	b.n	800b414 <_malloc_r+0x20>
 800b480:	4622      	mov	r2, r4
 800b482:	6864      	ldr	r4, [r4, #4]
 800b484:	e7cc      	b.n	800b420 <_malloc_r+0x2c>
 800b486:	1cc4      	adds	r4, r0, #3
 800b488:	f024 0403 	bic.w	r4, r4, #3
 800b48c:	42a0      	cmp	r0, r4
 800b48e:	d0e3      	beq.n	800b458 <_malloc_r+0x64>
 800b490:	1a21      	subs	r1, r4, r0
 800b492:	4630      	mov	r0, r6
 800b494:	f000 f82e 	bl	800b4f4 <_sbrk_r>
 800b498:	3001      	adds	r0, #1
 800b49a:	d1dd      	bne.n	800b458 <_malloc_r+0x64>
 800b49c:	e7cf      	b.n	800b43e <_malloc_r+0x4a>
 800b49e:	bf00      	nop
 800b4a0:	20001be4 	.word	0x20001be4
 800b4a4:	20001be8 	.word	0x20001be8

0800b4a8 <_realloc_r>:
 800b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	460e      	mov	r6, r1
 800b4b0:	b921      	cbnz	r1, 800b4bc <_realloc_r+0x14>
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4b8:	f7ff bf9c 	b.w	800b3f4 <_malloc_r>
 800b4bc:	b922      	cbnz	r2, 800b4c8 <_realloc_r+0x20>
 800b4be:	f7ff ff4d 	bl	800b35c <_free_r>
 800b4c2:	4625      	mov	r5, r4
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c8:	f000 f830 	bl	800b52c <_malloc_usable_size_r>
 800b4cc:	42a0      	cmp	r0, r4
 800b4ce:	d20f      	bcs.n	800b4f0 <_realloc_r+0x48>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f7ff ff8e 	bl	800b3f4 <_malloc_r>
 800b4d8:	4605      	mov	r5, r0
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d0f2      	beq.n	800b4c4 <_realloc_r+0x1c>
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	f7ff fbd7 	bl	800ac94 <memcpy>
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	f7ff ff37 	bl	800b35c <_free_r>
 800b4ee:	e7e9      	b.n	800b4c4 <_realloc_r+0x1c>
 800b4f0:	4635      	mov	r5, r6
 800b4f2:	e7e7      	b.n	800b4c4 <_realloc_r+0x1c>

0800b4f4 <_sbrk_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4d05      	ldr	r5, [pc, #20]	; (800b510 <_sbrk_r+0x1c>)
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	f7f5 f9f4 	bl	80008ec <_sbrk>
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d102      	bne.n	800b50e <_sbrk_r+0x1a>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	b103      	cbz	r3, 800b50e <_sbrk_r+0x1a>
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	bd38      	pop	{r3, r4, r5, pc}
 800b510:	20003328 	.word	0x20003328

0800b514 <__malloc_lock>:
 800b514:	4801      	ldr	r0, [pc, #4]	; (800b51c <__malloc_lock+0x8>)
 800b516:	f000 b811 	b.w	800b53c <__retarget_lock_acquire_recursive>
 800b51a:	bf00      	nop
 800b51c:	20003330 	.word	0x20003330

0800b520 <__malloc_unlock>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__malloc_unlock+0x8>)
 800b522:	f000 b80c 	b.w	800b53e <__retarget_lock_release_recursive>
 800b526:	bf00      	nop
 800b528:	20003330 	.word	0x20003330

0800b52c <_malloc_usable_size_r>:
 800b52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b530:	1f18      	subs	r0, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	bfbc      	itt	lt
 800b536:	580b      	ldrlt	r3, [r1, r0]
 800b538:	18c0      	addlt	r0, r0, r3
 800b53a:	4770      	bx	lr

0800b53c <__retarget_lock_acquire_recursive>:
 800b53c:	4770      	bx	lr

0800b53e <__retarget_lock_release_recursive>:
 800b53e:	4770      	bx	lr

0800b540 <_init>:
 800b540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b542:	bf00      	nop
 800b544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b546:	bc08      	pop	{r3}
 800b548:	469e      	mov	lr, r3
 800b54a:	4770      	bx	lr

0800b54c <_fini>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	bf00      	nop
 800b550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b552:	bc08      	pop	{r3}
 800b554:	469e      	mov	lr, r3
 800b556:	4770      	bx	lr
