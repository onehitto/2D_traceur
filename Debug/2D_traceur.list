
2D_traceur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800a9f4  0800a9f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aac4  0800aac4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800aac4  0800aac4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aac4  0800aac4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aac4  0800aac4  0001aac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aac8  0800aac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800aacc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030ec  20000180  0800ac4c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000326c  0800ac4c  0002326c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e9c  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005024  00000000  00000000  00044045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00049070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001490  00000000  00000000  0004a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013cc8  00000000  00000000  0004bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006c1b  00000000  00000000  0005f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0006649b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005bc0  00000000  00000000  000664f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9dc 	.word	0x0800a9dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800a9dc 	.word	0x0800a9dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000019c 	.word	0x2000019c
 800018c:	200001f0 	.word	0x200001f0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08e      	sub	sp, #56	; 0x38
 8000194:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fb07 	bl	80007a8 <HAL_Init>
  SystemClock_Config();
 800019a:	f000 f843 	bl	8000224 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f911 	bl	80003c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a2:	f000 f899 	bl	80002d8 <MX_TIM2_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  Com_Init();
 80001a6:	f009 fd53 	bl	8009c50 <Com_Init>
  Servo_Init(&servo, &htim2);
 80001aa:	4918      	ldr	r1, [pc, #96]	; (800020c <main+0x7c>)
 80001ac:	4818      	ldr	r0, [pc, #96]	; (8000210 <main+0x80>)
 80001ae:	f009 fcef 	bl	8009b90 <Servo_Init>
  G_Code_Init();
 80001b2:	f009 fdef 	bl	8009d94 <G_Code_Init>
  /* USER CODE END RTOS_QUEUES */
  HAL_Delay(10);
 80001b6:	200a      	movs	r0, #10
 80001b8:	f000 fb28 	bl	800080c <HAL_Delay>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <main+0x84>)
 80001be:	f107 041c 	add.w	r4, r7, #28
 80001c2:	461d      	mov	r5, r3
 80001c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(ComTask, StartComTask, osPriorityNormal, 0, 256);
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <main+0x88>)
 80001d2:	463c      	mov	r4, r7
 80001d4:	461d      	mov	r5, r3
 80001d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001de:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e2:	f107 031c 	add.w	r3, r7, #28
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f007 fc28 	bl	8007a3e <osThreadCreate>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <main+0x8c>)
 80001f2:	6013      	str	r3, [r2, #0]
  ComTaskHandle = osThreadCreate(osThread(ComTask), NULL); // every 20ms
 80001f4:	463b      	mov	r3, r7
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f007 fc20 	bl	8007a3e <osThreadCreate>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <main+0x90>)
 8000202:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 8000204:	f007 fc14 	bl	8007a30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x78>
 800020a:	bf00      	nop
 800020c:	20002360 	.word	0x20002360
 8000210:	20002354 	.word	0x20002354
 8000214:	0800aa08 	.word	0x0800aa08
 8000218:	0800aa24 	.word	0x0800aa24
 800021c:	20001b78 	.word	0x20001b78
 8000220:	2000235c 	.word	0x2000235c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b094      	sub	sp, #80	; 0x50
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f00a fbca 	bl	800a9cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000270:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000274:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fad6 	bl	800282c <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000286:	f000 f957 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fd40 	bl	8002d2c <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b2:	f000 f941 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002b6:	2310      	movs	r3, #16
 80002b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 fedd 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002cc:	f000 f934 	bl	8000538 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3750      	adds	r7, #80	; 0x50
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08e      	sub	sp, #56	; 0x38
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ec:	f107 0320 	add.w	r3, r7, #32
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	615a      	str	r2, [r3, #20]
 8000306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000308:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <MX_TIM2_Init+0xe8>)
 800030a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8000310:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <MX_TIM2_Init+0xe8>)
 8000312:	228f      	movs	r2, #143	; 0x8f
 8000314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <MX_TIM2_Init+0xe8>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800031c:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <MX_TIM2_Init+0xe8>)
 800031e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <MX_TIM2_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <MX_TIM2_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000330:	4823      	ldr	r0, [pc, #140]	; (80003c0 <MX_TIM2_Init+0xe8>)
 8000332:	f002 ff5b 	bl	80031ec <HAL_TIM_Base_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800033c:	f000 f8fc 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034a:	4619      	mov	r1, r3
 800034c:	481c      	ldr	r0, [pc, #112]	; (80003c0 <MX_TIM2_Init+0xe8>)
 800034e:	f003 fab3 	bl	80038b8 <HAL_TIM_ConfigClockSource>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000358:	f000 f8ee 	bl	8000538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <MX_TIM2_Init+0xe8>)
 800035e:	f002 ffe7 	bl	8003330 <HAL_TIM_PWM_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000368:	f000 f8e6 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000370:	2300      	movs	r3, #0
 8000372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000374:	f107 0320 	add.w	r3, r7, #32
 8000378:	4619      	mov	r1, r3
 800037a:	4811      	ldr	r0, [pc, #68]	; (80003c0 <MX_TIM2_Init+0xe8>)
 800037c:	f003 fe2c 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000386:	f000 f8d7 	bl	8000538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038a:	2360      	movs	r3, #96	; 0x60
 800038c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800038e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	4619      	mov	r1, r3
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <MX_TIM2_Init+0xe8>)
 80003a4:	f003 f9c6 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003ae:	f000 f8c3 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b2:	4803      	ldr	r0, [pc, #12]	; (80003c0 <MX_TIM2_Init+0xe8>)
 80003b4:	f000 f91a 	bl	80005ec <HAL_TIM_MspPostInit>

}
 80003b8:	bf00      	nop
 80003ba:	3738      	adds	r7, #56	; 0x38
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20002360 	.word	0x20002360

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d8:	4b40      	ldr	r3, [pc, #256]	; (80004dc <MX_GPIO_Init+0x118>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a3f      	ldr	r2, [pc, #252]	; (80004dc <MX_GPIO_Init+0x118>)
 80003de:	f043 0310 	orr.w	r3, r3, #16
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b3d      	ldr	r3, [pc, #244]	; (80004dc <MX_GPIO_Init+0x118>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0310 	and.w	r3, r3, #16
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f0:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <MX_GPIO_Init+0x118>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a39      	ldr	r2, [pc, #228]	; (80004dc <MX_GPIO_Init+0x118>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b37      	ldr	r3, [pc, #220]	; (80004dc <MX_GPIO_Init+0x118>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0320 	and.w	r3, r3, #32
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b34      	ldr	r3, [pc, #208]	; (80004dc <MX_GPIO_Init+0x118>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a33      	ldr	r2, [pc, #204]	; (80004dc <MX_GPIO_Init+0x118>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <MX_GPIO_Init+0x118>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <MX_GPIO_Init+0x118>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a2d      	ldr	r2, [pc, #180]	; (80004dc <MX_GPIO_Init+0x118>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <MX_GPIO_Init+0x118>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800043e:	4828      	ldr	r0, [pc, #160]	; (80004e0 <MX_GPIO_Init+0x11c>)
 8000440:	f000 fc6c 	bl	8000d1c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000444:	2200      	movs	r2, #0
 8000446:	f241 01f8 	movw	r1, #4344	; 0x10f8
 800044a:	4826      	ldr	r0, [pc, #152]	; (80004e4 <MX_GPIO_Init+0x120>)
 800044c:	f000 fc66 	bl	8000d1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000450:	2200      	movs	r2, #0
 8000452:	f248 31f0 	movw	r1, #33776	; 0x83f0
 8000456:	4824      	ldr	r0, [pc, #144]	; (80004e8 <MX_GPIO_Init+0x124>)
 8000458:	f000 fc60 	bl	8000d1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800045c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	481a      	ldr	r0, [pc, #104]	; (80004e0 <MX_GPIO_Init+0x11c>)
 8000476:	f000 facd 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800047a:	2308      	movs	r3, #8
 800047c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	4815      	ldr	r0, [pc, #84]	; (80004e8 <MX_GPIO_Init+0x124>)
 8000492:	f000 fabf 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000496:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800049a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	480d      	ldr	r0, [pc, #52]	; (80004e4 <MX_GPIO_Init+0x120>)
 80004b0:	f000 fab0 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004b4:	f248 33f0 	movw	r3, #33776	; 0x83f0
 80004b8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <MX_GPIO_Init+0x124>)
 80004ce:	f000 faa1 	bl	8000a14 <HAL_GPIO_Init>

}
 80004d2:	bf00      	nop
 80004d4:	3720      	adds	r7, #32
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40011000 	.word	0x40011000
 80004e4:	40010800 	.word	0x40010800
 80004e8:	40010c00 	.word	0x40010c00

080004ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]


  for(;;)
 80004f4:	e7fe      	b.n	80004f4 <StartDefaultTask+0x8>

080004f6 <StartComTask>:
  * @brief  Function implementing the ComTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Header_StartComTask */
void StartComTask(void const * argument){
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]

	for(;;)
	  {
			osDelay(20);
 80004fe:	2014      	movs	r0, #20
 8000500:	f007 fae9 	bl	8007ad6 <osDelay>
			Com_Transmit();
 8000504:	f009 fbbc 	bl	8009c80 <Com_Transmit>
			Com_Receive();
 8000508:	f009 fbe2 	bl	8009cd0 <Com_Receive>
			Com_Assign();
 800050c:	f009 fc1c 	bl	8009d48 <Com_Assign>
			osDelay(20);
 8000510:	e7f5      	b.n	80004fe <StartComTask+0x8>
	...

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000526:	f000 f955 	bl	80007d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40000400 	.word	0x40000400

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_MspInit+0x68>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <HAL_MspInit+0x68>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 fa1c 	bl	80009be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x6c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_MspInit+0x6c>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c4:	d10b      	bne.n	80005de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_TIM_Base_MspInit+0x34>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_TIM_Base_MspInit+0x34>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_TIM_Base_MspInit+0x34>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800060a:	d117      	bne.n	800063c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <HAL_TIM_MspPostInit+0x58>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <HAL_TIM_MspPostInit+0x58>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_TIM_MspPostInit+0x58>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000624:	2301      	movs	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <HAL_TIM_MspPostInit+0x5c>)
 8000638:	f000 f9ec 	bl	8000a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800

0800064c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	201d      	movs	r0, #29
 8000662:	f000 f9ac 	bl	80009be <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000666:	201d      	movs	r0, #29
 8000668:	f000 f9c5 	bl	80009f6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <HAL_InitTick+0xa0>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <HAL_InitTick+0xa0>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	61d3      	str	r3, [r2, #28]
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_InitTick+0xa0>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000684:	f107 0210 	add.w	r2, r7, #16
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fca8 	bl	8002fe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000694:	f002 fc92 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8000698:	4603      	mov	r3, r0
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <HAL_InitTick+0xa4>)
 80006a2:	fba2 2303 	umull	r2, r3, r2, r3
 80006a6:	0c9b      	lsrs	r3, r3, #18
 80006a8:	3b01      	subs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_InitTick+0xa8>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <HAL_InitTick+0xac>)
 80006b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_InitTick+0xa8>)
 80006b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_InitTick+0xa8>)
 80006bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006be:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_InitTick+0xa8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_InitTick+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <HAL_InitTick+0xa8>)
 80006ce:	f002 fd8d 	bl	80031ec <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d104      	bne.n	80006e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <HAL_InitTick+0xa8>)
 80006da:	f002 fdd7 	bl	800328c <HAL_TIM_Base_Start_IT>
 80006de:	4603      	mov	r3, r0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3730      	adds	r7, #48	; 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	431bde83 	.word	0x431bde83
 80006f4:	20002644 	.word	0x20002644
 80006f8:	40000400 	.word	0x40000400

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
	...

08000728 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800072e:	f000 fc32 	bl	8000f96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20002f7c 	.word	0x20002f7c

0800073c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <TIM3_IRQHandler+0x10>)
 8000742:	f002 feef 	bl	8003524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20002644 	.word	0x20002644

08000750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800075c:	f7ff fff8 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000762:	490c      	ldr	r1, [pc, #48]	; (8000794 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000778:	4c09      	ldr	r4, [pc, #36]	; (80007a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000786:	f00a f8ef 	bl	800a968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff fd01 	bl	8000190 <main>
  bx lr
 800078e:	4770      	bx	lr
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000798:	0800aacc 	.word	0x0800aacc
  ldr r2, =_sbss
 800079c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80007a0:	2000326c 	.word	0x2000326c

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f8f5 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff44 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff febe 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	20000008 	.word	0x20000008
 80007f4:	2000268c 	.word	0x2000268c

080007f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	2000268c 	.word	0x2000268c

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff fff0 	bl	80007f8 <HAL_GetTick>
 8000818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000824:	d005      	beq.n	8000832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_Delay+0x44>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4413      	add	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000832:	bf00      	nop
 8000834:	f7ff ffe0 	bl	80007f8 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8f7      	bhi.n	8000834 <HAL_Delay+0x28>
  {
  }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <__NVIC_EnableIRQ+0x34>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	; (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
         );
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	; 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff4f 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d0:	f7ff ff64 	bl	800089c <__NVIC_GetPriorityGrouping>
 80009d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f7ff ffb2 	bl	8000944 <NVIC_EncodePriority>
 80009e0:	4602      	mov	r2, r0
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff81 	bl	80008f0 <__NVIC_SetPriority>
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff57 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b08b      	sub	sp, #44	; 0x2c
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	e169      	b.n	8000cfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	f040 8158 	bne.w	8000cf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4a9a      	ldr	r2, [pc, #616]	; (8000cb4 <HAL_GPIO_Init+0x2a0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d05e      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a50:	4a98      	ldr	r2, [pc, #608]	; (8000cb4 <HAL_GPIO_Init+0x2a0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d875      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a56:	4a98      	ldr	r2, [pc, #608]	; (8000cb8 <HAL_GPIO_Init+0x2a4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d058      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a5c:	4a96      	ldr	r2, [pc, #600]	; (8000cb8 <HAL_GPIO_Init+0x2a4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d86f      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a62:	4a96      	ldr	r2, [pc, #600]	; (8000cbc <HAL_GPIO_Init+0x2a8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d052      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a68:	4a94      	ldr	r2, [pc, #592]	; (8000cbc <HAL_GPIO_Init+0x2a8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d869      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a6e:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <HAL_GPIO_Init+0x2ac>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d04c      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a74:	4a92      	ldr	r2, [pc, #584]	; (8000cc0 <HAL_GPIO_Init+0x2ac>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d863      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a7a:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <HAL_GPIO_Init+0x2b0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d046      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a80:	4a90      	ldr	r2, [pc, #576]	; (8000cc4 <HAL_GPIO_Init+0x2b0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d85d      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a86:	2b12      	cmp	r3, #18
 8000a88:	d82a      	bhi.n	8000ae0 <HAL_GPIO_Init+0xcc>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d859      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <HAL_GPIO_Init+0x80>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000ae9 	.word	0x08000ae9
 8000a9c:	08000afb 	.word	0x08000afb
 8000aa0:	08000b3d 	.word	0x08000b3d
 8000aa4:	08000b43 	.word	0x08000b43
 8000aa8:	08000b43 	.word	0x08000b43
 8000aac:	08000b43 	.word	0x08000b43
 8000ab0:	08000b43 	.word	0x08000b43
 8000ab4:	08000b43 	.word	0x08000b43
 8000ab8:	08000b43 	.word	0x08000b43
 8000abc:	08000b43 	.word	0x08000b43
 8000ac0:	08000b43 	.word	0x08000b43
 8000ac4:	08000b43 	.word	0x08000b43
 8000ac8:	08000b43 	.word	0x08000b43
 8000acc:	08000b43 	.word	0x08000b43
 8000ad0:	08000b43 	.word	0x08000b43
 8000ad4:	08000b43 	.word	0x08000b43
 8000ad8:	08000af1 	.word	0x08000af1
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	4a79      	ldr	r2, [pc, #484]	; (8000cc8 <HAL_GPIO_Init+0x2b4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ae6:	e02c      	b.n	8000b42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e029      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e024      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	3308      	adds	r3, #8
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e01f      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e01a      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b16:	2304      	movs	r3, #4
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e013      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d105      	bne.n	8000b30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	611a      	str	r2, [r3, #16]
          break;
 8000b2e:	e009      	b.n	8000b44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b30:	2308      	movs	r3, #8
 8000b32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	615a      	str	r2, [r3, #20]
          break;
 8000b3a:	e003      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          break;
 8000b42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	2bff      	cmp	r3, #255	; 0xff
 8000b48:	d801      	bhi.n	8000b4e <HAL_GPIO_Init+0x13a>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	e001      	b.n	8000b52 <HAL_GPIO_Init+0x13e>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3304      	adds	r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d802      	bhi.n	8000b60 <HAL_GPIO_Init+0x14c>
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x152>
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	3b08      	subs	r3, #8
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	401a      	ands	r2, r3
 8000b78:	6a39      	ldr	r1, [r7, #32]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	431a      	orrs	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b94:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <HAL_GPIO_Init+0x2b8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <HAL_GPIO_Init+0x2b8>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_GPIO_Init+0x2b8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bac:	4a48      	ldr	r2, [pc, #288]	; (8000cd0 <HAL_GPIO_Init+0x2bc>)
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_GPIO_Init+0x2c0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d013      	beq.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a3f      	ldr	r2, [pc, #252]	; (8000cd8 <HAL_GPIO_Init+0x2c4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d00d      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <HAL_GPIO_Init+0x2c8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a3d      	ldr	r2, [pc, #244]	; (8000ce0 <HAL_GPIO_Init+0x2cc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d101      	bne.n	8000bf4 <HAL_GPIO_Init+0x1e0>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000c00:	2300      	movs	r3, #0
 8000c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c12:	492f      	ldr	r1, [pc, #188]	; (8000cd0 <HAL_GPIO_Init+0x2bc>)
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	492c      	ldr	r1, [pc, #176]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	608b      	str	r3, [r1, #8]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4928      	ldr	r1, [pc, #160]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	4922      	ldr	r1, [pc, #136]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60cb      	str	r3, [r1, #12]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	491e      	ldr	r1, [pc, #120]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4918      	ldr	r1, [pc, #96]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	604b      	str	r3, [r1, #4]
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	4914      	ldr	r1, [pc, #80]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d021      	beq.n	8000ce8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	600b      	str	r3, [r1, #0]
 8000cb0:	e021      	b.n	8000cf6 <HAL_GPIO_Init+0x2e2>
 8000cb2:	bf00      	nop
 8000cb4:	10320000 	.word	0x10320000
 8000cb8:	10310000 	.word	0x10310000
 8000cbc:	10220000 	.word	0x10220000
 8000cc0:	10210000 	.word	0x10210000
 8000cc4:	10120000 	.word	0x10120000
 8000cc8:	10110000 	.word	0x10110000
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40011400 	.word	0x40011400
 8000ce4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_GPIO_Init+0x304>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4909      	ldr	r1, [pc, #36]	; (8000d18 <HAL_GPIO_Init+0x304>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	fa22 f303 	lsr.w	r3, r2, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f47f ae8e 	bne.w	8000a28 <HAL_GPIO_Init+0x14>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	372c      	adds	r7, #44	; 0x2c
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40010400 	.word	0x40010400

08000d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d2c:	787b      	ldrb	r3, [r7, #1]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d38:	e003      	b.n	8000d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	041a      	lsls	r2, r3, #16
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	611a      	str	r2, [r3, #16]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b08b      	sub	sp, #44	; 0x2c
 8000d50:	af06      	add	r7, sp, #24
 8000d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0f1      	b.n	8000f42 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d106      	bne.n	8000d78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f009 fb4e 	bl	800a414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 f9bd 	bl	8004104 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	687e      	ldr	r6, [r7, #4]
 8000d92:	466d      	mov	r5, sp
 8000d94:	f106 0410 	add.w	r4, r6, #16
 8000d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	602b      	str	r3, [r5, #0]
 8000da0:	1d33      	adds	r3, r6, #4
 8000da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da4:	6838      	ldr	r0, [r7, #0]
 8000da6:	f003 f987 	bl	80040b8 <USB_CoreInit>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2202      	movs	r2, #2
 8000db4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e0c2      	b.n	8000f42 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 f9b8 	bl	8004138 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e040      	b.n	8000e50 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	440b      	add	r3, r1
 8000dde:	3301      	adds	r3, #1
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	440b      	add	r3, r1
 8000e08:	3303      	adds	r3, #3
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3338      	adds	r3, #56	; 0x38
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	333c      	adds	r3, #60	; 0x3c
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	3340      	adds	r3, #64	; 0x40
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	7bfa      	ldrb	r2, [r7, #15]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3b9      	bcc.n	8000dce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e044      	b.n	8000eea <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d3b5      	bcc.n	8000e60 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	687e      	ldr	r6, [r7, #4]
 8000efc:	466d      	mov	r5, sp
 8000efe:	f106 0410 	add.w	r4, r6, #16
 8000f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	602b      	str	r3, [r5, #0]
 8000f0a:	1d33      	adds	r3, r6, #4
 8000f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f0e:	6838      	ldr	r0, [r7, #0]
 8000f10:	f003 f91e 	bl	8004150 <USB_DevInit>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00d      	b.n	8000f42 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 f93a 	bl	80061b4 <USB_DevDisconnect>

  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_PCD_Start+0x16>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e016      	b.n	8000f8e <HAL_PCD_Start+0x44>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 f8b3 	bl	80040d8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f72:	2101      	movs	r1, #1
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f009 fcc0 	bl	800a8fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f005 f90e 	bl	80061a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b088      	sub	sp, #32
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 f910 	bl	80061c8 <USB_ReadInterrupts>
 8000fa8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 fb1d 	bl	80015f4 <PCD_EP_ISR_Handler>

    return;
 8000fba:	e11b      	b.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d013      	beq.n	8000fee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fd8:	b292      	uxth	r2, r2
 8000fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f009 fa93 	bl	800a50a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f907 	bl	80011fa <HAL_PCD_SetAddress>

    return;
 8000fec:	e102      	b.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00c      	beq.n	8001012 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001000:	b29a      	uxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800100a:	b292      	uxth	r2, r2
 800100c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001010:	e0f0      	b.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00c      	beq.n	8001036 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001024:	b29a      	uxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800102e:	b292      	uxth	r2, r2
 8001030:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001034:	e0de      	b.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d027      	beq.n	8001090 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001048:	b29a      	uxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0204 	bic.w	r2, r2, #4
 8001052:	b292      	uxth	r2, r2
 8001054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0208 	bic.w	r2, r2, #8
 800106a:	b292      	uxth	r2, r2
 800106c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f009 fa83 	bl	800a57c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001088:	b292      	uxth	r2, r2
 800108a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800108e:	e0b1      	b.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8085 	beq.w	80011a6 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	77fb      	strb	r3, [r7, #31]
 80010a0:	e011      	b.n	80010c6 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	441a      	add	r2, r3
 80010ae:	7ffb      	ldrb	r3, [r7, #31]
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	b292      	uxth	r2, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	f107 0120 	add.w	r1, r7, #32
 80010ba:	440b      	add	r3, r1
 80010bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	3301      	adds	r3, #1
 80010c4:	77fb      	strb	r3, [r7, #31]
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	d9ea      	bls.n	80010a2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	b292      	uxth	r2, r2
 80010e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	b292      	uxth	r2, r2
 80010f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80010fc:	bf00      	nop
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001106:	b29b      	uxth	r3, r3
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f6      	beq.n	80010fe <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001118:	b29a      	uxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001122:	b292      	uxth	r2, r2
 8001124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	77fb      	strb	r3, [r7, #31]
 800112c:	e010      	b.n	8001150 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800112e:	7ffb      	ldrb	r3, [r7, #31]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	4611      	mov	r1, r2
 8001136:	7ffa      	ldrb	r2, [r7, #31]
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	440a      	add	r2, r1
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	f107 0120 	add.w	r1, r7, #32
 8001142:	440b      	add	r3, r1
 8001144:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001148:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	3301      	adds	r3, #1
 800114e:	77fb      	strb	r3, [r7, #31]
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9eb      	bls.n	800112e <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 0208 	orr.w	r2, r2, #8
 8001168:	b292      	uxth	r2, r2
 800116a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001180:	b292      	uxth	r2, r2
 8001182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 0204 	orr.w	r2, r2, #4
 8001198:	b292      	uxth	r2, r2
 800119a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f009 f9d2 	bl	800a548 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011a4:	e026      	b.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00f      	beq.n	80011d0 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011c2:	b292      	uxth	r2, r2
 80011c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f009 f990 	bl	800a4ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011ce:	e011      	b.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00c      	beq.n	80011f4 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ec:	b292      	uxth	r2, r2
 80011ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011f2:	bf00      	nop
  }
}
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_PCD_SetAddress+0x1a>
 8001210:	2302      	movs	r3, #2
 8001212:	e013      	b.n	800123c <HAL_PCD_SetAddress+0x42>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	78fa      	ldrb	r2, [r7, #3]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f004 ffa4 	bl	800617a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4603      	mov	r3, r0
 8001254:	70fb      	strb	r3, [r7, #3]
 8001256:	460b      	mov	r3, r1
 8001258:	803b      	strh	r3, [r7, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001266:	2b00      	cmp	r3, #0
 8001268:	da0e      	bge.n	8001288 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	705a      	strb	r2, [r3, #1]
 8001286:	e00e      	b.n	80012a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	f003 0207 	and.w	r2, r3, #7
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012b2:	883a      	ldrh	r2, [r7, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	78ba      	ldrb	r2, [r7, #2]
 80012bc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012be:	78bb      	ldrb	r3, [r7, #2]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d102      	bne.n	80012ca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_PCD_EP_Open+0x94>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e00e      	b.n	80012f6 <HAL_PCD_EP_Open+0xb2>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68f9      	ldr	r1, [r7, #12]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 ff52 	bl	8004190 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80012f4:	7afb      	ldrb	r3, [r7, #11]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800130a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da0e      	bge.n	8001330 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	705a      	strb	r2, [r3, #1]
 800132e:	e00e      	b.n	800134e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	f003 0207 	and.w	r2, r3, #7
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	b2da      	uxtb	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_PCD_EP_Close+0x6a>
 8001364:	2302      	movs	r3, #2
 8001366:	e00e      	b.n	8001386 <HAL_PCD_EP_Close+0x88>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	4618      	mov	r0, r3
 8001378:	f003 faca 	bl	8004910 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	460b      	mov	r3, r1
 800139c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	f003 0207 	and.w	r2, r3, #7
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2200      	movs	r2, #0
 80013cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6979      	ldr	r1, [r7, #20]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 fc81 	bl	8004ce8 <USB_EPStartXfer>

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	f003 0207 	and.w	r2, r3, #7
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	460b      	mov	r3, r1
 800142c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800142e:	7afb      	ldrb	r3, [r7, #11]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2200      	movs	r2, #0
 8001462:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2201      	movs	r2, #1
 8001468:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800146a:	7afb      	ldrb	r3, [r7, #11]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	b2da      	uxtb	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6979      	ldr	r1, [r7, #20]
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fc33 	bl	8004ce8 <USB_EPStartXfer>

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0207 	and.w	r2, r3, #7
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d901      	bls.n	80014aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e04c      	b.n	8001544 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da0e      	bge.n	80014d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	705a      	strb	r2, [r3, #1]
 80014ce:	e00c      	b.n	80014ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014d0:	78fa      	ldrb	r2, [r7, #3]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_PCD_EP_SetStall+0x7e>
 8001506:	2302      	movs	r3, #2
 8001508:	e01c      	b.n	8001544 <HAL_PCD_EP_SetStall+0xb8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68f9      	ldr	r1, [r7, #12]
 8001518:	4618      	mov	r0, r3
 800151a:	f004 fd31 	bl	8005f80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	2b00      	cmp	r3, #0
 8001526:	d108      	bne.n	800153a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f004 fe56 	bl	80061e6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 020f 	and.w	r2, r3, #15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	d901      	bls.n	800156a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e040      	b.n	80015ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800156a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800156e:	2b00      	cmp	r3, #0
 8001570:	da0e      	bge.n	8001590 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	705a      	strb	r2, [r3, #1]
 800158e:	e00e      	b.n	80015ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f003 0207 	and.w	r2, r3, #7
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_PCD_EP_ClrStall+0x82>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e00e      	b.n	80015ec <HAL_PCD_EP_ClrStall+0xa0>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68f9      	ldr	r1, [r7, #12]
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 fd1f 	bl	8006020 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b096      	sub	sp, #88	; 0x58
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015fc:	e3bf      	b.n	8001d7e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001606:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800160a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001618:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 8179 	bne.w	8001914 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d152      	bne.n	80016d4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800163a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163e:	81fb      	strh	r3, [r7, #14]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800164a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800164e:	b29b      	uxth	r3, r3
 8001650:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3328      	adds	r3, #40	; 0x28
 8001656:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	3302      	adds	r3, #2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001682:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	441a      	add	r2, r3
 800168e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001690:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001692:	2100      	movs	r1, #0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f008 ff10 	bl	800a4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 836b 	beq.w	8001d7e <PCD_EP_ISR_Handler+0x78a>
 80016a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 8366 	bne.w	8001d7e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b292      	uxth	r2, r2
 80016c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016d2:	e354      	b.n	8001d7e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016da:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d034      	beq.n	800175c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	3306      	adds	r3, #6
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800171a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800172c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001730:	b29b      	uxth	r3, r3
 8001732:	f004 fda8 	bl	8006286 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001742:	4013      	ands	r3, r2
 8001744:	823b      	strh	r3, [r7, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	8a3a      	ldrh	r2, [r7, #16]
 800174c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001750:	b292      	uxth	r2, r2
 8001752:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f008 fe83 	bl	800a460 <HAL_PCD_SetupStageCallback>
 800175a:	e310      	b.n	8001d7e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800175c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001760:	2b00      	cmp	r3, #0
 8001762:	f280 830c 	bge.w	8001d7e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29a      	uxth	r2, r3
 800176e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001772:	4013      	ands	r3, r2
 8001774:	83fb      	strh	r3, [r7, #30]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	8bfa      	ldrh	r2, [r7, #30]
 800177c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001780:	b292      	uxth	r2, r2
 8001782:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178c:	b29b      	uxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	3306      	adds	r3, #6
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <PCD_EP_ISR_Handler+0x1f8>
 80017b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d015      	beq.n	80017ec <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	6959      	ldr	r1, [r3, #20]
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f004 fd58 	bl	8006286 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	441a      	add	r2, r3
 80017e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017e4:	2100      	movs	r1, #0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f008 fe4c 	bl	800a484 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80017f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 82bd 	bne.w	8001d7e <PCD_EP_ISR_Handler+0x78a>
 8001804:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001808:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800180c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001810:	f000 82b5 	beq.w	8001d7e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4413      	add	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800183e:	b29a      	uxth	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	801a      	strh	r2, [r3, #0]
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b3e      	cmp	r3, #62	; 0x3e
 800184a:	d91d      	bls.n	8001888 <PCD_EP_ISR_Handler+0x294>
 800184c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
 8001854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <PCD_EP_ISR_Handler+0x272>
 8001860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001862:	3b01      	subs	r3, #1
 8001864:	647b      	str	r3, [r7, #68]	; 0x44
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186e:	b29b      	uxth	r3, r3
 8001870:	029b      	lsls	r3, r3, #10
 8001872:	b29b      	uxth	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800187c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001880:	b29a      	uxth	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	801a      	strh	r2, [r3, #0]
 8001886:	e026      	b.n	80018d6 <PCD_EP_ISR_Handler+0x2e2>
 8001888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10a      	bne.n	80018a6 <PCD_EP_ISR_Handler+0x2b2>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800189a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800189e:	b29a      	uxth	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	801a      	strh	r2, [r3, #0]
 80018a4:	e017      	b.n	80018d6 <PCD_EP_ISR_Handler+0x2e2>
 80018a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	085b      	lsrs	r3, r3, #1
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
 80018ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <PCD_EP_ISR_Handler+0x2cc>
 80018ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018bc:	3301      	adds	r3, #1
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	029b      	lsls	r3, r3, #10
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e6:	827b      	strh	r3, [r7, #18]
 80018e8:	8a7b      	ldrh	r3, [r7, #18]
 80018ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018ee:	827b      	strh	r3, [r7, #18]
 80018f0:	8a7b      	ldrh	r3, [r7, #18]
 80018f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018f6:	827b      	strh	r3, [r7, #18]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	8a7b      	ldrh	r3, [r7, #18]
 80018fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190e:	b29b      	uxth	r3, r3
 8001910:	8013      	strh	r3, [r2, #0]
 8001912:	e234      	b.n	8001d7e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001928:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800192c:	2b00      	cmp	r3, #0
 800192e:	f280 80fc 	bge.w	8001b2a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	b29a      	uxth	r2, r3
 8001944:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001948:	4013      	ands	r3, r2
 800194a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001960:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001964:	b292      	uxth	r2, r2
 8001966:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001968:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	7b1b      	ldrb	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d125      	bne.n	80019d2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	3306      	adds	r3, #6
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80019b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8092 	beq.w	8001ae0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	6959      	ldr	r1, [r3, #20]
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	88da      	ldrh	r2, [r3, #6]
 80019c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019cc:	f004 fc5b 	bl	8006286 <USB_ReadPMA>
 80019d0:	e086      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d4:	78db      	ldrb	r3, [r3, #3]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d10a      	bne.n	80019f0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019de:	461a      	mov	r2, r3
 80019e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f9d9 	bl	8001d9a <HAL_PCD_EP_DB_Receive>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80019ee:	e077      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	441a      	add	r2, r3
 8001a1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	3302      	adds	r3, #2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d02e      	beq.n	8001ae0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	6959      	ldr	r1, [r3, #20]
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	891a      	ldrh	r2, [r3, #8]
 8001a8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a92:	f004 fbf8 	bl	8006286 <USB_ReadPMA>
 8001a96:	e023      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3306      	adds	r3, #6
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ac4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	6959      	ldr	r1, [r3, #20]
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad6:	895a      	ldrh	r2, [r3, #10]
 8001ad8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001adc:	f004 fbd3 	bl	8006286 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	441a      	add	r2, r3
 8001aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af6:	441a      	add	r2, r3
 8001af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <PCD_EP_ISR_Handler+0x51c>
 8001b04:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d206      	bcs.n	8001b1e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f008 fcb4 	bl	800a484 <HAL_PCD_DataOutStageCallback>
 8001b1c:	e005      	b.n	8001b2a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 f8df 	bl	8004ce8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8123 	beq.w	8001d7e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	441a      	add	r2, r3
 8001b78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	78db      	ldrb	r3, [r3, #3]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	f040 80a2 	bne.w	8001cd6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9a:	7b1b      	ldrb	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8093 	beq.w	8001cc8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ba2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d046      	beq.n	8001c3c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb0:	785b      	ldrb	r3, [r3, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d126      	bne.n	8001c04 <PCD_EP_ISR_Handler+0x610>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	4413      	add	r3, r2
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	011a      	lsls	r2, r3, #4
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bdc:	623b      	str	r3, [r7, #32]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	e061      	b.n	8001cc8 <PCD_EP_ISR_Handler+0x6d4>
 8001c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d15d      	bne.n	8001cc8 <PCD_EP_ISR_Handler+0x6d4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	4413      	add	r3, r2
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	011a      	lsls	r2, r3, #4
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	e045      	b.n	8001cc8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d126      	bne.n	8001c98 <PCD_EP_ISR_Handler+0x6a4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5e:	4413      	add	r3, r2
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
 8001c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	011a      	lsls	r2, r3, #4
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	e017      	b.n	8001cc8 <PCD_EP_ISR_Handler+0x6d4>
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d113      	bne.n	8001cc8 <PCD_EP_ISR_Handler+0x6d4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cae:	4413      	add	r3, r2
 8001cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	011a      	lsls	r2, r3, #4
 8001cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cba:	4413      	add	r3, r2
 8001cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f008 fbf3 	bl	800a4ba <HAL_PCD_DataInStageCallback>
 8001cd4:	e053      	b.n	8001d7e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d146      	bne.n	8001d70 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d907      	bls.n	8001d2a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d22:	1ad2      	subs	r2, r2, r3
 8001d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d26:	619a      	str	r2, [r3, #24]
 8001d28:	e002      	b.n	8001d30 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d106      	bne.n	8001d46 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f008 fbbb 	bl	800a4ba <HAL_PCD_DataInStageCallback>
 8001d44:	e01b      	b.n	8001d7e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d4e:	441a      	add	r2, r3
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d56:	69da      	ldr	r2, [r3, #28]
 8001d58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d5c:	441a      	add	r2, r3
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d60:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 ffbd 	bl	8004ce8 <USB_EPStartXfer>
 8001d6e:	e006      	b.n	8001d7e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d74:	461a      	mov	r2, r3
 8001d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f91b 	bl	8001fb4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f6ff ac37 	blt.w	80015fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3758      	adds	r7, #88	; 0x58
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b088      	sub	sp, #32
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	4613      	mov	r3, r2
 8001da6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	8b7b      	ldrh	r3, [r7, #26]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d306      	bcc.n	8001df4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	8b7b      	ldrh	r3, [r7, #26]
 8001dec:	1ad2      	subs	r2, r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	619a      	str	r2, [r3, #24]
 8001df2:	e002      	b.n	8001dfa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d123      	bne.n	8001e4a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1c:	833b      	strh	r3, [r7, #24]
 8001e1e:	8b3b      	ldrh	r3, [r7, #24]
 8001e20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e24:	833b      	strh	r3, [r7, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	441a      	add	r2, r3
 8001e34:	8b3b      	ldrh	r3, [r7, #24]
 8001e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01f      	beq.n	8001e94 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6e:	82fb      	strh	r3, [r7, #22]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	8afb      	ldrh	r3, [r7, #22]
 8001e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e94:	8b7b      	ldrh	r3, [r7, #26]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	6959      	ldr	r1, [r3, #20]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	891a      	ldrh	r2, [r3, #8]
 8001ea8:	8b7b      	ldrh	r3, [r7, #26]
 8001eaa:	f004 f9ec 	bl	8006286 <USB_ReadPMA>
 8001eae:	e07c      	b.n	8001faa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3306      	adds	r3, #6
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	8b7b      	ldrh	r3, [r7, #26]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d306      	bcc.n	8001ef2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	8b7b      	ldrh	r3, [r7, #26]
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	619a      	str	r2, [r3, #24]
 8001ef0:	e002      	b.n	8001ef8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d123      	bne.n	8001f48 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1a:	83fb      	strh	r3, [r7, #30]
 8001f1c:	8bfb      	ldrh	r3, [r7, #30]
 8001f1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f22:	83fb      	strh	r3, [r7, #30]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	441a      	add	r2, r3
 8001f32:	8bfb      	ldrh	r3, [r7, #30]
 8001f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d11f      	bne.n	8001f92 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6c:	83bb      	strh	r3, [r7, #28]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	441a      	add	r2, r3
 8001f7c:	8bbb      	ldrh	r3, [r7, #28]
 8001f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f92:	8b7b      	ldrh	r3, [r7, #26]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	6959      	ldr	r1, [r3, #20]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	895a      	ldrh	r2, [r3, #10]
 8001fa4:	8b7b      	ldrh	r3, [r7, #26]
 8001fa6:	f004 f96e 	bl	8006286 <USB_ReadPMA>
    }
  }

  return count;
 8001faa:	8b7b      	ldrh	r3, [r7, #26]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0a4      	sub	sp, #144	; 0x90
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 81dd 	beq.w	8002388 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002002:	429a      	cmp	r2, r3
 8002004:	d907      	bls.n	8002016 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	619a      	str	r2, [r3, #24]
 8002014:	e002      	b.n	800201c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f040 80b9 	bne.w	8002198 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d126      	bne.n	800207c <HAL_PCD_EP_DB_Transmit+0xc8>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	4413      	add	r3, r2
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	011a      	lsls	r2, r3, #4
 800204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204e:	4413      	add	r3, r2
 8002050:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002060:	b29a      	uxth	r2, r3
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002074:	b29a      	uxth	r2, r3
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	e01a      	b.n	80020b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d116      	bne.n	80020b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	4413      	add	r3, r2
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	011a      	lsls	r2, r3, #4
 80020a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a4:	4413      	add	r3, r2
 80020a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	2200      	movs	r2, #0
 80020b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d126      	bne.n	800210e <HAL_PCD_EP_DB_Transmit+0x15a>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	011a      	lsls	r2, r3, #4
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4413      	add	r3, r2
 80020e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002106:	b29a      	uxth	r2, r3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	801a      	strh	r2, [r3, #0]
 800210c:	e017      	b.n	800213e <HAL_PCD_EP_DB_Transmit+0x18a>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d113      	bne.n	800213e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	4413      	add	r3, r2
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	011a      	lsls	r2, r3, #4
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	4413      	add	r3, r2
 8002132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2200      	movs	r2, #0
 800213c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f008 f9b8 	bl	800a4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 82fc 	beq.w	800274e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800216c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002170:	82fb      	strh	r3, [r7, #22]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	441a      	add	r2, r3
 8002180:	8afb      	ldrh	r3, [r7, #22]
 8002182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800218a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800218e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002192:	b29b      	uxth	r3, r3
 8002194:	8013      	strh	r3, [r2, #0]
 8002196:	e2da      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d021      	beq.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80021d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	f040 82ae 	bne.w	800274e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021fa:	441a      	add	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002208:	441a      	add	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	d30b      	bcc.n	8002232 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	621a      	str	r2, [r3, #32]
 8002230:	e017      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800223a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800223e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800224a:	e00a      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d165      	bne.n	8002336 <HAL_PCD_EP_DB_Transmit+0x382>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227e:	4413      	add	r3, r2
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	011a      	lsls	r2, r3, #4
 8002288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228a:	4413      	add	r3, r2
 800228c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229c:	b29a      	uxth	r2, r3
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	801a      	strh	r2, [r3, #0]
 80022a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a6:	2b3e      	cmp	r3, #62	; 0x3e
 80022a8:	d91d      	bls.n	80022e6 <HAL_PCD_EP_DB_Transmit+0x332>
 80022aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <HAL_PCD_EP_DB_Transmit+0x310>
 80022be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c0:	3b01      	subs	r3, #1
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022de:	b29a      	uxth	r2, r3
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	e044      	b.n	8002370 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <HAL_PCD_EP_DB_Transmit+0x350>
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	e035      	b.n	8002370 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
 800230c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800231a:	3301      	adds	r3, #1
 800231c:	64bb      	str	r3, [r7, #72]	; 0x48
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29a      	uxth	r2, r3
 8002324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002326:	b29b      	uxth	r3, r3
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	b29b      	uxth	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	b29a      	uxth	r2, r3
 8002330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002332:	801a      	strh	r2, [r3, #0]
 8002334:	e01c      	b.n	8002370 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d118      	bne.n	8002370 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	647b      	str	r3, [r7, #68]	; 0x44
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002352:	4413      	add	r3, r2
 8002354:	647b      	str	r3, [r7, #68]	; 0x44
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	011a      	lsls	r2, r3, #4
 800235c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235e:	4413      	add	r3, r2
 8002360:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002364:	643b      	str	r3, [r7, #64]	; 0x40
 8002366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800236a:	b29a      	uxth	r2, r3
 800236c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6959      	ldr	r1, [r3, #20]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	891a      	ldrh	r2, [r3, #8]
 800237c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002380:	b29b      	uxth	r3, r3
 8002382:	f003 ff3b 	bl	80061fc <USB_WritePMA>
 8002386:	e1e2      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	3306      	adds	r3, #6
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023bc:	429a      	cmp	r2, r3
 80023be:	d307      	bcc.n	80023d0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023c8:	1ad2      	subs	r2, r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	619a      	str	r2, [r3, #24]
 80023ce:	e002      	b.n	80023d6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 80c0 	bne.w	8002560 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d126      	bne.n	8002436 <HAL_PCD_EP_DB_Transmit+0x482>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023fc:	4413      	add	r3, r2
 80023fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	011a      	lsls	r2, r3, #4
 8002406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002408:	4413      	add	r3, r2
 800240a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800240e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241a:	b29a      	uxth	r2, r3
 800241c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242e:	b29a      	uxth	r2, r3
 8002430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002432:	801a      	strh	r2, [r3, #0]
 8002434:	e01a      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d116      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	667b      	str	r3, [r7, #100]	; 0x64
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002452:	4413      	add	r3, r2
 8002454:	667b      	str	r3, [r7, #100]	; 0x64
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	011a      	lsls	r2, r3, #4
 800245c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800245e:	4413      	add	r3, r2
 8002460:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002464:	663b      	str	r3, [r7, #96]	; 0x60
 8002466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002468:	2200      	movs	r2, #0
 800246a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	677b      	str	r3, [r7, #116]	; 0x74
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d12b      	bne.n	80024d2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002488:	b29b      	uxth	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	4413      	add	r3, r2
 8002490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	011a      	lsls	r2, r3, #4
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	4413      	add	r3, r2
 800249c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ce:	801a      	strh	r2, [r3, #0]
 80024d0:	e017      	b.n	8002502 <HAL_PCD_EP_DB_Transmit+0x54e>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d113      	bne.n	8002502 <HAL_PCD_EP_DB_Transmit+0x54e>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e8:	4413      	add	r3, r2
 80024ea:	677b      	str	r3, [r7, #116]	; 0x74
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	011a      	lsls	r2, r3, #4
 80024f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024fa:	673b      	str	r3, [r7, #112]	; 0x70
 80024fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f007 ffd6 	bl	800a4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 811a 	bne.w	800274e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002534:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800254a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255a:	b29b      	uxth	r3, r3
 800255c:	8013      	strh	r3, [r2, #0]
 800255e:	e0f6      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d121      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002584:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800259a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	f040 80ca 	bne.w	800274e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025c2:	441a      	add	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025d0:	441a      	add	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d30b      	bcc.n	80025fa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f2:	1ad2      	subs	r2, r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	621a      	str	r2, [r3, #32]
 80025f8:	e017      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002602:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002612:	e00a      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	657b      	str	r3, [r7, #84]	; 0x54
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d165      	bne.n	8002704 <HAL_PCD_EP_DB_Transmit+0x750>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264c:	4413      	add	r3, r2
 800264e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	011a      	lsls	r2, r3, #4
 8002656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002658:	4413      	add	r3, r2
 800265a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800265e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266a:	b29a      	uxth	r2, r3
 800266c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266e:	801a      	strh	r2, [r3, #0]
 8002670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002674:	2b3e      	cmp	r3, #62	; 0x3e
 8002676:	d91d      	bls.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x700>
 8002678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x6de>
 800268c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268e:	3b01      	subs	r3, #1
 8002690:	66bb      	str	r3, [r7, #104]	; 0x68
 8002692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
 8002698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269a:	b29b      	uxth	r3, r3
 800269c:	029b      	lsls	r3, r3, #10
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	e041      	b.n	8002738 <HAL_PCD_EP_DB_Transmit+0x784>
 80026b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80026bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ce:	801a      	strh	r2, [r3, #0]
 80026d0:	e032      	b.n	8002738 <HAL_PCD_EP_DB_Transmit+0x784>
 80026d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80026da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_PCD_EP_DB_Transmit+0x738>
 80026e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e8:	3301      	adds	r3, #1
 80026ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80026ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	e019      	b.n	8002738 <HAL_PCD_EP_DB_Transmit+0x784>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d115      	bne.n	8002738 <HAL_PCD_EP_DB_Transmit+0x784>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	4413      	add	r3, r2
 800271c:	657b      	str	r3, [r7, #84]	; 0x54
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	011a      	lsls	r2, r3, #4
 8002724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002726:	4413      	add	r3, r2
 8002728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800272c:	653b      	str	r3, [r7, #80]	; 0x50
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002732:	b29a      	uxth	r2, r3
 8002734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002736:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	6959      	ldr	r1, [r3, #20]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	895a      	ldrh	r2, [r3, #10]
 8002744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002748:	b29b      	uxth	r3, r3
 800274a:	f003 fd57 	bl	80061fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002768:	82bb      	strh	r3, [r7, #20]
 800276a:	8abb      	ldrh	r3, [r7, #20]
 800276c:	f083 0310 	eor.w	r3, r3, #16
 8002770:	82bb      	strh	r3, [r7, #20]
 8002772:	8abb      	ldrh	r3, [r7, #20]
 8002774:	f083 0320 	eor.w	r3, r3, #32
 8002778:	82bb      	strh	r3, [r7, #20]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	441a      	add	r2, r3
 8002788:	8abb      	ldrh	r3, [r7, #20]
 800278a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279a:	b29b      	uxth	r3, r3
 800279c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3790      	adds	r7, #144	; 0x90
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	4613      	mov	r3, r2
 80027b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e009      	b.n	80027f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027de:	897a      	ldrh	r2, [r7, #10]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027f2:	893b      	ldrh	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2200      	movs	r2, #0
 80027fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	b29a      	uxth	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	80da      	strh	r2, [r3, #6]
 8002806:	e00b      	b.n	8002820 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2201      	movs	r2, #1
 800280c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	b29a      	uxth	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	b29a      	uxth	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e26c      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8087 	beq.w	800295a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800284c:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b04      	cmp	r3, #4
 8002856:	d00c      	beq.n	8002872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002858:	4b8f      	ldr	r3, [pc, #572]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d112      	bne.n	800288a <HAL_RCC_OscConfig+0x5e>
 8002864:	4b8c      	ldr	r3, [pc, #560]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d10b      	bne.n	800288a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d06c      	beq.n	8002958 <HAL_RCC_OscConfig+0x12c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d168      	bne.n	8002958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e246      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x76>
 8002894:	4b80      	ldr	r3, [pc, #512]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a7f      	ldr	r2, [pc, #508]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	e02e      	b.n	8002900 <HAL_RCC_OscConfig+0xd4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x98>
 80028aa:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7a      	ldr	r2, [pc, #488]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b78      	ldr	r3, [pc, #480]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a77      	ldr	r2, [pc, #476]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e01d      	b.n	8002900 <HAL_RCC_OscConfig+0xd4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0xbc>
 80028ce:	4b72      	ldr	r3, [pc, #456]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a71      	ldr	r2, [pc, #452]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6e      	ldr	r2, [pc, #440]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0xd4>
 80028e8:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6a      	ldr	r2, [pc, #424]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fd ff76 	bl	80007f8 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fd ff72 	bl	80007f8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1fa      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0xe4>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fd ff62 	bl	80007f8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7fd ff5e 	bl	80007f8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1e6      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x10c>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d063      	beq.n	8002a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002966:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	d11c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x18c>
 800297e:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x176>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e1ba      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4939      	ldr	r1, [pc, #228]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	e03a      	b.n	8002a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d020      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c0:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <HAL_RCC_OscConfig+0x270>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fd ff17 	bl	80007f8 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fd ff13 	bl	80007f8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e19b      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e0:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4927      	ldr	r1, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]
 8002a00:	e015      	b.n	8002a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCC_OscConfig+0x270>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fd fef6 	bl	80007f8 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a10:	f7fd fef2 	bl	80007f8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e17a      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d03a      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d019      	beq.n	8002a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fd fed6 	bl	80007f8 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a50:	f7fd fed2 	bl	80007f8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e15a      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f000 fae8 	bl	8003044 <RCC_Delay>
 8002a74:	e01c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7fd febc 	bl	80007f8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a82:	e00f      	b.n	8002aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a84:	f7fd feb8 	bl	80007f8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d908      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e140      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	42420000 	.word	0x42420000
 8002aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	4b9e      	ldr	r3, [pc, #632]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e9      	bne.n	8002a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a6 	beq.w	8002c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac2:	4b97      	ldr	r3, [pc, #604]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b94      	ldr	r3, [pc, #592]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a93      	ldr	r2, [pc, #588]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	61d3      	str	r3, [r2, #28]
 8002ada:	4b91      	ldr	r3, [pc, #580]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	4b8e      	ldr	r3, [pc, #568]	; (8002d24 <HAL_RCC_OscConfig+0x4f8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d118      	bne.n	8002b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af6:	4b8b      	ldr	r3, [pc, #556]	; (8002d24 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a8a      	ldr	r2, [pc, #552]	; (8002d24 <HAL_RCC_OscConfig+0x4f8>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b02:	f7fd fe79 	bl	80007f8 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fd fe75 	bl	80007f8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	; 0x64
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e0fd      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x312>
 8002b30:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4a7a      	ldr	r2, [pc, #488]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6213      	str	r3, [r2, #32]
 8002b3c:	e02d      	b.n	8002b9a <HAL_RCC_OscConfig+0x36e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x334>
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	e01c      	b.n	8002b9a <HAL_RCC_OscConfig+0x36e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x356>
 8002b68:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a6c      	ldr	r2, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x36e>
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d015      	beq.n	8002bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fd fe29 	bl	80007f8 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fd fe25 	bl	80007f8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0ab      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <HAL_RCC_OscConfig+0x37e>
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fd fe13 	bl	80007f8 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fd fe0f 	bl	80007f8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e095      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	4b4c      	ldr	r3, [pc, #304]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4b48      	ldr	r3, [pc, #288]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8081 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c14:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d061      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d146      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b3f      	ldr	r3, [pc, #252]	; (8002d28 <HAL_RCC_OscConfig+0x4fc>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fd fde3 	bl	80007f8 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fd fddf 	bl	80007f8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e067      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d108      	bne.n	8002c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	492d      	ldr	r1, [pc, #180]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a19      	ldr	r1, [r3, #32]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	430b      	orrs	r3, r1
 8002c82:	4927      	ldr	r1, [pc, #156]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x4fc>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fd fdb3 	bl	80007f8 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fd fdaf 	bl	80007f8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e037      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x46a>
 8002cb4:	e02f      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <HAL_RCC_OscConfig+0x4fc>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fd fd9c 	bl	80007f8 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fd fd98 	bl	80007f8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e020      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x498>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e013      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42420060 	.word	0x42420060

08002d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0d0      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d910      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b67      	ldr	r3, [pc, #412]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4965      	ldr	r1, [pc, #404]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002daa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	494d      	ldr	r1, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d040      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e073      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e06b      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4936      	ldr	r1, [pc, #216]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fd fcec 	bl	80007f8 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fd fce8 	bl	80007f8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e053      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d210      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0207 	bic.w	r2, r3, #7
 8002e62:	4922      	ldr	r1, [pc, #136]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e032      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eba:	f000 f821 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1d0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fbb6 	bl	800064c <HAL_InitTick>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	0800aa98 	.word	0x0800aa98
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d002      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x30>
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x36>
 8002f2e:	e027      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f32:	613b      	str	r3, [r7, #16]
      break;
 8002f34:	e027      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0c9b      	lsrs	r3, r3, #18
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0c5b      	lsrs	r3, r3, #17
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f62:	fb02 f203 	mul.w	r2, r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e004      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	613b      	str	r3, [r7, #16]
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f82:	613b      	str	r3, [r7, #16]
      break;
 8002f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f86:	693b      	ldr	r3, [r7, #16]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	007a1200 	.word	0x007a1200
 8002f9c:	0800aab0 	.word	0x0800aab0
 8002fa0:	0800aac0 	.word	0x0800aac0
 8002fa4:	003d0900 	.word	0x003d0900

08002fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fac:	4b02      	ldr	r3, [pc, #8]	; (8002fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	20000000 	.word	0x20000000

08002fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc0:	f7ff fff2 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	0800aaa8 	.word	0x0800aaa8

08002fe4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_GetClockConfig+0x58>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0203 	and.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_RCC_GetClockConfig+0x58>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_GetClockConfig+0x58>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_RCC_GetClockConfig+0x58>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0207 	and.w	r2, r3, #7
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	40021000 	.word	0x40021000
 8003040:	40022000 	.word	0x40022000

08003044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <RCC_Delay+0x34>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <RCC_Delay+0x38>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0a5b      	lsrs	r3, r3, #9
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003060:	bf00      	nop
  }
  while (Delay --);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1e5a      	subs	r2, r3, #1
 8003066:	60fa      	str	r2, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f9      	bne.n	8003060 <RCC_Delay+0x1c>
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	20000000 	.word	0x20000000
 800307c:	10624dd3 	.word	0x10624dd3

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d07d      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a0:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4a4b      	ldr	r2, [pc, #300]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	61d3      	str	r3, [r2, #28]
 80030b8:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d118      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d4:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a42      	ldr	r2, [pc, #264]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e0:	f7fd fb8a 	bl	80007f8 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	e008      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e8:	f7fd fb86 	bl	80007f8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e06d      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b3a      	ldr	r3, [pc, #232]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02e      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d027      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800312e:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003134:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800313a:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d014      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314a:	f7fd fb55 	bl	80007f8 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fd fb51 	bl	80007f8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e036      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ee      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4917      	ldr	r1, [pc, #92]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	4313      	orrs	r3, r2
 8003184:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	490b      	ldr	r1, [pc, #44]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42420440 	.word	0x42420440

080031ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e041      	b.n	8003282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd f9ce 	bl	80005b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 fc30 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e03a      	b.n	800331a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_TIM_Base_Start_IT+0x98>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d009      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_TIM_Base_Start_IT+0x9c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <HAL_TIM_Base_Start_IT+0xa0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d111      	bne.n	8003308 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d010      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	e007      	b.n	8003318 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800

08003330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e041      	b.n	80033c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f839 	bl	80033ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f000 fb8e 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_TIM_PWM_Start+0x24>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e022      	b.n	800344a <HAL_TIM_PWM_Start+0x6a>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d109      	bne.n	800341e <HAL_TIM_PWM_Start+0x3e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e015      	b.n	800344a <HAL_TIM_PWM_Start+0x6a>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d109      	bne.n	8003438 <HAL_TIM_PWM_Start+0x58>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e008      	b.n	800344a <HAL_TIM_PWM_Start+0x6a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e05e      	b.n	8003510 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_TIM_PWM_Start+0x82>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003460:	e013      	b.n	800348a <HAL_TIM_PWM_Start+0xaa>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0x92>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	e00b      	b.n	800348a <HAL_TIM_PWM_Start+0xaa>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0xa2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003480:	e003      	b.n	800348a <HAL_TIM_PWM_Start+0xaa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2201      	movs	r2, #1
 8003490:	6839      	ldr	r1, [r7, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fd7c 	bl	8003f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_TIM_PWM_Start+0x138>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d107      	bne.n	80034b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_TIM_PWM_Start+0x138>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_TIM_PWM_Start+0xfa>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d009      	beq.n	80034da <HAL_TIM_PWM_Start+0xfa>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_TIM_PWM_Start+0x13c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIM_PWM_Start+0xfa>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIM_PWM_Start+0x140>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d111      	bne.n	80034fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d010      	beq.n	800350e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	e007      	b.n	800350e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800

08003524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0202 	mvn.w	r2, #2
 8003550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa76 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa69 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fa78 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0204 	mvn.w	r2, #4
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fa4c 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa3f 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fa4e 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0208 	mvn.w	r2, #8
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa22 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa15 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fa24 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b10      	cmp	r3, #16
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b10      	cmp	r3, #16
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0210 	mvn.w	r2, #16
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2208      	movs	r2, #8
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9f8 	bl	8003a58 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f9eb 	bl	8003a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f9fa 	bl	8003a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10e      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d107      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0201 	mvn.w	r2, #1
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fc ff36 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b80      	cmp	r3, #128	; 0x80
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b80      	cmp	r3, #128	; 0x80
 80036c2:	d107      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fce9 	bl	80040a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9be 	bl	8003a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b20      	cmp	r3, #32
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0220 	mvn.w	r2, #32
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fcb4 	bl	8004094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e0ae      	b.n	80038b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	f200 809f 	bhi.w	80038a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800379d 	.word	0x0800379d
 800376c:	080038a1 	.word	0x080038a1
 8003770:	080038a1 	.word	0x080038a1
 8003774:	080038a1 	.word	0x080038a1
 8003778:	080037dd 	.word	0x080037dd
 800377c:	080038a1 	.word	0x080038a1
 8003780:	080038a1 	.word	0x080038a1
 8003784:	080038a1 	.word	0x080038a1
 8003788:	0800381f 	.word	0x0800381f
 800378c:	080038a1 	.word	0x080038a1
 8003790:	080038a1 	.word	0x080038a1
 8003794:	080038a1 	.word	0x080038a1
 8003798:	0800385f 	.word	0x0800385f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f9d6 	bl	8003b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0204 	bic.w	r2, r2, #4
 80037c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6999      	ldr	r1, [r3, #24]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
      break;
 80037da:	e064      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fa1c 	bl	8003c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6999      	ldr	r1, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	021a      	lsls	r2, r3, #8
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	619a      	str	r2, [r3, #24]
      break;
 800381c:	e043      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fa65 	bl	8003cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0208 	orr.w	r2, r2, #8
 8003838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0204 	bic.w	r2, r2, #4
 8003848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69d9      	ldr	r1, [r3, #28]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
      break;
 800385c:	e023      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 faaf 	bl	8003dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69d9      	ldr	r1, [r3, #28]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	021a      	lsls	r2, r3, #8
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	61da      	str	r2, [r3, #28]
      break;
 800389e:	e002      	b.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75fb      	strb	r3, [r7, #23]
      break;
 80038a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_TIM_ConfigClockSource+0x1c>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e0b4      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x186>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390c:	d03e      	beq.n	800398c <HAL_TIM_ConfigClockSource+0xd4>
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003912:	f200 8087 	bhi.w	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391a:	f000 8086 	beq.w	8003a2a <HAL_TIM_ConfigClockSource+0x172>
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003922:	d87f      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b70      	cmp	r3, #112	; 0x70
 8003926:	d01a      	beq.n	800395e <HAL_TIM_ConfigClockSource+0xa6>
 8003928:	2b70      	cmp	r3, #112	; 0x70
 800392a:	d87b      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b60      	cmp	r3, #96	; 0x60
 800392e:	d050      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003930:	2b60      	cmp	r3, #96	; 0x60
 8003932:	d877      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b50      	cmp	r3, #80	; 0x50
 8003936:	d03c      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003938:	2b50      	cmp	r3, #80	; 0x50
 800393a:	d873      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d058      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d86f      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b30      	cmp	r3, #48	; 0x30
 8003946:	d064      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 8003948:	2b30      	cmp	r3, #48	; 0x30
 800394a:	d86b      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b20      	cmp	r3, #32
 800394e:	d060      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 8003950:	2b20      	cmp	r3, #32
 8003952:	d867      	bhi.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05c      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 8003958:	2b10      	cmp	r3, #16
 800395a:	d05a      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x15a>
 800395c:	e062      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6899      	ldr	r1, [r3, #8]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f000 faf0 	bl	8003f52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	609a      	str	r2, [r3, #8]
      break;
 800398a:	e04f      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f000 fad9 	bl	8003f52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ae:	609a      	str	r2, [r3, #8]
      break;
 80039b0:	e03c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 fa50 	bl	8003e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2150      	movs	r1, #80	; 0x50
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 faa7 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 80039d0:	e02c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	f000 fa6e 	bl	8003ec0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2160      	movs	r1, #96	; 0x60
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fa97 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 80039f0:	e01c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 fa30 	bl	8003e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2140      	movs	r1, #64	; 0x40
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fa87 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003a10:	e00c      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f000 fa7e 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003a22:	e003      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      break;
 8003a28:	e000      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
	...

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <TIM_Base_SetConfig+0xb8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_Base_SetConfig+0x30>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d007      	beq.n	8003ac0 <TIM_Base_SetConfig+0x30>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <TIM_Base_SetConfig+0xbc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_Base_SetConfig+0x30>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <TIM_Base_SetConfig+0xc0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d108      	bne.n	8003ad2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <TIM_Base_SetConfig+0xb8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <TIM_Base_SetConfig+0x62>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d007      	beq.n	8003af2 <TIM_Base_SetConfig+0x62>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <TIM_Base_SetConfig+0xbc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_Base_SetConfig+0x62>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <TIM_Base_SetConfig+0xc0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d108      	bne.n	8003b04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <TIM_Base_SetConfig+0xb8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d103      	bne.n	8003b38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	615a      	str	r2, [r3, #20]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800

08003b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f023 0201 	bic.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 0302 	bic.w	r3, r3, #2
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <TIM_OC1_SetConfig+0xc8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10c      	bne.n	8003bca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0308 	bic.w	r3, r3, #8
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <TIM_OC1_SetConfig+0xc8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d111      	bne.n	8003bf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40012c00 	.word	0x40012c00

08003c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f023 0210 	bic.w	r2, r3, #16
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0320 	bic.w	r3, r3, #32
 8003c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <TIM_OC2_SetConfig+0xd0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10d      	bne.n	8003c9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <TIM_OC2_SetConfig+0xd0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d113      	bne.n	8003ccc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	40012c00 	.word	0x40012c00

08003cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <TIM_OC3_SetConfig+0xd0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10d      	bne.n	8003d6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <TIM_OC3_SetConfig+0xd0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d113      	bne.n	8003d9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00

08003dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	031b      	lsls	r3, r3, #12
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <TIM_OC4_SetConfig+0x98>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d109      	bne.n	8003e3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00

08003e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f023 0201 	bic.w	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f023 030a 	bic.w	r3, r3, #10
 8003ea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f023 0210 	bic.w	r2, r3, #16
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	031b      	lsls	r3, r3, #12
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003efc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f043 0307 	orr.w	r3, r3, #7
 8003f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	609a      	str	r2, [r3, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b087      	sub	sp, #28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	021a      	lsls	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	609a      	str	r2, [r3, #8]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e046      	b.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a16      	ldr	r2, [pc, #88]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d009      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a10      	ldr	r2, [pc, #64]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10c      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	4313      	orrs	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800

08004094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040b8:	b084      	sub	sp, #16
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	f107 0014 	add.w	r0, r7, #20
 80040c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	b004      	add	sp, #16
 80040d6:	4770      	bx	lr

080040d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800410c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004110:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	b29b      	uxth	r3, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	b29b      	uxth	r3, r3
 8004122:	4013      	ands	r3, r2
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004150:	b084      	sub	sp, #16
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	f107 0014 	add.w	r0, r7, #20
 800415e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	b004      	add	sp, #16
 800418e:	4770      	bx	lr

08004190 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004190:	b480      	push	{r7}
 8004192:	b09d      	sub	sp, #116	; 0x74
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	78db      	ldrb	r3, [r3, #3]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d81f      	bhi.n	8004202 <USB_ActivateEndpoint+0x72>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <USB_ActivateEndpoint+0x38>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041d9 	.word	0x080041d9
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	0800420b 	.word	0x0800420b
 80041d4:	080041e7 	.word	0x080041e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80041e4:	e012      	b.n	800420c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80041ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80041f2:	e00b      	b.n	800420c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004200:	e004      	b.n	800420c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004208:	e000      	b.n	800420c <USB_ActivateEndpoint+0x7c>
      break;
 800420a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	441a      	add	r2, r3
 8004216:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800421a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004244:	b29a      	uxth	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	4313      	orrs	r3, r2
 800424e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	441a      	add	r2, r3
 800425c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	b29b      	uxth	r3, r3
 8004272:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	7b1b      	ldrb	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 8178 	bne.w	800456e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8084 	beq.w	8004390 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004292:	b29b      	uxth	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	011a      	lsls	r2, r3, #4
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	88db      	ldrh	r3, [r3, #6]
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	827b      	strh	r3, [r7, #18]
 80042ca:	8a7b      	ldrh	r3, [r7, #18]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <USB_ActivateEndpoint+0x17c>
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	823b      	strh	r3, [r7, #16]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	8a3b      	ldrh	r3, [r7, #16]
 80042f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004308:	b29b      	uxth	r3, r3
 800430a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	78db      	ldrb	r3, [r3, #3]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d020      	beq.n	8004356 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432a:	81bb      	strh	r3, [r7, #12]
 800432c:	89bb      	ldrh	r3, [r7, #12]
 800432e:	f083 0320 	eor.w	r3, r3, #32
 8004332:	81bb      	strh	r3, [r7, #12]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	89bb      	ldrh	r3, [r7, #12]
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]
 8004354:	e2d5      	b.n	8004902 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436c:	81fb      	strh	r3, [r7, #14]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	89fb      	ldrh	r3, [r7, #14]
 800437a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]
 800438e:	e2b8      	b.n	8004902 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439a:	b29b      	uxth	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	4413      	add	r3, r2
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	011a      	lsls	r2, r3, #4
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	88db      	ldrh	r3, [r3, #6]
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	4413      	add	r3, r2
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	011a      	lsls	r2, r3, #4
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	4413      	add	r3, r2
 80043e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	801a      	strh	r2, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b3e      	cmp	r3, #62	; 0x3e
 80043fe:	d91d      	bls.n	800443c <USB_ActivateEndpoint+0x2ac>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	66bb      	str	r3, [r7, #104]	; 0x68
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <USB_ActivateEndpoint+0x28a>
 8004414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004416:	3b01      	subs	r3, #1
 8004418:	66bb      	str	r3, [r7, #104]	; 0x68
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29a      	uxth	r2, r3
 8004420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004422:	b29b      	uxth	r3, r3
 8004424:	029b      	lsls	r3, r3, #10
 8004426:	b29b      	uxth	r3, r3
 8004428:	4313      	orrs	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	e026      	b.n	800448a <USB_ActivateEndpoint+0x2fa>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <USB_ActivateEndpoint+0x2ca>
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004452:	b29a      	uxth	r2, r3
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	e017      	b.n	800448a <USB_ActivateEndpoint+0x2fa>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <USB_ActivateEndpoint+0x2e4>
 800446e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004470:	3301      	adds	r3, #1
 8004472:	66bb      	str	r3, [r7, #104]	; 0x68
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29a      	uxth	r2, r3
 800447a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447c:	b29b      	uxth	r3, r3
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	b29b      	uxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b29a      	uxth	r2, r3
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	847b      	strh	r3, [r7, #34]	; 0x22
 8004498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800449a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01b      	beq.n	80044da <USB_ActivateEndpoint+0x34a>
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b8:	843b      	strh	r3, [r7, #32]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	441a      	add	r2, r3
 80044c4:	8c3b      	ldrh	r3, [r7, #32]
 80044c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d124      	bne.n	800452c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	83bb      	strh	r3, [r7, #28]
 80044fa:	8bbb      	ldrh	r3, [r7, #28]
 80044fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004500:	83bb      	strh	r3, [r7, #28]
 8004502:	8bbb      	ldrh	r3, [r7, #28]
 8004504:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004508:	83bb      	strh	r3, [r7, #28]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	8bbb      	ldrh	r3, [r7, #28]
 8004516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004526:	b29b      	uxth	r3, r3
 8004528:	8013      	strh	r3, [r2, #0]
 800452a:	e1ea      	b.n	8004902 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	83fb      	strh	r3, [r7, #30]
 8004544:	8bfb      	ldrh	r3, [r7, #30]
 8004546:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800454a:	83fb      	strh	r3, [r7, #30]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	8bfb      	ldrh	r3, [r7, #30]
 8004558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004568:	b29b      	uxth	r3, r3
 800456a:	8013      	strh	r3, [r2, #0]
 800456c:	e1c9      	b.n	8004902 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	78db      	ldrb	r3, [r3, #3]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d11e      	bne.n	80045b4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800459e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	8013      	strh	r3, [r2, #0]
 80045b2:	e01d      	b.n	80045f0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004600:	4413      	add	r3, r2
 8004602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	011a      	lsls	r2, r3, #4
 800460a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460c:	4413      	add	r3, r2
 800460e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004612:	65bb      	str	r3, [r7, #88]	; 0x58
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	891b      	ldrh	r3, [r3, #8]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004622:	801a      	strh	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	657b      	str	r3, [r7, #84]	; 0x54
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462e:	b29b      	uxth	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004634:	4413      	add	r3, r2
 8004636:	657b      	str	r3, [r7, #84]	; 0x54
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	011a      	lsls	r2, r3, #4
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	4413      	add	r3, r2
 8004642:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004646:	653b      	str	r3, [r7, #80]	; 0x50
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	895b      	ldrh	r3, [r3, #10]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	b29b      	uxth	r3, r3
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004656:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8093 	bne.w	8004788 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004672:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01b      	beq.n	80046b6 <USB_ActivateEndpoint+0x526>
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004694:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	441a      	add	r2, r3
 80046a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80046a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80046c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01b      	beq.n	8004706 <USB_ActivateEndpoint+0x576>
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004702:	b29b      	uxth	r3, r3
 8004704:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	873b      	strh	r3, [r7, #56]	; 0x38
 800471e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004720:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004724:	873b      	strh	r3, [r7, #56]	; 0x38
 8004726:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004728:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800472c:	873b      	strh	r3, [r7, #56]	; 0x38
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800473a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004764:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
 8004786:	e0bc      	b.n	8004902 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800479c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01d      	beq.n	80047e0 <USB_ActivateEndpoint+0x650>
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01d      	beq.n	8004838 <USB_ActivateEndpoint+0x6a8>
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004834:	b29b      	uxth	r3, r3
 8004836:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	78db      	ldrb	r3, [r3, #3]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d024      	beq.n	800488a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004856:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800485a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800485e:	f083 0320 	eor.w	r3, r3, #32
 8004862:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
 8004888:	e01d      	b.n	80048c6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004902:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004906:	4618      	mov	r0, r3
 8004908:	3774      	adds	r7, #116	; 0x74
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004910:	b480      	push	{r7}
 8004912:	b08d      	sub	sp, #52	; 0x34
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	7b1b      	ldrb	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 808e 	bne.w	8004a40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d044      	beq.n	80049b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	81bb      	strh	r3, [r7, #12]
 800493a:	89bb      	ldrh	r3, [r7, #12]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <USB_DeactivateEndpoint+0x6c>
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	817b      	strh	r3, [r7, #10]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004978:	b29b      	uxth	r3, r3
 800497a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004992:	813b      	strh	r3, [r7, #8]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	893b      	ldrh	r3, [r7, #8]
 80049a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	8013      	strh	r3, [r2, #0]
 80049b4:	e192      	b.n	8004cdc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	827b      	strh	r3, [r7, #18]
 80049c4:	8a7b      	ldrh	r3, [r7, #18]
 80049c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01b      	beq.n	8004a06 <USB_DeactivateEndpoint+0xf6>
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	823b      	strh	r3, [r7, #16]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	8a3b      	ldrh	r3, [r7, #16]
 80049f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1c:	81fb      	strh	r3, [r7, #14]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	89fb      	ldrh	r3, [r7, #14]
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
 8004a3e:	e14d      	b.n	8004cdc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 80a5 	bne.w	8004b94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	843b      	strh	r3, [r7, #32]
 8004a58:	8c3b      	ldrh	r3, [r7, #32]
 8004a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01b      	beq.n	8004a9a <USB_DeactivateEndpoint+0x18a>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	83fb      	strh	r3, [r7, #30]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	8bfb      	ldrh	r3, [r7, #30]
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	83bb      	strh	r3, [r7, #28]
 8004aa8:	8bbb      	ldrh	r3, [r7, #28]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01b      	beq.n	8004aea <USB_DeactivateEndpoint+0x1da>
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	837b      	strh	r3, [r7, #26]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	441a      	add	r2, r3
 8004ad4:	8b7b      	ldrh	r3, [r7, #26]
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b00:	833b      	strh	r3, [r7, #24]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	8b3b      	ldrh	r3, [r7, #24]
 8004b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	82fb      	strh	r3, [r7, #22]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	441a      	add	r2, r3
 8004b44:	8afb      	ldrh	r3, [r7, #22]
 8004b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b70:	82bb      	strh	r3, [r7, #20]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	8abb      	ldrh	r3, [r7, #20]
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
 8004b92:	e0a3      	b.n	8004cdc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01b      	beq.n	8004be4 <USB_DeactivateEndpoint+0x2d4>
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <USB_DeactivateEndpoint+0x324>
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3734      	adds	r7, #52	; 0x34
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b0c2      	sub	sp, #264	; 0x108
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	6018      	str	r0, [r3, #0]
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	f040 8545 	bne.w	800578c <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d02:	463b      	mov	r3, r7
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699a      	ldr	r2, [r3, #24]
 8004d08:	463b      	mov	r3, r7
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d905      	bls.n	8004d1e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004d12:	463b      	mov	r3, r7
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d1c:	e004      	b.n	8004d28 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d1e:	463b      	mov	r3, r7
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d28:	463b      	mov	r3, r7
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	7b1b      	ldrb	r3, [r3, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d128      	bne.n	8004d84 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d32:	463b      	mov	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6959      	ldr	r1, [r3, #20]
 8004d38:	463b      	mov	r3, r7
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	88da      	ldrh	r2, [r3, #6]
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	1d38      	adds	r0, r7, #4
 8004d46:	6800      	ldr	r0, [r0, #0]
 8004d48:	f001 fa58 	bl	80061fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	463b      	mov	r3, r7
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	011a      	lsls	r2, r3, #4
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	f000 bcdb 	b.w	800573a <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d84:	463b      	mov	r3, r7
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	78db      	ldrb	r3, [r3, #3]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	f040 836f 	bne.w	800546e <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d90:	463b      	mov	r3, r7
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	463b      	mov	r3, r7
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	f240 8313 	bls.w	80053c8 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	463b      	mov	r3, r7
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004de6:	463b      	mov	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004df0:	1ad2      	subs	r2, r2, r3
 8004df2:	463b      	mov	r3, r7
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 816d 	beq.w	80050ee <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	633b      	str	r3, [r7, #48]	; 0x30
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d16e      	bne.n	8004f02 <USB_EPStartXfer+0x21a>
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	4413      	add	r3, r2
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3c:	463b      	mov	r3, r7
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	011a      	lsls	r2, r3, #4
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	4413      	add	r3, r2
 8004e48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e62:	2b3e      	cmp	r3, #62	; 0x3e
 8004e64:	d921      	bls.n	8004eaa <USB_EPStartXfer+0x1c2>
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <USB_EPStartXfer+0x19e>
 8004e7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	029b      	lsls	r3, r3, #10
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	4313      	orrs	r3, r2
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	e047      	b.n	8004f3a <USB_EPStartXfer+0x252>
 8004eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <USB_EPStartXfer+0x1e0>
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	e038      	b.n	8004f3a <USB_EPStartXfer+0x252>
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <USB_EPStartXfer+0x200>
 8004ede:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	e01b      	b.n	8004f3a <USB_EPStartXfer+0x252>
 8004f02:	463b      	mov	r3, r7
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d116      	bne.n	8004f3a <USB_EPStartXfer+0x252>
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	4413      	add	r3, r2
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	895b      	ldrh	r3, [r3, #10]
 8004f40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6959      	ldr	r1, [r3, #20]
 8004f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f54:	1d38      	adds	r0, r7, #4
 8004f56:	6800      	ldr	r0, [r0, #0]
 8004f58:	f001 f950 	bl	80061fc <USB_WritePMA>
            ep->xfer_buff += len;
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f66:	441a      	add	r2, r3
 8004f68:	463b      	mov	r3, r7
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f6e:	463b      	mov	r3, r7
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	463b      	mov	r3, r7
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d909      	bls.n	8004f92 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8004f7e:	463b      	mov	r3, r7
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	621a      	str	r2, [r3, #32]
 8004f90:	e008      	b.n	8004fa4 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f92:	463b      	mov	r3, r7
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d16e      	bne.n	800508c <USB_EPStartXfer+0x3a4>
 8004fae:	1d3b      	adds	r3, r7, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	011a      	lsls	r2, r3, #4
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fec:	2b3e      	cmp	r3, #62	; 0x3e
 8004fee:	d921      	bls.n	8005034 <USB_EPStartXfer+0x34c>
 8004ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <USB_EPStartXfer+0x328>
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	3b01      	subs	r3, #1
 800500c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29a      	uxth	r2, r3
 8005016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501a:	b29b      	uxth	r3, r3
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	b29b      	uxth	r3, r3
 8005020:	4313      	orrs	r3, r2
 8005022:	b29b      	uxth	r3, r3
 8005024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502c:	b29a      	uxth	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	e04a      	b.n	80050ca <USB_EPStartXfer+0x3e2>
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <USB_EPStartXfer+0x36a>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504a:	b29a      	uxth	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	e03b      	b.n	80050ca <USB_EPStartXfer+0x3e2>
 8005052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800505c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <USB_EPStartXfer+0x38a>
 8005068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800506c:	3301      	adds	r3, #1
 800506e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29a      	uxth	r2, r3
 8005078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507c:	b29b      	uxth	r3, r3
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	b29b      	uxth	r3, r3
 8005082:	4313      	orrs	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e01e      	b.n	80050ca <USB_EPStartXfer+0x3e2>
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d119      	bne.n	80050ca <USB_EPStartXfer+0x3e2>
 8005096:	1d3b      	adds	r3, r7, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	1d3b      	adds	r3, r7, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	4413      	add	r3, r2
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	463b      	mov	r3, r7
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	4413      	add	r3, r2
 80050ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050ca:	463b      	mov	r3, r7
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	891b      	ldrh	r3, [r3, #8]
 80050d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050d4:	463b      	mov	r3, r7
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6959      	ldr	r1, [r3, #20]
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050e4:	1d38      	adds	r0, r7, #4
 80050e6:	6800      	ldr	r0, [r0, #0]
 80050e8:	f001 f888 	bl	80061fc <USB_WritePMA>
 80050ec:	e325      	b.n	800573a <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050ee:	463b      	mov	r3, r7
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d16e      	bne.n	80051d6 <USB_EPStartXfer+0x4ee>
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fe:	1d3b      	adds	r3, r7, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510c:	4413      	add	r3, r2
 800510e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	011a      	lsls	r2, r3, #4
 8005118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511a:	4413      	add	r3, r2
 800511c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005120:	647b      	str	r3, [r7, #68]	; 0x44
 8005122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800512c:	b29a      	uxth	r2, r3
 800512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005136:	2b3e      	cmp	r3, #62	; 0x3e
 8005138:	d921      	bls.n	800517e <USB_EPStartXfer+0x496>
 800513a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <USB_EPStartXfer+0x472>
 8005150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005154:	3b01      	subs	r3, #1
 8005156:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800515a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29a      	uxth	r2, r3
 8005160:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005164:	b29b      	uxth	r3, r3
 8005166:	029b      	lsls	r3, r3, #10
 8005168:	b29b      	uxth	r3, r3
 800516a:	4313      	orrs	r3, r2
 800516c:	b29b      	uxth	r3, r3
 800516e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005176:	b29a      	uxth	r2, r3
 8005178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e04a      	b.n	8005214 <USB_EPStartXfer+0x52c>
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <USB_EPStartXfer+0x4b4>
 8005186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005194:	b29a      	uxth	r2, r3
 8005196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	e03b      	b.n	8005214 <USB_EPStartXfer+0x52c>
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <USB_EPStartXfer+0x4d4>
 80051b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051b6:	3301      	adds	r3, #1
 80051b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	029b      	lsls	r3, r3, #10
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4313      	orrs	r3, r2
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e01e      	b.n	8005214 <USB_EPStartXfer+0x52c>
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d119      	bne.n	8005214 <USB_EPStartXfer+0x52c>
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	653b      	str	r3, [r7, #80]	; 0x50
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f4:	4413      	add	r3, r2
 80051f6:	653b      	str	r3, [r7, #80]	; 0x50
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	011a      	lsls	r2, r3, #4
 8005200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005202:	4413      	add	r3, r2
 8005204:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800520a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520e:	b29a      	uxth	r2, r3
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	891b      	ldrh	r3, [r3, #8]
 800521a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6959      	ldr	r1, [r3, #20]
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005228:	b29b      	uxth	r3, r3
 800522a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800522e:	1d38      	adds	r0, r7, #4
 8005230:	6800      	ldr	r0, [r0, #0]
 8005232:	f000 ffe3 	bl	80061fc <USB_WritePMA>
            ep->xfer_buff += len;
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005240:	441a      	add	r2, r3
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005248:	463b      	mov	r3, r7
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a1a      	ldr	r2, [r3, #32]
 800524e:	463b      	mov	r3, r7
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	429a      	cmp	r2, r3
 8005256:	d909      	bls.n	800526c <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	463b      	mov	r3, r7
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	621a      	str	r2, [r3, #32]
 800526a:	e008      	b.n	800527e <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005276:	463b      	mov	r3, r7
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	643b      	str	r3, [r7, #64]	; 0x40
 8005284:	463b      	mov	r3, r7
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d16e      	bne.n	800536c <USB_EPStartXfer+0x684>
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529c:	b29b      	uxth	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	4413      	add	r3, r2
 80052a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a6:	463b      	mov	r3, r7
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	011a      	lsls	r2, r3, #4
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	2b3e      	cmp	r3, #62	; 0x3e
 80052ce:	d921      	bls.n	8005314 <USB_EPStartXfer+0x62c>
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <USB_EPStartXfer+0x608>
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	3b01      	subs	r3, #1
 80052ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	029b      	lsls	r3, r3, #10
 80052fe:	b29b      	uxth	r3, r3
 8005300:	4313      	orrs	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530c:	b29a      	uxth	r2, r3
 800530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e047      	b.n	80053a4 <USB_EPStartXfer+0x6bc>
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <USB_EPStartXfer+0x64a>
 800531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	e038      	b.n	80053a4 <USB_EPStartXfer+0x6bc>
 8005332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <USB_EPStartXfer+0x66a>
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	3301      	adds	r3, #1
 800534e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	b29b      	uxth	r3, r3
 800535e:	029b      	lsls	r3, r3, #10
 8005360:	b29b      	uxth	r3, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	b29a      	uxth	r2, r3
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	e01b      	b.n	80053a4 <USB_EPStartXfer+0x6bc>
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d116      	bne.n	80053a4 <USB_EPStartXfer+0x6bc>
 8005376:	1d3b      	adds	r3, r7, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537e:	b29b      	uxth	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005384:	4413      	add	r3, r2
 8005386:	643b      	str	r3, [r7, #64]	; 0x40
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	011a      	lsls	r2, r3, #4
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	4413      	add	r3, r2
 8005394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800539a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053a4:	463b      	mov	r3, r7
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	895b      	ldrh	r3, [r3, #10]
 80053aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6959      	ldr	r1, [r3, #20]
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053be:	1d38      	adds	r0, r7, #4
 80053c0:	6800      	ldr	r0, [r0, #0]
 80053c2:	f000 ff1b 	bl	80061fc <USB_WritePMA>
 80053c6:	e1b8      	b.n	800573a <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80053c8:	463b      	mov	r3, r7
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005412:	b29b      	uxth	r3, r3
 8005414:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005424:	b29b      	uxth	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800542a:	4413      	add	r3, r2
 800542c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	011a      	lsls	r2, r3, #4
 8005436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005438:	4413      	add	r3, r2
 800543a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800543e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005444:	b29a      	uxth	r2, r3
 8005446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005448:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	891b      	ldrh	r3, [r3, #8]
 8005450:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005454:	463b      	mov	r3, r7
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6959      	ldr	r1, [r3, #20]
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545e:	b29b      	uxth	r3, r3
 8005460:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005464:	1d38      	adds	r0, r7, #4
 8005466:	6800      	ldr	r0, [r0, #0]
 8005468:	f000 fec8 	bl	80061fc <USB_WritePMA>
 800546c:	e165      	b.n	800573a <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800546e:	463b      	mov	r3, r7
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	463b      	mov	r3, r7
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005480:	1d3b      	adds	r3, r7, #4
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	463b      	mov	r3, r7
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80a5 	beq.w	80055e6 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800549c:	1d3b      	adds	r3, r7, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	673b      	str	r3, [r7, #112]	; 0x70
 80054a2:	463b      	mov	r3, r7
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d16e      	bne.n	800558a <USB_EPStartXfer+0x8a2>
 80054ac:	1d3b      	adds	r3, r7, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c0:	4413      	add	r3, r2
 80054c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	011a      	lsls	r2, r3, #4
 80054cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ce:	4413      	add	r3, r2
 80054d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054d4:	667b      	str	r3, [r7, #100]	; 0x64
 80054d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ea:	2b3e      	cmp	r3, #62	; 0x3e
 80054ec:	d921      	bls.n	8005532 <USB_EPStartXfer+0x84a>
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <USB_EPStartXfer+0x826>
 8005504:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005508:	3b01      	subs	r3, #1
 800550a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800550e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29a      	uxth	r2, r3
 8005514:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005518:	b29b      	uxth	r3, r3
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	b29b      	uxth	r3, r3
 800551e:	4313      	orrs	r3, r2
 8005520:	b29b      	uxth	r3, r3
 8005522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552a:	b29a      	uxth	r2, r3
 800552c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e047      	b.n	80055c2 <USB_EPStartXfer+0x8da>
 8005532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <USB_EPStartXfer+0x868>
 800553a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005548:	b29a      	uxth	r2, r3
 800554a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e038      	b.n	80055c2 <USB_EPStartXfer+0x8da>
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <USB_EPStartXfer+0x888>
 8005566:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800556a:	3301      	adds	r3, #1
 800556c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29a      	uxth	r2, r3
 8005576:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800557a:	b29b      	uxth	r3, r3
 800557c:	029b      	lsls	r3, r3, #10
 800557e:	b29b      	uxth	r3, r3
 8005580:	4313      	orrs	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e01b      	b.n	80055c2 <USB_EPStartXfer+0x8da>
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d116      	bne.n	80055c2 <USB_EPStartXfer+0x8da>
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a2:	4413      	add	r3, r2
 80055a4:	673b      	str	r3, [r7, #112]	; 0x70
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	011a      	lsls	r2, r3, #4
 80055ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b0:	4413      	add	r3, r2
 80055b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	895b      	ldrh	r3, [r3, #10]
 80055c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055cc:	463b      	mov	r3, r7
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6959      	ldr	r1, [r3, #20]
 80055d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055dc:	1d38      	adds	r0, r7, #4
 80055de:	6800      	ldr	r0, [r0, #0]
 80055e0:	f000 fe0c 	bl	80061fc <USB_WritePMA>
 80055e4:	e0a9      	b.n	800573a <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055e6:	463b      	mov	r3, r7
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d16e      	bne.n	80056ce <USB_EPStartXfer+0x9e6>
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005604:	4413      	add	r3, r2
 8005606:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	011a      	lsls	r2, r3, #4
 8005610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005612:	4413      	add	r3, r2
 8005614:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005618:	67bb      	str	r3, [r7, #120]	; 0x78
 800561a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005624:	b29a      	uxth	r2, r3
 8005626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562e:	2b3e      	cmp	r3, #62	; 0x3e
 8005630:	d921      	bls.n	8005676 <USB_EPStartXfer+0x98e>
 8005632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <USB_EPStartXfer+0x96a>
 8005648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800564c:	3b01      	subs	r3, #1
 800564e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29a      	uxth	r2, r3
 8005658:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800565c:	b29b      	uxth	r3, r3
 800565e:	029b      	lsls	r3, r3, #10
 8005660:	b29b      	uxth	r3, r3
 8005662:	4313      	orrs	r3, r2
 8005664:	b29b      	uxth	r3, r3
 8005666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566e:	b29a      	uxth	r2, r3
 8005670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	e050      	b.n	8005718 <USB_EPStartXfer+0xa30>
 8005676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <USB_EPStartXfer+0x9ac>
 800567e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568c:	b29a      	uxth	r2, r3
 800568e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e041      	b.n	8005718 <USB_EPStartXfer+0xa30>
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800569e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <USB_EPStartXfer+0x9cc>
 80056aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056ae:	3301      	adds	r3, #1
 80056b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056be:	b29b      	uxth	r3, r3
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	4313      	orrs	r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e024      	b.n	8005718 <USB_EPStartXfer+0xa30>
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d11f      	bne.n	8005718 <USB_EPStartXfer+0xa30>
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f0:	4413      	add	r3, r2
 80056f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	011a      	lsls	r2, r3, #4
 80056fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005702:	4413      	add	r3, r2
 8005704:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005710:	b29a      	uxth	r2, r3
 8005712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005716:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	891b      	ldrh	r3, [r3, #8]
 800571e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6959      	ldr	r1, [r3, #20]
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572c:	b29b      	uxth	r3, r3
 800572e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005732:	1d38      	adds	r0, r7, #4
 8005734:	6800      	ldr	r0, [r0, #0]
 8005736:	f000 fd61 	bl	80061fc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005754:	817b      	strh	r3, [r7, #10]
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	f083 0310 	eor.w	r3, r3, #16
 800575c:	817b      	strh	r3, [r7, #10]
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	f083 0320 	eor.w	r3, r3, #32
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	441a      	add	r2, r3
 8005774:	897b      	ldrh	r3, [r7, #10]
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]
 800578a:	e3f3      	b.n	8005f74 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	7b1b      	ldrb	r3, [r3, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 809c 	bne.w	80058d0 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005798:	463b      	mov	r3, r7
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d90e      	bls.n	80057c6 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057bc:	1ad2      	subs	r2, r2, r3
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	619a      	str	r2, [r3, #24]
 80057c4:	e008      	b.n	80057d8 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80057d0:	463b      	mov	r3, r7
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2200      	movs	r2, #0
 80057d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057f0:	4413      	add	r3, r2
 80057f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057f6:	463b      	mov	r3, r7
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005802:	4413      	add	r3, r2
 8005804:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800580c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005818:	b29a      	uxth	r2, r3
 800581a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005824:	2b3e      	cmp	r3, #62	; 0x3e
 8005826:	d923      	bls.n	8005870 <USB_EPStartXfer+0xb88>
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <USB_EPStartXfer+0xb60>
 800583e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005842:	3b01      	subs	r3, #1
 8005844:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29a      	uxth	r2, r3
 8005850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	4313      	orrs	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29a      	uxth	r2, r3
 8005868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e353      	b.n	8005f18 <USB_EPStartXfer+0x1230>
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <USB_EPStartXfer+0xbaa>
 8005878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005888:	b29a      	uxth	r2, r3
 800588a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e342      	b.n	8005f18 <USB_EPStartXfer+0x1230>
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <USB_EPStartXfer+0xbca>
 80058a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ac:	3301      	adds	r3, #1
 80058ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e323      	b.n	8005f18 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058d0:	463b      	mov	r3, r7
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	78db      	ldrb	r3, [r3, #3]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	f040 81a9 	bne.w	8005c2e <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f040 8082 	bne.w	80059ec <USB_EPStartXfer+0xd04>
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005900:	4413      	add	r3, r2
 8005902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005906:	463b      	mov	r3, r7
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	011a      	lsls	r2, r3, #4
 800590e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005912:	4413      	add	r3, r2
 8005914:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800591c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005928:	b29a      	uxth	r2, r3
 800592a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800592e:	801a      	strh	r2, [r3, #0]
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b3e      	cmp	r3, #62	; 0x3e
 8005938:	d925      	bls.n	8005986 <USB_EPStartXfer+0xc9e>
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005946:	463b      	mov	r3, r7
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <USB_EPStartXfer+0xc76>
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	3b01      	subs	r3, #1
 800595a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800595e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29a      	uxth	r2, r3
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596a:	b29b      	uxth	r3, r3
 800596c:	029b      	lsls	r3, r3, #10
 800596e:	b29b      	uxth	r3, r3
 8005970:	4313      	orrs	r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597c:	b29a      	uxth	r2, r3
 800597e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e058      	b.n	8005a38 <USB_EPStartXfer+0xd50>
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10c      	bne.n	80059aa <USB_EPStartXfer+0xcc2>
 8005990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e046      	b.n	8005a38 <USB_EPStartXfer+0xd50>
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <USB_EPStartXfer+0xce6>
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	3301      	adds	r3, #1
 80059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	b29b      	uxth	r3, r3
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4313      	orrs	r3, r2
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059e8:	801a      	strh	r2, [r3, #0]
 80059ea:	e025      	b.n	8005a38 <USB_EPStartXfer+0xd50>
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d120      	bne.n	8005a38 <USB_EPStartXfer+0xd50>
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059fe:	1d3b      	adds	r3, r7, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a0e:	4413      	add	r3, r2
 8005a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a14:	463b      	mov	r3, r7
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	011a      	lsls	r2, r3, #4
 8005a1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a20:	4413      	add	r3, r2
 8005a22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	1d3b      	adds	r3, r7, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8082 	bne.w	8005b50 <USB_EPStartXfer+0xe68>
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a64:	4413      	add	r3, r2
 8005a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	011a      	lsls	r2, r3, #4
 8005a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a76:	4413      	add	r3, r2
 8005a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	463b      	mov	r3, r7
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a9c:	d925      	bls.n	8005aea <USB_EPStartXfer+0xe02>
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <USB_EPStartXfer+0xdda>
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	3b01      	subs	r3, #1
 8005abe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	e054      	b.n	8005b94 <USB_EPStartXfer+0xeac>
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10c      	bne.n	8005b0e <USB_EPStartXfer+0xe26>
 8005af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e042      	b.n	8005b94 <USB_EPStartXfer+0xeac>
 8005b0e:	463b      	mov	r3, r7
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <USB_EPStartXfer+0xe4a>
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e021      	b.n	8005b94 <USB_EPStartXfer+0xeac>
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d11c      	bne.n	8005b94 <USB_EPStartXfer+0xeac>
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	011a      	lsls	r2, r3, #4
 8005b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b92:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b94:	463b      	mov	r3, r7
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 81bc 	beq.w	8005f18 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <USB_EPStartXfer+0xee4>
 8005bc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10d      	bne.n	8005be8 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bcc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 819f 	bne.w	8005f18 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f040 8198 	bne.w	8005f18 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005be8:	1d3b      	adds	r3, r7, #4
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	463b      	mov	r3, r7
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
 8005c2c:	e174      	b.n	8005f18 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	78db      	ldrb	r3, [r3, #3]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	f040 816d 	bne.w	8005f14 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d90e      	bls.n	8005c68 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	619a      	str	r2, [r3, #24]
 8005c66:	e008      	b.n	8005c7a <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8005c68:	463b      	mov	r3, r7
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005c72:	463b      	mov	r3, r7
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d17b      	bne.n	8005d7c <USB_EPStartXfer+0x1094>
 8005c84:	1d3b      	adds	r3, r7, #4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c8c:	1d3b      	adds	r3, r7, #4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	011a      	lsls	r2, r3, #4
 8005caa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cae:	4413      	add	r3, r2
 8005cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8005cd2:	d923      	bls.n	8005d1c <USB_EPStartXfer+0x1034>
 8005cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <USB_EPStartXfer+0x100c>
 8005cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e054      	b.n	8005dc6 <USB_EPStartXfer+0x10de>
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10c      	bne.n	8005d3e <USB_EPStartXfer+0x1056>
 8005d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e043      	b.n	8005dc6 <USB_EPStartXfer+0x10de>
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <USB_EPStartXfer+0x1076>
 8005d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	029b      	lsls	r3, r3, #10
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	4313      	orrs	r3, r2
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e024      	b.n	8005dc6 <USB_EPStartXfer+0x10de>
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d11f      	bne.n	8005dc6 <USB_EPStartXfer+0x10de>
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d8e:	1d3b      	adds	r3, r7, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d9e:	4413      	add	r3, r2
 8005da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005da4:	463b      	mov	r3, r7
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	011a      	lsls	r2, r3, #4
 8005dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005db6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	1d3b      	adds	r3, r7, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d17b      	bne.n	8005ed0 <USB_EPStartXfer+0x11e8>
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005de0:	1d3b      	adds	r3, r7, #4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005df0:	4413      	add	r3, r2
 8005df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005df6:	463b      	mov	r3, r7
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	011a      	lsls	r2, r3, #4
 8005dfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e24:	2b3e      	cmp	r3, #62	; 0x3e
 8005e26:	d923      	bls.n	8005e70 <USB_EPStartXfer+0x1188>
 8005e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <USB_EPStartXfer+0x1160>
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e42:	3b01      	subs	r3, #1
 8005e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	029b      	lsls	r3, r3, #10
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e053      	b.n	8005f18 <USB_EPStartXfer+0x1230>
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10c      	bne.n	8005e92 <USB_EPStartXfer+0x11aa>
 8005e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e042      	b.n	8005f18 <USB_EPStartXfer+0x1230>
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <USB_EPStartXfer+0x11ca>
 8005ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eac:	3301      	adds	r3, #1
 8005eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	e023      	b.n	8005f18 <USB_EPStartXfer+0x1230>
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d11e      	bne.n	8005f18 <USB_EPStartXfer+0x1230>
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005eea:	4413      	add	r3, r2
 8005eec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	011a      	lsls	r2, r3, #4
 8005ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005efc:	4413      	add	r3, r2
 8005efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	e001      	b.n	8005f18 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e02e      	b.n	8005f76 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f18:	1d3b      	adds	r3, r7, #4
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f3e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	441a      	add	r2, r3
 8005f5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa8:	81bb      	strh	r3, [r7, #12]
 8005faa:	89bb      	ldrh	r3, [r7, #12]
 8005fac:	f083 0310 	eor.w	r3, r3, #16
 8005fb0:	81bb      	strh	r3, [r7, #12]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	441a      	add	r2, r3
 8005fbc:	89bb      	ldrh	r3, [r7, #12]
 8005fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	8013      	strh	r3, [r2, #0]
 8005fd2:	e01f      	b.n	8006014 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	81fb      	strh	r3, [r7, #14]
 8005fec:	89fb      	ldrh	r3, [r7, #14]
 8005fee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ff2:	81fb      	strh	r3, [r7, #14]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	89fb      	ldrh	r3, [r7, #14]
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	7b1b      	ldrb	r3, [r3, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 809d 	bne.w	800616e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d04c      	beq.n	80060d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	823b      	strh	r3, [r7, #16]
 800604a:	8a3b      	ldrh	r3, [r7, #16]
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01b      	beq.n	800608c <USB_EPClearStall+0x6c>
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	81fb      	strh	r3, [r7, #14]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	89fb      	ldrh	r3, [r7, #14]
 8006078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006088:	b29b      	uxth	r3, r3
 800608a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	78db      	ldrb	r3, [r3, #3]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d06c      	beq.n	800616e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	81bb      	strh	r3, [r7, #12]
 80060ac:	89bb      	ldrh	r3, [r7, #12]
 80060ae:	f083 0320 	eor.w	r3, r3, #32
 80060b2:	81bb      	strh	r3, [r7, #12]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	441a      	add	r2, r3
 80060be:	89bb      	ldrh	r3, [r7, #12]
 80060c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]
 80060d4:	e04b      	b.n	800616e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	82fb      	strh	r3, [r7, #22]
 80060e4:	8afb      	ldrh	r3, [r7, #22]
 80060e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01b      	beq.n	8006126 <USB_EPClearStall+0x106>
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	82bb      	strh	r3, [r7, #20]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8abb      	ldrh	r3, [r7, #20]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	827b      	strh	r3, [r7, #18]
 800613e:	8a7b      	ldrh	r3, [r7, #18]
 8006140:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006144:	827b      	strh	r3, [r7, #18]
 8006146:	8a7b      	ldrh	r3, [r7, #18]
 8006148:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800614c:	827b      	strh	r3, [r7, #18]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	8a7b      	ldrh	r3, [r7, #18]
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr

080061c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061da:	68fb      	ldr	r3, [r7, #12]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b08b      	sub	sp, #44	; 0x2c
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4611      	mov	r1, r2
 8006208:	461a      	mov	r2, r3
 800620a:	460b      	mov	r3, r1
 800620c:	80fb      	strh	r3, [r7, #6]
 800620e:	4613      	mov	r3, r2
 8006210:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006212:	88bb      	ldrh	r3, [r7, #4]
 8006214:	3301      	adds	r3, #1
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	005a      	lsls	r2, r3, #1
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
 8006234:	e01e      	b.n	8006274 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	3301      	adds	r3, #1
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	b21a      	sxth	r2, r3
 8006246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800624a:	4313      	orrs	r3, r2
 800624c:	b21b      	sxth	r3, r3
 800624e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	8a7a      	ldrh	r2, [r7, #18]
 8006254:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	3302      	adds	r3, #2
 800625a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	3302      	adds	r3, #2
 8006260:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	3301      	adds	r3, #1
 800626c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	3b01      	subs	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1dd      	bne.n	8006236 <USB_WritePMA+0x3a>
  }
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	372c      	adds	r7, #44	; 0x2c
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006286:	b480      	push	{r7}
 8006288:	b08b      	sub	sp, #44	; 0x2c
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	4611      	mov	r1, r2
 8006292:	461a      	mov	r2, r3
 8006294:	460b      	mov	r3, r1
 8006296:	80fb      	strh	r3, [r7, #6]
 8006298:	4613      	mov	r3, r2
 800629a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800629c:	88bb      	ldrh	r3, [r7, #4]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	005a      	lsls	r2, r3, #1
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
 80062be:	e01b      	b.n	80062f8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	3302      	adds	r3, #2
 80062cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	3301      	adds	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3301      	adds	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	3302      	adds	r3, #2
 80062f0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	3b01      	subs	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e0      	bne.n	80062c0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80062fe:	88bb      	ldrh	r3, [r7, #4]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	701a      	strb	r2, [r3, #0]
  }
}
 800631a:	bf00      	nop
 800631c:	372c      	adds	r7, #44	; 0x2c
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	7c1b      	ldrb	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d115      	bne.n	8006368 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800633c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006340:	2202      	movs	r2, #2
 8006342:	2181      	movs	r1, #129	; 0x81
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f004 f99c 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006354:	2202      	movs	r2, #2
 8006356:	2101      	movs	r1, #1
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f004 f992 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006366:	e012      	b.n	800638e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006368:	2340      	movs	r3, #64	; 0x40
 800636a:	2202      	movs	r2, #2
 800636c:	2181      	movs	r1, #129	; 0x81
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f004 f987 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800637a:	2340      	movs	r3, #64	; 0x40
 800637c:	2202      	movs	r2, #2
 800637e:	2101      	movs	r1, #1
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f004 f97e 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800638e:	2308      	movs	r3, #8
 8006390:	2203      	movs	r2, #3
 8006392:	2182      	movs	r1, #130	; 0x82
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f004 f974 	bl	800a682 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063a4:	f004 fa94 	bl	800a8d0 <USBD_static_malloc>
 80063a8:	4602      	mov	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80063ba:	2301      	movs	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
 80063be:	e026      	b.n	800640e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	7c1b      	ldrb	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f4:	2101      	movs	r1, #1
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f004 fa34 	bl	800a864 <USBD_LL_PrepareReceive>
 80063fc:	e007      	b.n	800640e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006404:	2340      	movs	r3, #64	; 0x40
 8006406:	2101      	movs	r1, #1
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f004 fa2b 	bl	800a864 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006428:	2181      	movs	r1, #129	; 0x81
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f004 f94f 	bl	800a6ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006436:	2101      	movs	r1, #1
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f004 f948 	bl	800a6ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006446:	2182      	movs	r1, #130	; 0x82
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f004 f940 	bl	800a6ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00e      	beq.n	800647c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	4618      	mov	r0, r3
 8006470:	f004 fa3a 	bl	800a8e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d039      	beq.n	8006524 <USBD_CDC_Setup+0x9e>
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d17f      	bne.n	80065b4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	88db      	ldrh	r3, [r3, #6]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d029      	beq.n	8006510 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b25b      	sxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da11      	bge.n	80064ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80064d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	88d2      	ldrh	r2, [r2, #6]
 80064d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064da:	6939      	ldr	r1, [r7, #16]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	88db      	ldrh	r3, [r3, #6]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fa09 	bl	80078fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80064e8:	e06b      	b.n	80065c2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	785a      	ldrb	r2, [r3, #1]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	88db      	ldrh	r3, [r3, #6]
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006500:	6939      	ldr	r1, [r7, #16]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	88db      	ldrh	r3, [r3, #6]
 8006506:	461a      	mov	r2, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fa24 	bl	8007956 <USBD_CtlPrepareRx>
      break;
 800650e:	e058      	b.n	80065c2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	7850      	ldrb	r0, [r2, #1]
 800651c:	2200      	movs	r2, #0
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	4798      	blx	r3
      break;
 8006522:	e04e      	b.n	80065c2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b0b      	cmp	r3, #11
 800652a:	d02e      	beq.n	800658a <USBD_CDC_Setup+0x104>
 800652c:	2b0b      	cmp	r3, #11
 800652e:	dc38      	bgt.n	80065a2 <USBD_CDC_Setup+0x11c>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <USBD_CDC_Setup+0xb4>
 8006534:	2b0a      	cmp	r3, #10
 8006536:	d014      	beq.n	8006562 <USBD_CDC_Setup+0xdc>
 8006538:	e033      	b.n	80065a2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	2b03      	cmp	r3, #3
 8006542:	d107      	bne.n	8006554 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006544:	f107 030c 	add.w	r3, r7, #12
 8006548:	2202      	movs	r2, #2
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 f9d4 	bl	80078fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006552:	e02e      	b.n	80065b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f965 	bl	8007826 <USBD_CtlError>
            ret = USBD_FAIL;
 800655c:	2302      	movs	r3, #2
 800655e:	75fb      	strb	r3, [r7, #23]
          break;
 8006560:	e027      	b.n	80065b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	2b03      	cmp	r3, #3
 800656a:	d107      	bne.n	800657c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800656c:	f107 030f 	add.w	r3, r7, #15
 8006570:	2201      	movs	r2, #1
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f9c0 	bl	80078fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800657a:	e01a      	b.n	80065b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 f951 	bl	8007826 <USBD_CtlError>
            ret = USBD_FAIL;
 8006584:	2302      	movs	r3, #2
 8006586:	75fb      	strb	r3, [r7, #23]
          break;
 8006588:	e013      	b.n	80065b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	2b03      	cmp	r3, #3
 8006592:	d00d      	beq.n	80065b0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 f945 	bl	8007826 <USBD_CtlError>
            ret = USBD_FAIL;
 800659c:	2302      	movs	r3, #2
 800659e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065a0:	e006      	b.n	80065b0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f93e 	bl	8007826 <USBD_CtlError>
          ret = USBD_FAIL;
 80065aa:	2302      	movs	r3, #2
 80065ac:	75fb      	strb	r3, [r7, #23]
          break;
 80065ae:	e000      	b.n	80065b2 <USBD_CDC_Setup+0x12c>
          break;
 80065b0:	bf00      	nop
      }
      break;
 80065b2:	e006      	b.n	80065c2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 f935 	bl	8007826 <USBD_CtlError>
      ret = USBD_FAIL;
 80065bc:	2302      	movs	r3, #2
 80065be:	75fb      	strb	r3, [r7, #23]
      break;
 80065c0:	bf00      	nop
  }

  return ret;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03a      	beq.n	8006668 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	331c      	adds	r3, #28
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d029      	beq.n	800665c <USBD_CDC_DataIn+0x90>
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	331c      	adds	r3, #28
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	78f9      	ldrb	r1, [r7, #3]
 800661c:	68b8      	ldr	r0, [r7, #8]
 800661e:	460b      	mov	r3, r1
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4403      	add	r3, r0
 8006628:	3338      	adds	r3, #56	; 0x38
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006630:	fb03 f301 	mul.w	r3, r3, r1
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d110      	bne.n	800665c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	331c      	adds	r3, #28
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800664e:	78f9      	ldrb	r1, [r7, #3]
 8006650:	2300      	movs	r3, #0
 8006652:	2200      	movs	r2, #0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f004 f8e2 	bl	800a81e <USBD_LL_Transmit>
 800665a:	e003      	b.n	8006664 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	e000      	b.n	800666a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006668:	2302      	movs	r3, #2
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f004 f90d 	bl	800a8aa <USBD_LL_GetRxDataSize>
 8006690:	4602      	mov	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066b6:	4611      	mov	r1, r2
 80066b8:	4798      	blx	r3

    return USBD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d015      	beq.n	800670e <USBD_CDC_EP0_RxReady+0x46>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066e8:	2bff      	cmp	r3, #255	; 0xff
 80066ea:	d010      	beq.n	800670e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80066fa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006702:	b292      	uxth	r2, r2
 8006704:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	22ff      	movs	r2, #255	; 0xff
 800670a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2243      	movs	r2, #67	; 0x43
 8006724:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006726:	4b03      	ldr	r3, [pc, #12]	; (8006734 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000094 	.word	0x20000094

08006738 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2243      	movs	r2, #67	; 0x43
 8006744:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006746:	4b03      	ldr	r3, [pc, #12]	; (8006754 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000050 	.word	0x20000050

08006758 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2243      	movs	r2, #67	; 0x43
 8006764:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006766:	4b03      	ldr	r3, [pc, #12]	; (8006774 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	200000d8 	.word	0x200000d8

08006778 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	220a      	movs	r2, #10
 8006784:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006786:	4b03      	ldr	r3, [pc, #12]	; (8006794 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	2000000c 	.word	0x2000000c

08006798 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067a2:	2302      	movs	r3, #2
 80067a4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067e2:	88fa      	ldrh	r2, [r7, #6]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006806:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr

0800681c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01c      	beq.n	8006870 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800683c:	2b00      	cmp	r3, #0
 800683e:	d115      	bne.n	800686c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800685e:	b29b      	uxth	r3, r3
 8006860:	2181      	movs	r1, #129	; 0x81
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f003 ffdb 	bl	800a81e <USBD_LL_Transmit>

      return USBD_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e002      	b.n	8006872 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006870:	2302      	movs	r3, #2
  }
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006888:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	7c1b      	ldrb	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068a6:	2101      	movs	r1, #1
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f003 ffdb 	bl	800a864 <USBD_LL_PrepareReceive>
 80068ae:	e007      	b.n	80068c0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068b6:	2340      	movs	r3, #64	; 0x40
 80068b8:	2101      	movs	r1, #1
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f003 ffd2 	bl	800a864 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80068c4:	2302      	movs	r3, #2
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	4613      	mov	r3, r2
 80068da:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068e2:	2302      	movs	r3, #2
 80068e4:	e01a      	b.n	800691c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	79fa      	ldrb	r2, [r7, #7]
 8006912:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f003 fe3f 	bl	800a598 <USBD_LL_Init>

  return USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d006      	beq.n	8006946 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e001      	b.n	800694a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006946:	2302      	movs	r3, #2
 8006948:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f003 fe74 	bl	800a64c <USBD_LL_Start>

  return USBD_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr

08006982 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800698e:	2302      	movs	r3, #2
 8006990:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00c      	beq.n	80069b6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	4611      	mov	r1, r2
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	4611      	mov	r1, r2
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3

  return USBD_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fed8 	bl	80077ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d016      	beq.n	8006a50 <USBD_LL_SetupStage+0x6a>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d81c      	bhi.n	8006a60 <USBD_LL_SetupStage+0x7a>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <USBD_LL_SetupStage+0x4a>
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d008      	beq.n	8006a40 <USBD_LL_SetupStage+0x5a>
 8006a2e:	e017      	b.n	8006a60 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f9cb 	bl	8006dd4 <USBD_StdDevReq>
      break;
 8006a3e:	e01a      	b.n	8006a76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa2d 	bl	8006ea8 <USBD_StdItfReq>
      break;
 8006a4e:	e012      	b.n	8006a76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa6d 	bl	8006f38 <USBD_StdEPReq>
      break;
 8006a5e:	e00a      	b.n	8006a76 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f003 fe4c 	bl	800a70c <USBD_LL_StallEP>
      break;
 8006a74:	bf00      	nop
  }

  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d14b      	bne.n	8006b2c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a9a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d134      	bne.n	8006b10 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d919      	bls.n	8006ae6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d203      	bcs.n	8006ad4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	e002      	b.n	8006ada <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 ff57 	bl	8007992 <USBD_CtlContinueRx>
 8006ae4:	e038      	b.n	8006b58 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d105      	bne.n	8006b08 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 ff54 	bl	80079b6 <USBD_CtlSendStatus>
 8006b0e:	e023      	b.n	8006b58 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b16:	2b05      	cmp	r3, #5
 8006b18:	d11e      	bne.n	8006b58 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006b22:	2100      	movs	r1, #0
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f003 fdf1 	bl	800a70c <USBD_LL_StallEP>
 8006b2a:	e015      	b.n	8006b58 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d108      	bne.n	8006b54 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	7afa      	ldrb	r2, [r7, #11]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
 8006b52:	e001      	b.n	8006b58 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b54:	2302      	movs	r3, #2
 8006b56:	e000      	b.n	8006b5a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d17f      	bne.n	8006c76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d15c      	bne.n	8006c40 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d915      	bls.n	8006bbe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fec1 	bl	8007932 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f003 fe54 	bl	800a864 <USBD_LL_PrepareReceive>
 8006bbc:	e04e      	b.n	8006c5c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	6912      	ldr	r2, [r2, #16]
 8006bc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bca:	fb02 f201 	mul.w	r2, r2, r1
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11c      	bne.n	8006c0e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d316      	bcc.n	8006c0e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d20f      	bcs.n	8006c0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fe9d 	bl	8007932 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c00:	2300      	movs	r3, #0
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f003 fe2c 	bl	800a864 <USBD_LL_PrepareReceive>
 8006c0c:	e026      	b.n	8006c5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d105      	bne.n	8006c30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c30:	2180      	movs	r1, #128	; 0x80
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f003 fd6a 	bl	800a70c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fecf 	bl	80079dc <USBD_CtlReceiveStatus>
 8006c3e:	e00d      	b.n	8006c5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d004      	beq.n	8006c54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d103      	bne.n	8006c5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c54:	2180      	movs	r1, #128	; 0x80
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f003 fd58 	bl	800a70c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d11d      	bne.n	8006ca2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fe81 	bl	800696e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c74:	e015      	b.n	8006ca2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d108      	bne.n	8006c9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	7afa      	ldrb	r2, [r7, #11]
 8006c96:	4611      	mov	r1, r2
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	4798      	blx	r3
 8006c9c:	e001      	b.n	8006ca2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e000      	b.n	8006ca4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f003 fce1 	bl	800a682 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2240      	movs	r2, #64	; 0x40
 8006ccc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cd0:	2340      	movs	r3, #64	; 0x40
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2180      	movs	r1, #128	; 0x80
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f003 fcd3 	bl	800a682 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2240      	movs	r2, #64	; 0x40
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6852      	ldr	r2, [r2, #4]
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	4611      	mov	r1, r2
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	4798      	blx	r3
  }

  return USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr

08006d4c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2204      	movs	r2, #4
 8006d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d105      	bne.n	8006d92 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d10b      	bne.n	8006dc8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d005      	beq.n	8006dfa <USBD_StdDevReq+0x26>
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d84f      	bhi.n	8006e92 <USBD_StdDevReq+0xbe>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <USBD_StdDevReq+0x36>
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d14b      	bne.n	8006e92 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
      break;
 8006e08:	e048      	b.n	8006e9c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b09      	cmp	r3, #9
 8006e10:	d839      	bhi.n	8006e86 <USBD_StdDevReq+0xb2>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_StdDevReq+0x44>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	08006e7d 	.word	0x08006e7d
 8006e20:	08006e87 	.word	0x08006e87
 8006e24:	08006e73 	.word	0x08006e73
 8006e28:	08006e87 	.word	0x08006e87
 8006e2c:	08006e4b 	.word	0x08006e4b
 8006e30:	08006e41 	.word	0x08006e41
 8006e34:	08006e87 	.word	0x08006e87
 8006e38:	08006e5f 	.word	0x08006e5f
 8006e3c:	08006e55 	.word	0x08006e55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f9dc 	bl	8007200 <USBD_GetDescriptor>
          break;
 8006e48:	e022      	b.n	8006e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fb3f 	bl	80074d0 <USBD_SetAddress>
          break;
 8006e52:	e01d      	b.n	8006e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fb7e 	bl	8007558 <USBD_SetConfig>
          break;
 8006e5c:	e018      	b.n	8006e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fc07 	bl	8007674 <USBD_GetConfig>
          break;
 8006e66:	e013      	b.n	8006e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc37 	bl	80076de <USBD_GetStatus>
          break;
 8006e70:	e00e      	b.n	8006e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc65 	bl	8007744 <USBD_SetFeature>
          break;
 8006e7a:	e009      	b.n	8006e90 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fc74 	bl	800776c <USBD_ClrFeature>
          break;
 8006e84:	e004      	b.n	8006e90 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fccc 	bl	8007826 <USBD_CtlError>
          break;
 8006e8e:	bf00      	nop
      }
      break;
 8006e90:	e004      	b.n	8006e9c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fcc6 	bl	8007826 <USBD_CtlError>
      break;
 8006e9a:	bf00      	nop
  }

  return ret;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop

08006ea8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d005      	beq.n	8006ece <USBD_StdItfReq+0x26>
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d82e      	bhi.n	8006f24 <USBD_StdItfReq+0x7c>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <USBD_StdItfReq+0x26>
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d12a      	bne.n	8006f24 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d81d      	bhi.n	8006f16 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	889b      	ldrh	r3, [r3, #4]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d813      	bhi.n	8006f0c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	88db      	ldrh	r3, [r3, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d110      	bne.n	8006f20 <USBD_StdItfReq+0x78>
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10d      	bne.n	8006f20 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fd56 	bl	80079b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f0a:	e009      	b.n	8006f20 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fc89 	bl	8007826 <USBD_CtlError>
          break;
 8006f14:	e004      	b.n	8006f20 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fc84 	bl	8007826 <USBD_CtlError>
          break;
 8006f1e:	e000      	b.n	8006f22 <USBD_StdItfReq+0x7a>
          break;
 8006f20:	bf00      	nop
      }
      break;
 8006f22:	e004      	b.n	8006f2e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fc7d 	bl	8007826 <USBD_CtlError>
      break;
 8006f2c:	bf00      	nop
  }

  return USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	d007      	beq.n	8006f68 <USBD_StdEPReq+0x30>
 8006f58:	2b40      	cmp	r3, #64	; 0x40
 8006f5a:	f200 8146 	bhi.w	80071ea <USBD_StdEPReq+0x2b2>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <USBD_StdEPReq+0x40>
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	f040 8141 	bne.w	80071ea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
      break;
 8006f76:	e13d      	b.n	80071f4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d10a      	bne.n	8006f9a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	e12d      	b.n	80071f6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d007      	beq.n	8006fb2 <USBD_StdEPReq+0x7a>
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	f300 811b 	bgt.w	80071de <USBD_StdEPReq+0x2a6>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d072      	beq.n	8007092 <USBD_StdEPReq+0x15a>
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d03a      	beq.n	8007026 <USBD_StdEPReq+0xee>
 8006fb0:	e115      	b.n	80071de <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d002      	beq.n	8006fc2 <USBD_StdEPReq+0x8a>
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d015      	beq.n	8006fec <USBD_StdEPReq+0xb4>
 8006fc0:	e02b      	b.n	800701a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00c      	beq.n	8006fe2 <USBD_StdEPReq+0xaa>
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b80      	cmp	r3, #128	; 0x80
 8006fcc:	d009      	beq.n	8006fe2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f003 fb9a 	bl	800a70c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fd8:	2180      	movs	r1, #128	; 0x80
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f003 fb96 	bl	800a70c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fe0:	e020      	b.n	8007024 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc1e 	bl	8007826 <USBD_CtlError>
              break;
 8006fea:	e01b      	b.n	8007024 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	885b      	ldrh	r3, [r3, #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10e      	bne.n	8007012 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <USBD_StdEPReq+0xda>
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b80      	cmp	r3, #128	; 0x80
 8006ffe:	d008      	beq.n	8007012 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	88db      	ldrh	r3, [r3, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f003 fb7d 	bl	800a70c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fccf 	bl	80079b6 <USBD_CtlSendStatus>

              break;
 8007018:	e004      	b.n	8007024 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc02 	bl	8007826 <USBD_CtlError>
              break;
 8007022:	bf00      	nop
          }
          break;
 8007024:	e0e0      	b.n	80071e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702c:	2b02      	cmp	r3, #2
 800702e:	d002      	beq.n	8007036 <USBD_StdEPReq+0xfe>
 8007030:	2b03      	cmp	r3, #3
 8007032:	d015      	beq.n	8007060 <USBD_StdEPReq+0x128>
 8007034:	e026      	b.n	8007084 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <USBD_StdEPReq+0x11e>
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b80      	cmp	r3, #128	; 0x80
 8007040:	d009      	beq.n	8007056 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f003 fb60 	bl	800a70c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800704c:	2180      	movs	r1, #128	; 0x80
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f003 fb5c 	bl	800a70c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007054:	e01c      	b.n	8007090 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fbe4 	bl	8007826 <USBD_CtlError>
              break;
 800705e:	e017      	b.n	8007090 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d112      	bne.n	800708e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f003 fb67 	bl	800a74a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fc9a 	bl	80079b6 <USBD_CtlSendStatus>
              }
              break;
 8007082:	e004      	b.n	800708e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fbcd 	bl	8007826 <USBD_CtlError>
              break;
 800708c:	e000      	b.n	8007090 <USBD_StdEPReq+0x158>
              break;
 800708e:	bf00      	nop
          }
          break;
 8007090:	e0aa      	b.n	80071e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007098:	2b02      	cmp	r3, #2
 800709a:	d002      	beq.n	80070a2 <USBD_StdEPReq+0x16a>
 800709c:	2b03      	cmp	r3, #3
 800709e:	d032      	beq.n	8007106 <USBD_StdEPReq+0x1ce>
 80070a0:	e097      	b.n	80071d2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <USBD_StdEPReq+0x180>
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b80      	cmp	r3, #128	; 0x80
 80070ac:	d004      	beq.n	80070b8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbb8 	bl	8007826 <USBD_CtlError>
                break;
 80070b6:	e091      	b.n	80071dc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da0b      	bge.n	80070d8 <USBD_StdEPReq+0x1a0>
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	3310      	adds	r3, #16
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	3304      	adds	r3, #4
 80070d6:	e00b      	b.n	80070f0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	3304      	adds	r3, #4
 80070f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2202      	movs	r2, #2
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fbfb 	bl	80078fa <USBD_CtlSendData>
              break;
 8007104:	e06a      	b.n	80071dc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	da11      	bge.n	8007132 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	f003 020f 	and.w	r2, r3, #15
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	3318      	adds	r3, #24
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d117      	bne.n	8007158 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb7b 	bl	8007826 <USBD_CtlError>
                  break;
 8007130:	e054      	b.n	80071dc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	f003 020f 	and.w	r2, r3, #15
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fb68 	bl	8007826 <USBD_CtlError>
                  break;
 8007156:	e041      	b.n	80071dc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	da0b      	bge.n	8007178 <USBD_StdEPReq+0x240>
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	3310      	adds	r3, #16
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	4413      	add	r3, r2
 8007174:	3304      	adds	r3, #4
 8007176:	e00b      	b.n	8007190 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	3304      	adds	r3, #4
 8007190:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <USBD_StdEPReq+0x266>
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b80      	cmp	r3, #128	; 0x80
 800719c:	d103      	bne.n	80071a6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e00e      	b.n	80071c4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f003 faec 	bl	800a788 <USBD_LL_IsStallEP>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2201      	movs	r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	e002      	b.n	80071c4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2202      	movs	r2, #2
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fb95 	bl	80078fa <USBD_CtlSendData>
              break;
 80071d0:	e004      	b.n	80071dc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fb26 	bl	8007826 <USBD_CtlError>
              break;
 80071da:	bf00      	nop
          }
          break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb20 	bl	8007826 <USBD_CtlError>
          break;
 80071e6:	bf00      	nop
      }
      break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb1a 	bl	8007826 <USBD_CtlError>
      break;
 80071f2:	bf00      	nop
  }

  return ret;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	885b      	ldrh	r3, [r3, #2]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	2b06      	cmp	r3, #6
 8007222:	f200 8128 	bhi.w	8007476 <USBD_GetDescriptor+0x276>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <USBD_GetDescriptor+0x2c>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007249 	.word	0x08007249
 8007230:	08007261 	.word	0x08007261
 8007234:	080072a1 	.word	0x080072a1
 8007238:	08007477 	.word	0x08007477
 800723c:	08007477 	.word	0x08007477
 8007240:	08007417 	.word	0x08007417
 8007244:	08007443 	.word	0x08007443
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	7c12      	ldrb	r2, [r2, #16]
 8007254:	f107 0108 	add.w	r1, r7, #8
 8007258:	4610      	mov	r0, r2
 800725a:	4798      	blx	r3
 800725c:	60f8      	str	r0, [r7, #12]
      break;
 800725e:	e112      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	7c1b      	ldrb	r3, [r3, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10d      	bne.n	8007284 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	f107 0208 	add.w	r2, r7, #8
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
 8007278:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	2202      	movs	r2, #2
 8007280:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007282:	e100      	b.n	8007486 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	f107 0208 	add.w	r2, r7, #8
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
 8007294:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	2202      	movs	r2, #2
 800729c:	701a      	strb	r2, [r3, #0]
      break;
 800729e:	e0f2      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	885b      	ldrh	r3, [r3, #2]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	f200 80ac 	bhi.w	8007404 <USBD_GetDescriptor+0x204>
 80072ac:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <USBD_GetDescriptor+0xb4>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	080072cd 	.word	0x080072cd
 80072b8:	08007301 	.word	0x08007301
 80072bc:	08007335 	.word	0x08007335
 80072c0:	08007369 	.word	0x08007369
 80072c4:	0800739d 	.word	0x0800739d
 80072c8:	080073d1 	.word	0x080073d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7c12      	ldrb	r2, [r2, #16]
 80072e4:	f107 0108 	add.w	r1, r7, #8
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ee:	e091      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa97 	bl	8007826 <USBD_CtlError>
            err++;
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	3301      	adds	r3, #1
 80072fc:	72fb      	strb	r3, [r7, #11]
          break;
 80072fe:	e089      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007322:	e077      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa7d 	bl	8007826 <USBD_CtlError>
            err++;
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	3301      	adds	r3, #1
 8007330:	72fb      	strb	r3, [r7, #11]
          break;
 8007332:	e06f      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	7c12      	ldrb	r2, [r2, #16]
 800734c:	f107 0108 	add.w	r1, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007356:	e05d      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa63 	bl	8007826 <USBD_CtlError>
            err++;
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	3301      	adds	r3, #1
 8007364:	72fb      	strb	r3, [r7, #11]
          break;
 8007366:	e055      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	7c12      	ldrb	r2, [r2, #16]
 8007380:	f107 0108 	add.w	r1, r7, #8
 8007384:	4610      	mov	r0, r2
 8007386:	4798      	blx	r3
 8007388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800738a:	e043      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa49 	bl	8007826 <USBD_CtlError>
            err++;
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	3301      	adds	r3, #1
 8007398:	72fb      	strb	r3, [r7, #11]
          break;
 800739a:	e03b      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	7c12      	ldrb	r2, [r2, #16]
 80073b4:	f107 0108 	add.w	r1, r7, #8
 80073b8:	4610      	mov	r0, r2
 80073ba:	4798      	blx	r3
 80073bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073be:	e029      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa2f 	bl	8007826 <USBD_CtlError>
            err++;
 80073c8:	7afb      	ldrb	r3, [r7, #11]
 80073ca:	3301      	adds	r3, #1
 80073cc:	72fb      	strb	r3, [r7, #11]
          break;
 80073ce:	e021      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	7c12      	ldrb	r2, [r2, #16]
 80073e8:	f107 0108 	add.w	r1, r7, #8
 80073ec:	4610      	mov	r0, r2
 80073ee:	4798      	blx	r3
 80073f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073f2:	e00f      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa15 	bl	8007826 <USBD_CtlError>
            err++;
 80073fc:	7afb      	ldrb	r3, [r7, #11]
 80073fe:	3301      	adds	r3, #1
 8007400:	72fb      	strb	r3, [r7, #11]
          break;
 8007402:	e007      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa0d 	bl	8007826 <USBD_CtlError>
          err++;
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	3301      	adds	r3, #1
 8007410:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007412:	e038      	b.n	8007486 <USBD_GetDescriptor+0x286>
 8007414:	e037      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	7c1b      	ldrb	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	f107 0208 	add.w	r2, r7, #8
 800742a:	4610      	mov	r0, r2
 800742c:	4798      	blx	r3
 800742e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007430:	e029      	b.n	8007486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9f6 	bl	8007826 <USBD_CtlError>
        err++;
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	3301      	adds	r3, #1
 800743e:	72fb      	strb	r3, [r7, #11]
      break;
 8007440:	e021      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7c1b      	ldrb	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10d      	bne.n	8007466 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	f107 0208 	add.w	r2, r7, #8
 8007456:	4610      	mov	r0, r2
 8007458:	4798      	blx	r3
 800745a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	2207      	movs	r2, #7
 8007462:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007464:	e00f      	b.n	8007486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f9dc 	bl	8007826 <USBD_CtlError>
        err++;
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	3301      	adds	r3, #1
 8007472:	72fb      	strb	r3, [r7, #11]
      break;
 8007474:	e007      	b.n	8007486 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9d4 	bl	8007826 <USBD_CtlError>
      err++;
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	3301      	adds	r3, #1
 8007482:	72fb      	strb	r3, [r7, #11]
      break;
 8007484:	bf00      	nop
  }

  if (err != 0U)
 8007486:	7afb      	ldrb	r3, [r7, #11]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11c      	bne.n	80074c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800748c:	893b      	ldrh	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d011      	beq.n	80074b6 <USBD_GetDescriptor+0x2b6>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	88db      	ldrh	r3, [r3, #6]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00d      	beq.n	80074b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88da      	ldrh	r2, [r3, #6]
 800749e:	893b      	ldrh	r3, [r7, #8]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bf28      	it	cs
 80074a4:	4613      	movcs	r3, r2
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074aa:	893b      	ldrh	r3, [r7, #8]
 80074ac:	461a      	mov	r2, r3
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa22 	bl	80078fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	88db      	ldrh	r3, [r3, #6]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa79 	bl	80079b6 <USBD_CtlSendStatus>
 80074c4:	e000      	b.n	80074c8 <USBD_GetDescriptor+0x2c8>
    return;
 80074c6:	bf00      	nop
    }
  }
}
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	889b      	ldrh	r3, [r3, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d130      	bne.n	8007544 <USBD_SetAddress+0x74>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d12c      	bne.n	8007544 <USBD_SetAddress+0x74>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b7f      	cmp	r3, #127	; 0x7f
 80074f0:	d828      	bhi.n	8007544 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	885b      	ldrh	r3, [r3, #2]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	2b03      	cmp	r3, #3
 8007506:	d104      	bne.n	8007512 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f98b 	bl	8007826 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007510:	e01d      	b.n	800754e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	7bfa      	ldrb	r2, [r7, #15]
 8007516:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f003 f95e 	bl	800a7e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fa46 	bl	80079b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007538:	e009      	b.n	800754e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007542:	e004      	b.n	800754e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f96d 	bl	8007826 <USBD_CtlError>
  }
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	b2da      	uxtb	r2, r3
 8007568:	4b41      	ldr	r3, [pc, #260]	; (8007670 <USBD_SetConfig+0x118>)
 800756a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800756c:	4b40      	ldr	r3, [pc, #256]	; (8007670 <USBD_SetConfig+0x118>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d904      	bls.n	800757e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f955 	bl	8007826 <USBD_CtlError>
 800757c:	e075      	b.n	800766a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	2b02      	cmp	r3, #2
 8007586:	d002      	beq.n	800758e <USBD_SetConfig+0x36>
 8007588:	2b03      	cmp	r3, #3
 800758a:	d023      	beq.n	80075d4 <USBD_SetConfig+0x7c>
 800758c:	e062      	b.n	8007654 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800758e:	4b38      	ldr	r3, [pc, #224]	; (8007670 <USBD_SetConfig+0x118>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01a      	beq.n	80075cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007596:	4b36      	ldr	r3, [pc, #216]	; (8007670 <USBD_SetConfig+0x118>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2203      	movs	r2, #3
 80075a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075a8:	4b31      	ldr	r3, [pc, #196]	; (8007670 <USBD_SetConfig+0x118>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff f9e7 	bl	8006982 <USBD_SetClassConfig>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d104      	bne.n	80075c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f932 	bl	8007826 <USBD_CtlError>
            return;
 80075c2:	e052      	b.n	800766a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f9f6 	bl	80079b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075ca:	e04e      	b.n	800766a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9f2 	bl	80079b6 <USBD_CtlSendStatus>
        break;
 80075d2:	e04a      	b.n	800766a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80075d4:	4b26      	ldr	r3, [pc, #152]	; (8007670 <USBD_SetConfig+0x118>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d112      	bne.n	8007602 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075e4:	4b22      	ldr	r3, [pc, #136]	; (8007670 <USBD_SetConfig+0x118>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075ee:	4b20      	ldr	r3, [pc, #128]	; (8007670 <USBD_SetConfig+0x118>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff f9e3 	bl	80069c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9db 	bl	80079b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007600:	e033      	b.n	800766a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007602:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <USBD_SetConfig+0x118>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d01d      	beq.n	800764c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff f9d1 	bl	80069c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <USBD_SetConfig+0x118>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <USBD_SetConfig+0x118>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff f9a7 	bl	8006982 <USBD_SetClassConfig>
 8007634:	4603      	mov	r3, r0
 8007636:	2b02      	cmp	r3, #2
 8007638:	d104      	bne.n	8007644 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8f2 	bl	8007826 <USBD_CtlError>
            return;
 8007642:	e012      	b.n	800766a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9b6 	bl	80079b6 <USBD_CtlSendStatus>
        break;
 800764a:	e00e      	b.n	800766a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f9b2 	bl	80079b6 <USBD_CtlSendStatus>
        break;
 8007652:	e00a      	b.n	800766a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8e5 	bl	8007826 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <USBD_SetConfig+0x118>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff f9ac 	bl	80069c0 <USBD_ClrClassConfig>
        break;
 8007668:	bf00      	nop
    }
  }
}
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200003f0 	.word	0x200003f0

08007674 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	88db      	ldrh	r3, [r3, #6]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d004      	beq.n	8007690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f8cc 	bl	8007826 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800768e:	e022      	b.n	80076d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007696:	2b02      	cmp	r3, #2
 8007698:	dc02      	bgt.n	80076a0 <USBD_GetConfig+0x2c>
 800769a:	2b00      	cmp	r3, #0
 800769c:	dc03      	bgt.n	80076a6 <USBD_GetConfig+0x32>
 800769e:	e015      	b.n	80076cc <USBD_GetConfig+0x58>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d00b      	beq.n	80076bc <USBD_GetConfig+0x48>
 80076a4:	e012      	b.n	80076cc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3308      	adds	r3, #8
 80076b0:	2201      	movs	r2, #1
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f920 	bl	80078fa <USBD_CtlSendData>
        break;
 80076ba:	e00c      	b.n	80076d6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	2201      	movs	r2, #1
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f918 	bl	80078fa <USBD_CtlSendData>
        break;
 80076ca:	e004      	b.n	80076d6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8a9 	bl	8007826 <USBD_CtlError>
        break;
 80076d4:	bf00      	nop
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ee:	3b01      	subs	r3, #1
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d81e      	bhi.n	8007732 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	88db      	ldrh	r3, [r3, #6]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d004      	beq.n	8007706 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f891 	bl	8007826 <USBD_CtlError>
        break;
 8007704:	e01a      	b.n	800773c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f043 0202 	orr.w	r2, r3, #2
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	330c      	adds	r3, #12
 8007726:	2202      	movs	r2, #2
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f8e5 	bl	80078fa <USBD_CtlSendData>
      break;
 8007730:	e004      	b.n	800773c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f876 	bl	8007826 <USBD_CtlError>
      break;
 800773a:	bf00      	nop
  }
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d106      	bne.n	8007764 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f929 	bl	80079b6 <USBD_CtlSendStatus>
  }
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777c:	3b01      	subs	r3, #1
 800777e:	2b02      	cmp	r3, #2
 8007780:	d80b      	bhi.n	800779a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	885b      	ldrh	r3, [r3, #2]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d10c      	bne.n	80077a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f90f 	bl	80079b6 <USBD_CtlSendStatus>
      }
      break;
 8007798:	e004      	b.n	80077a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f842 	bl	8007826 <USBD_CtlError>
      break;
 80077a2:	e000      	b.n	80077a6 <USBD_ClrFeature+0x3a>
      break;
 80077a4:	bf00      	nop
  }
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	785a      	ldrb	r2, [r3, #1]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	3302      	adds	r3, #2
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	3303      	adds	r3, #3
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	b29b      	uxth	r3, r3
 80077dc:	4413      	add	r3, r2
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	3304      	adds	r3, #4
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	3305      	adds	r3, #5
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	3306      	adds	r3, #6
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b29a      	uxth	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	3307      	adds	r3, #7
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	b29b      	uxth	r3, r3
 8007814:	4413      	add	r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	80da      	strh	r2, [r3, #6]

}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	bc80      	pop	{r7}
 8007824:	4770      	bx	lr

08007826 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007830:	2180      	movs	r1, #128	; 0x80
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f002 ff6a 	bl	800a70c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007838:	2100      	movs	r1, #0
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f002 ff66 	bl	800a70c <USBD_LL_StallEP>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d032      	beq.n	80078c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f834 	bl	80078cc <USBD_GetLen>
 8007864:	4603      	mov	r3, r0
 8007866:	3301      	adds	r3, #1
 8007868:	b29b      	uxth	r3, r3
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	75fa      	strb	r2, [r7, #23]
 8007878:	461a      	mov	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4413      	add	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	75fa      	strb	r2, [r7, #23]
 800788a:	461a      	mov	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4413      	add	r3, r2
 8007890:	2203      	movs	r2, #3
 8007892:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007894:	e012      	b.n	80078bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	60fa      	str	r2, [r7, #12]
 800789c:	7dfa      	ldrb	r2, [r7, #23]
 800789e:	1c51      	adds	r1, r2, #1
 80078a0:	75f9      	strb	r1, [r7, #23]
 80078a2:	4611      	mov	r1, r2
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	440a      	add	r2, r1
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	75fa      	strb	r2, [r7, #23]
 80078b2:	461a      	mov	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4413      	add	r3, r2
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e8      	bne.n	8007896 <USBD_GetString+0x4e>
    }
  }
}
 80078c4:	bf00      	nop
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078d8:	e005      	b.n	80078e6 <USBD_GetLen+0x1a>
  {
    len++;
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	3301      	adds	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3301      	adds	r3, #1
 80078e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f5      	bne.n	80078da <USBD_GetLen+0xe>
  }

  return len;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr

080078fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	4613      	mov	r3, r2
 8007906:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2202      	movs	r2, #2
 800790c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007910:	88fa      	ldrh	r2, [r7, #6]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	2100      	movs	r1, #0
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f002 ff7b 	bl	800a81e <USBD_LL_Transmit>

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	4613      	mov	r3, r2
 800793e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	2100      	movs	r1, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f002 ff69 	bl	800a81e <USBD_LL_Transmit>

  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2203      	movs	r2, #3
 8007968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007974:	88fa      	ldrh	r2, [r7, #6]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	2100      	movs	r1, #0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f002 ff6e 	bl	800a864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	4613      	mov	r3, r2
 800799e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079a0:	88fb      	ldrh	r3, [r7, #6]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	2100      	movs	r1, #0
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f002 ff5c 	bl	800a864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079c6:	2300      	movs	r3, #0
 80079c8:	2200      	movs	r2, #0
 80079ca:	2100      	movs	r1, #0
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f002 ff26 	bl	800a81e <USBD_LL_Transmit>

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2205      	movs	r2, #5
 80079e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ec:	2300      	movs	r3, #0
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f002 ff36 	bl	800a864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	4603      	mov	r3, r0
 8007a0a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a14:	2b84      	cmp	r3, #132	; 0x84
 8007a16:	d005      	beq.n	8007a24 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	3303      	adds	r3, #3
 8007a22:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a24:	68fb      	ldr	r3, [r7, #12]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a34:	f000 fed4 	bl	80087e0 <vTaskStartScheduler>
  
  return osOK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a40:	b089      	sub	sp, #36	; 0x24
 8007a42:	af04      	add	r7, sp, #16
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d020      	beq.n	8007a92 <osThreadCreate+0x54>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01c      	beq.n	8007a92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685c      	ldr	r4, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681d      	ldr	r5, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691e      	ldr	r6, [r3, #16]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff ffc9 	bl	8007a02 <makeFreeRtosPriority>
 8007a70:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a7a:	9202      	str	r2, [sp, #8]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	9100      	str	r1, [sp, #0]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	4632      	mov	r2, r6
 8007a84:	4629      	mov	r1, r5
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 fceb 	bl	8008462 <xTaskCreateStatic>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e01c      	b.n	8007acc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685c      	ldr	r4, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a9e:	b29e      	uxth	r6, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff ffab 	bl	8007a02 <makeFreeRtosPriority>
 8007aac:	4602      	mov	r2, r0
 8007aae:	f107 030c 	add.w	r3, r7, #12
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	9200      	str	r2, [sp, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4629      	mov	r1, r5
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fd2c 	bl	800851a <xTaskCreate>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d001      	beq.n	8007acc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e000      	b.n	8007ace <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007acc:	68fb      	ldr	r3, [r7, #12]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ad6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <osDelay+0x16>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	e000      	b.n	8007aee <osDelay+0x18>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fe42 	bl	8008778 <vTaskDelay>
  
  return osOK;
 8007af4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f103 0208 	add.w	r2, r3, #8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f103 0208 	add.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f103 0208 	add.w	r2, r3, #8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	601a      	str	r2, [r3, #0]
}
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr

08007b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb0:	d103      	bne.n	8007bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	e00c      	b.n	8007bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e002      	b.n	8007bc8 <vListInsert+0x2e>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d2f6      	bcs.n	8007bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6892      	ldr	r2, [r2, #8]
 8007c20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6852      	ldr	r2, [r2, #4]
 8007c2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d103      	bne.n	8007c3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	1e5a      	subs	r2, r3, #1
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr

08007c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c86:	f001 fce9 	bl	800965c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c96:	fb01 f303 	mul.w	r3, r1, r3
 8007c9a:	441a      	add	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	441a      	add	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	22ff      	movs	r2, #255	; 0xff
 8007cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	22ff      	movs	r2, #255	; 0xff
 8007cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d114      	bne.n	8007d06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01a      	beq.n	8007d1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3310      	adds	r3, #16
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 ffbf 	bl	8008c6c <xTaskRemoveFromEventList>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d012      	beq.n	8007d1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <xQueueGenericReset+0xcc>)
 8007cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	e009      	b.n	8007d1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3310      	adds	r3, #16
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fef7 	bl	8007afe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3324      	adds	r3, #36	; 0x24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff fef2 	bl	8007afe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d1a:	f001 fccf 	bl	80096bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d1e:	2301      	movs	r3, #1
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	613b      	str	r3, [r7, #16]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d102      	bne.n	8007d62 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	e004      	b.n	8007d6c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	3348      	adds	r3, #72	; 0x48
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 fd35 	bl	80097e0 <pvPortMalloc>
 8007d76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00f      	beq.n	8007d9e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	3348      	adds	r3, #72	; 0x48
 8007d82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d8c:	79fa      	ldrb	r2, [r7, #7]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4613      	mov	r3, r2
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f805 	bl	8007da8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3720      	adds	r7, #32
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d103      	bne.n	8007dc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	69b8      	ldr	r0, [r7, #24]
 8007dda:	f7ff ff3f 	bl	8007c5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e06:	2300      	movs	r3, #0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f81d 	bl	8007e4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	4603      	mov	r3, r0
 8007e22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6939      	ldr	r1, [r7, #16]
 8007e32:	6978      	ldr	r0, [r7, #20]
 8007e34:	f7ff ff7a 	bl	8007d2c <xQueueGenericCreate>
 8007e38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff ffd3 	bl	8007de6 <prvInitialiseMutex>

		return pxNewQueue;
 8007e40:	68fb      	ldr	r3, [r7, #12]
	}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08e      	sub	sp, #56	; 0x38
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <xQueueGenericSend+0x32>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d103      	bne.n	8007e8c <xQueueGenericSend+0x40>
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <xQueueGenericSend+0x44>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <xQueueGenericSend+0x46>
 8007e90:	2300      	movs	r3, #0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <xQueueGenericSend+0x60>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ea8:	bf00      	nop
 8007eaa:	e7fe      	b.n	8007eaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d103      	bne.n	8007eba <xQueueGenericSend+0x6e>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <xQueueGenericSend+0x72>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <xQueueGenericSend+0x74>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <xQueueGenericSend+0x8e>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	623b      	str	r3, [r7, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eda:	f001 f887 	bl	8008fec <xTaskGetSchedulerState>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <xQueueGenericSend+0x9e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <xQueueGenericSend+0xa2>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <xQueueGenericSend+0xa4>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xQueueGenericSend+0xbe>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	61fb      	str	r3, [r7, #28]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f0a:	f001 fba7 	bl	800965c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d302      	bcc.n	8007f20 <xQueueGenericSend+0xd4>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d129      	bne.n	8007f74 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f26:	f000 f9b2 	bl	800828e <prvCopyDataToQueue>
 8007f2a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d010      	beq.n	8007f56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	3324      	adds	r3, #36	; 0x24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fe97 	bl	8008c6c <xTaskRemoveFromEventList>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d013      	beq.n	8007f6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f44:	4b3f      	ldr	r3, [pc, #252]	; (8008044 <xQueueGenericSend+0x1f8>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	e00a      	b.n	8007f6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f5c:	4b39      	ldr	r3, [pc, #228]	; (8008044 <xQueueGenericSend+0x1f8>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f6c:	f001 fba6 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e063      	b.n	800803c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d103      	bne.n	8007f82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f7a:	f001 fb9f 	bl	80096bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e05c      	b.n	800803c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fecf 	bl	8008d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f92:	2301      	movs	r3, #1
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f96:	f001 fb91 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f9a:	f000 fc81 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f9e:	f001 fb5d 	bl	800965c <vPortEnterCritical>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d103      	bne.n	8007fb8 <xQueueGenericSend+0x16c>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d103      	bne.n	8007fce <xQueueGenericSend+0x182>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fce:	f001 fb75 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fd2:	1d3a      	adds	r2, r7, #4
 8007fd4:	f107 0314 	add.w	r3, r7, #20
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 febe 	bl	8008d5c <xTaskCheckForTimeOut>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d124      	bne.n	8008030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fe8:	f000 fa23 	bl	8008432 <prvIsQueueFull>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	3310      	adds	r3, #16
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fe12 	bl	8008c24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008002:	f000 f9ae 	bl	8008362 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008006:	f000 fc59 	bl	80088bc <xTaskResumeAll>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f af7c 	bne.w	8007f0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <xQueueGenericSend+0x1f8>)
 8008014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	e772      	b.n	8007f0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008026:	f000 f99c 	bl	8008362 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800802a:	f000 fc47 	bl	80088bc <xTaskResumeAll>
 800802e:	e76c      	b.n	8007f0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008032:	f000 f996 	bl	8008362 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008036:	f000 fc41 	bl	80088bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800803a:	2300      	movs	r3, #0
		}
	}
}
 800803c:	4618      	mov	r0, r3
 800803e:	3738      	adds	r7, #56	; 0x38
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	e000ed04 	.word	0xe000ed04

08008048 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08e      	sub	sp, #56	; 0x38
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800805a:	2300      	movs	r3, #0
 800805c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	623b      	str	r3, [r7, #32]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	61fb      	str	r3, [r7, #28]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008098:	f000 ffa8 	bl	8008fec <xTaskGetSchedulerState>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <xQueueSemaphoreTake+0x60>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <xQueueSemaphoreTake+0x64>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <xQueueSemaphoreTake+0x66>
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	61bb      	str	r3, [r7, #24]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80080c8:	f001 fac8 	bl	800965c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d024      	beq.n	8008122 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	1e5a      	subs	r2, r3, #1
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80080e8:	f001 f94a 	bl	8009380 <pvTaskIncrementMutexHeldCount>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00f      	beq.n	800811a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	3310      	adds	r3, #16
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fdb4 	bl	8008c6c <xTaskRemoveFromEventList>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800810a:	4b54      	ldr	r3, [pc, #336]	; (800825c <xQueueSemaphoreTake+0x214>)
 800810c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800811a:	f001 facf 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 800811e:	2301      	movs	r3, #1
 8008120:	e097      	b.n	8008252 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d111      	bne.n	800814c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	617b      	str	r3, [r7, #20]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008144:	f001 faba 	bl	80096bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008148:	2300      	movs	r3, #0
 800814a:	e082      	b.n	8008252 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800814c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008152:	f107 030c 	add.w	r3, r7, #12
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fdea 	bl	8008d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008160:	f001 faac 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008164:	f000 fb9c 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008168:	f001 fa78 	bl	800965c <vPortEnterCritical>
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008172:	b25b      	sxtb	r3, r3
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d103      	bne.n	8008182 <xQueueSemaphoreTake+0x13a>
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008188:	b25b      	sxtb	r3, r3
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818e:	d103      	bne.n	8008198 <xQueueSemaphoreTake+0x150>
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008198:	f001 fa90 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800819c:	463a      	mov	r2, r7
 800819e:	f107 030c 	add.w	r3, r7, #12
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 fdd9 	bl	8008d5c <xTaskCheckForTimeOut>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d132      	bne.n	8008216 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081b2:	f000 f928 	bl	8008406 <prvIsQueueEmpty>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d026      	beq.n	800820a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d109      	bne.n	80081d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80081c4:	f001 fa4a 	bl	800965c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 ff2b 	bl	8009028 <xTaskPriorityInherit>
 80081d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80081d4:	f001 fa72 	bl	80096bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	3324      	adds	r3, #36	; 0x24
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	4611      	mov	r1, r2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fd1f 	bl	8008c24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081e8:	f000 f8bb 	bl	8008362 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081ec:	f000 fb66 	bl	80088bc <xTaskResumeAll>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f47f af68 	bne.w	80080c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80081f8:	4b18      	ldr	r3, [pc, #96]	; (800825c <xQueueSemaphoreTake+0x214>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	e75e      	b.n	80080c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800820a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800820c:	f000 f8a9 	bl	8008362 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008210:	f000 fb54 	bl	80088bc <xTaskResumeAll>
 8008214:	e758      	b.n	80080c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008218:	f000 f8a3 	bl	8008362 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800821c:	f000 fb4e 	bl	80088bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008222:	f000 f8f0 	bl	8008406 <prvIsQueueEmpty>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	f43f af4d 	beq.w	80080c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00d      	beq.n	8008250 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008234:	f001 fa12 	bl	800965c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800823a:	f000 f811 	bl	8008260 <prvGetDisinheritPriorityAfterTimeout>
 800823e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fffa 	bl	8009240 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800824c:	f001 fa36 	bl	80096bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008252:	4618      	mov	r0, r3
 8008254:	3738      	adds	r7, #56	; 0x38
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f1c3 0307 	rsb	r3, r3, #7
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e001      	b.n	8008282 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008282:	68fb      	ldr	r3, [r7, #12]
	}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10d      	bne.n	80082c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d14d      	bne.n	8008350 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 ff3b 	bl	8009134 <xTaskPriorityDisinherit>
 80082be:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	605a      	str	r2, [r3, #4]
 80082c6:	e043      	b.n	8008350 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d119      	bne.n	8008302 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6898      	ldr	r0, [r3, #8]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	461a      	mov	r2, r3
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	f002 fb69 	bl	800a9b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	441a      	add	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d32b      	bcc.n	8008350 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	e026      	b.n	8008350 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68d8      	ldr	r0, [r3, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	461a      	mov	r2, r3
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	f002 fb4f 	bl	800a9b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	425b      	negs	r3, r3
 800831c:	441a      	add	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d207      	bcs.n	800833e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	425b      	negs	r3, r3
 8008338:	441a      	add	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d105      	bne.n	8008350 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	3b01      	subs	r3, #1
 800834e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008358:	697b      	ldr	r3, [r7, #20]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800836a:	f001 f977 	bl	800965c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008374:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008376:	e011      	b.n	800839c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d012      	beq.n	80083a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3324      	adds	r3, #36	; 0x24
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fc71 	bl	8008c6c <xTaskRemoveFromEventList>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008390:	f000 fd46 	bl	8008e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	3b01      	subs	r3, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800839c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dce9      	bgt.n	8008378 <prvUnlockQueue+0x16>
 80083a4:	e000      	b.n	80083a8 <prvUnlockQueue+0x46>
					break;
 80083a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	22ff      	movs	r2, #255	; 0xff
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083b0:	f001 f984 	bl	80096bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083b4:	f001 f952 	bl	800965c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083c0:	e011      	b.n	80083e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d012      	beq.n	80083f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3310      	adds	r3, #16
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fc4c 	bl	8008c6c <xTaskRemoveFromEventList>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083da:	f000 fd21 	bl	8008e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dce9      	bgt.n	80083c2 <prvUnlockQueue+0x60>
 80083ee:	e000      	b.n	80083f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083fa:	f001 f95f 	bl	80096bc <vPortExitCritical>
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800840e:	f001 f925 	bl	800965c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800841a:	2301      	movs	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e001      	b.n	8008424 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008424:	f001 f94a 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800843a:	f001 f90f 	bl	800965c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	429a      	cmp	r2, r3
 8008448:	d102      	bne.n	8008450 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800844a:	2301      	movs	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	e001      	b.n	8008454 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008454:	f001 f932 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8008458:	68fb      	ldr	r3, [r7, #12]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008462:	b580      	push	{r7, lr}
 8008464:	b08e      	sub	sp, #56	; 0x38
 8008466:	af04      	add	r7, sp, #16
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <xTaskCreateStatic+0x2a>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	623b      	str	r3, [r7, #32]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	61fb      	str	r3, [r7, #28]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084a8:	2354      	movs	r3, #84	; 0x54
 80084aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2b54      	cmp	r3, #84	; 0x54
 80084b0:	d00a      	beq.n	80084c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	61bb      	str	r3, [r7, #24]
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d01e      	beq.n	800850c <xTaskCreateStatic+0xaa>
 80084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01b      	beq.n	800850c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	2202      	movs	r2, #2
 80084e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084e6:	2300      	movs	r3, #0
 80084e8:	9303      	str	r3, [sp, #12]
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	9302      	str	r3, [sp, #8]
 80084ee:	f107 0314 	add.w	r3, r7, #20
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 f850 	bl	80085a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008506:	f000 f8cd 	bl	80086a4 <prvAddNewTaskToReadyList>
 800850a:	e001      	b.n	8008510 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008510:	697b      	ldr	r3, [r7, #20]
	}
 8008512:	4618      	mov	r0, r3
 8008514:	3728      	adds	r7, #40	; 0x28
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800851a:	b580      	push	{r7, lr}
 800851c:	b08c      	sub	sp, #48	; 0x30
 800851e:	af04      	add	r7, sp, #16
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	603b      	str	r3, [r7, #0]
 8008526:	4613      	mov	r3, r2
 8008528:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4618      	mov	r0, r3
 8008530:	f001 f956 	bl	80097e0 <pvPortMalloc>
 8008534:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800853c:	2054      	movs	r0, #84	; 0x54
 800853e:	f001 f94f 	bl	80097e0 <pvPortMalloc>
 8008542:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	631a      	str	r2, [r3, #48]	; 0x30
 8008550:	e005      	b.n	800855e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008552:	6978      	ldr	r0, [r7, #20]
 8008554:	f001 fa08 	bl	8009968 <vPortFree>
 8008558:	e001      	b.n	800855e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d017      	beq.n	8008594 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	2300      	movs	r3, #0
 8008570:	9303      	str	r3, [sp, #12]
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	9302      	str	r3, [sp, #8]
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f80e 	bl	80085a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008588:	69f8      	ldr	r0, [r7, #28]
 800858a:	f000 f88b 	bl	80086a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800858e:	2301      	movs	r3, #1
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	e002      	b.n	800859a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008594:	f04f 33ff 	mov.w	r3, #4294967295
 8008598:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800859a:	69bb      	ldr	r3, [r7, #24]
	}
 800859c:	4618      	mov	r0, r3
 800859e:	3720      	adds	r7, #32
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085bc:	3b01      	subs	r3, #1
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	617b      	str	r3, [r7, #20]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085ec:	2300      	movs	r3, #0
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	e012      	b.n	8008618 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	7819      	ldrb	r1, [r3, #0]
 80085fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	3334      	adds	r3, #52	; 0x34
 8008602:	460a      	mov	r2, r1
 8008604:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	4413      	add	r3, r2
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d006      	beq.n	8008620 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	3301      	adds	r3, #1
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b0f      	cmp	r3, #15
 800861c:	d9e9      	bls.n	80085f2 <prvInitialiseNewTask+0x4e>
 800861e:	e000      	b.n	8008622 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008620:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	2b06      	cmp	r3, #6
 800862e:	d901      	bls.n	8008634 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008630:	2306      	movs	r3, #6
 8008632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	2200      	movs	r2, #0
 8008644:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	3304      	adds	r3, #4
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fa76 	bl	8007b3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	3318      	adds	r3, #24
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff fa71 	bl	8007b3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	f1c3 0207 	rsb	r2, r3, #7
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	2200      	movs	r2, #0
 8008674:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	69b8      	ldr	r0, [r7, #24]
 8008684:	f000 fef6 	bl	8009474 <pxPortInitialiseStack>
 8008688:	4602      	mov	r2, r0
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800869a:	bf00      	nop
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086ac:	f000 ffd6 	bl	800965c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086b0:	4b2a      	ldr	r3, [pc, #168]	; (800875c <prvAddNewTaskToReadyList+0xb8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4a29      	ldr	r2, [pc, #164]	; (800875c <prvAddNewTaskToReadyList+0xb8>)
 80086b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086ba:	4b29      	ldr	r3, [pc, #164]	; (8008760 <prvAddNewTaskToReadyList+0xbc>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086c2:	4a27      	ldr	r2, [pc, #156]	; (8008760 <prvAddNewTaskToReadyList+0xbc>)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086c8:	4b24      	ldr	r3, [pc, #144]	; (800875c <prvAddNewTaskToReadyList+0xb8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d110      	bne.n	80086f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086d0:	f000 fbca 	bl	8008e68 <prvInitialiseTaskLists>
 80086d4:	e00d      	b.n	80086f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086d6:	4b23      	ldr	r3, [pc, #140]	; (8008764 <prvAddNewTaskToReadyList+0xc0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d109      	bne.n	80086f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <prvAddNewTaskToReadyList+0xbc>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d802      	bhi.n	80086f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086ec:	4a1c      	ldr	r2, [pc, #112]	; (8008760 <prvAddNewTaskToReadyList+0xbc>)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086f2:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <prvAddNewTaskToReadyList+0xc4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	4a1b      	ldr	r2, [pc, #108]	; (8008768 <prvAddNewTaskToReadyList+0xc4>)
 80086fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	2201      	movs	r2, #1
 8008702:	409a      	lsls	r2, r3
 8008704:	4b19      	ldr	r3, [pc, #100]	; (800876c <prvAddNewTaskToReadyList+0xc8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4313      	orrs	r3, r2
 800870a:	4a18      	ldr	r2, [pc, #96]	; (800876c <prvAddNewTaskToReadyList+0xc8>)
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <prvAddNewTaskToReadyList+0xcc>)
 800871c:	441a      	add	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3304      	adds	r3, #4
 8008722:	4619      	mov	r1, r3
 8008724:	4610      	mov	r0, r2
 8008726:	f7ff fa15 	bl	8007b54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800872a:	f000 ffc7 	bl	80096bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800872e:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <prvAddNewTaskToReadyList+0xc0>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00e      	beq.n	8008754 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008736:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <prvAddNewTaskToReadyList+0xbc>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	429a      	cmp	r2, r3
 8008742:	d207      	bcs.n	8008754 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008744:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <prvAddNewTaskToReadyList+0xd0>)
 8008746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	200004f4 	.word	0x200004f4
 8008760:	200003f4 	.word	0x200003f4
 8008764:	20000500 	.word	0x20000500
 8008768:	20000510 	.word	0x20000510
 800876c:	200004fc 	.word	0x200004fc
 8008770:	200003f8 	.word	0x200003f8
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d017      	beq.n	80087ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800878a:	4b13      	ldr	r3, [pc, #76]	; (80087d8 <vTaskDelay+0x60>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <vTaskDelay+0x30>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	60bb      	str	r3, [r7, #8]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087a8:	f000 f87a 	bl	80088a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fdfa 	bl	80093a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087b4:	f000 f882 	bl	80088bc <xTaskResumeAll>
 80087b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d107      	bne.n	80087d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <vTaskDelay+0x64>)
 80087c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087d0:	bf00      	nop
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	2000051c 	.word	0x2000051c
 80087dc:	e000ed04 	.word	0xe000ed04

080087e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	; 0x28
 80087e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087ee:	463a      	mov	r2, r7
 80087f0:	1d39      	adds	r1, r7, #4
 80087f2:	f107 0308 	add.w	r3, r7, #8
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7f7 fcb2 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	9202      	str	r2, [sp, #8]
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	2300      	movs	r3, #0
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	2300      	movs	r3, #0
 800880c:	460a      	mov	r2, r1
 800880e:	491e      	ldr	r1, [pc, #120]	; (8008888 <vTaskStartScheduler+0xa8>)
 8008810:	481e      	ldr	r0, [pc, #120]	; (800888c <vTaskStartScheduler+0xac>)
 8008812:	f7ff fe26 	bl	8008462 <xTaskCreateStatic>
 8008816:	4603      	mov	r3, r0
 8008818:	4a1d      	ldr	r2, [pc, #116]	; (8008890 <vTaskStartScheduler+0xb0>)
 800881a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800881c:	4b1c      	ldr	r3, [pc, #112]	; (8008890 <vTaskStartScheduler+0xb0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008824:	2301      	movs	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	e001      	b.n	800882e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d116      	bne.n	8008862 <vTaskStartScheduler+0x82>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	613b      	str	r3, [r7, #16]
}
 8008846:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008848:	4b12      	ldr	r3, [pc, #72]	; (8008894 <vTaskStartScheduler+0xb4>)
 800884a:	f04f 32ff 	mov.w	r2, #4294967295
 800884e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008850:	4b11      	ldr	r3, [pc, #68]	; (8008898 <vTaskStartScheduler+0xb8>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008856:	4b11      	ldr	r3, [pc, #68]	; (800889c <vTaskStartScheduler+0xbc>)
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800885c:	f000 fe8c 	bl	8009578 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008860:	e00e      	b.n	8008880 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d10a      	bne.n	8008880 <vTaskStartScheduler+0xa0>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	60fb      	str	r3, [r7, #12]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <vTaskStartScheduler+0x9e>
}
 8008880:	bf00      	nop
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	0800aa40 	.word	0x0800aa40
 800888c:	08008e39 	.word	0x08008e39
 8008890:	20000518 	.word	0x20000518
 8008894:	20000514 	.word	0x20000514
 8008898:	20000500 	.word	0x20000500
 800889c:	200004f8 	.word	0x200004f8

080088a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <vTaskSuspendAll+0x18>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	4a03      	ldr	r2, [pc, #12]	; (80088b8 <vTaskSuspendAll+0x18>)
 80088ac:	6013      	str	r3, [r2, #0]
}
 80088ae:	bf00      	nop
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	2000051c 	.word	0x2000051c

080088bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <xTaskResumeAll+0x114>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	603b      	str	r3, [r7, #0]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088e8:	f000 feb8 	bl	800965c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ec:	4b38      	ldr	r3, [pc, #224]	; (80089d0 <xTaskResumeAll+0x114>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	4a37      	ldr	r2, [pc, #220]	; (80089d0 <xTaskResumeAll+0x114>)
 80088f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f6:	4b36      	ldr	r3, [pc, #216]	; (80089d0 <xTaskResumeAll+0x114>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d161      	bne.n	80089c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088fe:	4b35      	ldr	r3, [pc, #212]	; (80089d4 <xTaskResumeAll+0x118>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d05d      	beq.n	80089c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008906:	e02e      	b.n	8008966 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008908:	4b33      	ldr	r3, [pc, #204]	; (80089d8 <xTaskResumeAll+0x11c>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3318      	adds	r3, #24
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff f978 	bl	8007c0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3304      	adds	r3, #4
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff f973 	bl	8007c0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	2201      	movs	r2, #1
 800892a:	409a      	lsls	r2, r3
 800892c:	4b2b      	ldr	r3, [pc, #172]	; (80089dc <xTaskResumeAll+0x120>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4313      	orrs	r3, r2
 8008932:	4a2a      	ldr	r2, [pc, #168]	; (80089dc <xTaskResumeAll+0x120>)
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	4613      	mov	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4a27      	ldr	r2, [pc, #156]	; (80089e0 <xTaskResumeAll+0x124>)
 8008944:	441a      	add	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3304      	adds	r3, #4
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f7ff f901 	bl	8007b54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <xTaskResumeAll+0x128>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008960:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <xTaskResumeAll+0x12c>)
 8008962:	2201      	movs	r2, #1
 8008964:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <xTaskResumeAll+0x11c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1cc      	bne.n	8008908 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008974:	f000 fb16 	bl	8008fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008978:	4b1c      	ldr	r3, [pc, #112]	; (80089ec <xTaskResumeAll+0x130>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d010      	beq.n	80089a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008984:	f000 f836 	bl	80089f4 <xTaskIncrementTick>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <xTaskResumeAll+0x12c>)
 8008990:	2201      	movs	r2, #1
 8008992:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3b01      	subs	r3, #1
 8008998:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1f1      	bne.n	8008984 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80089a0:	4b12      	ldr	r3, [pc, #72]	; (80089ec <xTaskResumeAll+0x130>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <xTaskResumeAll+0x12c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089ae:	2301      	movs	r3, #1
 80089b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089b2:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <xTaskResumeAll+0x134>)
 80089b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089c2:	f000 fe7b 	bl	80096bc <vPortExitCritical>

	return xAlreadyYielded;
 80089c6:	68bb      	ldr	r3, [r7, #8]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	2000051c 	.word	0x2000051c
 80089d4:	200004f4 	.word	0x200004f4
 80089d8:	200004b4 	.word	0x200004b4
 80089dc:	200004fc 	.word	0x200004fc
 80089e0:	200003f8 	.word	0x200003f8
 80089e4:	200003f4 	.word	0x200003f4
 80089e8:	20000508 	.word	0x20000508
 80089ec:	20000504 	.word	0x20000504
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089fe:	4b51      	ldr	r3, [pc, #324]	; (8008b44 <xTaskIncrementTick+0x150>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 808d 	bne.w	8008b22 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a08:	4b4f      	ldr	r3, [pc, #316]	; (8008b48 <xTaskIncrementTick+0x154>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a10:	4a4d      	ldr	r2, [pc, #308]	; (8008b48 <xTaskIncrementTick+0x154>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d120      	bne.n	8008a5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a1c:	4b4b      	ldr	r3, [pc, #300]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <xTaskIncrementTick+0x48>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	603b      	str	r3, [r7, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <xTaskIncrementTick+0x46>
 8008a3c:	4b43      	ldr	r3, [pc, #268]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	4b43      	ldr	r3, [pc, #268]	; (8008b50 <xTaskIncrementTick+0x15c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a41      	ldr	r2, [pc, #260]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	4a41      	ldr	r2, [pc, #260]	; (8008b50 <xTaskIncrementTick+0x15c>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	4b40      	ldr	r3, [pc, #256]	; (8008b54 <xTaskIncrementTick+0x160>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3301      	adds	r3, #1
 8008a56:	4a3f      	ldr	r2, [pc, #252]	; (8008b54 <xTaskIncrementTick+0x160>)
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	f000 faa3 	bl	8008fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a5e:	4b3e      	ldr	r3, [pc, #248]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d34d      	bcc.n	8008b04 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a68:	4b38      	ldr	r3, [pc, #224]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <xTaskIncrementTick+0x82>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <xTaskIncrementTick+0x84>
 8008a76:	2300      	movs	r3, #0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7c:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a82:	601a      	str	r2, [r3, #0]
					break;
 8008a84:	e03e      	b.n	8008b04 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a86:	4b31      	ldr	r3, [pc, #196]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d203      	bcs.n	8008aa6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a9e:	4a2e      	ldr	r2, [pc, #184]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6013      	str	r3, [r2, #0]
						break;
 8008aa4:	e02e      	b.n	8008b04 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff f8ad 	bl	8007c0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3318      	adds	r3, #24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff f8a4 	bl	8007c0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	409a      	lsls	r2, r3
 8008aca:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <xTaskIncrementTick+0x168>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	4a22      	ldr	r2, [pc, #136]	; (8008b5c <xTaskIncrementTick+0x168>)
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4a1f      	ldr	r2, [pc, #124]	; (8008b60 <xTaskIncrementTick+0x16c>)
 8008ae2:	441a      	add	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f7ff f832 	bl	8007b54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	4b1b      	ldr	r3, [pc, #108]	; (8008b64 <xTaskIncrementTick+0x170>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d3b4      	bcc.n	8008a68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008afe:	2301      	movs	r3, #1
 8008b00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b02:	e7b1      	b.n	8008a68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b04:	4b17      	ldr	r3, [pc, #92]	; (8008b64 <xTaskIncrementTick+0x170>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0a:	4915      	ldr	r1, [pc, #84]	; (8008b60 <xTaskIncrementTick+0x16c>)
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d907      	bls.n	8008b2c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e004      	b.n	8008b2c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b22:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <xTaskIncrementTick+0x174>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3301      	adds	r3, #1
 8008b28:	4a0f      	ldr	r2, [pc, #60]	; (8008b68 <xTaskIncrementTick+0x174>)
 8008b2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <xTaskIncrementTick+0x178>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008b34:	2301      	movs	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b38:	697b      	ldr	r3, [r7, #20]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	2000051c 	.word	0x2000051c
 8008b48:	200004f8 	.word	0x200004f8
 8008b4c:	200004ac 	.word	0x200004ac
 8008b50:	200004b0 	.word	0x200004b0
 8008b54:	2000050c 	.word	0x2000050c
 8008b58:	20000514 	.word	0x20000514
 8008b5c:	200004fc 	.word	0x200004fc
 8008b60:	200003f8 	.word	0x200003f8
 8008b64:	200003f4 	.word	0x200003f4
 8008b68:	20000504 	.word	0x20000504
 8008b6c:	20000508 	.word	0x20000508

08008b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b76:	4b26      	ldr	r3, [pc, #152]	; (8008c10 <vTaskSwitchContext+0xa0>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b7e:	4b25      	ldr	r3, [pc, #148]	; (8008c14 <vTaskSwitchContext+0xa4>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b84:	e03f      	b.n	8008c06 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008b86:	4b23      	ldr	r3, [pc, #140]	; (8008c14 <vTaskSwitchContext+0xa4>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b8c:	4b22      	ldr	r3, [pc, #136]	; (8008c18 <vTaskSwitchContext+0xa8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	fab3 f383 	clz	r3, r3
 8008b98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b9a:	7afb      	ldrb	r3, [r7, #11]
 8008b9c:	f1c3 031f 	rsb	r3, r3, #31
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	491e      	ldr	r1, [pc, #120]	; (8008c1c <vTaskSwitchContext+0xac>)
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <vTaskSwitchContext+0x5c>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	607b      	str	r3, [r7, #4]
}
 8008bc8:	bf00      	nop
 8008bca:	e7fe      	b.n	8008bca <vTaskSwitchContext+0x5a>
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4a11      	ldr	r2, [pc, #68]	; (8008c1c <vTaskSwitchContext+0xac>)
 8008bd8:	4413      	add	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	605a      	str	r2, [r3, #4]
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	3308      	adds	r3, #8
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d104      	bne.n	8008bfc <vTaskSwitchContext+0x8c>
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	605a      	str	r2, [r3, #4]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	4a07      	ldr	r2, [pc, #28]	; (8008c20 <vTaskSwitchContext+0xb0>)
 8008c04:	6013      	str	r3, [r2, #0]
}
 8008c06:	bf00      	nop
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr
 8008c10:	2000051c 	.word	0x2000051c
 8008c14:	20000508 	.word	0x20000508
 8008c18:	200004fc 	.word	0x200004fc
 8008c1c:	200003f8 	.word	0x200003f8
 8008c20:	200003f4 	.word	0x200003f4

08008c24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	60fb      	str	r3, [r7, #12]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c4a:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <vTaskPlaceOnEventList+0x44>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3318      	adds	r3, #24
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7fe ffa1 	bl	8007b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c58:	2101      	movs	r1, #1
 8008c5a:	6838      	ldr	r0, [r7, #0]
 8008c5c:	f000 fba4 	bl	80093a8 <prvAddCurrentTaskToDelayedList>
}
 8008c60:	bf00      	nop
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	200003f4 	.word	0x200003f4

08008c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	60fb      	str	r3, [r7, #12]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	3318      	adds	r3, #24
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe ffb4 	bl	8007c0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca2:	4b1d      	ldr	r3, [pc, #116]	; (8008d18 <xTaskRemoveFromEventList+0xac>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d11c      	bne.n	8008ce4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe ffab 	bl	8007c0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	2201      	movs	r2, #1
 8008cba:	409a      	lsls	r2, r3
 8008cbc:	4b17      	ldr	r3, [pc, #92]	; (8008d1c <xTaskRemoveFromEventList+0xb0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <xTaskRemoveFromEventList+0xb0>)
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4a13      	ldr	r2, [pc, #76]	; (8008d20 <xTaskRemoveFromEventList+0xb4>)
 8008cd4:	441a      	add	r2, r3
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fe ff39 	bl	8007b54 <vListInsertEnd>
 8008ce2:	e005      	b.n	8008cf0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	3318      	adds	r3, #24
 8008ce8:	4619      	mov	r1, r3
 8008cea:	480e      	ldr	r0, [pc, #56]	; (8008d24 <xTaskRemoveFromEventList+0xb8>)
 8008cec:	f7fe ff32 	bl	8007b54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <xTaskRemoveFromEventList+0xbc>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d905      	bls.n	8008d0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d02:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <xTaskRemoveFromEventList+0xc0>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	e001      	b.n	8008d0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008d0e:	697b      	ldr	r3, [r7, #20]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	2000051c 	.word	0x2000051c
 8008d1c:	200004fc 	.word	0x200004fc
 8008d20:	200003f8 	.word	0x200003f8
 8008d24:	200004b4 	.word	0x200004b4
 8008d28:	200003f4 	.word	0x200003f4
 8008d2c:	20000508 	.word	0x20000508

08008d30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d38:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <vTaskInternalSetTimeOutState+0x24>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d40:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <vTaskInternalSetTimeOutState+0x28>)
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	605a      	str	r2, [r3, #4]
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	2000050c 	.word	0x2000050c
 8008d58:	200004f8 	.word	0x200004f8

08008d5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	613b      	str	r3, [r7, #16]
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	60fb      	str	r3, [r7, #12]
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d9e:	f000 fc5d 	bl	800965c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008da2:	4b1d      	ldr	r3, [pc, #116]	; (8008e18 <xTaskCheckForTimeOut+0xbc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dba:	d102      	bne.n	8008dc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	e023      	b.n	8008e0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <xTaskCheckForTimeOut+0xc0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d007      	beq.n	8008dde <xTaskCheckForTimeOut+0x82>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d302      	bcc.n	8008dde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	e015      	b.n	8008e0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d20b      	bcs.n	8008e00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff ff9b 	bl	8008d30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	61fb      	str	r3, [r7, #28]
 8008dfe:	e004      	b.n	8008e0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e0a:	f000 fc57 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	200004f8 	.word	0x200004f8
 8008e1c:	2000050c 	.word	0x2000050c

08008e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e24:	4b03      	ldr	r3, [pc, #12]	; (8008e34 <vTaskMissedYield+0x14>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	601a      	str	r2, [r3, #0]
}
 8008e2a:	bf00      	nop
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bc80      	pop	{r7}
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000508 	.word	0x20000508

08008e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e40:	f000 f852 	bl	8008ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <prvIdleTask+0x28>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d9f9      	bls.n	8008e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e4c:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <prvIdleTask+0x2c>)
 8008e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e5c:	e7f0      	b.n	8008e40 <prvIdleTask+0x8>
 8008e5e:	bf00      	nop
 8008e60:	200003f8 	.word	0x200003f8
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	e00c      	b.n	8008e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4a12      	ldr	r2, [pc, #72]	; (8008ec8 <prvInitialiseTaskLists+0x60>)
 8008e80:	4413      	add	r3, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fe3b 	bl	8007afe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	607b      	str	r3, [r7, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b06      	cmp	r3, #6
 8008e92:	d9ef      	bls.n	8008e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e94:	480d      	ldr	r0, [pc, #52]	; (8008ecc <prvInitialiseTaskLists+0x64>)
 8008e96:	f7fe fe32 	bl	8007afe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e9a:	480d      	ldr	r0, [pc, #52]	; (8008ed0 <prvInitialiseTaskLists+0x68>)
 8008e9c:	f7fe fe2f 	bl	8007afe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ea0:	480c      	ldr	r0, [pc, #48]	; (8008ed4 <prvInitialiseTaskLists+0x6c>)
 8008ea2:	f7fe fe2c 	bl	8007afe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ea6:	480c      	ldr	r0, [pc, #48]	; (8008ed8 <prvInitialiseTaskLists+0x70>)
 8008ea8:	f7fe fe29 	bl	8007afe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008eac:	480b      	ldr	r0, [pc, #44]	; (8008edc <prvInitialiseTaskLists+0x74>)
 8008eae:	f7fe fe26 	bl	8007afe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <prvInitialiseTaskLists+0x78>)
 8008eb4:	4a05      	ldr	r2, [pc, #20]	; (8008ecc <prvInitialiseTaskLists+0x64>)
 8008eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <prvInitialiseTaskLists+0x7c>)
 8008eba:	4a05      	ldr	r2, [pc, #20]	; (8008ed0 <prvInitialiseTaskLists+0x68>)
 8008ebc:	601a      	str	r2, [r3, #0]
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200003f8 	.word	0x200003f8
 8008ecc:	20000484 	.word	0x20000484
 8008ed0:	20000498 	.word	0x20000498
 8008ed4:	200004b4 	.word	0x200004b4
 8008ed8:	200004c8 	.word	0x200004c8
 8008edc:	200004e0 	.word	0x200004e0
 8008ee0:	200004ac 	.word	0x200004ac
 8008ee4:	200004b0 	.word	0x200004b0

08008ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eee:	e019      	b.n	8008f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ef0:	f000 fbb4 	bl	800965c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ef4:	4b10      	ldr	r3, [pc, #64]	; (8008f38 <prvCheckTasksWaitingTermination+0x50>)
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3304      	adds	r3, #4
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fe82 	bl	8007c0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f06:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <prvCheckTasksWaitingTermination+0x54>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	4a0b      	ldr	r2, [pc, #44]	; (8008f3c <prvCheckTasksWaitingTermination+0x54>)
 8008f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f10:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <prvCheckTasksWaitingTermination+0x58>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	4a0a      	ldr	r2, [pc, #40]	; (8008f40 <prvCheckTasksWaitingTermination+0x58>)
 8008f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f1a:	f000 fbcf 	bl	80096bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f810 	bl	8008f44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f24:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <prvCheckTasksWaitingTermination+0x58>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e1      	bne.n	8008ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	200004c8 	.word	0x200004c8
 8008f3c:	200004f4 	.word	0x200004f4
 8008f40:	200004dc 	.word	0x200004dc

08008f44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d108      	bne.n	8008f68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fd04 	bl	8009968 <vPortFree>
				vPortFree( pxTCB );
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fd01 	bl	8009968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f66:	e018      	b.n	8008f9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d103      	bne.n	8008f7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fcf8 	bl	8009968 <vPortFree>
	}
 8008f78:	e00f      	b.n	8008f9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d00a      	beq.n	8008f9a <prvDeleteTCB+0x56>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	60fb      	str	r3, [r7, #12]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <prvDeleteTCB+0x54>
	}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008faa:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <prvResetNextTaskUnblockTime+0x40>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <prvResetNextTaskUnblockTime+0x14>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e000      	b.n	8008fba <prvResetNextTaskUnblockTime+0x16>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fbe:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <prvResetNextTaskUnblockTime+0x44>)
 8008fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fc6:	e008      	b.n	8008fda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <prvResetNextTaskUnblockTime+0x40>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	4a04      	ldr	r2, [pc, #16]	; (8008fe8 <prvResetNextTaskUnblockTime+0x44>)
 8008fd8:	6013      	str	r3, [r2, #0]
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bc80      	pop	{r7}
 8008fe2:	4770      	bx	lr
 8008fe4:	200004ac 	.word	0x200004ac
 8008fe8:	20000514 	.word	0x20000514

08008fec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <xTaskGetSchedulerState+0x34>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d102      	bne.n	8009000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	607b      	str	r3, [r7, #4]
 8008ffe:	e008      	b.n	8009012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009000:	4b08      	ldr	r3, [pc, #32]	; (8009024 <xTaskGetSchedulerState+0x38>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009008:	2302      	movs	r3, #2
 800900a:	607b      	str	r3, [r7, #4]
 800900c:	e001      	b.n	8009012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800900e:	2300      	movs	r3, #0
 8009010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009012:	687b      	ldr	r3, [r7, #4]
	}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20000500 	.word	0x20000500
 8009024:	2000051c 	.word	0x2000051c

08009028 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d06e      	beq.n	800911c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009042:	4b39      	ldr	r3, [pc, #228]	; (8009128 <xTaskPriorityInherit+0x100>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	429a      	cmp	r2, r3
 800904a:	d25e      	bcs.n	800910a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	db06      	blt.n	8009062 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009054:	4b34      	ldr	r3, [pc, #208]	; (8009128 <xTaskPriorityInherit+0x100>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905a:	f1c3 0207 	rsb	r2, r3, #7
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	6959      	ldr	r1, [r3, #20]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a2e      	ldr	r2, [pc, #184]	; (800912c <xTaskPriorityInherit+0x104>)
 8009074:	4413      	add	r3, r2
 8009076:	4299      	cmp	r1, r3
 8009078:	d101      	bne.n	800907e <xTaskPriorityInherit+0x56>
 800907a:	2301      	movs	r3, #1
 800907c:	e000      	b.n	8009080 <xTaskPriorityInherit+0x58>
 800907e:	2300      	movs	r3, #0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d03a      	beq.n	80090fa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	3304      	adds	r3, #4
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fdbe 	bl	8007c0a <uxListRemove>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d115      	bne.n	80090c0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009098:	4924      	ldr	r1, [pc, #144]	; (800912c <xTaskPriorityInherit+0x104>)
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <xTaskPriorityInherit+0x98>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	2201      	movs	r2, #1
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	43da      	mvns	r2, r3
 80090b6:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <xTaskPriorityInherit+0x108>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4013      	ands	r3, r2
 80090bc:	4a1c      	ldr	r2, [pc, #112]	; (8009130 <xTaskPriorityInherit+0x108>)
 80090be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090c0:	4b19      	ldr	r3, [pc, #100]	; (8009128 <xTaskPriorityInherit+0x100>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	2201      	movs	r2, #1
 80090d0:	409a      	lsls	r2, r3
 80090d2:	4b17      	ldr	r3, [pc, #92]	; (8009130 <xTaskPriorityInherit+0x108>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	4a15      	ldr	r2, [pc, #84]	; (8009130 <xTaskPriorityInherit+0x108>)
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4a10      	ldr	r2, [pc, #64]	; (800912c <xTaskPriorityInherit+0x104>)
 80090ea:	441a      	add	r2, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f7fe fd2e 	bl	8007b54 <vListInsertEnd>
 80090f8:	e004      	b.n	8009104 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090fa:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <xTaskPriorityInherit+0x100>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009104:	2301      	movs	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e008      	b.n	800911c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800910e:	4b06      	ldr	r3, [pc, #24]	; (8009128 <xTaskPriorityInherit+0x100>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	429a      	cmp	r2, r3
 8009116:	d201      	bcs.n	800911c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009118:	2301      	movs	r3, #1
 800911a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800911c:	68fb      	ldr	r3, [r7, #12]
	}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	200003f4 	.word	0x200003f4
 800912c:	200003f8 	.word	0x200003f8
 8009130:	200004fc 	.word	0x200004fc

08009134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d06e      	beq.n	8009228 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800914a:	4b3a      	ldr	r3, [pc, #232]	; (8009234 <xTaskPriorityDisinherit+0x100>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	429a      	cmp	r2, r3
 8009152:	d00a      	beq.n	800916a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	60fb      	str	r3, [r7, #12]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	60bb      	str	r3, [r7, #8]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800919a:	429a      	cmp	r2, r3
 800919c:	d044      	beq.n	8009228 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d140      	bne.n	8009228 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fd2d 	bl	8007c0a <uxListRemove>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d115      	bne.n	80091e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ba:	491f      	ldr	r1, [pc, #124]	; (8009238 <xTaskPriorityDisinherit+0x104>)
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <xTaskPriorityDisinherit+0xae>
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	2201      	movs	r2, #1
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	43da      	mvns	r2, r3
 80091d8:	4b18      	ldr	r3, [pc, #96]	; (800923c <xTaskPriorityDisinherit+0x108>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4013      	ands	r3, r2
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <xTaskPriorityDisinherit+0x108>)
 80091e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	f1c3 0207 	rsb	r2, r3, #7
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	2201      	movs	r2, #1
 80091fc:	409a      	lsls	r2, r3
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <xTaskPriorityDisinherit+0x108>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4313      	orrs	r3, r2
 8009204:	4a0d      	ldr	r2, [pc, #52]	; (800923c <xTaskPriorityDisinherit+0x108>)
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a08      	ldr	r2, [pc, #32]	; (8009238 <xTaskPriorityDisinherit+0x104>)
 8009216:	441a      	add	r2, r3
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe fc98 	bl	8007b54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009228:	697b      	ldr	r3, [r7, #20]
	}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200003f4 	.word	0x200003f4
 8009238:	200003f8 	.word	0x200003f8
 800923c:	200004fc 	.word	0x200004fc

08009240 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800924e:	2301      	movs	r3, #1
 8009250:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 8088 	beq.w	800936a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60fb      	str	r3, [r7, #12]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d902      	bls.n	8009288 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	e002      	b.n	800928e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	429a      	cmp	r2, r3
 8009296:	d068      	beq.n	800936a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d163      	bne.n	800936a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092a2:	4b34      	ldr	r3, [pc, #208]	; (8009374 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d10a      	bne.n	80092c2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	60bb      	str	r3, [r7, #8]
}
 80092be:	bf00      	nop
 80092c0:	e7fe      	b.n	80092c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	db04      	blt.n	80092e0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	f1c3 0207 	rsb	r2, r3, #7
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	6959      	ldr	r1, [r3, #20]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4a22      	ldr	r2, [pc, #136]	; (8009378 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092f0:	4413      	add	r3, r2
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d101      	bne.n	80092fa <vTaskPriorityDisinheritAfterTimeout+0xba>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e000      	b.n	80092fc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80092fa:	2300      	movs	r3, #0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d034      	beq.n	800936a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	3304      	adds	r3, #4
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fc80 	bl	8007c0a <uxListRemove>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d115      	bne.n	800933c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4918      	ldr	r1, [pc, #96]	; (8009378 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	2201      	movs	r2, #1
 800932c:	fa02 f303 	lsl.w	r3, r2, r3
 8009330:	43da      	mvns	r2, r3
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4013      	ands	r3, r2
 8009338:	4a10      	ldr	r2, [pc, #64]	; (800937c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800933a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	2201      	movs	r2, #1
 8009342:	409a      	lsls	r2, r3
 8009344:	4b0d      	ldr	r3, [pc, #52]	; (800937c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4313      	orrs	r3, r2
 800934a:	4a0c      	ldr	r2, [pc, #48]	; (800937c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4a07      	ldr	r2, [pc, #28]	; (8009378 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800935c:	441a      	add	r2, r3
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	3304      	adds	r3, #4
 8009362:	4619      	mov	r1, r3
 8009364:	4610      	mov	r0, r2
 8009366:	f7fe fbf5 	bl	8007b54 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800936a:	bf00      	nop
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200003f4 	.word	0x200003f4
 8009378:	200003f8 	.word	0x200003f8
 800937c:	200004fc 	.word	0x200004fc

08009380 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009384:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009392:	3201      	adds	r2, #1
 8009394:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009396:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009398:	681b      	ldr	r3, [r3, #0]
	}
 800939a:	4618      	mov	r0, r3
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	200003f4 	.word	0x200003f4

080093a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093b2:	4b29      	ldr	r3, [pc, #164]	; (8009458 <prvAddCurrentTaskToDelayedList+0xb0>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b8:	4b28      	ldr	r3, [pc, #160]	; (800945c <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3304      	adds	r3, #4
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fc23 	bl	8007c0a <uxListRemove>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10b      	bne.n	80093e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80093ca:	4b24      	ldr	r3, [pc, #144]	; (800945c <prvAddCurrentTaskToDelayedList+0xb4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	2201      	movs	r2, #1
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	43da      	mvns	r2, r3
 80093d8:	4b21      	ldr	r3, [pc, #132]	; (8009460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4013      	ands	r3, r2
 80093de:	4a20      	ldr	r2, [pc, #128]	; (8009460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d10a      	bne.n	8009400 <prvAddCurrentTaskToDelayedList+0x58>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f0:	4b1a      	ldr	r3, [pc, #104]	; (800945c <prvAddCurrentTaskToDelayedList+0xb4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4619      	mov	r1, r3
 80093f8:	481a      	ldr	r0, [pc, #104]	; (8009464 <prvAddCurrentTaskToDelayedList+0xbc>)
 80093fa:	f7fe fbab 	bl	8007b54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093fe:	e026      	b.n	800944e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4413      	add	r3, r2
 8009406:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009408:	4b14      	ldr	r3, [pc, #80]	; (800945c <prvAddCurrentTaskToDelayedList+0xb4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	429a      	cmp	r2, r3
 8009416:	d209      	bcs.n	800942c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009418:	4b13      	ldr	r3, [pc, #76]	; (8009468 <prvAddCurrentTaskToDelayedList+0xc0>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	4b0f      	ldr	r3, [pc, #60]	; (800945c <prvAddCurrentTaskToDelayedList+0xb4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3304      	adds	r3, #4
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f7fe fbb8 	bl	8007b9a <vListInsert>
}
 800942a:	e010      	b.n	800944e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800942c:	4b0f      	ldr	r3, [pc, #60]	; (800946c <prvAddCurrentTaskToDelayedList+0xc4>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	4b0a      	ldr	r3, [pc, #40]	; (800945c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7fe fbae 	bl	8007b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800943e:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	429a      	cmp	r2, r3
 8009446:	d202      	bcs.n	800944e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009448:	4a09      	ldr	r2, [pc, #36]	; (8009470 <prvAddCurrentTaskToDelayedList+0xc8>)
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	6013      	str	r3, [r2, #0]
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	200004f8 	.word	0x200004f8
 800945c:	200003f4 	.word	0x200003f4
 8009460:	200004fc 	.word	0x200004fc
 8009464:	200004e0 	.word	0x200004e0
 8009468:	200004b0 	.word	0x200004b0
 800946c:	200004ac 	.word	0x200004ac
 8009470:	20000514 	.word	0x20000514

08009474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3b04      	subs	r3, #4
 8009484:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800948c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3b04      	subs	r3, #4
 8009492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f023 0201 	bic.w	r2, r3, #1
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3b04      	subs	r3, #4
 80094a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094a4:	4a08      	ldr	r2, [pc, #32]	; (80094c8 <pxPortInitialiseStack+0x54>)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3b14      	subs	r3, #20
 80094ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3b20      	subs	r3, #32
 80094ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094bc:	68fb      	ldr	r3, [r7, #12]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bc80      	pop	{r7}
 80094c6:	4770      	bx	lr
 80094c8:	080094cd 	.word	0x080094cd

080094cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094d6:	4b12      	ldr	r3, [pc, #72]	; (8009520 <prvTaskExitError+0x54>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094de:	d00a      	beq.n	80094f6 <prvTaskExitError+0x2a>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	60fb      	str	r3, [r7, #12]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <prvTaskExitError+0x28>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	60bb      	str	r3, [r7, #8]
}
 8009508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800950a:	bf00      	nop
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0fc      	beq.n	800950c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	bc80      	pop	{r7}
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	2000011c 	.word	0x2000011c
	...

08009530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009530:	4b07      	ldr	r3, [pc, #28]	; (8009550 <pxCurrentTCBConst2>)
 8009532:	6819      	ldr	r1, [r3, #0]
 8009534:	6808      	ldr	r0, [r1, #0]
 8009536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800953a:	f380 8809 	msr	PSP, r0
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f04f 0000 	mov.w	r0, #0
 8009546:	f380 8811 	msr	BASEPRI, r0
 800954a:	f04e 0e0d 	orr.w	lr, lr, #13
 800954e:	4770      	bx	lr

08009550 <pxCurrentTCBConst2>:
 8009550:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009558:	4806      	ldr	r0, [pc, #24]	; (8009574 <prvPortStartFirstTask+0x1c>)
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	6800      	ldr	r0, [r0, #0]
 800955e:	f380 8808 	msr	MSP, r0
 8009562:	b662      	cpsie	i
 8009564:	b661      	cpsie	f
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	df00      	svc	0
 8009570:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009572:	bf00      	nop
 8009574:	e000ed08 	.word	0xe000ed08

08009578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800957e:	4b32      	ldr	r3, [pc, #200]	; (8009648 <xPortStartScheduler+0xd0>)
 8009580:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	22ff      	movs	r2, #255	; 0xff
 800958e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	4b2a      	ldr	r3, [pc, #168]	; (800964c <xPortStartScheduler+0xd4>)
 80095a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095a6:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <xPortStartScheduler+0xd8>)
 80095a8:	2207      	movs	r2, #7
 80095aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ac:	e009      	b.n	80095c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80095ae:	4b28      	ldr	r3, [pc, #160]	; (8009650 <xPortStartScheduler+0xd8>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4a26      	ldr	r2, [pc, #152]	; (8009650 <xPortStartScheduler+0xd8>)
 80095b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ca:	2b80      	cmp	r3, #128	; 0x80
 80095cc:	d0ef      	beq.n	80095ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095ce:	4b20      	ldr	r3, [pc, #128]	; (8009650 <xPortStartScheduler+0xd8>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f1c3 0307 	rsb	r3, r3, #7
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d00a      	beq.n	80095f0 <xPortStartScheduler+0x78>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	60bb      	str	r3, [r7, #8]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095f0:	4b17      	ldr	r3, [pc, #92]	; (8009650 <xPortStartScheduler+0xd8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	4a16      	ldr	r2, [pc, #88]	; (8009650 <xPortStartScheduler+0xd8>)
 80095f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095fa:	4b15      	ldr	r3, [pc, #84]	; (8009650 <xPortStartScheduler+0xd8>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009602:	4a13      	ldr	r2, [pc, #76]	; (8009650 <xPortStartScheduler+0xd8>)
 8009604:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	b2da      	uxtb	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <xPortStartScheduler+0xdc>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <xPortStartScheduler+0xdc>)
 8009614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800961a:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <xPortStartScheduler+0xdc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a0d      	ldr	r2, [pc, #52]	; (8009654 <xPortStartScheduler+0xdc>)
 8009620:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009624:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009626:	f000 f8b9 	bl	800979c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <xPortStartScheduler+0xe0>)
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009630:	f7ff ff92 	bl	8009558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009634:	f7ff fa9c 	bl	8008b70 <vTaskSwitchContext>
	prvTaskExitError();
 8009638:	f7ff ff48 	bl	80094cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	e000e400 	.word	0xe000e400
 800964c:	20000520 	.word	0x20000520
 8009650:	20000524 	.word	0x20000524
 8009654:	e000ed20 	.word	0xe000ed20
 8009658:	2000011c 	.word	0x2000011c

0800965c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	607b      	str	r3, [r7, #4]
}
 8009674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <vPortEnterCritical+0x58>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	4a0d      	ldr	r2, [pc, #52]	; (80096b4 <vPortEnterCritical+0x58>)
 800967e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009680:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <vPortEnterCritical+0x58>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d10f      	bne.n	80096a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009688:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <vPortEnterCritical+0x5c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	603b      	str	r3, [r7, #0]
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <vPortEnterCritical+0x4a>
	}
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	2000011c 	.word	0x2000011c
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096c2:	4b11      	ldr	r3, [pc, #68]	; (8009708 <vPortExitCritical+0x4c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <vPortExitCritical+0x24>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	607b      	str	r3, [r7, #4]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096e0:	4b09      	ldr	r3, [pc, #36]	; (8009708 <vPortExitCritical+0x4c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	4a08      	ldr	r2, [pc, #32]	; (8009708 <vPortExitCritical+0x4c>)
 80096e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096ea:	4b07      	ldr	r3, [pc, #28]	; (8009708 <vPortExitCritical+0x4c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d105      	bne.n	80096fe <vPortExitCritical+0x42>
 80096f2:	2300      	movs	r3, #0
 80096f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr
 8009708:	2000011c 	.word	0x2000011c
 800970c:	00000000 	.word	0x00000000

08009710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009710:	f3ef 8009 	mrs	r0, PSP
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <pxCurrentTCBConst>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009720:	6010      	str	r0, [r2, #0]
 8009722:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009726:	f04f 0050 	mov.w	r0, #80	; 0x50
 800972a:	f380 8811 	msr	BASEPRI, r0
 800972e:	f7ff fa1f 	bl	8008b70 <vTaskSwitchContext>
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800973e:	6819      	ldr	r1, [r3, #0]
 8009740:	6808      	ldr	r0, [r1, #0]
 8009742:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009746:	f380 8809 	msr	PSP, r0
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	4770      	bx	lr

08009750 <pxCurrentTCBConst>:
 8009750:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009772:	f7ff f93f 	bl	80089f4 <xTaskIncrementTick>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <SysTick_Handler+0x40>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <vPortSetupTimerInterrupt+0x30>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097a6:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <vPortSetupTimerInterrupt+0x38>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a09      	ldr	r2, [pc, #36]	; (80097d8 <vPortSetupTimerInterrupt+0x3c>)
 80097b2:	fba2 2303 	umull	r2, r3, r2, r3
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	4a08      	ldr	r2, [pc, #32]	; (80097dc <vPortSetupTimerInterrupt+0x40>)
 80097ba:	3b01      	subs	r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097be:	4b03      	ldr	r3, [pc, #12]	; (80097cc <vPortSetupTimerInterrupt+0x30>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr
 80097cc:	e000e010 	.word	0xe000e010
 80097d0:	e000e018 	.word	0xe000e018
 80097d4:	20000000 	.word	0x20000000
 80097d8:	10624dd3 	.word	0x10624dd3
 80097dc:	e000e014 	.word	0xe000e014

080097e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097ec:	f7ff f858 	bl	80088a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097f0:	4b58      	ldr	r3, [pc, #352]	; (8009954 <pvPortMalloc+0x174>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097f8:	f000 f910 	bl	8009a1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097fc:	4b56      	ldr	r3, [pc, #344]	; (8009958 <pvPortMalloc+0x178>)
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4013      	ands	r3, r2
 8009804:	2b00      	cmp	r3, #0
 8009806:	f040 808e 	bne.w	8009926 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01d      	beq.n	800984c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009810:	2208      	movs	r2, #8
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4413      	add	r3, r2
 8009816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	2b00      	cmp	r3, #0
 8009820:	d014      	beq.n	800984c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f023 0307 	bic.w	r3, r3, #7
 8009828:	3308      	adds	r3, #8
 800982a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <pvPortMalloc+0x6c>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	617b      	str	r3, [r7, #20]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d069      	beq.n	8009926 <pvPortMalloc+0x146>
 8009852:	4b42      	ldr	r3, [pc, #264]	; (800995c <pvPortMalloc+0x17c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	429a      	cmp	r2, r3
 800985a:	d864      	bhi.n	8009926 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800985c:	4b40      	ldr	r3, [pc, #256]	; (8009960 <pvPortMalloc+0x180>)
 800985e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009860:	4b3f      	ldr	r3, [pc, #252]	; (8009960 <pvPortMalloc+0x180>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009866:	e004      	b.n	8009872 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	429a      	cmp	r2, r3
 800987a:	d903      	bls.n	8009884 <pvPortMalloc+0xa4>
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1f1      	bne.n	8009868 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009884:	4b33      	ldr	r3, [pc, #204]	; (8009954 <pvPortMalloc+0x174>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988a:	429a      	cmp	r2, r3
 800988c:	d04b      	beq.n	8009926 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2208      	movs	r2, #8
 8009894:	4413      	add	r3, r2
 8009896:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	2308      	movs	r3, #8
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d91f      	bls.n	80098f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4413      	add	r3, r2
 80098b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <pvPortMalloc+0xf8>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	613b      	str	r3, [r7, #16]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098ea:	69b8      	ldr	r0, [r7, #24]
 80098ec:	f000 f8f8 	bl	8009ae0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098f0:	4b1a      	ldr	r3, [pc, #104]	; (800995c <pvPortMalloc+0x17c>)
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	4a18      	ldr	r2, [pc, #96]	; (800995c <pvPortMalloc+0x17c>)
 80098fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098fe:	4b17      	ldr	r3, [pc, #92]	; (800995c <pvPortMalloc+0x17c>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b18      	ldr	r3, [pc, #96]	; (8009964 <pvPortMalloc+0x184>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d203      	bcs.n	8009912 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <pvPortMalloc+0x17c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a15      	ldr	r2, [pc, #84]	; (8009964 <pvPortMalloc+0x184>)
 8009910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b10      	ldr	r3, [pc, #64]	; (8009958 <pvPortMalloc+0x178>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	431a      	orrs	r2, r3
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009926:	f7fe ffc9 	bl	80088bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <pvPortMalloc+0x16a>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	60fb      	str	r3, [r7, #12]
}
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <pvPortMalloc+0x168>
	return pvReturn;
 800994a:	69fb      	ldr	r3, [r7, #28]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3728      	adds	r7, #40	; 0x28
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20001900 	.word	0x20001900
 8009958:	2000190c 	.word	0x2000190c
 800995c:	20001904 	.word	0x20001904
 8009960:	200018f8 	.word	0x200018f8
 8009964:	20001908 	.word	0x20001908

08009968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d048      	beq.n	8009a0c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800997a:	2308      	movs	r3, #8
 800997c:	425b      	negs	r3, r3
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4413      	add	r3, r2
 8009982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	4b21      	ldr	r3, [pc, #132]	; (8009a14 <vPortFree+0xac>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4013      	ands	r3, r2
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <vPortFree+0x44>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	60fb      	str	r3, [r7, #12]
}
 80099a8:	bf00      	nop
 80099aa:	e7fe      	b.n	80099aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00a      	beq.n	80099ca <vPortFree+0x62>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60bb      	str	r3, [r7, #8]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <vPortFree+0xac>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4013      	ands	r3, r2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d019      	beq.n	8009a0c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d115      	bne.n	8009a0c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	4b0b      	ldr	r3, [pc, #44]	; (8009a14 <vPortFree+0xac>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	43db      	mvns	r3, r3
 80099ea:	401a      	ands	r2, r3
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099f0:	f7fe ff56 	bl	80088a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <vPortFree+0xb0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4413      	add	r3, r2
 80099fe:	4a06      	ldr	r2, [pc, #24]	; (8009a18 <vPortFree+0xb0>)
 8009a00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a02:	6938      	ldr	r0, [r7, #16]
 8009a04:	f000 f86c 	bl	8009ae0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a08:	f7fe ff58 	bl	80088bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a0c:	bf00      	nop
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	2000190c 	.word	0x2000190c
 8009a18:	20001904 	.word	0x20001904

08009a1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a22:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009a26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a28:	4b27      	ldr	r3, [pc, #156]	; (8009ac8 <prvHeapInit+0xac>)
 8009a2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00c      	beq.n	8009a50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3307      	adds	r3, #7
 8009a3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0307 	bic.w	r3, r3, #7
 8009a42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	4a1f      	ldr	r2, [pc, #124]	; (8009ac8 <prvHeapInit+0xac>)
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a54:	4a1d      	ldr	r2, [pc, #116]	; (8009acc <prvHeapInit+0xb0>)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a5a:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <prvHeapInit+0xb0>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	4413      	add	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a68:	2208      	movs	r2, #8
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	1a9b      	subs	r3, r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 0307 	bic.w	r3, r3, #7
 8009a76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4a15      	ldr	r2, [pc, #84]	; (8009ad0 <prvHeapInit+0xb4>)
 8009a7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a7e:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <prvHeapInit+0xb4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a86:	4b12      	ldr	r3, [pc, #72]	; (8009ad0 <prvHeapInit+0xb4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	1ad2      	subs	r2, r2, r3
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <prvHeapInit+0xb4>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	4a0a      	ldr	r2, [pc, #40]	; (8009ad4 <prvHeapInit+0xb8>)
 8009aaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <prvHeapInit+0xbc>)
 8009ab2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ab4:	4b09      	ldr	r3, [pc, #36]	; (8009adc <prvHeapInit+0xc0>)
 8009ab6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009aba:	601a      	str	r2, [r3, #0]
}
 8009abc:	bf00      	nop
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bc80      	pop	{r7}
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	20000528 	.word	0x20000528
 8009acc:	200018f8 	.word	0x200018f8
 8009ad0:	20001900 	.word	0x20001900
 8009ad4:	20001908 	.word	0x20001908
 8009ad8:	20001904 	.word	0x20001904
 8009adc:	2000190c 	.word	0x2000190c

08009ae0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ae8:	4b27      	ldr	r3, [pc, #156]	; (8009b88 <prvInsertBlockIntoFreeList+0xa8>)
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e002      	b.n	8009af4 <prvInsertBlockIntoFreeList+0x14>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d8f7      	bhi.n	8009aee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	4413      	add	r3, r2
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d108      	bne.n	8009b22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	441a      	add	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	441a      	add	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d118      	bne.n	8009b68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <prvInsertBlockIntoFreeList+0xac>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d00d      	beq.n	8009b5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	441a      	add	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	e008      	b.n	8009b70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <prvInsertBlockIntoFreeList+0xac>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e003      	b.n	8009b70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d002      	beq.n	8009b7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr
 8009b88:	200018f8 	.word	0x200018f8
 8009b8c:	20001900 	.word	0x20001900

08009b90 <Servo_Init>:
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Init(Servo_Handle_t* servo,TIM_HandleTypeDef* ptim)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	servo->ptim = ptim;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	601a      	str	r2, [r3, #0]
	servo->curr_pos = 0;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	711a      	strb	r2, [r3, #4]
	servo->Status = OFF;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	715a      	strb	r2, [r3, #5]
	Servo_Goto(servo, 0);
 8009bac:	2100      	movs	r1, #0
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f804 	bl	8009bbc <Servo_Goto>


}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <Servo_Goto>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Goto(Servo_Handle_t* servo,uint8_t angle){
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
		uint16_t Period = servo->ptim->Init.Period;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	81fb      	strh	r3, [r7, #14]
		uint16_t duty = angle *( ( (Period / 10) - OFFSET) / MAX_ANGLE )+ OFFSET;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	89fb      	ldrh	r3, [r7, #14]
 8009bd6:	4911      	ldr	r1, [pc, #68]	; (8009c1c <Servo_Goto+0x60>)
 8009bd8:	fba1 1303 	umull	r1, r3, r1, r3
 8009bdc:	08db      	lsrs	r3, r3, #3
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3bfa      	subs	r3, #250	; 0xfa
 8009be2:	490f      	ldr	r1, [pc, #60]	; (8009c20 <Servo_Goto+0x64>)
 8009be4:	fb81 0103 	smull	r0, r1, r1, r3
 8009be8:	4419      	add	r1, r3
 8009bea:	11c9      	asrs	r1, r1, #7
 8009bec:	17db      	asrs	r3, r3, #31
 8009bee:	1acb      	subs	r3, r1, r3
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	fb03 f302 	mul.w	r3, r3, r2
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	33fa      	adds	r3, #250	; 0xfa
 8009bfa:	81bb      	strh	r3, [r7, #12]
		servo->curr_pos = angle;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	78fa      	ldrb	r2, [r7, #3]
 8009c00:	711a      	strb	r2, [r3, #4]
		Servo_Start(servo);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f80e 	bl	8009c24 <Servo_Start>
		__HAL_TIM_SET_COMPARE(servo->ptim,TIM_CHANNEL_1,duty);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	89ba      	ldrh	r2, [r7, #12]
 8009c10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009c12:	bf00      	nop
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	cccccccd 	.word	0xcccccccd
 8009c20:	b60b60b7 	.word	0xb60b60b7

08009c24 <Servo_Start>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Servo_Start(Servo_Handle_t* servo){
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	if(servo->Status == OFF ){
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	795b      	ldrb	r3, [r3, #5]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d108      	bne.n	8009c46 <Servo_Start+0x22>
		HAL_TIM_PWM_Start(servo->ptim, TIM_CHANNEL_1);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7f9 fbd0 	bl	80033e0 <HAL_TIM_PWM_Start>
		servo->Status = ON;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	715a      	strb	r2, [r3, #5]
	}
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <Com_Init>:
 * @fn					- Com_Init
 *
 * @Note				- Init the Com Stack
 *
 **************************************************************************/
void Com_Init(){
 8009c50:	b580      	push	{r7, lr}
 8009c52:	af00      	add	r7, sp, #0
	Buf_Init(&Com_TXstorage) ;
 8009c54:	4807      	ldr	r0, [pc, #28]	; (8009c74 <Com_Init+0x24>)
 8009c56:	f000 f8ab 	bl	8009db0 <Buf_Init>
	Buf_Init(&Com_RXstorage) ;
 8009c5a:	4807      	ldr	r0, [pc, #28]	; (8009c78 <Com_Init+0x28>)
 8009c5c:	f000 f8a8 	bl	8009db0 <Buf_Init>
	memset(buffer,'\0',64);
 8009c60:	2240      	movs	r2, #64	; 0x40
 8009c62:	2100      	movs	r1, #0
 8009c64:	4805      	ldr	r0, [pc, #20]	; (8009c7c <Com_Init+0x2c>)
 8009c66:	f000 feb1 	bl	800a9cc <memset>
	MX_USB_DEVICE_Init();
 8009c6a:	f000 f9c5 	bl	8009ff8 <MX_USB_DEVICE_Init>
}
 8009c6e:	bf00      	nop
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20001b80 	.word	0x20001b80
 8009c78:	20001e1c 	.word	0x20001e1c
 8009c7c:	20002690 	.word	0x20002690

08009c80 <Com_Transmit>:
 * @fn					- Com_Transmit
 *
 * @Note				- Transmit Message
 *
 **************************************************************************/
void Com_Transmit(){
 8009c80:	b590      	push	{r4, r7, lr}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	607b      	str	r3, [r7, #4]

	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 8009c8a:	e014      	b.n	8009cb6 <Com_Transmit+0x36>
		ptr = Buf_Dequeue(&Com_TXstorage);
 8009c8c:	480f      	ldr	r0, [pc, #60]	; (8009ccc <Com_Transmit+0x4c>)
 8009c8e:	f000 f91b 	bl	8009ec8 <Buf_Dequeue>
 8009c92:	6078      	str	r0, [r7, #4]
		while(CDC_Transmit_FS((uint8_t*) ptr->data, strlen(ptr->data)+1) == USBD_BUSY);
 8009c94:	bf00      	nop
 8009c96:	687c      	ldr	r4, [r7, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7f6 fa58 	bl	8000150 <strlen>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fa7e 	bl	800a1ac <CDC_Transmit_FS>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d0ef      	beq.n	8009c96 <Com_Transmit+0x16>
	while(Buf_IsEmpty(&Com_TXstorage) != BUF_EMPTY){
 8009cb6:	4805      	ldr	r0, [pc, #20]	; (8009ccc <Com_Transmit+0x4c>)
 8009cb8:	f000 f98c 	bl	8009fd4 <Buf_IsEmpty>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e4      	bne.n	8009c8c <Com_Transmit+0xc>
	}
}
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd90      	pop	{r4, r7, pc}
 8009ccc:	20001b80 	.word	0x20001b80

08009cd0 <Com_Receive>:
 * @fn					- Com_Receive
 *
 * @Note				- Store message received in the RXbuffer
 *
 **************************************************************************/
void Com_Receive(){
 8009cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd2:	b093      	sub	sp, #76	; 0x4c
 8009cd4:	af00      	add	r7, sp, #0
	Data_t ptr;

	if (Buf_IsFull(&Com_RXstorage) != BUF_FULL && flag_data_received == 1 ){
 8009cd6:	4818      	ldr	r0, [pc, #96]	; (8009d38 <Com_Receive+0x68>)
 8009cd8:	f000 f95a 	bl	8009f90 <Buf_IsFull>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d026      	beq.n	8009d30 <Com_Receive+0x60>
 8009ce2:	4b16      	ldr	r3, [pc, #88]	; (8009d3c <Com_Receive+0x6c>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d122      	bne.n	8009d30 <Com_Receive+0x60>
		memcpy(ptr.data,buffer,MAX_SIZE_MESSAGE);
 8009cea:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <Com_Receive+0x70>)
 8009cec:	461c      	mov	r4, r3
 8009cee:	1d3e      	adds	r6, r7, #4
 8009cf0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8009cf4:	4635      	mov	r5, r6
 8009cf6:	4623      	mov	r3, r4
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	6859      	ldr	r1, [r3, #4]
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d02:	3410      	adds	r4, #16
 8009d04:	3610      	adds	r6, #16
 8009d06:	4564      	cmp	r4, ip
 8009d08:	d1f4      	bne.n	8009cf4 <Com_Receive+0x24>
		flag_data_received = 0;
 8009d0a:	4b0c      	ldr	r3, [pc, #48]	; (8009d3c <Com_Receive+0x6c>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
		if (HAL_ERROR == Buf_Queue(&Com_RXstorage,&ptr))
 8009d10:	1d3b      	adds	r3, r7, #4
 8009d12:	4619      	mov	r1, r3
 8009d14:	4808      	ldr	r0, [pc, #32]	; (8009d38 <Com_Receive+0x68>)
 8009d16:	f000 f87b 	bl	8009e10 <Buf_Queue>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d107      	bne.n	8009d30 <Com_Receive+0x60>
			while(CDC_Transmit_FS((uint8_t*) "nok\n", 4) == USBD_BUSY);
 8009d20:	bf00      	nop
 8009d22:	2104      	movs	r1, #4
 8009d24:	4807      	ldr	r0, [pc, #28]	; (8009d44 <Com_Receive+0x74>)
 8009d26:	f000 fa41 	bl	800a1ac <CDC_Transmit_FS>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d0f8      	beq.n	8009d22 <Com_Receive+0x52>
	}

}
 8009d30:	bf00      	nop
 8009d32:	374c      	adds	r7, #76	; 0x4c
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d38:	20001e1c 	.word	0x20001e1c
 8009d3c:	20001910 	.word	0x20001910
 8009d40:	20002690 	.word	0x20002690
 8009d44:	0800aa48 	.word	0x0800aa48

08009d48 <Com_Assign>:
 * @fn					- Com_Assign
 *
 * @Note				- assign the message to the right buffer Job_stack/G_code_stack
 *
 **************************************************************************/
void Com_Assign(){
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
	Data_t* ptr = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	607b      	str	r3, [r7, #4]
	while(Buf_IsEmpty(&Com_RXstorage) != BUF_EMPTY && Buf_IsFull(&Job_Stack) != BUF_FULL){
 8009d52:	e00b      	b.n	8009d6c <Com_Assign+0x24>
			ptr = Buf_Dequeue(&Com_RXstorage);
 8009d54:	480d      	ldr	r0, [pc, #52]	; (8009d8c <Com_Assign+0x44>)
 8009d56:	f000 f8b7 	bl	8009ec8 <Buf_Dequeue>
 8009d5a:	6078      	str	r0, [r7, #4]
			ptr->state = BUF_PENDING;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			Queue_Job(ptr);
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	480a      	ldr	r0, [pc, #40]	; (8009d90 <Com_Assign+0x48>)
 8009d68:	f000 f852 	bl	8009e10 <Buf_Queue>
	while(Buf_IsEmpty(&Com_RXstorage) != BUF_EMPTY && Buf_IsFull(&Job_Stack) != BUF_FULL){
 8009d6c:	4807      	ldr	r0, [pc, #28]	; (8009d8c <Com_Assign+0x44>)
 8009d6e:	f000 f931 	bl	8009fd4 <Buf_IsEmpty>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <Com_Assign+0x3c>
 8009d78:	4805      	ldr	r0, [pc, #20]	; (8009d90 <Com_Assign+0x48>)
 8009d7a:	f000 f909 	bl	8009f90 <Buf_IsFull>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d1e7      	bne.n	8009d54 <Com_Assign+0xc>
		}
}
 8009d84:	bf00      	nop
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20001e1c 	.word	0x20001e1c
 8009d90:	200023a8 	.word	0x200023a8

08009d94 <G_Code_Init>:
 *      Author: soufiane
 */

#include "G_code.h"

void G_Code_Init(){
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
	Buf_Init(&Job_Stack);
 8009d98:	4803      	ldr	r0, [pc, #12]	; (8009da8 <G_Code_Init+0x14>)
 8009d9a:	f000 f809 	bl	8009db0 <Buf_Init>
	Buf_Init(&Gcode_Stack);
 8009d9e:	4803      	ldr	r0, [pc, #12]	; (8009dac <G_Code_Init+0x18>)
 8009da0:	f000 f806 	bl	8009db0 <Buf_Init>
}
 8009da4:	bf00      	nop
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	200023a8 	.word	0x200023a8
 8009dac:	200020b8 	.word	0x200020b8

08009db0 <Buf_Init>:
 * @return				- None
 *
 * @Note				- None
 *
 **************************************************************************/
void Buf_Init(Buf_Handler_t* buf){
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	for (int index = 0;index<BUF_SIZE;index++)
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e011      	b.n	8009de2 <Buf_Init+0x32>
		memset(buf->data[buf->rear].data,'\0',MESSAGE_SIZE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	015b      	lsls	r3, r3, #5
 8009dca:	4413      	add	r3, r2
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	2240      	movs	r2, #64	; 0x40
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fdf8 	bl	800a9cc <memset>
	for (int index = 0;index<BUF_SIZE;index++)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b09      	cmp	r3, #9
 8009de6:	ddea      	ble.n	8009dbe <Buf_Init+0xe>
	buf->front = -1;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	22ff      	movs	r2, #255	; 0xff
 8009dec:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	buf->rear = -1;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	22ff      	movs	r2, #255	; 0xff
 8009df4:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	buf->mutex = xSemaphoreCreateMutex();
 8009df8:	2001      	movs	r0, #1
 8009dfa:	f7fe f80e 	bl	8007e1a <xQueueCreateMutex>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	if (buf->mutex == NULL){

	}
}
 8009e06:	bf00      	nop
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <Buf_Queue>:
 * @return				- HAL_StatusTypeDef
 *
 * @Note				- None
 *
 **************************************************************************/
HAL_StatusTypeDef Buf_Queue(Buf_Handler_t* buf,Data_t* ptr){
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]

	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e20:	2101      	movs	r1, #1
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe f910 	bl	8008048 <xQueueSemaphoreTake>
	if (Buf_IsFull(buf) == BUF_FULL ){
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f8b1 	bl	8009f90 <Buf_IsFull>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d109      	bne.n	8009e48 <Buf_Queue+0x38>
		xSemaphoreGive(buf->mutex);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	f7fe f804 	bl	8007e4c <xQueueGenericSend>
		return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e039      	b.n	8009ebc <Buf_Queue+0xac>
	}
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f8c3 	bl	8009fd4 <Buf_IsEmpty>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d108      	bne.n	8009e66 <Buf_Queue+0x56>
		buf->front = 0;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		buf->rear = 0;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8009e64:	e012      	b.n	8009e8c <Buf_Queue+0x7c>
	}else{
		buf->front = (buf->front+1) % BUF_SIZE ;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	4b15      	ldr	r3, [pc, #84]	; (8009ec4 <Buf_Queue+0xb4>)
 8009e70:	fb83 1302 	smull	r1, r3, r3, r2
 8009e74:	1099      	asrs	r1, r3, #2
 8009e76:	17d3      	asrs	r3, r2, #31
 8009e78:	1ac9      	subs	r1, r1, r3
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	440b      	add	r3, r1
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	1ad1      	subs	r1, r2, r3
 8009e84:	b24a      	sxtb	r2, r1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	}
	memcpy(&buf->data[buf->front],ptr,sizeof(Data_t));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 8009e92:	461a      	mov	r2, r3
 8009e94:	4613      	mov	r3, r2
 8009e96:	015b      	lsls	r3, r3, #5
 8009e98:	4413      	add	r3, r2
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	2242      	movs	r2, #66	; 0x42
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fd83 	bl	800a9b0 <memcpy>
	xSemaphoreGive(buf->mutex);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	f7fd ffc9 	bl	8007e4c <xQueueGenericSend>
	return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	66666667 	.word	0x66666667

08009ec8 <Buf_Dequeue>:
 * @fn					- Buf_Dequeue
 *
 * @Note				- None
 *
 **************************************************************************/
Data_t* Buf_Dequeue(Buf_Handler_t* buf){
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(buf->mutex,TIMEOUT_1MS);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe f8b5 	bl	8008048 <xQueueSemaphoreTake>
	if (Buf_IsEmpty(buf) == BUF_EMPTY ){
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f878 	bl	8009fd4 <Buf_IsEmpty>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d109      	bne.n	8009efe <Buf_Dequeue+0x36>
		xSemaphoreGive(buf->mutex);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	f7fd ffa9 	bl	8007e4c <xQueueGenericSend>
		return NULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e03f      	b.n	8009f7e <Buf_Dequeue+0xb6>
	}
	static Data_t rt;
	memcpy(&rt,&(buf->data[buf->rear]),sizeof(Data_t));
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 8009f04:	461a      	mov	r2, r3
 8009f06:	4613      	mov	r3, r2
 8009f08:	015b      	lsls	r3, r3, #5
 8009f0a:	4413      	add	r3, r2
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	4413      	add	r3, r2
 8009f12:	4a1d      	ldr	r2, [pc, #116]	; (8009f88 <Buf_Dequeue+0xc0>)
 8009f14:	4610      	mov	r0, r2
 8009f16:	4619      	mov	r1, r3
 8009f18:	2342      	movs	r3, #66	; 0x42
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f000 fd48 	bl	800a9b0 <memcpy>
	if (buf->front == buf->rear){
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f993 2298 	ldrsb.w	r2, [r3, #664]	; 0x298
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d10a      	bne.n	8009f46 <Buf_Dequeue+0x7e>
		buf->front = buf->rear = -1;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	22ff      	movs	r2, #255	; 0xff
 8009f34:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f993 2299 	ldrsb.w	r2, [r3, #665]	; 0x299
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8009f44:	e012      	b.n	8009f6c <Buf_Dequeue+0xa4>
	}else {
		buf->rear = (buf->rear + 1) % BUF_SIZE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	4b0f      	ldr	r3, [pc, #60]	; (8009f8c <Buf_Dequeue+0xc4>)
 8009f50:	fb83 1302 	smull	r1, r3, r3, r2
 8009f54:	1099      	asrs	r1, r3, #2
 8009f56:	17d3      	asrs	r3, r2, #31
 8009f58:	1ac9      	subs	r1, r1, r3
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	1ad1      	subs	r1, r2, r3
 8009f64:	b24a      	sxtb	r2, r1
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
	}
	xSemaphoreGive(buf->mutex);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
 8009f72:	2300      	movs	r3, #0
 8009f74:	2200      	movs	r2, #0
 8009f76:	2100      	movs	r1, #0
 8009f78:	f7fd ff68 	bl	8007e4c <xQueueGenericSend>
	return &rt ;
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <Buf_Dequeue+0xc0>)
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20001914 	.word	0x20001914
 8009f8c:	66666667 	.word	0x66666667

08009f90 <Buf_IsFull>:
 * @fn					- Buf_IsFull
 *
 * @Note				- func to check if the Buf is full
 *
 **************************************************************************/
Buf_Status_t Buf_IsFull(Buf_Handler_t* buf){
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
	return ((buf->front+1) % BUF_SIZE) == buf->rear;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 8009f9e:	1c59      	adds	r1, r3, #1
 8009fa0:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <Buf_IsFull+0x40>)
 8009fa2:	fb83 2301 	smull	r2, r3, r3, r1
 8009fa6:	109a      	asrs	r2, r3, #2
 8009fa8:	17cb      	asrs	r3, r1, #31
 8009faa:	1ad2      	subs	r2, r2, r3
 8009fac:	4613      	mov	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	1aca      	subs	r2, r1, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f993 3299 	ldrsb.w	r3, [r3, #665]	; 0x299
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2301      	moveq	r3, #1
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bc80      	pop	{r7}
 8009fce:	4770      	bx	lr
 8009fd0:	66666667 	.word	0x66666667

08009fd4 <Buf_IsEmpty>:
 * @fn					- Buf_IsEmpty
 *
 * @Note				- func to check if the Buf is empty
 *
 **************************************************************************/
Buf_Status_t Buf_IsEmpty(Buf_Handler_t* buf){
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	return !(buf->front == -1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f993 3298 	ldrsb.w	r3, [r3, #664]	; 0x298
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe6:	bf14      	ite	ne
 8009fe8:	2301      	movne	r3, #1
 8009fea:	2300      	moveq	r3, #0
 8009fec:	b2db      	uxtb	r3, r3
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bc80      	pop	{r7}
 8009ff6:	4770      	bx	lr

08009ff8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	4912      	ldr	r1, [pc, #72]	; (800a048 <MX_USB_DEVICE_Init+0x50>)
 800a000:	4812      	ldr	r0, [pc, #72]	; (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a002:	f7fc fc64 	bl	80068ce <USBD_Init>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a00c:	f7f6 fa94 	bl	8000538 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a010:	490f      	ldr	r1, [pc, #60]	; (800a050 <MX_USB_DEVICE_Init+0x58>)
 800a012:	480e      	ldr	r0, [pc, #56]	; (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a014:	f7fc fc86 	bl	8006924 <USBD_RegisterClass>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a01e:	f7f6 fa8b 	bl	8000538 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a022:	490c      	ldr	r1, [pc, #48]	; (800a054 <MX_USB_DEVICE_Init+0x5c>)
 800a024:	4809      	ldr	r0, [pc, #36]	; (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a026:	f7fc fbb7 	bl	8006798 <USBD_CDC_RegisterInterface>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a030:	f7f6 fa82 	bl	8000538 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a034:	4805      	ldr	r0, [pc, #20]	; (800a04c <MX_USB_DEVICE_Init+0x54>)
 800a036:	f7fc fc8e 	bl	8006956 <USBD_Start>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a040:	f7f6 fa7a 	bl	8000538 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a044:	bf00      	nop
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20000130 	.word	0x20000130
 800a04c:	200026d0 	.word	0x200026d0
 800a050:	20000018 	.word	0x20000018
 800a054:	20000120 	.word	0x20000120

0800a058 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a05c:	2200      	movs	r2, #0
 800a05e:	4905      	ldr	r1, [pc, #20]	; (800a074 <CDC_Init_FS+0x1c>)
 800a060:	4805      	ldr	r0, [pc, #20]	; (800a078 <CDC_Init_FS+0x20>)
 800a062:	f7fc fbaf 	bl	80067c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a066:	4905      	ldr	r1, [pc, #20]	; (800a07c <CDC_Init_FS+0x24>)
 800a068:	4803      	ldr	r0, [pc, #12]	; (800a078 <CDC_Init_FS+0x20>)
 800a06a:	f7fc fbc4 	bl	80067f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a06e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a070:	4618      	mov	r0, r3
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20002b88 	.word	0x20002b88
 800a078:	200026d0 	.word	0x200026d0
 800a07c:	20002994 	.word	0x20002994

0800a080 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a084:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a086:	4618      	mov	r0, r3
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr
	...

0800a090 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	6039      	str	r1, [r7, #0]
 800a09a:	71fb      	strb	r3, [r7, #7]
 800a09c:	4613      	mov	r3, r2
 800a09e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b23      	cmp	r3, #35	; 0x23
 800a0a4:	d84a      	bhi.n	800a13c <CDC_Control_FS+0xac>
 800a0a6:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <CDC_Control_FS+0x1c>)
 800a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ac:	0800a13d 	.word	0x0800a13d
 800a0b0:	0800a13d 	.word	0x0800a13d
 800a0b4:	0800a13d 	.word	0x0800a13d
 800a0b8:	0800a13d 	.word	0x0800a13d
 800a0bc:	0800a13d 	.word	0x0800a13d
 800a0c0:	0800a13d 	.word	0x0800a13d
 800a0c4:	0800a13d 	.word	0x0800a13d
 800a0c8:	0800a13d 	.word	0x0800a13d
 800a0cc:	0800a13d 	.word	0x0800a13d
 800a0d0:	0800a13d 	.word	0x0800a13d
 800a0d4:	0800a13d 	.word	0x0800a13d
 800a0d8:	0800a13d 	.word	0x0800a13d
 800a0dc:	0800a13d 	.word	0x0800a13d
 800a0e0:	0800a13d 	.word	0x0800a13d
 800a0e4:	0800a13d 	.word	0x0800a13d
 800a0e8:	0800a13d 	.word	0x0800a13d
 800a0ec:	0800a13d 	.word	0x0800a13d
 800a0f0:	0800a13d 	.word	0x0800a13d
 800a0f4:	0800a13d 	.word	0x0800a13d
 800a0f8:	0800a13d 	.word	0x0800a13d
 800a0fc:	0800a13d 	.word	0x0800a13d
 800a100:	0800a13d 	.word	0x0800a13d
 800a104:	0800a13d 	.word	0x0800a13d
 800a108:	0800a13d 	.word	0x0800a13d
 800a10c:	0800a13d 	.word	0x0800a13d
 800a110:	0800a13d 	.word	0x0800a13d
 800a114:	0800a13d 	.word	0x0800a13d
 800a118:	0800a13d 	.word	0x0800a13d
 800a11c:	0800a13d 	.word	0x0800a13d
 800a120:	0800a13d 	.word	0x0800a13d
 800a124:	0800a13d 	.word	0x0800a13d
 800a128:	0800a13d 	.word	0x0800a13d
 800a12c:	0800a13d 	.word	0x0800a13d
 800a130:	0800a13d 	.word	0x0800a13d
 800a134:	0800a13d 	.word	0x0800a13d
 800a138:	0800a13d 	.word	0x0800a13d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a13c:	bf00      	nop
  }

  return (USBD_OK);
 800a13e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a140:	4618      	mov	r0, r3
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop

0800a14c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	4811      	ldr	r0, [pc, #68]	; (800a1a0 <CDC_Receive_FS+0x54>)
 800a15a:	f7fc fb4c 	bl	80067f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a15e:	4810      	ldr	r0, [pc, #64]	; (800a1a0 <CDC_Receive_FS+0x54>)
 800a160:	f7fc fb8b 	bl	800687a <USBD_CDC_ReceivePacket>

  uint32_t len = *Len;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	60fb      	str	r3, [r7, #12]
  if (flag_data_received == 0){
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <CDC_Receive_FS+0x58>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d111      	bne.n	800a196 <CDC_Receive_FS+0x4a>
		flag_data_received = 1 ;
 800a172:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <CDC_Receive_FS+0x58>)
 800a174:	2201      	movs	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
		memset(buffer,'\0',64);
 800a178:	2240      	movs	r2, #64	; 0x40
 800a17a:	2100      	movs	r1, #0
 800a17c:	480a      	ldr	r0, [pc, #40]	; (800a1a8 <CDC_Receive_FS+0x5c>)
 800a17e:	f000 fc25 	bl	800a9cc <memset>
		memcpy(buffer,Buf,len);
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <CDC_Receive_FS+0x5c>)
 800a188:	f000 fc12 	bl	800a9b0 <memcpy>
		memset(Buf,'\0',len);
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	2100      	movs	r1, #0
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fc1b 	bl	800a9cc <memset>
  }


  return (USBD_OK);
 800a196:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	200026d0 	.word	0x200026d0
 800a1a4:	20001910 	.word	0x20001910
 800a1a8:	20002690 	.word	0x20002690

0800a1ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <CDC_Transmit_FS+0x48>)
 800a1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e00b      	b.n	800a1ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1d2:	887b      	ldrh	r3, [r7, #2]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4806      	ldr	r0, [pc, #24]	; (800a1f4 <CDC_Transmit_FS+0x48>)
 800a1da:	f7fc faf3 	bl	80067c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a1de:	4805      	ldr	r0, [pc, #20]	; (800a1f4 <CDC_Transmit_FS+0x48>)
 800a1e0:	f7fc fb1c 	bl	800681c <USBD_CDC_TransmitPacket>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	200026d0 	.word	0x200026d0

0800a1f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	6039      	str	r1, [r7, #0]
 800a202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2212      	movs	r2, #18
 800a208:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	bc80      	pop	{r7}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	2000014c 	.word	0x2000014c

0800a21c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2204      	movs	r2, #4
 800a22c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a22e:	4b03      	ldr	r3, [pc, #12]	; (800a23c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a230:	4618      	mov	r0, r3
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	20000160 	.word	0x20000160

0800a240 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d105      	bne.n	800a25e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	4907      	ldr	r1, [pc, #28]	; (800a274 <USBD_FS_ProductStrDescriptor+0x34>)
 800a256:	4808      	ldr	r0, [pc, #32]	; (800a278 <USBD_FS_ProductStrDescriptor+0x38>)
 800a258:	f7fd faf6 	bl	8007848 <USBD_GetString>
 800a25c:	e004      	b.n	800a268 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4904      	ldr	r1, [pc, #16]	; (800a274 <USBD_FS_ProductStrDescriptor+0x34>)
 800a262:	4805      	ldr	r0, [pc, #20]	; (800a278 <USBD_FS_ProductStrDescriptor+0x38>)
 800a264:	f7fd faf0 	bl	8007848 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20002d7c 	.word	0x20002d7c
 800a278:	0800aa50 	.word	0x0800aa50

0800a27c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	6039      	str	r1, [r7, #0]
 800a286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	4904      	ldr	r1, [pc, #16]	; (800a29c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a28c:	4804      	ldr	r0, [pc, #16]	; (800a2a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a28e:	f7fd fadb 	bl	8007848 <USBD_GetString>
  return USBD_StrDesc;
 800a292:	4b02      	ldr	r3, [pc, #8]	; (800a29c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20002d7c 	.word	0x20002d7c
 800a2a0:	0800aa68 	.word	0x0800aa68

0800a2a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	221a      	movs	r2, #26
 800a2b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2b6:	f000 f843 	bl	800a340 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2ba:	4b02      	ldr	r3, [pc, #8]	; (800a2c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20000164 	.word	0x20000164

0800a2c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4907      	ldr	r1, [pc, #28]	; (800a2fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2de:	4808      	ldr	r0, [pc, #32]	; (800a300 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2e0:	f7fd fab2 	bl	8007848 <USBD_GetString>
 800a2e4:	e004      	b.n	800a2f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	4904      	ldr	r1, [pc, #16]	; (800a2fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2ea:	4805      	ldr	r0, [pc, #20]	; (800a300 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2ec:	f7fd faac 	bl	8007848 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f0:	4b02      	ldr	r3, [pc, #8]	; (800a2fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20002d7c 	.word	0x20002d7c
 800a300:	0800aa7c 	.word	0x0800aa7c

0800a304 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d105      	bne.n	800a322 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	4907      	ldr	r1, [pc, #28]	; (800a338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a31a:	4808      	ldr	r0, [pc, #32]	; (800a33c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a31c:	f7fd fa94 	bl	8007848 <USBD_GetString>
 800a320:	e004      	b.n	800a32c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	4904      	ldr	r1, [pc, #16]	; (800a338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a326:	4805      	ldr	r0, [pc, #20]	; (800a33c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a328:	f7fd fa8e 	bl	8007848 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a32c:	4b02      	ldr	r3, [pc, #8]	; (800a338 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20002d7c 	.word	0x20002d7c
 800a33c:	0800aa88 	.word	0x0800aa88

0800a340 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a346:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <Get_SerialNum+0x44>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a34c:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <Get_SerialNum+0x48>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a352:	4b0e      	ldr	r3, [pc, #56]	; (800a38c <Get_SerialNum+0x4c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a366:	2208      	movs	r2, #8
 800a368:	4909      	ldr	r1, [pc, #36]	; (800a390 <Get_SerialNum+0x50>)
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f814 	bl	800a398 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a370:	2204      	movs	r2, #4
 800a372:	4908      	ldr	r1, [pc, #32]	; (800a394 <Get_SerialNum+0x54>)
 800a374:	68b8      	ldr	r0, [r7, #8]
 800a376:	f000 f80f 	bl	800a398 <IntToUnicode>
  }
}
 800a37a:	bf00      	nop
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	1ffff7e8 	.word	0x1ffff7e8
 800a388:	1ffff7ec 	.word	0x1ffff7ec
 800a38c:	1ffff7f0 	.word	0x1ffff7f0
 800a390:	20000166 	.word	0x20000166
 800a394:	20000176 	.word	0x20000176

0800a398 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]
 800a3ae:	e027      	b.n	800a400 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	0f1b      	lsrs	r3, r3, #28
 800a3b4:	2b09      	cmp	r3, #9
 800a3b6:	d80b      	bhi.n	800a3d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	0f1b      	lsrs	r3, r3, #28
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3230      	adds	r2, #48	; 0x30
 800a3ca:	b2d2      	uxtb	r2, r2
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	e00a      	b.n	800a3e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	0f1b      	lsrs	r3, r3, #28
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	440b      	add	r3, r1
 800a3e0:	3237      	adds	r2, #55	; 0x37
 800a3e2:	b2d2      	uxtb	r2, r2
 800a3e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	75fb      	strb	r3, [r7, #23]
 800a400:	7dfa      	ldrb	r2, [r7, #23]
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	429a      	cmp	r2, r3
 800a406:	d3d3      	bcc.n	800a3b0 <IntToUnicode+0x18>
  }
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	bc80      	pop	{r7}
 800a412:	4770      	bx	lr

0800a414 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a0d      	ldr	r2, [pc, #52]	; (800a458 <HAL_PCD_MspInit+0x44>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d113      	bne.n	800a44e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a426:	4b0d      	ldr	r3, [pc, #52]	; (800a45c <HAL_PCD_MspInit+0x48>)
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	4a0c      	ldr	r2, [pc, #48]	; (800a45c <HAL_PCD_MspInit+0x48>)
 800a42c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a430:	61d3      	str	r3, [r2, #28]
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <HAL_PCD_MspInit+0x48>)
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a43e:	2200      	movs	r2, #0
 800a440:	2105      	movs	r1, #5
 800a442:	2014      	movs	r0, #20
 800a444:	f7f6 fabb 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a448:	2014      	movs	r0, #20
 800a44a:	f7f6 fad4 	bl	80009f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	40005c00 	.word	0x40005c00
 800a45c:	40021000 	.word	0x40021000

0800a460 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a474:	4619      	mov	r1, r3
 800a476:	4610      	mov	r0, r2
 800a478:	f7fc fab5 	bl	80069e6 <USBD_LL_SetupStage>
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a496:	78fa      	ldrb	r2, [r7, #3]
 800a498:	6879      	ldr	r1, [r7, #4]
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	440b      	add	r3, r1
 800a4a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	78fb      	ldrb	r3, [r7, #3]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f7fc fae7 	bl	8006a80 <USBD_LL_DataOutStage>
}
 800a4b2:	bf00      	nop
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	440b      	add	r3, r1
 800a4da:	333c      	adds	r3, #60	; 0x3c
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	78fb      	ldrb	r3, [r7, #3]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f7fc fb3e 	bl	8006b62 <USBD_LL_DataInStage>
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fc fc4e 	bl	8006d9e <USBD_LL_SOF>
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a512:	2301      	movs	r3, #1
 800a514:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d001      	beq.n	800a522 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a51e:	f7f6 f80b 	bl	8000538 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a528:	7bfa      	ldrb	r2, [r7, #15]
 800a52a:	4611      	mov	r1, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fc fbfe 	bl	8006d2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fc fbb7 	bl	8006cac <USBD_LL_Reset>
}
 800a53e:	bf00      	nop
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a556:	4618      	mov	r0, r3
 800a558:	f7fc fbf8 	bl	8006d4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a564:	4b04      	ldr	r3, [pc, #16]	; (800a578 <HAL_PCD_SuspendCallback+0x30>)
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4a03      	ldr	r2, [pc, #12]	; (800a578 <HAL_PCD_SuspendCallback+0x30>)
 800a56a:	f043 0306 	orr.w	r3, r3, #6
 800a56e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed00 	.word	0xe000ed00

0800a57c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fc fbf2 	bl	8006d74 <USBD_LL_Resume>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a5a0:	4a28      	ldr	r2, [pc, #160]	; (800a644 <USBD_LL_Init+0xac>)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a26      	ldr	r2, [pc, #152]	; (800a644 <USBD_LL_Init+0xac>)
 800a5ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a5b0:	4b24      	ldr	r3, [pc, #144]	; (800a644 <USBD_LL_Init+0xac>)
 800a5b2:	4a25      	ldr	r2, [pc, #148]	; (800a648 <USBD_LL_Init+0xb0>)
 800a5b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a5b6:	4b23      	ldr	r3, [pc, #140]	; (800a644 <USBD_LL_Init+0xac>)
 800a5b8:	2208      	movs	r2, #8
 800a5ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a5bc:	4b21      	ldr	r3, [pc, #132]	; (800a644 <USBD_LL_Init+0xac>)
 800a5be:	2202      	movs	r2, #2
 800a5c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a5c2:	4b20      	ldr	r3, [pc, #128]	; (800a644 <USBD_LL_Init+0xac>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <USBD_LL_Init+0xac>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a5ce:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <USBD_LL_Init+0xac>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a5d4:	481b      	ldr	r0, [pc, #108]	; (800a644 <USBD_LL_Init+0xac>)
 800a5d6:	f7f6 fbb9 	bl	8000d4c <HAL_PCD_Init>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a5e0:	f7f5 ffaa 	bl	8000538 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5ea:	2318      	movs	r3, #24
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	f7f8 f8da 	bl	80027a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5fa:	2358      	movs	r3, #88	; 0x58
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2180      	movs	r1, #128	; 0x80
 800a600:	f7f8 f8d2 	bl	80027a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a60a:	23c0      	movs	r3, #192	; 0xc0
 800a60c:	2200      	movs	r2, #0
 800a60e:	2181      	movs	r1, #129	; 0x81
 800a610:	f7f8 f8ca 	bl	80027a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a61a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a61e:	2200      	movs	r2, #0
 800a620:	2101      	movs	r1, #1
 800a622:	f7f8 f8c1 	bl	80027a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a62c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a630:	2200      	movs	r2, #0
 800a632:	2182      	movs	r1, #130	; 0x82
 800a634:	f7f8 f8b8 	bl	80027a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20002f7c 	.word	0x20002f7c
 800a648:	40005c00 	.word	0x40005c00

0800a64c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a662:	4618      	mov	r0, r3
 800a664:	f7f6 fc71 	bl	8000f4a <HAL_PCD_Start>
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f94e 	bl	800a910 <USBD_Get_USB_Status>
 800a674:	4603      	mov	r3, r0
 800a676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a678:	7bbb      	ldrb	r3, [r7, #14]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	461a      	mov	r2, r3
 800a690:	4603      	mov	r3, r0
 800a692:	70fb      	strb	r3, [r7, #3]
 800a694:	460b      	mov	r3, r1
 800a696:	70bb      	strb	r3, [r7, #2]
 800a698:	4613      	mov	r3, r2
 800a69a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6aa:	78bb      	ldrb	r3, [r7, #2]
 800a6ac:	883a      	ldrh	r2, [r7, #0]
 800a6ae:	78f9      	ldrb	r1, [r7, #3]
 800a6b0:	f7f6 fdc8 	bl	8001244 <HAL_PCD_EP_Open>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 f928 	bl	800a910 <USBD_Get_USB_Status>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6e8:	78fa      	ldrb	r2, [r7, #3]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7f6 fe06 	bl	80012fe <HAL_PCD_EP_Close>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f909 	bl	800a910 <USBD_Get_USB_Status>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a702:	7bbb      	ldrb	r3, [r7, #14]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a726:	78fa      	ldrb	r2, [r7, #3]
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7f6 feae 	bl	800148c <HAL_PCD_EP_SetStall>
 800a730:	4603      	mov	r3, r0
 800a732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f8ea 	bl	800a910 <USBD_Get_USB_Status>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a740:	7bbb      	ldrb	r3, [r7, #14]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f6 feef 	bl	800154c <HAL_PCD_EP_ClrStall>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f8cb 	bl	800a910 <USBD_Get_USB_Status>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a79a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a79c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	da0c      	bge.n	800a7be <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7aa:	68f9      	ldr	r1, [r7, #12]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	440b      	add	r3, r1
 800a7b8:	3302      	adds	r3, #2
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	e00b      	b.n	800a7d6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7c4:	68f9      	ldr	r1, [r7, #12]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	440b      	add	r3, r1
 800a7d0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a7d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr

0800a7e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f6 fcfb 	bl	80011fa <HAL_PCD_SetAddress>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f880 	bl	800a910 <USBD_Get_USB_Status>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a814:	7bbb      	ldrb	r3, [r7, #14]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b086      	sub	sp, #24
 800a822:	af00      	add	r7, sp, #0
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	461a      	mov	r2, r3
 800a82a:	460b      	mov	r3, r1
 800a82c:	72fb      	strb	r3, [r7, #11]
 800a82e:	4613      	mov	r3, r2
 800a830:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a840:	893b      	ldrh	r3, [r7, #8]
 800a842:	7af9      	ldrb	r1, [r7, #11]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	f7f6 fdea 	bl	800141e <HAL_PCD_EP_Transmit>
 800a84a:	4603      	mov	r3, r0
 800a84c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f85d 	bl	800a910 <USBD_Get_USB_Status>
 800a856:	4603      	mov	r3, r0
 800a858:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a85a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	607a      	str	r2, [r7, #4]
 800a86e:	461a      	mov	r2, r3
 800a870:	460b      	mov	r3, r1
 800a872:	72fb      	strb	r3, [r7, #11]
 800a874:	4613      	mov	r3, r2
 800a876:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a886:	893b      	ldrh	r3, [r7, #8]
 800a888:	7af9      	ldrb	r1, [r7, #11]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	f7f6 fd7f 	bl	800138e <HAL_PCD_EP_Receive>
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f83a 	bl	800a910 <USBD_Get_USB_Status>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8bc:	78fa      	ldrb	r2, [r7, #3]
 800a8be:	4611      	mov	r1, r2
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7f6 fd95 	bl	80013f0 <HAL_PCD_EP_GetRxCount>
 800a8c6:	4603      	mov	r3, r0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8d8:	4b02      	ldr	r3, [pc, #8]	; (800a8e4 <USBD_static_malloc+0x14>)
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bc80      	pop	{r7}
 800a8e2:	4770      	bx	lr
 800a8e4:	20001958 	.word	0x20001958

0800a8e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]

}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bc80      	pop	{r7}
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr

0800a910 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d817      	bhi.n	800a954 <USBD_Get_USB_Status+0x44>
 800a924:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <USBD_Get_USB_Status+0x1c>)
 800a926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92a:	bf00      	nop
 800a92c:	0800a93d 	.word	0x0800a93d
 800a930:	0800a943 	.word	0x0800a943
 800a934:	0800a949 	.word	0x0800a949
 800a938:	0800a94f 	.word	0x0800a94f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73fb      	strb	r3, [r7, #15]
    break;
 800a940:	e00b      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a942:	2302      	movs	r3, #2
 800a944:	73fb      	strb	r3, [r7, #15]
    break;
 800a946:	e008      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a948:	2301      	movs	r3, #1
 800a94a:	73fb      	strb	r3, [r7, #15]
    break;
 800a94c:	e005      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a94e:	2302      	movs	r3, #2
 800a950:	73fb      	strb	r3, [r7, #15]
    break;
 800a952:	e002      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a954:	2302      	movs	r3, #2
 800a956:	73fb      	strb	r3, [r7, #15]
    break;
 800a958:	bf00      	nop
  }
  return usb_status;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	bc80      	pop	{r7}
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop

0800a968 <__libc_init_array>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	2600      	movs	r6, #0
 800a96c:	4d0c      	ldr	r5, [pc, #48]	; (800a9a0 <__libc_init_array+0x38>)
 800a96e:	4c0d      	ldr	r4, [pc, #52]	; (800a9a4 <__libc_init_array+0x3c>)
 800a970:	1b64      	subs	r4, r4, r5
 800a972:	10a4      	asrs	r4, r4, #2
 800a974:	42a6      	cmp	r6, r4
 800a976:	d109      	bne.n	800a98c <__libc_init_array+0x24>
 800a978:	f000 f830 	bl	800a9dc <_init>
 800a97c:	2600      	movs	r6, #0
 800a97e:	4d0a      	ldr	r5, [pc, #40]	; (800a9a8 <__libc_init_array+0x40>)
 800a980:	4c0a      	ldr	r4, [pc, #40]	; (800a9ac <__libc_init_array+0x44>)
 800a982:	1b64      	subs	r4, r4, r5
 800a984:	10a4      	asrs	r4, r4, #2
 800a986:	42a6      	cmp	r6, r4
 800a988:	d105      	bne.n	800a996 <__libc_init_array+0x2e>
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a990:	4798      	blx	r3
 800a992:	3601      	adds	r6, #1
 800a994:	e7ee      	b.n	800a974 <__libc_init_array+0xc>
 800a996:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99a:	4798      	blx	r3
 800a99c:	3601      	adds	r6, #1
 800a99e:	e7f2      	b.n	800a986 <__libc_init_array+0x1e>
 800a9a0:	0800aac4 	.word	0x0800aac4
 800a9a4:	0800aac4 	.word	0x0800aac4
 800a9a8:	0800aac4 	.word	0x0800aac4
 800a9ac:	0800aac8 	.word	0x0800aac8

0800a9b0 <memcpy>:
 800a9b0:	440a      	add	r2, r1
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9b8:	d100      	bne.n	800a9bc <memcpy+0xc>
 800a9ba:	4770      	bx	lr
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c2:	4291      	cmp	r1, r2
 800a9c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9c8:	d1f9      	bne.n	800a9be <memcpy+0xe>
 800a9ca:	bd10      	pop	{r4, pc}

0800a9cc <memset>:
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4402      	add	r2, r0
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d100      	bne.n	800a9d6 <memset+0xa>
 800a9d4:	4770      	bx	lr
 800a9d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9da:	e7f9      	b.n	800a9d0 <memset+0x4>

0800a9dc <_init>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	bf00      	nop
 800a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e2:	bc08      	pop	{r3}
 800a9e4:	469e      	mov	lr, r3
 800a9e6:	4770      	bx	lr

0800a9e8 <_fini>:
 800a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ea:	bf00      	nop
 800a9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ee:	bc08      	pop	{r3}
 800a9f0:	469e      	mov	lr, r3
 800a9f2:	4770      	bx	lr
